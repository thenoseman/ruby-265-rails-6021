var search_data = {"index":{"searchIndex":["acl","aclentry","acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","tms","bigdecimal","bigmath","binding","bundler","apiresponsemismatcherror","buildmetadata","bundlererror","cli","add","binstubs","cache","check","clean","common","config","console","doctor","exec","gem","info","init","inject","install","issue","list","lock","open","outdated","package","platform","plugin","pristine","remove","show","update","viz","compactindexclient","cache","error","updater","mismatchedchecksumerror","currentruby","cyclicdependencyerror","definition","depproxy","dependency","deployment","deprecate","deprecatederror","dsl","dslerror","endpointspecification","env","environmentpreserver","featureflag","fetcher","authenticationrequirederror","badauthenticationerror","base","certificatefailureerror","compactindex","dependency","downloader","fallbackerror","index","networkdownerror","sslerror","fileutils","dryrun","lowmethods","nowrite","streamutils_","verbose","friendlyerrors","gemhelper","rake","gemhelpers","platformmatch","geminstaller","gemnotfound","gemremotefetcher","gemrequireerror","gemversionpromoter","gemdeps","gemfileerror","gemfileevalerror","gemfilelocknotfound","gemfilenotfound","gemspecerror","genericsystemcallerror","giterror","graph","graphvizclient","httperror","index","injector","installerror","installhookerror","installer","invalidoption","lazyspecification","identifier","lockfileerror","lockfilegenerator","lockfileparser","marshalerror","matchplatform","mirrorsockets","molinillo","circulardependencyerror","compatibility","delegates","resolutionstate","specificationprovider","dependencygraph","action","addedgenocircular","deleteedge","detachvertexnamed","log","tag","vertex","dependencystate","nosuchdependencyerror","possibilitystate","resolutionstate","resolver","resolution","conflict","possibilityset","unwinddetails","resolvererror","specificationprovider","ui","versionconflict","nospaceondeviceerror","operationnotsupportederror","parallelinstaller","specinstallation","patherror","permissionerror","persistent","net","http","persistent","error","sslreuse","persistenthttp","plugin","api","source","dsl","plugingemfileerror","events","index","commandconflict","sourceconflict","installer","git","malformattedplugin","sourcelist","undefinedcommanderror","unknownsourceerror","pluginerror","processlock","productionerror","remotespecification","resolver","specgroup","retry","rubydsl","rubyversion","rubyversionmismatch","runtime","securityerror","settings","mirror","mirrorconfig","mirrors","tcpsocketprobe","validator","rule","sharedhelpers","similaritydetector","socketaddress","source","gemspec","git","gitcommanderror","gitnotallowederror","gitnotinstallederror","gitproxy","missinggitrevisionerror","metadata","path","installer","sourcelist","specset","standalone","stubspecification","sudonotpermittederror","temporaryresourceerror","thor","actions","capturableerb","classmethods","ambiguouscommanderror","ambiguoustaskerror","base","classmethods","command","coreext","orderedhash","dynamiccommand","dynamictask","error","group","hiddencommand","hiddentask","invocation","classmethods","invocationerror","lineeditor","basic","readline","pathcompletion","malformattedargumenterror","rakecompat","rake","requiredargumentmissingerror","shell","basic","color","html","task","undefinedcommanderror","undefinedtaskerror","unknownargumenterror","util","threadcreationerror","ui","rgproxy","shell","silent","uricredentialsfilter","versionconflict","versionranges","reqr","virtualprotocolerror","worker","wrappedexception","yamlserializer","yamllibrarysyntaxerror","yamlsyntaxerror","cgi","cookie","html3","html4","html4fr","html4tr","html5","htmlextension","invalidencoding","queryextension","session","filestore","memorystore","nullstore","pstore","util","cmath","csv","deletesuffix","fieldsconverter","malformedcsverror","matchp","parser","inputsscanner","invalidencoding","scanner","unoptimizedstringio","row","table","writer","capistrano","class","closedqueueerror","comparable","complex","conditionvariable","continuation","coverage","dbm","dbmerror","debugger__","thread","drb","drbarray","drbbadscheme","drbbaduri","drbconn","thread","drbconnerror","drberror","drbidconv","drbidconv","drbmessage","drbobject","drbobject","drbobservable","drbprotocol","drbremoteerror","drbsslsocket","sslconfig","drbserver","invokemethod18mixin","drbservernotfound","drbtcpsocket","drbunixsocket","drbundumped","drbundumped","drbunknown","drbunknownerror","extserv","extservmanager","gw","gwidconv","thread","timeridconv","timerholder2","invalidindexerror","data","date","datetime","delegator","digest","base","class","instance","md5","rmd160","sha1","dir","env","eoferror","erb","defmethod","util","exception_type","exception_type","exception_type","exception_type","encoding","compatibilityerror","converter","converternotfounderror","invalidbytesequenceerror","undefinedconversionerror","encodingerror","english","enumerable","enumerator","arithmeticsequence","chain","generator","lazy","yielder","errno","econnaborted","econnreset","eproto","etc","exception","exception2messagemapper","e2mm","falseclass","fcntl","fiber","fibererror","fiddle","basictypes","cparser","cstruct","cstructbuilder","cstructentity","cunion","cunionentity","closure","blockcaller","compositehandler","dlerror","function","handle","importer","pointer","win32types","file","file::constants","stat","filetest","fileutils","dryrun","lowmethods","nowrite","streamutils_","rbconfig","verbose","find","float","floatdomainerror","forwardable","frozenerror","gc","profiler","gdbm","gdbmerror","gdbmfatalerror","gem","dependency","getoptlong","ambiguousoption","error","invalidoption","missingargument","needlessargument","httpclientexception","httpgatewaytimeout","httpmovedtemporarily","httpmultiplechoice","httprequestentitytoolarge","httprequesttimeout","httprequesturitoolarge","httprequesturitoolarge","httprequesturitoolong","httprequestedrangenotsatisfiable","hash","io","eagainwaitreadable","eagainwaitwritable","einprogresswaitreadable","einprogresswaitwritable","ewouldblockwaitreadable","ewouldblockwaitwritable","waitreadable","waitwritable","generic_readable","generic_writable","ioerror","ipaddr","addressfamilyerror","error","invalidaddresserror","invalidprefixerror","ipsocket","irb","abort","context","contextextender","extendcommand","changeworkspace","currentworkingworkspace","foreground","fork","help","irbcommand","jobs","kill","load","nop","popworkspace","pushworkspace","require","source","workspaces","extendcommandbundle","fileinputmethod","frame","inputmethod","inspector","irb","irbloader","jobmanager","loadabort","locale","methodextender","notifier","abstractnotifier","compositenotifier","levelednotifier","nomsgnotifier","outputmethod","readlineinputmethod","slex","node","stdioinputmethod","stdiooutputmethod","workspace","indexerror","integer","interrupt","jruby","json","circulardatastructure","ext","generator","generatormethods","array","bignum","falseclass","fixnum","float","hash","integer","nilclass","object","string","extend","trueclass","state","parser","generatorerror","genericobject","jsonerror","missingunicodesupport","nestingerror","parsererror","unparsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","formatter","logdevice","period","severity","makemakefile","logging","rbconfig","string_or_failed_format","marshal","matchdata","math","domainerror","matrix","eigenvaluedecomposition","lupdecomposition","method","module","monitor","monitormixin","conditionvariable","timeout","mutex","mutex_m","nkf","nameerror","net","apop","apopsession","ftp","bufferedsslsocket","bufferedsocket","mlsxentry","nullsocket","ftpconnectionerror","ftperror","ftppermerror","ftpprotoerror","ftpreplyerror","ftptemperror","http","copy","delete","get","head","lock","mkcol","move","options","patch","post","propfind","proppatch","put","trace","unlock","httpaccepted","httpalreadyreported","httpbadgateway","httpbadrequest","httpbadresponse","httpclienterror","httpconflict","httpcontinue","httpcreated","httpearlyhints","exception_type","httpexceptions","httpexpectationfailed","httpfaileddependency","httpfatalerror","httpforbidden","httpmovedtemporarily","httpgatewaytimeout","httpgenericrequest","httpgone","httpheader","httpheadersyntaxerror","httpimused","httpinformation","httpinsufficientstorage","httpinternalservererror","httplengthrequired","httplocked","httploopdetected","httpmethodnotallowed","httpmisdirectedrequest","httpmovedpermanently","httpmultistatus","httpmultiplechoice","httpnetworkauthenticationrequired","httpnocontent","httpnonauthoritativeinformation","httpnotacceptable","httpnotextended","httpnotfound","httpnotimplemented","httpnotmodified","httpok","httppartialcontent","httprequestentitytoolarge","httppaymentrequired","httppermanentredirect","httppreconditionfailed","httppreconditionrequired","httpprocessing","httpproxyauthenticationrequired","httprequestedrangenotsatisfiable","httpredirection","httprequest","httprequestheaderfieldstoolarge","httprequesttimeout","httpresetcontent","httpresponse","exception_type","httpseeother","httpservererror","httpclientexception","httpserviceunavailable","httpsuccess","httpswitchprotocol","httptemporaryredirect","httptoomanyrequests","httprequesturitoolong","httpunauthorized","httpunavailableforlegalreasons","httpunknownresponse","httpunprocessableentity","httpunsupportedmediatype","httpupgraderequired","httpuseproxy","httpvariantalsonegotiates","httpversionnotsupported","imap","badresponseerror","bodytypeattachment","bodytypebasic","bodytypeextension","bodytypemessage","bodytypemultipart","bodytypetext","byeresponseerror","crammd5authenticator","dataformaterror","digestmd5authenticator","error","flagcounterror","loginauthenticator","noresponseerror","numvalidator","plainauthenticator","responseerror","responseparseerror","internetmessageio","netprivate","writeadapter","opentimeout","pop3","popauthenticationerror","popbadresponse","poperror","popmail","protoautherror","protocommanderror","protofatalerror","protoretriableerror","protoservererror","protosyntaxerror","protounknownerror","protocretryerror","protocolerror","readtimeout","smtp","response","smtpauthenticationerror","smtperror","smtpfatalerror","smtpserverbusy","smtpsyntaxerror","smtpunknownerror","smtpunsupportedcommand","writetimeout","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","parseerror","timeouterror","objectspace","internalobjectwrapper","weakmap","observable","open3","openssl","asn1","asn1data","asn1error","constructive","objectid","primitive","bn","bnerror","buffering","cipher","cipher","ciphererror","config","configerror","digest","digesterror","engine","engineerror","extconfig","hmac","hmacerror","kdf","kdferror","netscape","spki","spkierror","ocsp","basicresponse","certificateid","ocsperror","request","response","singleresponse","opensslerror","pkcs12","pkcs12error","pkcs5","pkcs7","pkcs7error","recipientinfo","signerinfo","pkey","dh","dherror","dsa","dsaerror","ec","group","error","point","error","ecerror","pkey","pkeyerror","rsa","rsaerror","random","randomerror","ssl","sslcontext","sslerror","sslerrorwaitreadable","sslerrorwaitwritable","sslserver","sslsocket","session","sessionerror","socketforwarder","x509","attribute","attributeerror","crl","crlerror","certificate","certificateerror","extension","extensionerror","extensionfactory","name","rfc2253dn","nameerror","request","requesterror","revoked","revokederror","store","storecontext","storeerror","openstruct","openuri","httperror","httpredirect","meta","openread","optionparser","ac","acceptables","ambiguousargument","ambiguousoption","arguable","completinghash","completion","invalidargument","invalidoption","list","missingargument","needlessargument","optionmap","parseerror","switch","noargument","optionalargument","placedargument","requiredargument","pp","ppmethods","pstore","error","pty","childexited","pathname","prettyprint","singleline","prime","eratosthenesgenerator","eratosthenessieve","generator23","pseudoprimegenerator","trialdivision","trialdivisiongenerator","proc","process","gid","status","sys","uid","profiler__","psych","badalias","classloader","restricted","coder","disallowedclass","emitter","exception","handler","dumperoptions","handlers","recorder","json","stream","treebuilder","nodes","alias","document","mapping","node","scalar","sequence","stream","omap","parser","mark","scalarscanner","set","stream","streaming","classmethods","syntaxerror","treebuilder","visitors","depthfirst","emitter","jsontree","noaliasruby","toruby","visitor","yamltree","queue","rdoc","alias","anonclass","anymethod","attr","classmodule","codeobject","comment","constant","context","crossreference","erbio","erbpartial","encoding","error","extend","generator","ghostmethod","i18n","include","markdown","memoentry","parseerror","ruleinfo","markup","metamethod","methodattr","mixin","normalclass","normalmodule","options","parser","rd","rdoc","ri","error","require","rubygemshook","servlet","singleclass","stats","store","error","missingfileerror","task","text","tokenstream","tomdoc","toplevel","rdoctask","rexml","attlistdecl","attribute","attributes","cdata","child","comment","dtd","attlistdecl","elementdecl","entitydecl","notationdecl","parser","declaration","doctype","document","element","elementdecl","elements","encoding","entity","entityconst","externalentity","formatters","default","pretty","transitive","functions","iosource","instruction","light","node","namespace","node","notationdecl","output","parent","parseexception","parsers","baseparser","lightparser","pullevent","pullparser","sax2parser","streamparser","treeparser","ultralightparser","xpathparser","quickpath","sax2listener","security","source","sourcefactory","streamlistener","syncenumerator","text","undefinednamespaceexception","validation","choice","event","interleave","oneormore","optional","ref","relaxng","sequence","state","validationexception","validator","zeroormore","xmldecl","xmltokens","xpath","xpathnode","xpathparser","rss","atom","commonmodel","contentmodel","classmethods","dateconstruct","duplicatelinkchecker","entry","feed","author","category","contributor","entry","content","published","source","summary","generator","icon","id","link","logo","rights","subtitle","title","updated","personconstruct","email","name","uri","textconstruct","uricontentmodel","basedublincoremodel","baselistener","basemodel","baseparser","basetrackbackmodel","contentmodel","conversionerror","converter","dublincoremodel","dublincoremodel","element","error","itunesbasemodel","ituneschannelmodel","itunescategory","itunesimage","itunesowner","itunesitemmodel","itunesduration","itunesmodelutils","imagefaviconmodel","imagefavicon","imageitemmodel","imageitem","imagemodelutils","invalidrsserror","listenermixin","maker","atom","entry","channel","cloud","description","generator","skipdays","day","skiphours","hour","image","items","item","textinput","feed","channel","categories","category","cloud","generator","links","link","skipdays","day","skiphours","hour","image","items","item","categories","category","content","enclosure","guid","links","link","source","categories","category","generator","icon","links","link","logo","textinput","atomcategory","atomgenerator","atomlink","atomlogo","atompersonconstructbase","atompersons","atomtextconstruct","atomtextconstructbase","ensurexmlcontent","base","channelbase","authorsbase","authorbase","categoriesbase","categorybase","cloudbase","contributorsbase","contributorbase","copyrightbase","descriptionbase","generatorbase","itunescategories","itunescategory","itunesimage","itunesowner","linksbase","linkbase","skipdaysbase","daybase","skiphoursbase","hourbase","titlebase","contentmodel","dublincoremodel","itunesbasemodel","ituneschannelmodel","itunescategoriesbase","itunescategorybase","itunesimagebase","itunesownerbase","itunesitemmodel","itunesdurationbase","imagebase","imagefaviconmodel","imagefaviconbase","imageitemmodel","imageitembase","itemsbase","itembase","contentbase","descriptionbase","enclosurebase","guidbase","itunesduration","rightsbase","sourcebase","iconbase","logobase","rightsbase","subtitlebase","titlebase","titlebase","rss09","rss091","channel","image","items","item","textinput","rss092","channel","image","items","item","textinput","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss10","channel","authors","author","categories","category","cloud","contributors","contributor","copyright","description","generator","links","link","skipdays","day","skiphours","hour","title","image","items","item","authors","author","categories","category","content","contributors","contributor","description","enclosure","guid","links","link","rights","source","authors","author","categories","category","contributors","contributor","generator","icon","links","link","logo","rights","subtitle","title","title","textinput","rss20","channel","categories","category","cloud","generator","skipdays","day","skiphours","hour","image","items","item","authors","author","categories","category","enclosure","guid","source","links","link","textinput","rssbase","setupdefaultdate","setupdefaultlanguage","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopicsbase","taxonomytopicbase","taxonomytopicsmodel","taxonomytopicsbase","textinputbase","trackbackmodel","trackbackaboutsbase","trackbackaboutbase","xmlstylesheets","xmlstylesheet","missingattributeerror","missingtagerror","nserror","notavailablevalueerror","notexpectedtagerror","notseterror","notvalidxmlparser","notwellformederror","overlappedprefixerror","parser","rdf","bag","li","channel","image","items","seq","textinput","image","item","li","seq","li","textinput","rexmllikexmlparser","rexmllistener","rexmlparser","rss09","rss10","rootelementmixin","rss","channel","cloud","image","item","category","enclosure","guid","source","skipdays","day","skiphours","hour","textinput","setupmaker","slashmodel","syndicationmodel","taxonomytopicmodel","taxonomytopic","taxonomytopicsmodel","taxonomytopics","bag","toomuchtagerror","trackbackmodel10","trackbackabout","trackbackping","trackbackmodel20","trackbackabout","trackbackping","trackbackutils","unknownconversionmethoderror","unknowntagerror","unsupportedmakerversionerror","utils","csv","explicitcleanother","inheritedreader","yesother","xml","element","xmlparserlistener","xmlparsernotfound","xmlparserparser","xmlscanlistener","xmlscanparser","xmlstylesheet","xmlstylesheetmixin","racc","cparseparams","parseerror","parseerror","parser","rake","random","formatter","range","rangeerror","rational","readline","regexp","regexperror","resolv","dns","config","nxdomain","otherresolverror","decodeerror","encodeerror","name","query","requester","requesterror","resource","any","cname","domainname","generic","hinfo","in","a","aaaa","srv","wks","loc","minfo","mx","ns","ptr","soa","txt","hosts","ipv4","ipv6","loc","alt","coord","size","mdns","resolverror","resolvtimeout","rinda","drbobjecttemplate","invalidhashtuplekey","notifytemplateentry","requestcancelederror","requestexpirederror","rindaerror","ringfinger","ringprovider","ringserver","simplerenewer","template","templateentry","tuple","tuplebag","tuplebin","tupleentry","tuplespace","tuplespaceproxy","waittemplateentry","ripper","filter","rubylex","rubytoken","tkerror","tkid","tknode","tkopasgn","tkop","tkunknownchar","tkval","token","rubyvm","abstractsyntaxtree","node","instructionsequence","mjit","runtimeerror","sdbm","sdbmerror","sockssocket","scanf","formatspecifier","formatstring","scripterror","securerandom","securityerror","set","shell","appendfile","appendio","builtincommand","cat","commandprocessor","concat","echo","error","filter","glob","processcontroller","systemcommand","tee","thread","void","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","sizedqueue","socket","ancillarydata","constants","ifaddr","option","udpsource","socketerror","sortedset","standarderror","stopiteration","string","stringio","stringscanner","error","struct","symbol","synchronizer","synchronizer_m","err","lockmodefailer","unknownlocker","synchronizer","synchronizer_m","syntaxerror","syslog","constants","facility","level","logger","formatter","severity","macros","option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","cyclic","tempfile","thwait","thread","location","threaderror","threadgroup","thwait","time","timeout","error","timeouterror","tracepoint","tracer","thread","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","badurierror","error","escape","ftp","file","generic","http","https","invalidcomponenterror","invalidurierror","ldap","ldaps","mailto","regexp","rfc2396_parser","rfc2396_regexp","pattern","unboundmethod","uncaughtthrowerror","unicodenormalize","webrick","accesslog","accesslogerror","basiclog","cgi","config","cookie","daemon","genericserver","htmlutils","httpauth","authenticator","basicauth","digestauth","htdigest","htgroup","htpasswd","proxyauthenticator","proxybasicauth","proxydigestauth","userdb","httpproxyserver","httprequest","httpresponse","chunkedwrapper","invalidheader","httpserver","httpservererror","httpservlet","abstractservlet","cgihandler","defaultfilehandler","erbhandler","filehandler","httpservleterror","prochandler","httpstatus","clienterror","eoferror","error","info","redirect","servererror","status","success","httputils","formdata","httpversion","log","snirequest","servererror","simpleserver","utils","timeouthandler","process","win32ole","variant","win32olequeryinterfaceerror","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_record","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","warning","weakref","referror","xml","parser","xmlencoding_ja","sjishandler","xmp","stringinputmethod","yaml","dbm","store","zerodivisionerror","zlib","buferror","dataerror","deflate","error","gzipfile","crcerror","error","lengtherror","nofooter","gzipreader","gzipwriter","inflate","memerror","needdict","streamend","streamerror","versionerror","zstream","fatal","unknown","!()","!()","!=()","!=()","!~~()","=~()","=~()","=~()","=~()","=~()",">()",">()",">()",">()",">()",">()",">()",">()",">=()",">=()",">=()",">=()",">=()",">=()",">=()",">>()",">>()",">>()",">>()",">>()",">>()",">>()",">>()","apop()","array()","bigdecimal()","csv()","complex()","currentcontext()","debug()","debug=()","delegateclass()","digest()","digest()","e()","fail()","fail()","fail()","fail()","float()","hash()","i()","integer()","jobmanager()","log_mask()","log_upto()","pi()","pathname()","permalink?()","proxy()","raise()","rational()","string()","string()","uripermalink?()","__callee__()","__dir__()","__drbref()","__drbref()","__drburi()","__drburi()","__enable()","__evaluate__()","__exit__()","__getobj__()","__getobj__()","__id__()","__materialize__()","__method__()","__raise__()","__send__()","__setobj__()","__setobj__()","__swap__()","__swap__()","_dump()","_dump()","_dump()","_dump()","_getproperty()","_httpdate()","_id2ref()","_invoke()","_iso8601()","_jisx0301()","_load()","_load()","_load()","_load()","_local_specification()","_parse()","_path_to?()","_racc_do_parse_rb()","_racc_do_reduce()","_racc_evalact()","_racc_init_sysvars()","_racc_setup()","_racc_yyparse_rb()","_rfc2822()","_rfc3339()","_rfc822()","_set_last_value()","_setproperty()","_strptime()","_strptime()","_xmlschema()","`()","a()","abbrev()","abbrev()","abbreviate()","abort()","abort()","abort()","abort()","abort()","abort_on_exception()","abort_on_exception()","abort_on_exception=()","abort_on_exception=()","abs()","abs()","abs()","abs()","abs()","abs()","abs2()","abs2()","absolute()","absolute?()","absolute?()","absolute?()","absolute_path()","absolute_path()","absolute_path()","ac_arg_disable()","ac_arg_enable()","ac_arg_with()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept()","accept_charset()","accept_charset=()","accept_loop()","accept_nonblock()","accept_nonblock()","accept_nonblock()","accept_nonblock()","access_log()","acct()","acos()","acos()","acosh()","acosh()","action()","action_name()","action_name()","action_name()","action_name()","action_name()","activate()","activate_platform!()","activated()","activated()","activated=()","active?()","active?()","active?()","active?()","active_job?()","active_jobs()","active_jobs_exist?()","active_process_controllers()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add()","add!()","add?()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_alias()","add_attribute()","add_attribute()","add_attribute()","add_attribute()","add_attributes()","add_authenticator()","add_c_enclosure()","add_c_variables()","add_cert()","add_certid()","add_certificate()","add_certificate()","add_child_vertex()","add_class()","add_class()","add_class_or_module()","add_color()","add_color()","add_command()","add_comment()","add_constant()","add_constant()","add_constant()","add_converter()","add_crl()","add_crl()","add_current_platform()","add_data()","add_dictionary()","add_edge()","add_edge_no_circular()","add_element()","add_element()","add_entry()","add_event_to_arry()","add_event_to_arry()","add_extend()","add_extension()","add_extension()","add_extension()","add_field()","add_file()","add_file()","add_file()","add_file()","add_filter()","add_generator()","add_git_source()","add_git_source()","add_handler()","add_have_children_element()","add_hook()","add_html()","add_include()","add_include()","add_link()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_listener()","add_maker()","add_method()","add_method()","add_method()","add_module()","add_module()","add_module_alias()","add_module_by_normal_module()","add_namespace()","add_need_initialize_variable()","add_need_initialize_variable()","add_nonce()","add_nonce()","add_observer()","add_other_element()","add_path()","add_path_source()","add_platform()","add_plugin_source()","add_plural_form()","add_protocol()","add_recipient()","add_regexp_handling()","add_require()","add_response_handler()","add_revoked()","add_row()","add_rubygems_remote()","add_rubygems_source()","add_rubygems_source()","add_runtime_options!()","add_schedule()","add_section()","add_signer()","add_source()","add_source()","add_status()","add_stress_to_class()","add_text()","add_to()","add_to_classes_or_modules()","add_to_element_method()","add_to_load_path()","add_token()","add_tokens()","add_trace_func()","add_value()","add_vertex()","add_vertex()","add_word_pair()","addr()","addr()","addr()","addr()","adler()","adler32()","adler32_combine()","advise()","afamily()","after_resolution()","after_resolution()","ajd()","alias()","alias()","alias()","alias?()","alias?()","alias_command()","alias_command()","alias_extension()","alias_map()","alias_method()","aliases()","alive?()","alive?()","alive?()","alive?()","alive?()","all()","all()","all?()","all?()","all?()","all_classes()","all_classes_and_modules()","all_commands()","all_dependencies()","all_errors()","all_files()","all_modules()","all_requirements()","all_sources()","all_sources()","all_symbols()","all_tasks()","all_waits()","all_waits()","all_waits()","all_waits()","allbits?()","allocate()","allocation_class_path()","allocation_generation()","allocation_method_id()","allocation_sourcefile()","allocation_sourceline()","allow_addr?()","allow_git_ops?()","allow_missing?()","allow_missing?()","allow_nan?()","allow_socket?()","allow_sudo?()","allowed_push_host()","alpn_protocol()","already_tagged?()","alternate=()","amjd()","ancestor?()","ancestors()","ancestors()","ancestors()","ancestors()","ancestors()","angle()","angle()","angle()","any?()","any?()","any?()","any?()","any_content()","anybits?()","api_fetcher?()","api_fetcher?()","api_fetcher?()","apop?()","apop?()","apop?()","app_cache()","app_cache_dirname()","app_cache_dirname()","app_cache_dirname()","app_cache_path()","app_cache_path()","app_config_path()","append()","append()","append()","append()","append_data()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_features()","append_file()","append_to_file()","appendable?()","apply()","aref()","aref()","aref()","aref_prefix()","aref_prefix()","aref_prefix()","arg()","arg()","arg()","arglists()","args()","argument()","arguments()","argv()","argv0()","arity()","arity()","arity()","array()","array_nl()","array_nl=()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_path_source()","as_unicode()","ascend()","ascii_compatible?()","ascii_only?()","ascii_only?()","asciicompat_encoding()","asctime()","asctime()","asin()","asin()","asinh()","asinh()","ask()","ask()","ask()","ask()","ask_filtered()","ask_for_spec_from()","ask_simply()","asn1_flag()","asn1_flag=()","asset()","assign_names()","assoc()","assoc()","assoc()","at()","at()","at_exit()","atan()","atan()","atan()","atan2()","atan2()","atanh()","atanh()","atime()","atime()","atime()","atime()","atom_validate()","atom_validate()","atom_validate()","attempt()","attempts()","attempts()","attlistdecl()","attlistdecl()","attlistdecl?()","attr()","attr_accessor()","attr_reader()","attr_writer()","attribute()","attribute()","attribute_of()","attributes()","attributes()","attributes()","attributes=()","attributes=()","attributes_of()","auth_cram_md5()","auth_data=()","auth_login()","auth_only()","auth_only()","auth_plain()","auth_tag()","auth_tag=()","auth_tag_len=()","authenticate()","authenticate()","authenticate()","authenticate()","authenticated?()","autoclose=()","autoclose?()","autoload()","autoload()","autoload?()","autoload?()","avail_in()","avail_out()","avail_out=()","available?()","available?()","available?()","available?()","available?()","available_tags()","axe()","b()","backtrace()","backtrace()","backtrace_locations()","backtrace_locations()","backup()","banner()","banner()","banner()","base()","base()","base64()","base64digest()","base64digest()","base64digest!()","base_label()","base_label()","base_name()","basename()","basename()","basename()","basic()","basic_auth()","basic_quote_characters()","basic_quote_characters=()","basic_word_break_characters()","basic_word_break_characters=()","beep()","before_resolution()","before_resolution()","before_running_rdoc()","before_running_rdoc()","begin()","begin()","begin()","begin_adding()","beginning_of_line?()","benchmark()","best_available()","between?()","bin_path()","bin_path()","binary=()","binary?()","binary_mode()","bind()","bind()","bind()","bind()","bind()","bind()","bind_function()","binding()","binding()","binding()","bindir()","bindir()","binmode()","binmode()","binmode()","binmode?()","binmode?()","binmode?()","binread()","binread()","binstubs()","binwrite()","binwrite()","birthtime()","birthtime()","birthtime()","birthtime()","bit_length()","bit_set?()","blinding_off!()","blinding_on!()","blksize()","block_given?()","block_length()","block_length()","block_length()","block_output_synchronize()","block_params=()","block_scanf()","block_size()","blockdev?()","blockdev?()","blockdev?()","blockdev?()","blockquote()","blocks()","bm()","bmbm()","body()","body()","body=()","body=()","body_exist?()","body_permitted?()","body_reader()","body_stream=()","bool()","bool()","boolean()","bottom()","bottom()","branch()","break_on_newline()","break_outmost_groups()","break_points()","breakable()","breakable()","broadaddr()","broadcast()","broadcast()","bsearch()","bsearch()","bsearch_index()","bubblebabble()","bubblebabble()","bubblebabble()","buffer_initial_length()","buffer_initial_length=()","build()","build()","build()","build()","build()","build()","build()","build()","build()","build2()","build_gem()","build_heading()","build_paragraph()","build_verbatim()","built_at()","built_gem_path()","builtin_curves()","bundle_path()","bundler_major_version()","bundler_plugin_api_source?()","bundles_for_gem()","by_col()","by_col!()","by_col_or_row()","by_col_or_row!()","by_id()","by_row()","by_row!()","byte()","byte()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytes()","bytesize()","byteslice()","ca_file=()","cache()","cache()","cache()","cache()","cache()","cache()","cache_dir()","cache_path()","cache_path()","cache_path()","cached!()","cached!()","cached!()","cached!()","cachesize=()","calculate()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call_seq=()","callcc()","callee_id()","caller()","caller_locations()","camel_case()","can_display_colors?()","can_display_colors?()","can_display_colors?()","can_lock?()","can_lock?()","can_parse()","can_parse_by_name()","can_retry?()","cancel()","cancel()","cancel()","cancel()","canceled?()","candidate()","candidate()","candidate()","canonical()","canonical=()","canonname()","capabilities()","capability()","capable_auth_types()","capable_cram_md5_auth?()","capable_login_auth?()","capable_plain_auth?()","capable_starttls?()","capitalize()","capitalize()","capitalize!()","caption()","capture2()","capture2e()","capture3()","captures()","captures()","casecmp()","casecmp()","casecmp?()","casecmp?()","casefold?()","cat()","catch()","catch()","catch()","catch()","cause()","cbrt()","cbrt()","cd()","cd()","cd()","cd()","cdata()","cdata()","cdata?()","cdatas()","ceil()","ceil()","ceil()","ceil()","ceil()","ceiling()","center()","cert()","cert=()","cert_status()","cert_store=()","certid()","certid()","certificate=()","certificates()","certificates=()","certs()","chain()","chain()","challenge()","challenge()","challenge()","challenge=()","change_encoding()","change_privilege()","change_privilege()","change_workspace()","changed()","changed?()","character()","characters()","chardev?()","chardev?()","chardev?()","chardev?()","charpos()","chars()","chars()","chars()","chars()","charset()","chdir()","chdir()","chdir()","chdir()","chdir()","chdir()","check()","check()","check()","check()","check()","check!()","check_circular?()","check_default_type!()","check_files()","check_for_corrupt_lockfile()","check_generator()","check_insecure_method()","check_inspect_key()","check_key()","check_modeline()","check_names()","check_names()","check_nonce()","check_password()","check_private_key()","check_signedness()","check_sizeof()","check_unknown_options!()","check_unknown_options!()","check_until()","check_user()","check_userinfo()","check_validity()","checkbox()","checkbox_group()","checkout()","checksum_for_file()","checksums()","child_name()","children()","children()","children()","children()","children()","children()","chmod()","chmod()","chmod()","chmod()","chmod()","chmod()","chmod_r()","chmod_r()","chomp()","chomp()","chomp!()","chop()","chop()","chop!()","chown()","chown()","chown()","chown()","chown()","chown_r()","chown_r()","chr()","chr()","chroot()","chunk()","chunk()","chunk_while()","chunk_while()","chunked=()","chunked?()","cipher()","cipher()","cipher=()","ciphers()","ciphers()","ciphers=()","civil()","civil()","clamp()","class()","class_attributes()","class_eval()","class_exec()","class_file()","class_method_list()","class_methods()","class_name()","class_option()","class_options()","class_path()","class_variable_defined?()","class_variable_get()","class_variable_set()","class_variables()","classes()","classes_and_modules()","classes_hash()","classes_hash()","classify()","clean()","clean()","clean?()","clean_after_install?()","clean_env()","clean_exec()","clean_system()","cleanpath()","cleanup()","cleanup()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_bit!()","clear_comment()","clear_default_specs()","clear_gemspec_cache()","clear_paths()","cli_help()","client_ca()","client_error?()","clobber_task_description()","clobber_task_description()","clock_getres()","clock_gettime()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","clone()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close()","close!()","close_enabled?()","close_on_exec=()","close_on_exec?()","close_read()","close_read()","close_read()","close_write()","close_write()","close_write()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed?()","closed_read?()","closed_write?()","cmds()","cmp()","cmp()","cmp()","cmp()","cmp()","cmp_issuer()","cmsg_is?()","code()","code_around_binding()","codepage()","codepage=()","codepoints()","codepoints()","codepoints()","codepoints()","coerce()","coerce()","coerce()","coerce()","coerce()","coerce()","cofactor()","col_sep()","collect()","collect()","collect()","collect()","collect!()","collect!()","collect_concat()","collect_concat()","collect_tokens()","column()","column()","column_separator()","column_vector()","columns()","combination()","combine()","combine()","comma_breakable()","command()","command()","command=()","command?()","command_help()","command_plugin()","commands()","comment()","comment()","comment()","comment=()","comment=()","comment?()","comment_lines()","comments()","commercial()","commercial()","commit()","committed?()","compact()","compact()","compact!()","compact!()","compact_index_request()","compare_by_identity()","compare_by_identity()","compare_by_identity?()","compare_by_identity?()","compare_file()","compare_file()","compare_language()","compare_stream()","compare_stream()","compatible?()","compile()","compile()","compile_file()","compile_option()","compile_option=()","complete()","complete()","complete()","complete()","completer_quote_characters()","completer_quote_characters=()","completer_word_break_characters()","completer_word_break_characters=()","completion_append_character()","completion_append_character=()","completion_case_fold()","completion_case_fold=()","completion_proc()","completion_proc=()","completion_quote_character()","component()","component()","component()","component_ary()","compute_key()","concat()","concat()","concat()","concat()","concat()","conf()","config()","config()","config_file()","configuration()","configuration=()","configure()","configure()","configure_gem_version_promoter()","configured_bundle_path()","confirm()","confirm()","conflicts()","confstr()","conj()","conj()","conjugate()","conjugate()","connect()","connect()","connect()","connect()","connect()","connect()","connect()","connect_address()","connect_from()","connect_internal()","connect_nonblock()","connect_nonblock()","connect_to()","connection_close?()","connection_for()","connection_for()","connection_keep_alive?()","console()","console()","const_defined?()","const_get()","const_get_safely()","const_load()","const_missing()","const_set()","constants()","constants()","construct()","consume()","consume()","contains()","contains?()","content=()","content=()","content_encoding()","content_length()","content_length()","content_length=()","content_setup()","content_type()","content_type()","content_type()","content_type()","content_type=()","contents()","context()","context()","context()","context=()","continue?()","continue_timeout=()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert()","convert_to_backward_compatible_key()","converter=()","converters()","convertible_int()","convpath()","cooked()","cooked!()","copy()","copy()","copy()","copy()","copy()","copy_entry()","copy_entry()","copy_file()","copy_file()","copy_file()","copy_nonce()","copy_stream()","copy_stream()","copy_stream()","copy_to()","coredump?()","cos()","cos()","cos()","cosh()","cosh()","count()","count()","count()","count()","count()","count_imemo_objects()","count_nodes()","count_objects()","count_objects_size()","count_observers()","count_symbols()","count_tdata_objects()","cover?()","cover?()","coverage_level=()","cp()","cp()","cp_lr()","cp_r()","cp_r()","cpu_match()","cram_md5_challenge()","crc()","crc32()","crc32_combine()","crc_table()","creatable?()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create()","create_ext()","create_ext_from_array()","create_ext_from_hash()","create_ext_from_string()","create_extension()","create_file()","create_from()","create_guid()","create_header()","create_link()","create_listeners()","create_makefile()","create_request()","create_response()","create_self_signed_cert()","create_ssl_params()","create_value()","credential_filtered_string()","credential_filtered_uri()","credentials_for()","critical=()","critical?()","crl=()","crls()","crls=()","crypt()","css()","ctime()","ctime()","ctime()","ctime()","ctime()","ctime()","ctrl_cmd()","current()","current()","current()","current=()","current_cert()","current_command_chain()","current_crl()","current_dependencies()","current_dependencies()","current_env?()","current_group()","current_line()","current_line()","current_platform?()","current_ruby()","current_section()","current_server()","curry()","curry()","cursor()","cursor=()","curve_name()","cwday()","cweek()","cwyear()","cycle()","cycle()","d()","daemon()","data()","data()","data()","data()","data=()","data_type()","datadir()","date=()","date=()","date=()","datetime_format()","datetime_format=()","day()","day()","day_fraction()","dclone()","dclone()","dclone()","dclone()","dclone()","deafen()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug()","debug=()","debug=()","debug=()","debug=()","debug?()","debug?()","debug?()","debug?()","debug?()","debug?()","debug?()","debug_level=()","debug_output=()","debug_thread_info()","decode()","decode()","decode()","decode64()","decode_all()","decode_utf7()","decode_www_form()","decode_www_form_component()","decrypt()","decrypt()","dedent_string()","deep_clone()","def_array_element()","def_atom_persons()","def_atom_text_construct()","def_class()","def_class_accessor()","def_class_accessor()","def_classed_element()","def_classed_element_without_accessor()","def_classed_elements()","def_convert()","def_corresponded_attr_reader()","def_corresponded_attr_writer()","def_csv_accessor()","def_csv_element()","def_delegator()","def_delegator()","def_delegators()","def_delegators()","def_e2message()","def_element_class_accessor()","def_elements_class_accessor()","def_elements_class_accessor()","def_else_enc()","def_erb_method()","def_exception()","def_explicit_clean_other_accessor()","def_extend_command()","def_extend_command()","def_head_option()","def_iconv_convert()","def_inspector()","def_instance_delegator()","def_instance_delegators()","def_method()","def_module()","def_notifier()","def_notifier()","def_option()","def_other_element()","def_other_element_without_accessor()","def_post_proc()","def_pre_proc()","def_same_enc()","def_single_delegator()","def_single_delegators()","def_system_command()","def_system_command()","def_tail_option()","def_to_euc_jp_from_iso_2022_jp()","def_to_euc_jp_from_shift_jis()","def_to_euc_jp_from_utf_8()","def_to_iso_2022_jp_from_euc_jp()","def_to_iso_8859_1_from_utf_8()","def_to_shift_jis_from_euc_jp()","def_to_shift_jis_from_utf_8()","def_to_utf_8_from_euc_jp()","def_to_utf_8_from_iso_8859_1()","def_to_utf_8_from_shift_jis()","def_uconv_convert_if_can()","def_yes_other_accessor()","default()","default()","default()","default=()","default_acl()","default_argc_limit()","default_attempts()","default_bundle_dir()","default_bundle_dir()","default_command()","default_event_sources()","default_external()","default_external=()","default_gem()","default_gemfile()","default_gemfile()","default_id_conv()","default_imap_port()","default_imaps_port()","default_internal()","default_internal=()","default_load_limit()","default_lockfile()","default_lockfile()","default_ole_types()","default_parser()","default_parser=()","default_passive()","default_passive=()","default_pop3_port()","default_pop3s_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_port()","default_proc()","default_proc=()","default_record_separator()","default_record_separator=()","default_retries()","default_safe_level()","default_source()","default_src_encoding()","default_ssl_context()","default_ssl_port()","default_ssl_port()","default_submission_port()","default_system_path()","default_system_path=()","default_task()","default_title=()","default_tls_port()","default_tls_port()","defaults()","defaults()","define()","define()","define()","define_aliases()","define_aliases()","define_by_keywords()","define_finalizer()","define_head()","define_method()","define_singleton_method()","define_tail()","define_task()","defined_class()","defined_event?()","defined_in?()","definition()","definition()","definition()","definition()","definition()","definition_lists()","deflate()","deflate()","deflate()","deflate()","degree()","delegate()","delegate()","deletable?()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete!()","delete!()","delete?()","delete_all()","delete_all()","delete_all()","delete_all()","delete_at()","delete_at()","delete_attribute()","delete_edge()","delete_edge()","delete_element()","delete_field()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_if()","delete_legacy_args()","delete_namespace()","delete_observer()","delete_observers()","delete_passwd()","delete_passwd()","delete_prefix()","delete_prefix!()","delete_suffix()","delete_suffix()","delete_suffix!()","delete_text()","delete_unless_alive()","deleted?()","denominator()","denominator()","denominator()","denominator()","denominator()","depend_rules()","dependencies()","dependencies()","dependencies()","dependencies()","dependencies()","dependencies_eql?()","dependencies_for()","dependencies_for()","dependencies_for()","dependencies_for_activated_platforms()","dependencies_installed?()","dependency_api_uri()","dependency_names()","dependency_names_to_double_check()","dependency_specs()","deprecate_constant()","deprecated_option()","depth()","depth()","depth=()","deq()","deq()","deq()","dequote()","desc()","desc()","descend()","descendent?()","destination_encoding()","destination_encoding()","destination_encoding()","destination_encoding_name()","destination_encoding_name()","destination_root()","destination_root=()","det()","detach()","detach_vertex_named()","detach_vertex_named()","detached()","detached=()","detached?()","detect()","detect_encoding()","detect_gemdeps()","detect_idle_timeout()","determinant()","dev()","dev_major()","dev_minor()","dfdxi()","dh_compute_key()","diagonal()","diff()","difference()","difference()","dig()","dig()","dig()","dig()","dig()","dig()","digest()","digest()","digest()","digest()","digest()","digest()","digest()","digest!()","digest_length()","digest_length()","digest_length()","digits()","dir()","dir()","dir_config()","direct_ancestors()","direct_ancestors()","directory()","directory?()","directory?()","directory?()","directory?()","directory?()","directory_makable?()","dirname()","dirname()","disable()","disable()","disable()","disable_close()","disable_required_check!()","disable_ssl()","disable_ssl()","disable_ssl()","disable_starttls()","disable_tls()","disasm()","disasm()","disassemble()","disassemble()","disconnect()","disconnected?()","disjoint?()","dispatch()","dispid()","display()","display()","display?()","display?()","div()","div()","div()","divide()","divmod()","divmod()","divmod()","divmod()","dlload()","dlopen()","dlunwrap()","dlwrap()","dn()","dn=()","do_get()","do_get()","do_get()","do_head()","do_options()","do_options()","do_post()","do_not_reverse_lookup()","do_not_reverse_lookup()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_not_reverse_lookup=()","do_parse()","do_reply()","do_validate()","do_validate=()","do_write()","doc_stats()","doctor()","doctor()","doctype()","doctype()","doctype()","doctype()","doctype()","doctype?()","doctype_end()","document()","document()","document()","document()","document()","document?()","document?()","document_children=()","document_self=()","document_self_or_methods()","documentation_page()","documentation_search()","documentation_source()","documented?()","documented?()","documented?()","documented?()","done?()","done_adding()","done_documenting=()","done_installing()","double_check_for()","double_check_for()","double_fig()","down()","down()","down()","down()","down()","downcase()","downcase()","downcase!()","downto()","downto()","dowrite()","drop()","drop()","drop()","drop_while()","drop_while()","drop_while()","dsa_sign_asn1()","dsa_verify_asn1()","dst?()","dstaddr()","dummy?()","dummy_makefile()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_all()","dump_hash()","dump_stream()","dup()","dup()","dup()","dup()","dylibs()","dylibs_darwin()","dylibs_ldd()","dynamic_width()","dynamic_width_stty()","dynamic_width_tput()","e2mm_message()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each()","each_active_object()","each_address()","each_address()","each_address()","each_address()","each_address()","each_ancestor()","each_attribute()","each_attribute()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_byte()","each_char()","each_char()","each_char()","each_char()","each_char()","each_child()","each_child()","each_child()","each_child()","each_child()","each_classmodule()","each_codepoint()","each_codepoint()","each_codepoint()","each_codepoint()","each_cons()","each_const()","each_constant()","each_data()","each_element()","each_element_with_attribute()","each_element_with_text()","each_entry()","each_entry()","each_extend()","each_filename()","each_grapheme_cluster()","each_include()","each_index()","each_index()","each_key()","each_key()","each_key()","each_key()","each_key()","each_key()","each_key()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_line()","each_mail()","each_method()","each_name()","each_name()","each_name()","each_name()","each_object()","each_option()","each_option()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_pair()","each_parent()","each_prime()","each_recursive()","each_resource()","each_section()","each_slice()","each_strongly_connected_component()","each_strongly_connected_component()","each_strongly_connected_component_from()","each_strongly_connected_component_from()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_value()","each_with_index()","each_with_index()","each_with_object()","each_with_object()","ecdh_curves=()","echo()","echo=()","echo?()","egd()","egd_bytes()","egid()","egid=()","ehlo()","eid()","eid()","eigenvalue_matrix()","eigenvalues()","eigenvector_matrix()","eigenvector_matrix_inv()","eigenvectors()","element()","element=()","element_initialize_arguments?()","elementdecl()","elementdecl()","elementdecl?()","emacs_editing_mode()","emacs_editing_mode?()","emphasis()","empty()","empty()","empty()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty?()","empty_directory()","enable()","enable()","enable()","enable_close()","enable_config()","enable_fallback_scsv()","enable_ssl()","enable_ssl()","enable_ssl()","enable_starttls()","enable_starttls_auto()","enable_tls()","enabled?()","enabled?()","enabled?()","enc_key()","enclose()","enclosed?()","encode()","encode()","encode()","encode!()","encode!()","encode64()","encode_fallback()","encode_utf7()","encode_www_form()","encode_www_form_component()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding()","encoding=()","encoding=()","encoding=()","encrypt()","encrypt()","end()","end()","end()","end()","endelement()","end_document()","end_document()","end_document()","end_document()","end_element()","end_element?()","end_mapping()","end_mapping()","end_prefix_mapping()","end_seen?()","end_sequence()","end_sequence()","end_stream()","end_stream()","end_stream()","end_with?()","ended?()","endgrent()","endpwent()","engines()","england()","enq()","enq()","enq()","enqueued?()","ensure_all_gems_in_lockfile!()","ensure_default_gem_subdirectories()","ensure_equivalent_gemfile_and_lockfile()","ensure_gem_subdirectories()","ensure_mod_sequence_value()","ensure_number()","ensure_nz_number()","ensure_same_dependencies()","ensure_xml_content()","enterable?()","entity()","entity()","entity()","entity()","entity?()","entity_class()","entity_class()","entity_expansion_limit()","entity_expansion_limit()","entity_expansion_limit=()","entity_expansion_limit=()","entity_expansion_text_limit()","entity_expansion_text_limit()","entity_expansion_text_limit=()","entity_expansion_text_limit=()","entitydecl()","entitydecl()","entitydecl?()","entries()","entries()","entries()","entries()","enum_for()","enum_for()","env()","env()","env_requirement()","environment()","environment()","environment()","eof()","eof()","eof()","eof()","eof()","eof()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eof?()","eos?()","eos?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","eql?()","equal?()","erf()","erfc()","errno()","error()","error()","error()","error()","error()","error()","error()","error()","error()","error=()","error?()","error?()","error?()","error?()","error?()","error_bytes()","error_char()","error_depth()","error_message()","error_message()","error_string()","errors()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape()","escape8bit()","escapeelement()","escapehtml()","escape_element()","escape_form()","escape_globs()","escape_html()","escape_path()","etag_for()","euid()","euid=()","eval()","eval()","eval()","eval_gemfile()","eval_history=()","eval_input()","eval_script()","evaluate()","evaluate()","even?()","event()","event?()","event_interface()","event_location()","event_location()","event_type()","exact?()","examine()","exception()","exception()","exception()","exception()","exception()","exception()","exception_class()","exclude()","exclude_end?()","exclude_end?()","exclusive()","exec()","exec()","exec()","exec_command()","exec_if()","executable?()","executable?()","executable?()","executable?()","executable_real?()","executable_real?()","executable_real?()","executable_real?()","executables()","exist?()","exist?()","exist?()","exist?()","exist?()","exists?()","exists?()","exists?()","exit()","exit()","exit()","exit()","exit()","exit!()","exit!()","exit_on_failure?()","exit_status()","exit_value()","exited?()","exitstatus()","exp()","exp()","exp()","expand()","expand_hexstring()","expand_pair()","expand_path()","expand_path()","expand_path()","expand_path()","expand_ref_in()","expand_tabs()","expand_value()","expanded_name()","expanded_original_path()","expect()","expected()","expected()","expected()","expected()","expected()","expected()","expired?()","expired?()","expires()","expires=()","exponent()","export()","export()","export()","export()","expunge()","extend()","extend_object()","extend_object()","extend_object()","extend_object()","extend_object()","extension()","extension()","extension?()","extension_cache_path()","extension_dir_name()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions()","extensions=()","extensions=()","extensions=()","extensions=()","extern()","external_encoding()","external_encoding()","external_encoding()","external_encoding()","extname()","extname()","extract()","extract()","extract_call_seq()","facility()","fail()","fail()","fail!()","failed?()","fallback_timeout=()","false()","family()","family()","family_addrinfo()","fast_generate()","fastmode=()","fatal()","fatal()","fatal()","fatal?()","fatal?()","fcntl()","fcntl()","fcntl()","fdatasync()","fdiv()","fdiv()","fdiv()","fdiv()","fdiv()","feature_flag()","feed()","feed_info()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch()","fetch_gemspec_files()","fetch_http()","fetch_platform()","fetch_platform()","fetch_resource()","fetch_server()","fetch_spec()","fetch_spec()","fetch_spec()","fetch_uri()","fetch_values()","fetchers()","field()","field?()","field_row?()","field_size_limit()","field_size_limit()","fields()","file()","file()","file()","file?()","file?()","file?()","file?()","file?()","file_collision()","file_field()","file_input?()","file_name()","filename()","filename()","filename()","filename_quote_characters()","filename_quote_characters=()","fileno()","fileno()","fileno()","fileno()","files_hash()","filesystem_access()","fill()","fill()","fill_breakable()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter()","filter!()","filter!()","filter!()","filter!()","filter=()","filter_backtrace()","filter_backtrace()","filter_uri()","final()","find()","find()","find()","find()","find()","find()","find()","find_all()","find_all()","find_all()","find_all_template()","find_ancestor_local_symbol()","find_attribute()","find_attribute_named()","find_by_name_and_platform()","find_by_namespace()","find_c_enclosure()","find_class_and_command_by_namespace()","find_class_and_task_by_namespace()","find_class_method_named()","find_class_named()","find_class_named()","find_class_named_from()","find_class_or_module()","find_class_or_module()","find_command_possibilities()","find_constant_named()","find_enclosing_module_named()","find_executable()","find_external_alias()","find_external_alias_named()","find_file_named()","find_file_named()","find_files()","find_first_recursive()","find_header()","find_in_source_paths()","find_index()","find_index()","find_indexed_specs()","find_instance_method_named()","find_latest_files()","find_library()","find_local_symbol()","find_local_symbol()","find_method()","find_method_named()","find_module_named()","find_module_named()","find_module_named()","find_proxy()","find_resolved_spec()","find_response()","find_symbol()","find_symbol_module()","find_system_command()","find_task_possibilities()","find_text_page()","find_type()","find_unique()","find_unresolved_default_spec()","finger()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish()","finish_page_dir()","finish_resolve()","finished?()","finished?()","finished?()","finite?()","finite?()","finite?()","finite?()","fips_mode()","fips_mode=()","first()","first()","first()","first()","first()","first()","first()","first?()","first_column()","first_lineno()","first_lineno()","fix()","fix_basic_object_inheritance()","fixed_encoding?()","flags()","flags=()","flags=()","flat_map()","flat_map()","flat_map()","flatten()","flatten()","flatten()","flatten!()","flatten!()","flock()","flock()","floor()","floor()","floor()","floor()","floor()","floor()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush()","flush_left()","flush_next_in()","flush_next_out()","flush_sessions()","fnmatch()","fnmatch()","fnmatch?()","fnmatch?()","for()","for()","for()","for()","for?()","for_fd()","for_fd()","for_many()","force()","force_documentation=()","force_encoding()","force_quotes?()","foreach()","foreach()","foreach()","foreach()","foreach()","foreach()","fork()","fork()","fork()","form()","format()","format()","format()","format()","format()","format=()","format_date()","format_datetime()","formatted_usage()","formatted_usage()","frac()","fragment=()","free()","free()","free=()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","freeze()","frexp()","friday?()","friday?()","friendly_path()","from_hash()","from_lock()","from_lock()","from_module()","from_name()","from_name()","from_prime_division()","from_state()","from_string()","from_stub()","from_superclass()","front()","front()","frozen?()","frozen_bundle?()","fsync()","fsync()","ftype()","ftype()","ftype()","full_gem_path()","full_message()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name()","full_name=()","full_old_name()","full_require_paths()","full_version()","fully_documented?()","fully_documented?()","fully_expanded_name()","function()","g()","gamma()","garbage_collect()","garbage_collect()","gather_files()","gcd()","gcd()","gcdlcm()","gem()","gem_install_dir()","gem_key()","gem_mirrors()","gem_not_found_message()","gem_platforms()","gem_push?()","gem_push_host()","gem_version_promoter()","gemfile()","gemfile_install()","gemspec()","gemspec()","gen_random()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate()","generate!()","generate_bin()","generate_bundler_executable_stubs()","generate_event()","generate_key()","generate_key!()","generate_key!()","generate_line()","generate_prime()","generate_standalone_bundler_executable_stubs()","generation_hook()","generator()","generator_descriptions()","generator_for()","generic()","generic_local_platform()","get()","get()","get()","get()","get()","get()","get2()","get_attribute()","get_attribute_ns()","get_attributes()","get_byte()","get_console()","get_constant()","get_elements()","get_file_and_line_from_caller()","get_first()","get_formatted_specs_and_deps()","get_instance()","get_namespace()","get_nth_prime()","get_option()","get_passwd()","get_passwd()","get_passwd()","get_print()","get_response()","get_screen_size()","get_text()","get_thread()","get_value()","getacl()","getaddress()","getaddress()","getaddress()","getaddress()","getaddress()","getaddresses()","getaddresses()","getaddresses()","getaddresses()","getaddrinfo()","getaddrinfo()","getbinaryfile()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getbyte()","getc()","getc()","getc()","getc()","getc()","getch()","getch()","getch()","getdir()","getegid()","geteuid()","getgid()","getgm()","getgrent()","getgrgid()","getgrnam()","gethostbyaddr()","gethostbyname()","gethostbyname()","gethostname()","getifaddrs()","getlocal()","getlogin()","getname()","getname()","getname()","getname()","getnameinfo()","getnameinfo()","getnames()","getnames()","getnames()","getnames()","getopts()","getopts()","getopts()","getpass()","getpass()","getpeereid()","getpeername()","getpgid()","getpgrp()","getpriority()","getpty()","getpwent()","getpwnam()","getpwuid()","getquota()","getquotaroot()","getresource()","getresources()","getrlimit()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","gets()","getservbyname()","getservbyport()","getservername()","getsid()","getsockname()","getsockopt()","getsockopt()","getter()","gettextfile()","getuid()","getutc()","getwd()","getwd()","getwd()","getwd()","gid()","gid()","gid=()","git()","git_commit_sha()","git_present?()","git_push()","git_source()","git_version()","git_version()","github()","github()","glob()","glob()","glob()","glob()","global_index_file()","global_root()","global_rubygems_source=()","global_variables()","globs_for()","gm()","gmt?()","gmt_offset()","gmtime()","gmtoff()","goto()","grant_privilege()","grant_privilege()","grapheme_clusters()","great_job()","gregorian()","gregorian?()","gregorian_leap?()","grep()","grep()","grep_v()","grep_v()","group()","group()","group()","group()","group()","group()","group()","group=()","group_by()","group_sub()","groups()","groups()","groups=()","grpowned?()","grpowned?()","grpowned?()","grpowned?()","gsub()","gsub()","gsub!()","gsub_file()","guard_clean()","guard_inspect_key()","guess()","guess()","guess()","guid()","guid()","gunzip()","gunzip()","gzip()","gzip()","h()","h()","h()","handle_argument_error?()","handle_argument_error?()","handle_exception()","handle_interrupt()","handle_no_command_error()","handle_no_method_error?()","handle_no_method_error?()","handle_pipe()","handler()","handler()","handler=()","handlers()","has_attributes?()","has_elements?()","has_expires?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_key?()","has_local_dependencies?()","has_name?()","has_name?()","has_next?()","has_post_install_message?()","has_rubygems_remotes?()","has_text?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","has_value?()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash()","hash_algorithm()","hash_old()","have_author?()","have_author?()","have_author?()","have_author?()","have_children_elements()","have_const()","have_content?()","have_framework()","have_func()","have_header()","have_library()","have_macro()","have_required_elements?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_required_values?()","have_struct_member()","have_type()","have_var()","have_xml_content?()","have_xml_content?()","have_xml_content?()","head()","head2()","header()","header()","header?()","header_convert()","header_converters()","header_row?()","header_row?()","header_row?()","headers()","headers()","headers()","headers()","headers=()","helo()","help()","help()","help()","help()","help()","help()","helpcontext()","helpcontext()","helpfile()","helpfile()","helpstring()","helpstring()","here?()","here?()","hex()","hex()","hexdigest()","hexdigest()","hexdigest()","hexdigest()","hexdigest!()","hexencode()","hidden()","hidden?()","hidden?()","hidden?()","hidden?()","hierarchical?()","hierarchical?()","history_file()","history_file=()","hkdf()","home()","home()","home_workspace()","hook()","hook()","hook_plugins()","host()","host()","host()","host=()","host=()","hostname()","hostname=()","hostname=()","hour()","hour()","hour=()","hour=()","href=()","hstack()","html()","html()","html_escape()","html_escape()","html_name()","html_name()","hton()","http_default_port()","http_header()","http_proxy()","http_url()","http_url()","http_version()","httpdate()","httpdate()","httpdate()","httpdate()","httpdate()","httponly=()","https_default_port()","hypot()","i()","icon()","icon=()","iconv()","id()","id()","id()","id2name()","idempotent?()","ident()","identical?()","identical?()","identical?()","identical?()","identifier()","identity()","idle()","idle_done()","if_modified_since()","ifindex()","iflush()","ignorable_dependency?()","ignore()","ignore_config?()","ignore_unknown_element()","ignore_unknown_element=()","ignore_whitespace_nodes()","ignored?()","imag()","imag()","image()","image_button()","image_size=()","imaginary()","imaginary()","img()","implemented_ole_types()","import_function()","import_symbol()","import_value()","in_bundle?()","in_root()","inactivate()","inc()","inc()","include()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","include?()","included()","included()","included()","included()","included()","included()","included_modules()","incompatible_argument_styles()","incompatible_argument_styles()","incomplete_input?()","indent()","indent()","indent()","indent=()","indent_text()","indentation()","indentation=()","index()","index()","index()","index()","index()","index()","index()","index()","index()","index_file()","index_for()","index_in_parent()","indicate_progress()","indicate_progress()","infinite?()","infinite?()","infinite?()","infinite?()","infinity?()","inflate()","inflate()","inflate()","inflate()","info()","info()","info()","info()","info()","info()","info?()","info?()","info?()","info_path()","inherited()","inherited()","inherited()","inherited_array_reader()","inherited_base()","inherited_base()","inherited_hash_reader()","inherited_reader()","init()","init()","initgroups()","initialize()","initialize_clone()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_copy()","initialize_dup()","initialize_http_header()","initialize_methods_etc()","initialize_tracer()","inject()","inject()","inject()","inject()","inject()","inject_into_class()","inject_into_file()","inject_into_module()","inline_html?()","inline_html?()","inline_other?()","inline_other?()","inline_other_base64?()","inline_other_base64?()","inline_other_text?()","inline_other_text?()","inline_other_xml?()","inline_other_xml?()","inline_text?()","inline_text?()","inline_xhtml?()","inline_xhtml?()","ino()","inplace_mode()","inplace_mode=()","input=()","input=()","input=()","input=()","input=()","input?()","insert()","insert()","insert()","insert_after()","insert_before()","insert_into_file()","insert_output()","insert_text()","inside()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect?()","inspect_mode=()","inspect_raw()","inspect_sockaddr()","inspect_value()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install()","install_acl()","install_alias_method()","install_class_name()","install_date_element()","install_definition()","install_dublin_core()","install_extend_commands()","install_extend_commands()","install_from_spec()","install_gem()","install_get_attribute()","install_get_text_element()","install_have_attribute_element()","install_have_child_element()","install_have_children_element()","install_id_conv()","install_if()","install_image_favicon()","install_image_item()","install_list()","install_model()","install_must_call_validator()","install_ns()","install_path()","install_path()","install_path()","install_path()","install_siginfo_handler()","install_system_commands()","install_tasks()","install_taxo_topic()","install_taxo_topics()","install_text_element()","installation_attempted?()","installed?()","installed?()","installed?()","installed?()","installed_docs()","instance()","instance()","instance_attributes()","instance_delegate()","instance_eval()","instance_exec()","instance_method()","instance_method_list()","instance_methods()","instance_methods()","instance_of?()","instance_variable_defined?()","instance_variable_get()","instance_variable_set()","instance_variables()","instruction()","instruction()","instruction?()","instruction_sequence()","instructions()","int()","int()","int()","int()","int_from_prime_division()","integer?()","integer?()","intern()","intern()","internal_class_of()","internal_encoding()","internal_encoding()","internal_encoding()","internal_object_id()","internal_super_of()","interrupt()","interrupt()","intersect?()","intersection()","invert()","invert()","invert()","invert()","invert()","invert()","invert!()","invkind()","invoke()","invoke()","invoke()","invoke_from_option()","invoke_kind()","invoke_with_padding()","ioctl()","ioctl()","ioflush()","ip()","ip6_arpa()","ip6_int()","ip?()","ip_address()","ip_address_list()","ip_pktinfo()","ip_pktinfo()","ip_port()","ip_unpack()","ipv4?()","ipv4?()","ipv4_compat()","ipv4_compat?()","ipv4_loopback?()","ipv4_mapped()","ipv4_mapped?()","ipv4_multicast?()","ipv4_multicast_loop()","ipv4_multicast_loop()","ipv4_multicast_ttl()","ipv4_multicast_ttl()","ipv4_private?()","ipv6?()","ipv6?()","ipv6_linklocal?()","ipv6_loopback?()","ipv6_mc_global?()","ipv6_mc_linklocal?()","ipv6_mc_nodelocal?()","ipv6_mc_orglocal?()","ipv6_mc_sitelocal?()","ipv6_multicast?()","ipv6_pktinfo()","ipv6_pktinfo()","ipv6_pktinfo_addr()","ipv6_pktinfo_ifindex()","ipv6_sitelocal?()","ipv6_to_ipv4()","ipv6_unique_local?()","ipv6_unspecified?()","ipv6_v4compat?()","ipv6_v4mapped?()","ipv6only!()","irb()","irb()","irb()","irb_abort()","irb_at_exit()","irb_context()","irb_exit()","irb_exit()","irb_level()","irb_load()","irb_load()","irb_require()","isequal()","is_a?()","is_alias_for()","is_reachable_from?()","is_version_1_2?()","isatty()","isatty()","isdst()","iseuc()","iseuc()","isjis()","isjis()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","iso8601()","issetugid()","issjis()","issjis()","issue()","issuer()","issuer()","issuer()","issuer()","issuer=()","issuer=()","issuer_certificate=()","issuer_key_hash()","issuer_name_hash()","issues_url()","isutf8()","isutf8()","italy()","items()","items()","iterator?()","itself()","iv=()","iv_len()","iv_len=()","jacobian()","jd()","jd()","jd()","jisx0301()","jisx0301()","jisx0301()","jisx0301()","jobs()","jobs()","jobs_exist?()","join()","join()","join()","join()","join()","join()","join()","join()","join()","join_nowait()","join_nowait()","jruby?()","json_creatable?()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","julian()","julian?()","julian_leap?()","k()","kconv()","kconv()","keep_alive?()","keep_alive?()","keep_back()","keep_back()","keep_drop()","keep_drop()","keep_end()","keep_end()","keep_if()","keep_if()","keep_if()","keep_if()","keep_start()","keep_start()","key()","key()","key()","key()","key()","key()","key()","key=()","key=()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key?()","key_for()","key_len()","key_len=()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys()","keys_with_inspector()","kill()","kill()","kill()","kill()","kill()","kill()","kill_job()","kind_of?()","l()","label()","label()","lambda()","lambda?()","lang()","last()","last()","last()","last()","lastbuilddate=()","last_column()","last_error()","last_error()","last_error=()","last_lineno()","last_match()","last_modified()","last_modified()","last_status()","last_update()","last_update=()","latest_gc_info()","latest_rubygems_version()","latest_spec_for()","latest_version()","latest_version_for()","lazy()","lazy()","lchmod()","lchmod()","lchown()","lchown()","lcm()","ld()","ldd_available?()","ldexp()","leap?()","leap?()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","length()","level()","level()","level()","level()","level()","level=()","level=()","level=()","level=()","level=()","level_notifier=()","levenshtein_distance()","lex()","lex_state_name()","lgamma()","liberal_parsing?()","liberal_parsing?()","library_name()","libyaml_version()","licenses()","limit()","line()","line()","line()","line()","line()","line_buffer()","line_width()","line_width=()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno()","lineno=()","lineno=()","lineno=()","lineno=()","lines()","lines()","lines()","lines()","lines()","linger()","linger()","link()","link()","link()","link()","link_entry()","link_file()","link_local?()","link_to()","list()","list()","list()","list()","list()","list()","list()","list()","list_files_in_directory()","list_item_from()","listable?()","listen()","listen()","listen()","listen()","listen()","listen()","listen()","listener()","listener()","listener()","listener=()","ljust()","ln()","ln()","ln()","ln_s()","ln_s()","ln_sf()","ln_sf()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load_all()","load_cache()","load_class()","load_class_data()","load_env_plugins()","load_file()","load_file()","load_from_binary()","load_from_binary_extra_data()","load_gemspec()","load_gemspec_uncached()","load_marshal()","load_method()","load_mime_types()","load_options()","load_page()","load_path_insert_index()","load_paths()","load_paths()","load_paths()","load_plugin()","load_plugins()","load_private_key()","load_public_key()","load_random_file()","load_rdoc()","load_spec_files()","load_stream()","load_thorfile()","load_yaml()","load_yaml()","loaded_from()","local()","local_address()","local_index_file()","local_method?()","local_method?()","local_name()","local_name()","local_name=()","local_override!()","local_overrides()","local_platform()","local_root()","local_search()","local_specs()","local_variable_defined?()","local_variable_get()","local_variable_get()","local_variable_set()","local_variable_set()","local_variables()","local_variables()","local_variables()","locale()","locale=()","locale_charmap()","localtime()","location=()","location_of_caller()","locations()","lock()","lock()","lock()","lock()","lock()","lock()","lock_sources()","locked?()","locked_bundler_version()","locked_gems()","locked_ruby_version()","locked_ruby_version_object()","log()","log()","log()","log()","log()","log()","log()","log10()","log10()","log2()","log2()","log_error()","logging()","login()","login()","logo()","logo=()","logout()","long_desc()","long_name()","lookup_color()","lookup_ring()","lookup_ring_any()","lookup_server()","loop()","loopback?()","ls()","lshift!()","lstat()","lstat()","lstat()","lstrip()","lstrip!()","lsub()","ludecomp()","lusolve()","lutime()","maglev?()","magnitude()","magnitude()","magnitude()","magnitude()","magnitude()","mail()","mailfrom()","mails()","main()","main()","main()","main=()","main_irb()","main_thread()","major?()","major_deprecation()","major_version()","major_version()","make()","make()","make()","make_affine!()","make_compiler()","make_edge()","make_edge()","make_expires()","make_link()","make_methods()","make_passwd()","make_passwd()","make_passwd()","make_regexp()","make_socket()","make_switch()","make_symlink()","make_thread_list()","make_tuple()","make_variable_map()","makedirs()","makedirs()","maker_target()","maker_target()","maker_target()","maker_target()","maker_target()","makers()","malloc()","malloc()","malloc()","malloc()","malloc_allocated_size()","malloc_allocations()","map()","map()","map()","map()","map()","map!()","map!()","map=()","mapping?()","mapping?()","mark()","markup()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump()","marshal_dump_old()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_load()","marshal_version()","mask()","mask()","mask!()","mask=()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match()","match?()","match?()","match?()","match?()","match?()","match_platform()","match_to()","match_to_consume()","matched()","matched?()","matched_size()","matches()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches?()","matches_for_glob()","materialize()","materialized_for_all_platforms()","max()","max()","max()","max()","max=()","max_by()","max_flag_count()","max_flag_count=()","max_nesting()","max_nesting=()","max_retries=()","max_version=()","maxgroups()","maxgroups=()","md5_available?()","mday()","mday()","mdtm()","measure()","media_subtype()","media_subtype()","media_subtype()","media_subtype()","mem_check_start()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","member?()","members()","members()","memberwise()","memsize_of()","memsize_of_all()","merge()","merge()","merge()","merge()","merge()","merge()","merge()","merge!()","merge!()","merge!()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message()","message_loop()","message_with_trees()","meta_vars()","method()","method_added()","method_added()","method_defined?()","method_file()","method_id()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_option()","method_options()","methods()","methods()","methods()","methods_by_type()","methods_matching()","mime_split()","mime_type()","min()","min()","min()","min()","min()","min_by()","min_version=()","mingw?()","minmax()","minmax_by()","minor?()","minor_version()","minor_version()","minute()","minute=()","minute=()","mirror_for()","missing_extensions?()","missing_lockfile_dependencies()","missing_specs()","missing_specs?()","mjd()","mkcol()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir()","mkdir_p()","mkdir_p()","mkdir_p()","mkfifo()","mkpath()","mkpath()","mkpath()","mktime()","mktmpdir()","mlsd()","mlst()","mod_add()","mod_exp()","mod_inverse()","mod_mul()","mod_sqr()","mod_sub()","mode()","mode()","models()","module()","module?()","module?()","module_eval()","module_exec()","module_names()","modules()","modules_hash()","modules_hash()","modulo()","modulo()","modulo()","modulo()","mon()","mon()","mon_enter()","mon_exit()","mon_locked?()","mon_owned?()","mon_synchronize()","mon_try_enter()","monday?()","monday?()","month()","month()","mount()","mount_proc()","mountpoint?()","move()","move()","move()","move()","move()","mri?()","mswin64?()","mswin?()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime()","mtime=()","mu_lock()","mu_locked?()","mu_synchronize()","mu_try_lock()","mu_unlock()","mul()","mult()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart?()","multipart_form()","must_c_version()","must_call_validators()","mute()","mute?()","mv()","mv()","n_bytes()","n_jobs()","n_mails()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name()","name=()","name=()","name=()","name=()","name_for()","name_for()","name_for()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_explicit_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","name_for_locking_dependency_source()","name_for_path()","name_for_path()","name_list()","name_prefix()","name_prefix()","named_captures()","named_captures()","names()","names()","names()","names()","names()","names_path()","namespace()","namespace()","namespace()","namespace()","namespace()","namespace=()","namespace_context()","namespace_context=()","namespace_from_thor_class()","namespace_uri()","namespaces()","namespaces()","namespaces=()","namespaces=()","namespaces_in_content()","nan?()","nan?()","native()","need_base64_encode?()","need_base64_encode?()","need_initialize_variables()","need_initialize_variables()","need_parent?()","need_parent?()","needs()","negative?()","negative?()","negative?()","negative?()","nest()","nesting()","netmask()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new!()","new_alias_name()","new_cond()","new_ntoh()","new_offset()","new_platform?()","new_seed()","new_specs()","new_start()","new_with()","new_with()","new_with_uri()","new_with_uri()","new_with_value_if_need()","newobj()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next()","next!()","next_current()","next_day()","next_element()","next_float()","next_month()","next_rotate_time()","next_sibling=()","next_sibling_node()","next_token()","next_update()","next_update()","next_update=()","next_values()","next_wait()","next_wait()","next_year()","nil?()","nil?()","nkf()","nlink()","nlsolve()","nlst()","no?()","no?()","no?()","no_commands()","no_tasks()","nobits?()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","node_type()","noecho()","non_aliases()","nonblock()","nonblock=()","nonblock?()","none?()","none?()","nonzero?()","nonzero?()","noop()","noop()","normalize()","normalize()","normalize()","normalize()","normalize!()","normalize_comment()","normalize_path()","normalize_space()","normalize_uri()","normalized()","normalized_file_list()","not()","not_after()","not_after=()","not_before()","not_before=()","not_debugging?()","not_debugging?()","not_found()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","not_set_name()","notation()","notationdecl()","notationdecl()","notationdecl?()","notations()","note()","note_for()","notes()","nothing_changed?()","notify()","notify()","notify()","notify()","notify()","notify()","notify?()","notify?()","notify?()","notify_observers()","notify_observers()","now()","now()","nowrite()","npn_protocol()","nprocessors()","nread()","nsec()","nth_kday()","nth_kday()","nth_kday?()","ntop()","null?()","num_bits()","num_bytes()","num_waiting()","num_waiting()","number()","numerator()","numerator()","numerator()","numerator()","numerator()","object_address_group()","object_class()","object_group()","object_id()","object_nl()","object_nl=()","oct()","odd?()","odd?()","of()","of()","off()","off_event()","offset()","offset()","offset_vtbl()","oflush()","oid()","oid()","oid()","oid=()","oid=()","old_enc=()","ole_activex_initialize()","ole_classes()","ole_classes()","ole_free()","ole_free()","ole_func_methods()","ole_get_methods()","ole_instance_variable_get()","ole_instance_variable_set()","ole_method()","ole_method_help()","ole_methods()","ole_methods()","ole_obj_help()","ole_put_methods()","ole_query_interface()","ole_reference_count()","ole_respond_to?()","ole_show_help()","ole_type()","ole_type()","ole_type()","ole_type()","ole_type_detail()","ole_type_detail()","ole_typelib()","ole_typelib()","ole_types()","on()","on()","on_attr_charref()","on_attr_charref_hex()","on_attr_entityref()","on_attr_value()","on_attribute()","on_charref()","on_charref_hex()","on_curve?()","on_entityref()","on_error()","on_etag()","on_event()","on_event_with_outargs()","on_head()","on_stag()","on_stag_end()","on_stag_end_empty()","on_tail()","on_xmldecl_encoding()","on_xmldecl_end()","on_xmldecl_standalone()","on_xmldecl_version()","one?()","one?()","one?()","ongoing_visibility=()","opaque=()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open()","open!()","open_message_stream()","open_server()","open_server()","opendir()","opened?()","option()","option_list()","option_list()","optional?()","options()","options()","options()","options()","options()","options()","options()","options()","options=()","options=()","options_to_lock()","optname()","ord()","ord()","order()","order()","order!()","order!()","ordering=()","ordinal()","ordinal()","orig_initialize()","orig_name()","orig_name=()","original_env()","original_name()","original_name()","os_code()","os_match()","other_elements()","otool_available?()","out()","out()","out_of_line?()","out_of_line?()","outdated()","output()","output=()","output?()","output_encoding=()","output_flag_file()","output_name()","output_post_install_messages()","output_without_groups_message()","owned?()","owned?()","owned?()","owned?()","owned?()","owner()","owner()","p()","p()","pack()","pack_sockaddr_in()","pack_sockaddr_un()","package()","package_name()","padding=()","padding=()","page()","page_file()","page_name()","pair()","pair()","paragraph()","param_list()","param_seq()","parameters()","parameters()","parameters()","parameters()","params()","params()","params()","params()","params()","params=()","params_ok?()","parent()","parent()","parent()","parent=()","parent=()","parent=()","parent?()","parent?()","parent_file_name()","parent_name()","parent_name()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse!()","parse!()","parse!()","parse_args()","parse_config()","parse_ctype()","parse_dot_doc_file()","parse_file()","parse_file()","parse_file()","parse_files()","parse_files_matching()","parse_form_data()","parse_header()","parse_helper()","parse_int()","parse_line()","parse_openssl()","parse_printf_format()","parse_query()","parse_qvalues()","parse_range_header()","parse_rfc2253()","parse_set_cookie()","parse_set_cookies()","parse_signature()","parse_source()","parse_source()","parse_stream()","parse_stream()","parse_struct_signature()","parse_time()","parser()","parser()","parser=()","partition()","partition()","pass()","passwd()","password()","password=()","password_field()","patch()","patch_level_options()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path()","path=()","path?()","path_to?()","pathconf()","paths()","paths=()","pattern()","pattern()","pause()","pbkdf2_hmac()","pbkdf2_hmac()","pbkdf2_hmac_sha1()","peek()","peek()","peek()","peek()","peek_result()","peek_values()","peep()","peer_cert()","peer_cert()","peer_cert_chain()","peeraddr()","peeraddr()","peeraddr()","peg_parse()","pending()","pending_interrupt?()","pending_interrupt?()","percent_doc()","perform_git_push()","permanent_link=()","permanent_link?()","permutation()","permute()","permute!()","permute!()","pfamily()","phase()","phase()","phase()","pid()","pid()","pid()","pid()","pipe()","pipe?()","pipe?()","pipe?()","pipe?()","pipeline()","pipeline()","pipeline_r()","pipeline_rw()","pipeline_start()","pipeline_w()","pkcs5_keyivgen()","pkg_config()","platform()","platform()","platform_sort_key()","platform_specificity_match()","platform_string()","platform_version_match()","platforms()","platforms()","platforms=()","platforms_match?()","plugin()","plugin()","plugin_path()","plural_forms()","point()","point=()","point_conversion_form()","point_conversion_form=()","pointer()","pointer=()","polar()","polar()","polar()","pop()","pop()","pop()","pop()","pop()","pop!()","pop_inspect_key()","pop_possibility_state()","pop_token()","pop_workspace()","popd()","popdir()","popen()","popen2()","popen2e()","popen3()","popup_menu()","port()","port()","port=()","pos()","pos()","pos()","pos()","pos()","pos()","pos()","pos=()","pos=()","pos=()","pos=()","pos=()","position()","position()","position()","position()","position()","position()","positive?()","positive?()","positive?()","possibilities()","possibility()","post()","post()","post2()","post_build()","post_connection_check()","post_form()","post_install()","post_install()","post_install()","post_install_message()","post_match()","post_match()","post_reset()","post_uninstall()","pow()","power()","pp()","pp()","pp()","pp()","pp()","pp_hash()","pp_object()","ppid()","ppx()","ppx()","pre_input_hook()","pre_input_hook=()","pre_install()","pre_match()","pre_match()","pre_reset()","pre_uninstall()","pread()","precs()","pred()","predecessors()","predicate()","predicate()","predicate()","predicate_to_string()","prefix()","prefix()","prefix()","prefix()","prefix=()","prefixes()","prefixes()","prepare_message()","prepend()","prepend()","prepend()","prepend()","prepend_file()","prepend_to_file()","pressed?()","pretty()","pretty_dependency()","pretty_generate()","pretty_inspect()","pretty_name()","pretty_name()","pretty_new_name()","pretty_old_name()","pretty_print()","pretty_print()","pretty_print()","pretty_print()","pretty_print_children()","pretty_values_for()","prev_day()","prev_float()","prev_month()","prev_year()","previous=()","previous_element()","previous_period_end()","previous_sibling=()","previous_sibling_node()","primary()","prime?()","prime?()","prime?()","prime_division()","prime_division()","prime_fasttest?()","primitive_convert()","primitive_errinfo()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print()","print_in_columns()","print_major_deprecations!()","print_mem_leaks()","print_options()","print_post_install_message()","print_profile()","print_table()","print_usage()","print_wrapped()","printable_commands()","printable_commands()","printable_tasks()","printable_tasks()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printf()","printn()","printn()","priority()","priority=()","pristine()","private?()","private?()","private?()","private?()","private?()","private_call?()","private_class_method()","private_constant()","private_decrypt()","private_encrypt()","private_instance_methods()","private_key()","private_key=()","private_key=()","private_key?()","private_method?()","private_method?()","private_method_defined?()","private_methods()","proc()","process()","process()","process()","process()","processinginstruction()","processing_instruction()","processing_instruction()","product()","progid()","progids()","program_name()","progress()","progress_rate()","prompt_mode=()","prompting?()","proper_subset?()","proper_superset?()","propfind()","proppatch()","protected_instance_methods()","protected_method_defined?()","protected_methods()","protected_methods()","protocol()","provide()","proxy=()","proxy?()","proxy_address()","proxy_basic_auth()","proxy_bypass?()","proxy_class?()","proxy_from_env()","proxy_from_env?()","proxy_pass()","proxy_port()","proxy_user()","proxyaddr()","proxyport()","prune()","prune_cache()","pseudo_bytes()","ptr()","pubdate()","pubdate()","pubdate=()","pubdate=()","public()","public?()","public?()","public?()","public?()","public_class_method()","public_command()","public_constant()","public_decrypt()","public_encrypt()","public_instance_method()","public_instance_methods()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key()","public_key=()","public_key=()","public_key=()","public_key=()","public_key?()","public_method()","public_method_defined?()","public_methods()","public_methods()","public_send()","public_task()","pull()","pull()","purgeable?()","purpose=()","purpose=()","push()","push()","push()","push()","push()","push()","push()","push()","push_inspect_key()","push_workspace()","pushd()","pushdir()","put()","putback()","putbinaryfile()","putc()","putc()","putc()","putc()","putc()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puts()","puttextfile()","pwd()","pwd()","pwd()","pwd()","pwd()","pwd()","pwrite()","query()","query=()","quiet()","quiet=()","quiet?()","quiet?()","quit()","quit()","quo()","quo()","quo()","quo()","quo()","quote()","quote()","quote_char()","quote_character()","quoting_detection_proc()","quoting_detection_proc=()","racc_accept()","racc_e_pop()","racc_next_state()","racc_print_stacks()","racc_print_states()","racc_read_token()","racc_reduce()","racc_shift()","racc_token2str()","radio_button()","radio_group()","raise()","raise()","raise()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raise_for_undefined_entity?()","raised_exception()","rake_classes()","rake_namespace()","rand()","rand()","rand()","rand()","random_add()","random_bytes()","random_bytes()","random_iv()","random_key()","random_number()","random_string()","rassoc()","rassoc()","rassoc()","rationalize()","rationalize()","rationalize()","rationalize()","rationalize()","raw()","raw()","raw!()","raw_cookie()","raw_cookie2()","raw_data()","raw_require_paths()","rbx?()","rcptto()","rcptto_list()","rdev()","rdev_major()","rdev_minor()","rdoc_installed?()","rdoc_task_description()","rdoc_task_description()","re_exchange()","re_exchange()","re_exchangeable?()","re_exchangeable?()","reachable_objects_from()","reachable_objects_from_root()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read()","read_all()","read_all()","read_binary()","read_body()","read_file()","read_file()","read_nonblock()","read_nonblock()","read_nonblock()","read_nonblock()","read_smime()","read_timeout=()","read_timeout=()","read_timeout=()","read_timeout=()","readable?()","readable?()","readable?()","readable?()","readable?()","readable_after_eof?()","readable_after_eof?()","readable_after_eof?()","readable_real?()","readable_real?()","readable_real?()","readable_real?()","readagain_bytes()","readbyte()","readbyte()","readbyte()","readbyte()","readchar()","readchar()","readchar()","readchar()","readchar()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readline()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlines()","readlink()","readlink()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","readpartial()","ready()","ready?()","ready_to_enqueue?()","real()","real()","real?()","real?()","realdirpath()","realdirpath()","realloc()","realpath()","realpath()","realtime()","reason()","reason()","reason_phrase()","reason_phrase()","receive()","receiver()","receiver()","receiver()","receiver()","recipients()","reconnect()","reconnect_ssl()","record_entity_expansion()","record_location()","record_location()","recover()","rect()","rect()","rect()","rectangular()","rectangular()","rectangular()","recurse_proc()","recursive_predecessors()","recursive_successors()","recv()","recv_io()","recv_nonblock()","recvfrom()","recvfrom()","recvfrom()","recvfrom_nonblock()","recvfrom_nonblock()","recvmsg()","recvmsg_nonblock()","redirect?()","redisplay()","reduce()","ref()","reference()","reformatted_help_args()","refresh()","refresh_line()","regexp()","regexp()","regexp()","regist()","regist_server()","register()","register()","register()","register()","register_default_spec()","register_plugin()","register_plugin()","register_uri()","registry=()","rehash()","rehash()","rehash()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","reject!()","relative?()","relative?()","relative_path_from()","relative_to_original_destination_root()","release()","release?()","relevant_sources_for_vertex()","reload()","reload()","reload()","reload()","remainder()","remainder()","remainder()","remote!()","remote!()","remote!()","remote!()","remote_address()","remote_ip()","remote_uri()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove()","remove_argument()","remove_class_option()","remove_class_variable()","remove_command()","remove_dir()","remove_dir()","remove_dir()","remove_entry()","remove_entry()","remove_entry_secure()","remove_entry_secure()","remove_file()","remove_file()","remove_file()","remove_from_documentation?()","remove_frozen_string_literal()","remove_handler()","remove_instance_variable()","remove_invisible()","remove_invocation()","remove_magic_comment()","remove_method()","remove_modeline()","remove_nodoc()","remove_nodoc_children()","remove_platform()","remove_private()","remove_response_handler()","remove_server()","remove_siginfo_handler()","remove_stress_to_class()","remove_task()","remove_unparseable()","remove_unresolved_default_spec()","removed_specs()","renamable?()","rename()","rename()","rename()","rename()","renew()","renew()","reopen()","reopen()","reopen()","reopen()","reopen()","reorganize()","repeated_combination()","repeated_permutation()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace()","replace_child()","replace_sources!()","replace_with()","replacement()","replacement=()","replicate()","replies?()","reply()","reply_service()","report()","report()","report()","report_attributes()","report_class_module()","report_constants()","report_methods()","report_on_exception()","report_on_exception()","report_on_exception=()","report_on_exception=()","represent_map()","represent_object()","represent_scalar()","represent_seq()","request()","request()","request()","request_body_permitted?()","request_get()","request_head()","request_issue_report_for()","request_post()","request_uri()","requested_specs()","requested_specs()","require()","require()","require()","require()","require_path_or_force()","require_paths()","require_relative()","require_thor_actions()","required_options()","required_options()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_prefix()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","required_uri()","requirement()","requirement()","requirement()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirement_satisfied_by?()","requirements()","requirements()","requires()","requires_sudo?()","rerdoc_task_description()","rerdoc_task_description()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset()","reset!()","reset!()","reset_paths!()","reset_rubygems!()","resolve()","resolve()","resolve()","resolve()","resolve()","resolve_aliases()","resolve_remotely!()","resolve_with_cache!()","resources()","resources()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to?()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","response_body_permitted?()","responses()","rest()","rest()","rest?()","rest_size()","restore()","restore()","restore()","restore()","restore()","restore()","restore()","restsize()","result()","result()","result()","result()","result_with_hash()","resume()","resume()","retrbinary()","retrlines()","return_headers?()","return_headers?()","return_type()","return_type_detail()","return_value()","return_vtype()","retval?()","reverse()","reverse()","reverse()","reverse!()","reverse!()","reverse_each()","reverse_each()","reverse_each()","reversed_requirement_tree_index()","revision()","revision()","revocation_reason()","revocation_time()","revoked()","revoked=()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind()","rewind_to()","rewind_to()","rfc1123_date()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc2822()","rfc3339()","rfc3339()","rfc3339()","rfc3339()","rfc822()","rfc822()","rfc822()","rfc822()","rfc822()","ri_installed?()","ri_paths()","rid()","rid()","rindex()","rindex()","rjust()","rm()","rm()","rm_f()","rm_f()","rm_r()","rm_r()","rm_rf()","rm_rf()","rm_rf()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmdir()","rmtree()","rmtree()","rmtree()","root()","root()","root()","root()","root()","root()","root()","root()","root()","root()","root()","root?()","root?()","root_node()","root_search()","root_vertex_named()","roots()","rotate()","rotate!()","round()","round()","round()","round()","round()","round()","round()","route_from()","route_to()","row_sep()","row_separator()","row_vector()","rows()","rpartition()","rset()","rshift!()","rss()","rstrip()","rstrip!()","ruby()","ruby()","ruby?()","ruby_api_version()","ruby_command()","ruby_scope()","ruby_version()","rubygem_push()","rubygems_primary_remotes()","rubygems_remotes()","rubygems_sources()","rubygems_version()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_config()","run_ruby_script()","running?()","safe_level()","safe_load()","safe_unlink()","safe_unlink()","sample()","sanitize_path()","satisfies?()","saturday?()","saturday?()","save()","save_cache()","save_class()","save_exception_mode()","save_history()","save_history=()","save_limit()","save_method()","save_page()","save_plugins()","save_rounding_mode()","say()","say()","say_status()","scalar()","scalar()","scalar()","scalar()","scalar()","scalar=()","scalar?()","scalar?()","scan()","scan()","scan()","scan()","scan()","scan()","scan_all()","scan_full()","scan_until()","scanf()","scanf()","scanf()","scheme=()","scheme_list()","scope()","scope=()","scrolling_list()","scrub()","scrub!()","scrypt()","search()","search()","search()","search()","search_all()","search_const()","search_convpath()","search_for()","search_for()","search_for()","search_full()","search_record()","search_record()","search_record()","search_servlet()","sec()","sec()","sec_fraction()","second()","second=()","second=()","second_fraction()","section()","section_contents()","sections()","sections()","sections_in_lockfile()","sections_to_ignore()","secure=()","security_level()","security_level=()","see()","seed()","seed()","seed()","seed=()","seek()","seek()","seek()","seek()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select()","select!()","select!()","select!()","select!()","select_best_platform_match()","select_spec()","self()","send()","send()","send()","send()","send_io()","send_mail()","send_message()","send_request()","sendcmd()","sender()","sendmail()","sendmsg()","sendmsg_nonblock()","separator()","seplist()","seq=()","sequence?()","sequence?()","serial()","serial()","serial()","serial()","serial()","serial=()","serial=()","server_error?()","server_name()","service()","service()","service()","service()","session()","session=()","session_add()","session_cache_mode()","session_cache_mode=()","session_cache_size()","session_cache_size=()","session_cache_stats()","session_remove()","session_reused?()","set()","set()","set_attributes()","set_backtrace()","set_backtrace()","set_bit!()","set_bundle_environment()","set_close_on_exec()","set_color()","set_color()","set_command_option()","set_command_option_if_given()","set_component()","set_constant_visibility_for()","set_crt_params()","set_ctypes()","set_ctypes()","set_current_section()","set_debug_output()","set_debug_output()","set_debug_output()","set_default()","set_default_paths()","set_dictionary()","set_dictionary()","set_dn()","set_element()","set_encoding()","set_encoding()","set_encoding()","set_env()","set_eoutvar()","set_eoutvar()","set_eoutvar()","set_eoutvar()","set_error()","set_error()","set_extensions()","set_factors()","set_filter()","set_generator()","set_get_line_procs()","set_global()","set_headers()","set_host()","set_host()","set_key()","set_key()","set_key()","set_last_thread()","set_last_value()","set_local()","set_next_element()","set_non_blocking()","set_opaque()","set_option()","set_options()","set_params()","set_passwd()","set_passwd()","set_passwd()","set_password()","set_password()","set_path()","set_path()","set_payload()","set_payload()","set_port()","set_port()","set_pqg()","set_pqg()","set_redirect()","set_scheme()","set_scope()","set_screen_size()","set_size()","set_socket()","set_to()","set_to_infinity!()","set_trace()","set_trace_func()","set_trace_func()","set_typecode()","set_user()","set_user()","set_userinfo()","set_userinfo()","set_visibility_for()","setacl()","setbyte()","setegid()","seteuid()","setgid()","setgid?()","setgid?()","setgid?()","setgid?()","setgrent()","setpgid()","setpgrp()","setpriority()","setproctitle()","setproperty()","setpwent()","setquota()","setregid()","setresgid()","setresuid()","setreuid()","setrgid()","setrlimit()","setruid()","setsid()","setsockopt()","setsockopt()","setter()","settings()","setuid()","setuid?()","setuid?()","setuid?()","setuid?()","setup()","setup()","setup()","setup()","setup_certificate()","setup_generator()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker()","setup_maker_elements()","setup_output_dir()","setup_params()","setup_ssl_context()","sev_threshold=()","sexp()","sexp_raw()","sfork()","sh()","sh_with_code()","shallow_eql?()","shell()","shell()","shellescape()","shellescape()","shelljoin()","shelljoin()","shellsplit()","shellsplit()","shellwords()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","shift()","short_name()","should_include?()","show()","show_documentation()","show_version()","shuffle()","shuffle!()","shutdown()","shutdown()","shutdown()","shutdown()","shutdown()","shutdown_in_all_threads()","sid_available?()","sid_available?()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign()","sign_pss()","signal()","signal()","signal()","signal_handle()","signal_status()","signaled?()","signame()","signature()","signature_algorithm()","signature_algorithm()","signature_algorithm()","signed?()","signed_time()","signers()","signo()","silence()","silence()","similar_word_list()","similar_words()","sin()","sin()","sin()","single?()","single?()","single_delegate()","single_version_string()","singleline_format()","singleline_pp()","singleton_class()","singleton_class?()","singleton_method()","singleton_method_added()","singleton_methods()","singular?()","sinh()","sinh()","site()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size()","size=()","size=()","size?()","size?()","size?()","size?()","size_opt_params()","size_params()","sizeof()","skip()","skip()","skip()","skip=()","skip_blanks?()","skip_blanks?()","skip_during()","skip_lines()","skip_lines()","skip_until()","sleep()","sleep()","sleep()","slice()","slice()","slice()","slice()","slice()","slice()","slice!()","slice!()","slice_after()","slice_after()","slice_before()","slice_before()","slice_body()","slice_when()","slice_when()","sn()","snake_case()","snippet()","sockaddr_in()","sockaddr_un()","socket?()","socket?()","socket?()","socket?()","socketpair()","socketpair()","socktype()","solve()","sort()","sort()","sort()","sort!()","sort!()","sort_by()","sort_by!()","sort_dependencies()","sort_dependencies()","sort_dependencies()","sort_obj()","sort_platforms()","sort_sections()","sort_specs()","sort_specs()","sort_versions()","source()","source()","source()","source()","source()","source()","source()","source()","source=()","source?()","source?()","source_encoding()","source_encoding()","source_encoding()","source_encoding_name()","source_encoding_name()","source_file()","source_from_lock()","source_location()","source_location()","source_location()","source_location()","source_ole_types()","source_paths()","source_paths()","source_paths_for_search()","source_plugin()","source_root()","source_root()","sources()","sources=()","space()","space=()","space_before()","space_before=()","spawn()","spawn()","spawn()","spec()","spec_cache_dir()","spec_git_paths()","spec_names()","special_prefixes()","special_prefixes=()","specific?()","specific_dependency()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs()","specs_for()","specs_for_names()","specs_path()","specs_with_retry()","split()","split()","split()","split()","split()","split()","split()","split_header_value()","sprintf()","sqr()","sqrt()","sqrt()","sqrt()","sqrt()","sqrt()","squeeze()","squeeze!()","srand()","srand()","src_type()","ssl()","ssl?()","ssl?()","ssl_params()","ssl_servername_callback()","ssl_servername_callback()","ssl_version()","ssl_version=()","ssl_version=()","stand_alone?()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","start()","startelement()","start_collecting_tokens()","start_doc()","start_document()","start_document()","start_document()","start_document()","start_element()","start_element?()","start_export()","start_import()","start_job()","start_mapping()","start_mapping()","start_prefix_mapping()","start_profile()","start_sequence()","start_sequence()","start_service()","start_stream()","start_stream()","start_stream()","start_with?()","started?()","started?()","started?()","starts_with()","starttls()","starttls()","starttls?()","starttls_always?()","starttls_auto?()","stat()","stat()","stat()","stat()","stat()","stat()","stat()","state()","state()","state()","status()","status()","status()","status()","status()","status()","status()","status=()","status?()","status_code()","status_code()","status_line()","status_string()","status_type_char()","stderr()","stdout()","stdout()","stdout=()","step()","step()","step()","step()","sticky?()","sticky?()","sticky?()","sticky?()","stop()","stop()","stop()","stop?()","stop_doc()","stop_on_unknown_option!()","stop_profile()","stop_service()","stop_service()","stop_service()","stopped?()","stopsig()","storbinary()","store()","store()","store()","store()","store()","store()","store()","store=()","store=()","store=()","store=()","store=()","store=()","store=()","store_for()","storlines()","stream=()","stream?()","stream?()","stream_end?()","streaming?()","stress()","stress=()","strftime()","strftime()","strftime()","strict_args_position!()","strict_decode64()","strict_encode64()","strike()","string()","string()","string()","string()","string=()","string=()","string_length()","string_value()","strip()","strip!()","strip_hashes()","strip_newlines()","strip_stars()","strong()","strongly_connected_components()","strongly_connected_components()","strptime()","strptime()","strptime()","struct()","su()","sub()","sub()","sub()","sub()","sub!()","sub_dependencies_to_avoid()","sub_ext()","subclass_files()","subclasses()","subcommand()","subcommand_classes()","subcommand_help()","subcommands()","subdomain_of?()","subject()","subject()","subject=()","subject=()","subject_certificate=()","subject_request=()","submit()","subscribe()","subsec()","subset?()","substring()","substring_after()","substring_before()","subtask()","subtask_help()","subtasks()","subtract()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ()","succ!()","success?()","success?()","success?()","success?()","successors()","sudo()","suffix_pattern()","suffixes()","sum()","sum()","sum()","sum()","summarize()","summarize()","summarize()","summary()","sunday?()","sunday?()","super_each()","super_method()","super_method()","superclass()","superclass()","superclass()","superclass=()","superclass_method()","superset?()","supported?()","suppress()","suppressed?()","suspend()","suspend_context()","suspend_input_method()","suspend_name()","suspend_workspace()","swapcase()","swapcase()","swapcase!()","switch()","switch()","switch()","switch_name()","sym()","sym()","sym()","symbolize()","symlink()","symlink()","symlink()","symlink?()","symlink?()","symlink?()","symlink?()","sync()","sync()","sync()","sync()","sync()","sync=()","sync=()","sync=()","sync_exclusive?()","sync_exclusive?()","sync_extend()","sync_extend()","sync_inspect()","sync_inspect()","sync_keys!()","sync_lock()","sync_lock()","sync_locked?()","sync_locked?()","sync_point?()","sync_shared?()","sync_shared?()","sync_synchronize()","sync_synchronize()","sync_try_lock()","sync_try_lock()","sync_unlock()","sync_unlock()","synchronize()","synchronize()","syncmode=()","sysaccept()","sysaccept()","sysaccept()","syscall()","sysclose()","sysconf()","sysconfdir()","syslog()","syslog=()","sysopen()","sysopen()","sysread()","sysread()","sysread()","sysread()","sysseek()","syssign()","system()","system()","system()","system()","system()","system_bindir()","system_path=()","systmpdir()","sysverify()","syswrite()","syswrite()","table()","tag()","tag()","tag()","tag_end()","tag_end()","tag_name()","tag_name()","tag_start()","tag_start()","tag_version()","taint()","taint()","taint()","tainted?()","take()","take()","take()","take()","take()","take_while()","take_while()","take_while()","tan()","tan()","tanh()","tanh()","tap()","task()","task_help()","tasks()","tcp()","tcp()","tcp_server_loop()","tcp_server_sockets()","tee()","tell()","tell()","tell()","tell()","tell()","tell()","template()","template_dir_for()","temporary()","terminal_width()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate()","terminate_job()","terminated?()","termsig()","test()","test()","test_all()","test_civil()","test_commercial()","test_nth_kday()","test_ordinal()","test_unit_conv()","test_weeknum()","text()","text()","text()","text()","text()","text()","text=()","text=()","text=()","text?()","text?()","text_field()","textarea()","textinput()","texts()","then()","this_update()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","thread()","thread()","thread()","thread_list()","thread_list_all()","thread_variable?()","thread_variable_get()","thread_variable_set()","thread_variables()","throw()","thursday?()","thursday?()","time()","time()","time()","time=()","time=()","time=()","time=()","timeout()","timeout()","timeout()","timeout=()","timeouts=()","times()","times()","timestamp()","title()","title=()","tls?()","tmp()","tmp()","tmp_home_path()","tmp_key()","tmpdir()","to=()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_ary()","to_atom()","to_binary()","to_bn()","to_bn()","to_bn()","to_c()","to_c()","to_c()","to_c()","to_class_name()","to_csv()","to_csv()","to_d()","to_d()","to_d()","to_d()","to_d()","to_date()","to_date()","to_date()","to_datetime()","to_datetime()","to_datetime()","to_definition()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_der()","to_digits()","to_dot()","to_element_methods()","to_enum()","to_enum()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_f()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed()","to_feed_for_categories()","to_gem_version_with_patchlevel()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_h()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_html()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_i()","to_id()","to_id()","to_id()","to_id()","to_int()","to_int()","to_int()","to_int()","to_int()","to_int()","to_io()","to_io()","to_io()","to_io()","to_io()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw_object()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_mailtext()","to_name()","to_name()","to_obj()","to_obj()","to_obj()","to_obj()","to_octet_string()","to_path()","to_path()","to_path()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_pem()","to_proc()","to_proc()","to_proc()","to_proc()","to_ptr()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_r()","to_range()","to_rfc822text()","to_rss()","to_ruby()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_set()","to_set()","to_sockaddr()","to_socket_address()","to_specs()","to_str()","to_str()","to_string()","to_string()","to_sym()","to_sym()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_text()","to_time()","to_time()","to_time()","to_tty?()","to_utf8()","to_value()","to_write_io()","to_xml()","to_yaml()","to_yaml()","to_yaml()","today()","toeuc()","toeuc()","tojis()","tojis()","token_stream()","token_to_str()","tokenize()","tokenize()","tokenize()","tokens_to_s()","tolocale()","tolocale()","tomdoc?()","top()","top()","top()","top()","top()","top_level()","top_level()","top_level_test()","toplevel_load()","tosjis()","tosjis()","total_in()","total_out()","total_time()","touch()","touch()","toutf16()","toutf16()","toutf32()","toutf32()","toutf8()","toutf8()","tr()","tr!()","tr_s()","tr_s!()","trace()","trace()","trace()","trace()","trace_func()","trace_object_allocations()","trace_object_allocations_clear()","trace_object_allocations_debug_start()","trace_object_allocations_start()","trace_object_allocations_stop()","trace_points()","trace_var()","transact()","transaction()","transfer()","transform()","transform_keys()","transform_keys!()","transform_values()","transform_values!()","translate()","transpose()","trap()","trap()","trap()","traverse()","tree()","true()","truffleruby?()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","truncate()","trust()","trust()","trust=()","trust=()","try_activate()","try_const()","try_convert()","try_convert()","try_convert()","try_convert()","try_convert()","try_lock()","try_mon_enter()","try_type()","tsort()","tsort()","tsort()","tsort_each()","tsort_each()","tsort_each_child()","tsort_each_child()","tsort_each_node()","tsort_each_node()","tty?()","tty?()","tuesday?()","tuesday?()","tv_nsec()","tv_sec()","tv_usec()","type()","type()","type()","type()","type()","type()","type()","type=()","typealias()","typecode=()","typekind()","typelibs()","typelibs()","typename()","u()","u()","ucmp()","udp()","udp_server_loop()","udp_server_loop_on()","udp_server_recv()","udp_server_sockets()","ui()","ui()","ui=()","uid()","uid()","uid=()","uid_copy()","uid_fetch()","uid_move()","uid_search()","uid_sort()","uid_store()","uid_thread()","uidl()","umask()","umount()","unadvise()","unalias_command()","unalias_command()","uname()","unbind()","uncomment_lines()","unconverted_fields?()","unconverted_fields?()","undef_method()","undef_system_command()","undef_system_command()","undefine_finalizer()","undoc_params()","undump()","unescape()","unescape()","unescape()","unescape()","unescape()","unescapeelement()","unescapehtml()","unescape_element()","unescape_form()","unescape_html()","ungetbyte()","ungetbyte()","ungetbyte()","ungetc()","ungetc()","ungetc()","ungetc()","unicode_normalize()","unicode_normalize!()","unicode_normalized?()","union()","union()","union()","union()","uniq()","uniq()","uniq()","uniq!()","unique_classes()","unique_classes_and_modules()","unique_id()","unique_modules()","unit()","unix()","unix()","unix?()","unix?()","unix_path()","unix_rights()","unix_rights()","unix_server_loop()","unix_server_socket()","unknown()","unknown()","unknown_sections_in_lockfile()","unlink()","unlink()","unlink()","unlink()","unlink()","unlock()","unlock()","unlock!()","unlock!()","unlocking?()","unmarshalled_dep_gems()","unmet_dependency_names()","unmet_deps()","unmet_deps()","unmount()","unnormalize()","unnormalized()","unpack()","unpack()","unpack1()","unpack_sockaddr_in()","unpack_sockaddr_un()","unprinted_warnings()","unprinted_warnings()","unregist()","unscan()","unshift()","unshift()","unshift()","unshift()","unsorted_search()","unsubscribe()","untaint()","untaint()","untaint()","untrace_var()","untrust()","untrust()","untrusted?()","unused()","unused_unwind_options()","unwinding_to_primary_requirement?()","up()","up()","up()","up()","up()","upcase()","upcase()","upcase!()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update()","update_aliases()","update_and_parse_checksums!()","update_extends()","update_includes()","update_mirror()","update_output_dir()","update_parser_of_file()","updated()","updated()","updated()","updated=()","updated=()","updated=()","upgrade_to_class()","upper_bound()","upper_bound=()","upto()","upto()","upto()","uptodate?()","uptodate?()","urandom()","uri()","uri()","uri=()","uri_hash()","uri_option()","uri_registered?()","url_encode()","urlsafe_base64()","urlsafe_decode64()","urlsafe_encode64()","use()","use_api()","use_gemdeps()","use_headers?()","use_loader()","use_loader=()","use_loader?()","use_markup()","use_paths()","use_readline=()","use_ssl=()","use_ssl?()","use_ssl?()","use_ssl?()","use_system_gems?()","use_tracer=()","usec()","used_modules()","user()","user=()","user_agent()","user_bundle_path()","user_cache()","user_home()","user_home()","user_home()","userinfo()","userinfo=()","utc()","utc()","utc?()","utc_offset()","utime()","utime()","uuid()","v()","v_inv()","valid?()","valid?()","valid_civil?()","valid_commercial?()","valid_date?()","valid_encoding?()","valid_for?()","valid_jd?()","valid_mod_sequence_value?()","valid_number?()","valid_nz_number?()","valid_ordinal?()","validate()","validate()","validate!()","validate!()","validate!()","validate!()","validate_duplicate_links()","validate_for_stream()","validate_one_tag_name()","validate_platforms!()","validate_plugin!()","validate_ruby!()","validate_runtime!()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value()","value=()","value=()","value=()","value=()","value=()","value=()","value?()","value?()","value?()","value?()","value?()","values()","values()","values()","values()","values()","values()","values()","values()","values()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","values_at()","variable_is_set?()","variable_kind()","variables()","variables()","variables=()","variables=()","varkind()","vartype()","ver()","verbose()","verbose()","verbose=()","verbose=()","verbose?()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify()","verify_callback=()","verify_callback=()","verify_certificate_identity()","verify_internal_consistency()","verify_mode=()","verify_pss()","verify_result()","verify_transient_heap_internal_consistency()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version()","version=()","version=()","version=()","version_1_2()","version_1_2?()","version_message()","version_message()","version_message()","version_tag()","versions()","versions()","versions()","versions_path()","versions_string()","vertex_named()","vhid()","vi_editing_mode()","vi_editing_mode?()","virtual_host()","visibility=()","visible?()","visible?()","visible?()","visible?()","visit_array()","visit_basicobject()","visit_bigdecimal()","visit_class()","visit_complex()","visit_date()","visit_datetime()","visit_delegator()","visit_encoding()","visit_enumerator()","visit_exception()","visit_falseclass()","visit_float()","visit_hash()","visit_integer()","visit_module()","visit_nameerror()","visit_nilclass()","visit_object()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_alias()","visit_psych_nodes_document()","visit_psych_nodes_document()","visit_psych_nodes_mapping()","visit_psych_nodes_mapping()","visit_psych_nodes_scalar()","visit_psych_nodes_scalar()","visit_psych_nodes_sequence()","visit_psych_nodes_sequence()","visit_psych_nodes_stream()","visit_psych_nodes_stream()","visit_psych_omap()","visit_psych_set()","visit_range()","visit_rational()","visit_regexp()","visit_string()","visit_struct()","visit_symbol()","visit_time()","visit_trueclass()","viz()","viz()","voidcmd()","vstack()","w3cdtf()","w3cdtf()","wait()","wait()","wait()","wait()","wait()","wait2()","wait?()","wait?()","wait_all_jobs_execution()","wait_readable()","wait_to_finish_all_process_controllers()","wait_until()","wait_while()","wait_writable()","waitall()","waiting()","waiting_job?()","waiting_jobs()","waiting_jobs_exist?()","waitpid()","waitpid2()","wakeup()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn()","warn?()","warn?()","warn_for_outdated_bundler_version()","warn_old_tls_version_rubygems_connection()","wday()","wday()","weakref_alive?()","wednesday?()","wednesday?()","weeknum()","weeknum()","what_required()","which()","whitespace()","win32_last_error()","win32_last_error=()","win_platform?()","winsize()","winsize=()","with()","with_clean_env()","with_clean_git_env()","with_config()","with_friendly_errors()","with_index()","with_index()","with_object()","with_object()","with_original_env()","with_padding()","without_groups_message()","workspaces()","world_readable?()","world_readable?()","world_readable?()","world_readable?()","world_writable?()","world_writable?()","world_writable?()","world_writable?()","wrap()","wrap()","wrap()","writable?()","writable?()","writable?()","writable?()","writable?()","writable_real?()","writable_real?()","writable_real?()","writable_real?()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write()","write_binary()","write_cdata()","write_cdata()","write_comment()","write_comment()","write_document()","write_document()","write_element()","write_element()","write_element()","write_headers?()","write_instruction()","write_nonblock()","write_nonblock()","write_nonblock()","write_options()","write_random_file()","write_services()","write_smime()","write_text()","write_text()","write_text()","write_timeout=()","write_to_gemfile()","write_with_substitution()","x64_mingw?()","xhtml()","xhtml()","xhtml=()","xlist()","xml()","xml=()","xmldecl()","xml_content=()","xml_content=()","xml_decl()","xml_getter()","xml_getter()","xml_setter()","xml_setter()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl()","xmldecl?()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmlschema()","xmp()","xpath()","xpath()","xpath()","yaml()","yaml_tag()","yday()","yday()","year()","year()","yes?()","yes?()","yes?()","yield()","yield()","yield_self()","yyaccept()","yydebug()","yydebug=()","yyerrok()","yyerror()","yyparse()","zero()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zero?()","zip()","zip()","zip()","zip?()","zlib_version()","zone()","zone()","zone_offset()","|()","|()","|()","|()","|()","|()","|()","|()","|()","~()","~()","~()","contributing","copying","copying.ja","legal","news","readme.ja","readme","news-1.8.7","news-1.9.1","news-1.9.2","news-1.9.3","news-2.0.0","news-2.1.0","news-2.2.0","news-2.3.0","news-2.4.0","news-2.5.0","contributing","contributors","dtrace_probes","extension.ja","extension","globals","keywords","maintainers","marshal","regexp","security","signals","standard_library","syntax","bundler.gemspec","csv.gemspec","forwardable.gemspec","irb.gemspec","matrix.gemspec","rexml.gemspec","rss.gemspec","shell.gemspec","readme.win32"],"longSearchIndex":["acl","acl::aclentry","acl::acllist","argf","abbrev","addrinfo","argumenterror","array","base64","basicobject","basicsocket","benchmark","benchmark::tms","bigdecimal","bigmath","binding","bundler","bundler::apiresponsemismatcherror","bundler::buildmetadata","bundler::bundlererror","bundler::cli","bundler::cli::add","bundler::cli::binstubs","bundler::cli::cache","bundler::cli::check","bundler::cli::clean","bundler::cli::common","bundler::cli::config","bundler::cli::console","bundler::cli::doctor","bundler::cli::exec","bundler::cli::gem","bundler::cli::info","bundler::cli::init","bundler::cli::inject","bundler::cli::install","bundler::cli::issue","bundler::cli::list","bundler::cli::lock","bundler::cli::open","bundler::cli::outdated","bundler::cli::package","bundler::cli::platform","bundler::cli::plugin","bundler::cli::pristine","bundler::cli::remove","bundler::cli::show","bundler::cli::update","bundler::cli::viz","bundler::compactindexclient","bundler::compactindexclient::cache","bundler::compactindexclient::error","bundler::compactindexclient::updater","bundler::compactindexclient::updater::mismatchedchecksumerror","bundler::currentruby","bundler::cyclicdependencyerror","bundler::definition","bundler::depproxy","bundler::dependency","bundler::deployment","bundler::deprecate","bundler::deprecatederror","bundler::dsl","bundler::dsl::dslerror","bundler::endpointspecification","bundler::env","bundler::environmentpreserver","bundler::featureflag","bundler::fetcher","bundler::fetcher::authenticationrequirederror","bundler::fetcher::badauthenticationerror","bundler::fetcher::base","bundler::fetcher::certificatefailureerror","bundler::fetcher::compactindex","bundler::fetcher::dependency","bundler::fetcher::downloader","bundler::fetcher::fallbackerror","bundler::fetcher::index","bundler::fetcher::networkdownerror","bundler::fetcher::sslerror","bundler::fileutils","bundler::fileutils::dryrun","bundler::fileutils::lowmethods","bundler::fileutils::nowrite","bundler::fileutils::streamutils_","bundler::fileutils::verbose","bundler::friendlyerrors","bundler::gemhelper","bundler::gemhelper::rake","bundler::gemhelpers","bundler::gemhelpers::platformmatch","bundler::geminstaller","bundler::gemnotfound","bundler::gemremotefetcher","bundler::gemrequireerror","bundler::gemversionpromoter","bundler::gemdeps","bundler::gemfileerror","bundler::gemfileevalerror","bundler::gemfilelocknotfound","bundler::gemfilenotfound","bundler::gemspecerror","bundler::genericsystemcallerror","bundler::giterror","bundler::graph","bundler::graph::graphvizclient","bundler::httperror","bundler::index","bundler::injector","bundler::installerror","bundler::installhookerror","bundler::installer","bundler::invalidoption","bundler::lazyspecification","bundler::lazyspecification::identifier","bundler::lockfileerror","bundler::lockfilegenerator","bundler::lockfileparser","bundler::marshalerror","bundler::matchplatform","bundler::mirrorsockets","bundler::molinillo","bundler::molinillo::circulardependencyerror","bundler::molinillo::compatibility","bundler::molinillo::delegates","bundler::molinillo::delegates::resolutionstate","bundler::molinillo::delegates::specificationprovider","bundler::molinillo::dependencygraph","bundler::molinillo::dependencygraph::action","bundler::molinillo::dependencygraph::addedgenocircular","bundler::molinillo::dependencygraph::deleteedge","bundler::molinillo::dependencygraph::detachvertexnamed","bundler::molinillo::dependencygraph::log","bundler::molinillo::dependencygraph::tag","bundler::molinillo::dependencygraph::vertex","bundler::molinillo::dependencystate","bundler::molinillo::nosuchdependencyerror","bundler::molinillo::possibilitystate","bundler::molinillo::resolutionstate","bundler::molinillo::resolver","bundler::molinillo::resolver::resolution","bundler::molinillo::resolver::resolution::conflict","bundler::molinillo::resolver::resolution::possibilityset","bundler::molinillo::resolver::resolution::unwinddetails","bundler::molinillo::resolvererror","bundler::molinillo::specificationprovider","bundler::molinillo::ui","bundler::molinillo::versionconflict","bundler::nospaceondeviceerror","bundler::operationnotsupportederror","bundler::parallelinstaller","bundler::parallelinstaller::specinstallation","bundler::patherror","bundler::permissionerror","bundler::persistent","bundler::persistent::net","bundler::persistent::net::http","bundler::persistent::net::http::persistent","bundler::persistent::net::http::persistent::error","bundler::persistent::net::http::persistent::sslreuse","bundler::persistenthttp","bundler::plugin","bundler::plugin::api","bundler::plugin::api::source","bundler::plugin::dsl","bundler::plugin::dsl::plugingemfileerror","bundler::plugin::events","bundler::plugin::index","bundler::plugin::index::commandconflict","bundler::plugin::index::sourceconflict","bundler::plugin::installer","bundler::plugin::installer::git","bundler::plugin::malformattedplugin","bundler::plugin::sourcelist","bundler::plugin::undefinedcommanderror","bundler::plugin::unknownsourceerror","bundler::pluginerror","bundler::processlock","bundler::productionerror","bundler::remotespecification","bundler::resolver","bundler::resolver::specgroup","bundler::retry","bundler::rubydsl","bundler::rubyversion","bundler::rubyversionmismatch","bundler::runtime","bundler::securityerror","bundler::settings","bundler::settings::mirror","bundler::settings::mirrorconfig","bundler::settings::mirrors","bundler::settings::tcpsocketprobe","bundler::settings::validator","bundler::settings::validator::rule","bundler::sharedhelpers","bundler::similaritydetector","bundler::socketaddress","bundler::source","bundler::source::gemspec","bundler::source::git","bundler::source::git::gitcommanderror","bundler::source::git::gitnotallowederror","bundler::source::git::gitnotinstallederror","bundler::source::git::gitproxy","bundler::source::git::missinggitrevisionerror","bundler::source::metadata","bundler::source::path","bundler::source::path::installer","bundler::sourcelist","bundler::specset","bundler::standalone","bundler::stubspecification","bundler::sudonotpermittederror","bundler::temporaryresourceerror","bundler::thor","bundler::thor::actions","bundler::thor::actions::capturableerb","bundler::thor::actions::classmethods","bundler::thor::ambiguouscommanderror","bundler::thor::ambiguoustaskerror","bundler::thor::base","bundler::thor::base::classmethods","bundler::thor::command","bundler::thor::coreext","bundler::thor::coreext::orderedhash","bundler::thor::dynamiccommand","bundler::thor::dynamictask","bundler::thor::error","bundler::thor::group","bundler::thor::hiddencommand","bundler::thor::hiddentask","bundler::thor::invocation","bundler::thor::invocation::classmethods","bundler::thor::invocationerror","bundler::thor::lineeditor","bundler::thor::lineeditor::basic","bundler::thor::lineeditor::readline","bundler::thor::lineeditor::readline::pathcompletion","bundler::thor::malformattedargumenterror","bundler::thor::rakecompat","bundler::thor::rakecompat::rake","bundler::thor::requiredargumentmissingerror","bundler::thor::shell","bundler::thor::shell::basic","bundler::thor::shell::color","bundler::thor::shell::html","bundler::thor::task","bundler::thor::undefinedcommanderror","bundler::thor::undefinedtaskerror","bundler::thor::unknownargumenterror","bundler::thor::util","bundler::threadcreationerror","bundler::ui","bundler::ui::rgproxy","bundler::ui::shell","bundler::ui::silent","bundler::uricredentialsfilter","bundler::versionconflict","bundler::versionranges","bundler::versionranges::reqr","bundler::virtualprotocolerror","bundler::worker","bundler::worker::wrappedexception","bundler::yamlserializer","bundler::yamllibrarysyntaxerror","bundler::yamlsyntaxerror","cgi","cgi::cookie","cgi::html3","cgi::html4","cgi::html4fr","cgi::html4tr","cgi::html5","cgi::htmlextension","cgi::invalidencoding","cgi::queryextension","cgi::session","cgi::session::filestore","cgi::session::memorystore","cgi::session::nullstore","cgi::session::pstore","cgi::util","cmath","csv","csv::deletesuffix","csv::fieldsconverter","csv::malformedcsverror","csv::matchp","csv::parser","csv::parser::inputsscanner","csv::parser::invalidencoding","csv::parser::scanner","csv::parser::unoptimizedstringio","csv::row","csv::table","csv::writer","capistrano","class","closedqueueerror","comparable","complex","conditionvariable","continuation","coverage","dbm","dbmerror","debugger__","debugger__::thread","drb","drb::drbarray","drb::drbbadscheme","drb::drbbaduri","drb::drbconn","drb::drbconn::thread","drb::drbconnerror","drb::drberror","drb::drbidconv","drb::drbidconv","drb::drbmessage","drb::drbobject","drb::drbobject","drb::drbobservable","drb::drbprotocol","drb::drbremoteerror","drb::drbsslsocket","drb::drbsslsocket::sslconfig","drb::drbserver","drb::drbserver::invokemethod18mixin","drb::drbservernotfound","drb::drbtcpsocket","drb::drbunixsocket","drb::drbundumped","drb::drbundumped","drb::drbunknown","drb::drbunknownerror","drb::extserv","drb::extservmanager","drb::gw","drb::gwidconv","drb::thread","drb::timeridconv","drb::timeridconv::timerholder2","drb::timeridconv::timerholder2::invalidindexerror","data","date","datetime","delegator","digest","digest::base","digest::class","digest::instance","digest::md5","digest::rmd160","digest::sha1","dir","env","eoferror","erb","erb::defmethod","erb::util","exception_type","exception_type","exception_type","exception_type","encoding","encoding::compatibilityerror","encoding::converter","encoding::converternotfounderror","encoding::invalidbytesequenceerror","encoding::undefinedconversionerror","encodingerror","english","enumerable","enumerator","enumerator::arithmeticsequence","enumerator::chain","enumerator::generator","enumerator::lazy","enumerator::yielder","errno","errno::econnaborted","errno::econnreset","errno::eproto","etc","exception","exception2messagemapper","exception2messagemapper::e2mm","falseclass","fcntl","fiber","fibererror","fiddle","fiddle::basictypes","fiddle::cparser","fiddle::cstruct","fiddle::cstructbuilder","fiddle::cstructentity","fiddle::cunion","fiddle::cunionentity","fiddle::closure","fiddle::closure::blockcaller","fiddle::compositehandler","fiddle::dlerror","fiddle::function","fiddle::handle","fiddle::importer","fiddle::pointer","fiddle::win32types","file","file::constants","file::stat","filetest","fileutils","fileutils::dryrun","fileutils::lowmethods","fileutils::nowrite","fileutils::streamutils_","fileutils::streamutils_::rbconfig","fileutils::verbose","find","float","floatdomainerror","forwardable","frozenerror","gc","gc::profiler","gdbm","gdbmerror","gdbmfatalerror","gem","gem::dependency","getoptlong","getoptlong::ambiguousoption","getoptlong::error","getoptlong::invalidoption","getoptlong::missingargument","getoptlong::needlessargument","httpclientexception","httpgatewaytimeout","httpmovedtemporarily","httpmultiplechoice","httprequestentitytoolarge","httprequesttimeout","httprequesturitoolarge","httprequesturitoolong","httprequesturitoolong","httprequestedrangenotsatisfiable","hash","io","io::eagainwaitreadable","io::eagainwaitwritable","io::einprogresswaitreadable","io::einprogresswaitwritable","io::ewouldblockwaitreadable","io::ewouldblockwaitwritable","io::waitreadable","io::waitwritable","io::generic_readable","io::generic_writable","ioerror","ipaddr","ipaddr::addressfamilyerror","ipaddr::error","ipaddr::invalidaddresserror","ipaddr::invalidprefixerror","ipsocket","irb","irb::abort","irb::context","irb::contextextender","irb::extendcommand","irb::extendcommand::changeworkspace","irb::extendcommand::currentworkingworkspace","irb::extendcommand::foreground","irb::extendcommand::fork","irb::extendcommand::help","irb::extendcommand::irbcommand","irb::extendcommand::jobs","irb::extendcommand::kill","irb::extendcommand::load","irb::extendcommand::nop","irb::extendcommand::popworkspace","irb::extendcommand::pushworkspace","irb::extendcommand::require","irb::extendcommand::source","irb::extendcommand::workspaces","irb::extendcommandbundle","irb::fileinputmethod","irb::frame","irb::inputmethod","irb::inspector","irb::irb","irb::irbloader","irb::jobmanager","irb::loadabort","irb::locale","irb::methodextender","irb::notifier","irb::notifier::abstractnotifier","irb::notifier::compositenotifier","irb::notifier::levelednotifier","irb::notifier::nomsgnotifier","irb::outputmethod","irb::readlineinputmethod","irb::slex","irb::slex::node","irb::stdioinputmethod","irb::stdiooutputmethod","irb::workspace","indexerror","integer","interrupt","jruby","json","json::circulardatastructure","json::ext","json::ext::generator","json::ext::generator::generatormethods","json::ext::generator::generatormethods::array","json::ext::generator::generatormethods::bignum","json::ext::generator::generatormethods::falseclass","json::ext::generator::generatormethods::fixnum","json::ext::generator::generatormethods::float","json::ext::generator::generatormethods::hash","json::ext::generator::generatormethods::integer","json::ext::generator::generatormethods::nilclass","json::ext::generator::generatormethods::object","json::ext::generator::generatormethods::string","json::ext::generator::generatormethods::string::extend","json::ext::generator::generatormethods::trueclass","json::ext::generator::state","json::ext::parser","json::generatorerror","json::genericobject","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::unparsererror","jacobian","kconv","kernel","keyerror","lusolve","loaderror","localjumperror","logger","logger::formatter","logger::logdevice","logger::period","logger::severity","makemakefile","makemakefile::logging","makemakefile::rbconfig","makemakefile::string_or_failed_format","marshal","matchdata","math","math::domainerror","matrix","matrix::eigenvaluedecomposition","matrix::lupdecomposition","method","module","monitor","monitormixin","monitormixin::conditionvariable","monitormixin::conditionvariable::timeout","mutex","mutex_m","nkf","nameerror","net","net::apop","net::apopsession","net::ftp","net::ftp::bufferedsslsocket","net::ftp::bufferedsocket","net::ftp::mlsxentry","net::ftp::nullsocket","net::ftpconnectionerror","net::ftperror","net::ftppermerror","net::ftpprotoerror","net::ftpreplyerror","net::ftptemperror","net::http","net::http::copy","net::http::delete","net::http::get","net::http::head","net::http::lock","net::http::mkcol","net::http::move","net::http::options","net::http::patch","net::http::post","net::http::propfind","net::http::proppatch","net::http::put","net::http::trace","net::http::unlock","net::httpaccepted","net::httpalreadyreported","net::httpbadgateway","net::httpbadrequest","net::httpbadresponse","net::httpclienterror","net::httpconflict","net::httpcontinue","net::httpcreated","net::httpearlyhints","net::httperror","net::httpexceptions","net::httpexpectationfailed","net::httpfaileddependency","net::httpfatalerror","net::httpforbidden","net::httpfound","net::httpgatewaytimeout","net::httpgenericrequest","net::httpgone","net::httpheader","net::httpheadersyntaxerror","net::httpimused","net::httpinformation","net::httpinsufficientstorage","net::httpinternalservererror","net::httplengthrequired","net::httplocked","net::httploopdetected","net::httpmethodnotallowed","net::httpmisdirectedrequest","net::httpmovedpermanently","net::httpmultistatus","net::httpmultiplechoices","net::httpnetworkauthenticationrequired","net::httpnocontent","net::httpnonauthoritativeinformation","net::httpnotacceptable","net::httpnotextended","net::httpnotfound","net::httpnotimplemented","net::httpnotmodified","net::httpok","net::httppartialcontent","net::httppayloadtoolarge","net::httppaymentrequired","net::httppermanentredirect","net::httppreconditionfailed","net::httppreconditionrequired","net::httpprocessing","net::httpproxyauthenticationrequired","net::httprangenotsatisfiable","net::httpredirection","net::httprequest","net::httprequestheaderfieldstoolarge","net::httprequesttimeout","net::httpresetcontent","net::httpresponse","net::httpretriableerror","net::httpseeother","net::httpservererror","net::httpserverexception","net::httpserviceunavailable","net::httpsuccess","net::httpswitchprotocol","net::httptemporaryredirect","net::httptoomanyrequests","net::httpuritoolong","net::httpunauthorized","net::httpunavailableforlegalreasons","net::httpunknownresponse","net::httpunprocessableentity","net::httpunsupportedmediatype","net::httpupgraderequired","net::httpuseproxy","net::httpvariantalsonegotiates","net::httpversionnotsupported","net::imap","net::imap::badresponseerror","net::imap::bodytypeattachment","net::imap::bodytypebasic","net::imap::bodytypeextension","net::imap::bodytypemessage","net::imap::bodytypemultipart","net::imap::bodytypetext","net::imap::byeresponseerror","net::imap::crammd5authenticator","net::imap::dataformaterror","net::imap::digestmd5authenticator","net::imap::error","net::imap::flagcounterror","net::imap::loginauthenticator","net::imap::noresponseerror","net::imap::numvalidator","net::imap::plainauthenticator","net::imap::responseerror","net::imap::responseparseerror","net::internetmessageio","net::internetmessageio::netprivate","net::internetmessageio::writeadapter","net::opentimeout","net::pop3","net::popauthenticationerror","net::popbadresponse","net::poperror","net::popmail","net::protoautherror","net::protocommanderror","net::protofatalerror","net::protoretriableerror","net::protoservererror","net::protosyntaxerror","net::protounknownerror","net::protocretryerror","net::protocolerror","net::readtimeout","net::smtp","net::smtp::response","net::smtpauthenticationerror","net::smtperror","net::smtpfatalerror","net::smtpserverbusy","net::smtpsyntaxerror","net::smtpunknownerror","net::smtpunsupportedcommand","net::writetimeout","newton","nilclass","nomemoryerror","nomethoderror","notimplementederror","numeric","oleproperty","object","object::parseerror","object::timeouterror","objectspace","objectspace::internalobjectwrapper","objectspace::weakmap","observable","open3","openssl","openssl::asn1","openssl::asn1::asn1data","openssl::asn1::asn1error","openssl::asn1::constructive","openssl::asn1::objectid","openssl::asn1::primitive","openssl::bn","openssl::bnerror","openssl::buffering","openssl::cipher","openssl::cipher::cipher","openssl::cipher::ciphererror","openssl::config","openssl::configerror","openssl::digest","openssl::digest::digesterror","openssl::engine","openssl::engine::engineerror","openssl::extconfig","openssl::hmac","openssl::hmacerror","openssl::kdf","openssl::kdf::kdferror","openssl::netscape","openssl::netscape::spki","openssl::netscape::spkierror","openssl::ocsp","openssl::ocsp::basicresponse","openssl::ocsp::certificateid","openssl::ocsp::ocsperror","openssl::ocsp::request","openssl::ocsp::response","openssl::ocsp::singleresponse","openssl::opensslerror","openssl::pkcs12","openssl::pkcs12::pkcs12error","openssl::pkcs5","openssl::pkcs7","openssl::pkcs7::pkcs7error","openssl::pkcs7::recipientinfo","openssl::pkcs7::signerinfo","openssl::pkey","openssl::pkey::dh","openssl::pkey::dherror","openssl::pkey::dsa","openssl::pkey::dsaerror","openssl::pkey::ec","openssl::pkey::ec::group","openssl::pkey::ec::group::error","openssl::pkey::ec::point","openssl::pkey::ec::point::error","openssl::pkey::ecerror","openssl::pkey::pkey","openssl::pkey::pkeyerror","openssl::pkey::rsa","openssl::pkey::rsaerror","openssl::random","openssl::random::randomerror","openssl::ssl","openssl::ssl::sslcontext","openssl::ssl::sslerror","openssl::ssl::sslerrorwaitreadable","openssl::ssl::sslerrorwaitwritable","openssl::ssl::sslserver","openssl::ssl::sslsocket","openssl::ssl::session","openssl::ssl::session::sessionerror","openssl::ssl::socketforwarder","openssl::x509","openssl::x509::attribute","openssl::x509::attributeerror","openssl::x509::crl","openssl::x509::crlerror","openssl::x509::certificate","openssl::x509::certificateerror","openssl::x509::extension","openssl::x509::extensionerror","openssl::x509::extensionfactory","openssl::x509::name","openssl::x509::name::rfc2253dn","openssl::x509::nameerror","openssl::x509::request","openssl::x509::requesterror","openssl::x509::revoked","openssl::x509::revokederror","openssl::x509::store","openssl::x509::storecontext","openssl::x509::storeerror","openstruct","openuri","openuri::httperror","openuri::httpredirect","openuri::meta","openuri::openread","optionparser","optionparser::ac","optionparser::acceptables","optionparser::ambiguousargument","optionparser::ambiguousoption","optionparser::arguable","optionparser::completinghash","optionparser::completion","optionparser::invalidargument","optionparser::invalidoption","optionparser::list","optionparser::missingargument","optionparser::needlessargument","optionparser::optionmap","optionparser::parseerror","optionparser::switch","optionparser::switch::noargument","optionparser::switch::optionalargument","optionparser::switch::placedargument","optionparser::switch::requiredargument","pp","pp::ppmethods","pstore","pstore::error","pty","pty::childexited","pathname","prettyprint","prettyprint::singleline","prime","prime::eratosthenesgenerator","prime::eratosthenessieve","prime::generator23","prime::pseudoprimegenerator","prime::trialdivision","prime::trialdivisiongenerator","proc","process","process::gid","process::status","process::sys","process::uid","profiler__","psych","psych::badalias","psych::classloader","psych::classloader::restricted","psych::coder","psych::disallowedclass","psych::emitter","psych::exception","psych::handler","psych::handler::dumperoptions","psych::handlers","psych::handlers::recorder","psych::json","psych::json::stream","psych::json::treebuilder","psych::nodes","psych::nodes::alias","psych::nodes::document","psych::nodes::mapping","psych::nodes::node","psych::nodes::scalar","psych::nodes::sequence","psych::nodes::stream","psych::omap","psych::parser","psych::parser::mark","psych::scalarscanner","psych::set","psych::stream","psych::streaming","psych::streaming::classmethods","psych::syntaxerror","psych::treebuilder","psych::visitors","psych::visitors::depthfirst","psych::visitors::emitter","psych::visitors::jsontree","psych::visitors::noaliasruby","psych::visitors::toruby","psych::visitors::visitor","psych::visitors::yamltree","queue","rdoc","rdoc::alias","rdoc::anonclass","rdoc::anymethod","rdoc::attr","rdoc::classmodule","rdoc::codeobject","rdoc::comment","rdoc::constant","rdoc::context","rdoc::crossreference","rdoc::erbio","rdoc::erbpartial","rdoc::encoding","rdoc::error","rdoc::extend","rdoc::generator","rdoc::ghostmethod","rdoc::i18n","rdoc::include","rdoc::markdown","rdoc::markdown::memoentry","rdoc::markdown::parseerror","rdoc::markdown::ruleinfo","rdoc::markup","rdoc::metamethod","rdoc::methodattr","rdoc::mixin","rdoc::normalclass","rdoc::normalmodule","rdoc::options","rdoc::parser","rdoc::rd","rdoc::rdoc","rdoc::ri","rdoc::ri::error","rdoc::require","rdoc::rubygemshook","rdoc::servlet","rdoc::singleclass","rdoc::stats","rdoc::store","rdoc::store::error","rdoc::store::missingfileerror","rdoc::task","rdoc::text","rdoc::tokenstream","rdoc::tomdoc","rdoc::toplevel","rdoctask","rexml","rexml::attlistdecl","rexml::attribute","rexml::attributes","rexml::cdata","rexml::child","rexml::comment","rexml::dtd","rexml::dtd::attlistdecl","rexml::dtd::elementdecl","rexml::dtd::entitydecl","rexml::dtd::notationdecl","rexml::dtd::parser","rexml::declaration","rexml::doctype","rexml::document","rexml::element","rexml::elementdecl","rexml::elements","rexml::encoding","rexml::entity","rexml::entityconst","rexml::externalentity","rexml::formatters","rexml::formatters::default","rexml::formatters::pretty","rexml::formatters::transitive","rexml::functions","rexml::iosource","rexml::instruction","rexml::light","rexml::light::node","rexml::namespace","rexml::node","rexml::notationdecl","rexml::output","rexml::parent","rexml::parseexception","rexml::parsers","rexml::parsers::baseparser","rexml::parsers::lightparser","rexml::parsers::pullevent","rexml::parsers::pullparser","rexml::parsers::sax2parser","rexml::parsers::streamparser","rexml::parsers::treeparser","rexml::parsers::ultralightparser","rexml::parsers::xpathparser","rexml::quickpath","rexml::sax2listener","rexml::security","rexml::source","rexml::sourcefactory","rexml::streamlistener","rexml::syncenumerator","rexml::text","rexml::undefinednamespaceexception","rexml::validation","rexml::validation::choice","rexml::validation::event","rexml::validation::interleave","rexml::validation::oneormore","rexml::validation::optional","rexml::validation::ref","rexml::validation::relaxng","rexml::validation::sequence","rexml::validation::state","rexml::validation::validationexception","rexml::validation::validator","rexml::validation::zeroormore","rexml::xmldecl","rexml::xmltokens","rexml::xpath","rexml::xpathnode","rexml::xpathparser","rss","rss::atom","rss::atom::commonmodel","rss::atom::contentmodel","rss::atom::contentmodel::classmethods","rss::atom::dateconstruct","rss::atom::duplicatelinkchecker","rss::atom::entry","rss::atom::feed","rss::atom::feed::author","rss::atom::feed::category","rss::atom::feed::contributor","rss::atom::feed::entry","rss::atom::feed::entry::content","rss::atom::feed::entry::published","rss::atom::feed::entry::source","rss::atom::feed::entry::summary","rss::atom::feed::generator","rss::atom::feed::icon","rss::atom::feed::id","rss::atom::feed::link","rss::atom::feed::logo","rss::atom::feed::rights","rss::atom::feed::subtitle","rss::atom::feed::title","rss::atom::feed::updated","rss::atom::personconstruct","rss::atom::personconstruct::email","rss::atom::personconstruct::name","rss::atom::personconstruct::uri","rss::atom::textconstruct","rss::atom::uricontentmodel","rss::basedublincoremodel","rss::baselistener","rss::basemodel","rss::baseparser","rss::basetrackbackmodel","rss::contentmodel","rss::conversionerror","rss::converter","rss::dublincoremodel","rss::dublincoremodel","rss::element","rss::error","rss::itunesbasemodel","rss::ituneschannelmodel","rss::ituneschannelmodel::itunescategory","rss::ituneschannelmodel::itunesimage","rss::ituneschannelmodel::itunesowner","rss::itunesitemmodel","rss::itunesitemmodel::itunesduration","rss::itunesmodelutils","rss::imagefaviconmodel","rss::imagefaviconmodel::imagefavicon","rss::imageitemmodel","rss::imageitemmodel::imageitem","rss::imagemodelutils","rss::invalidrsserror","rss::listenermixin","rss::maker","rss::maker::atom","rss::maker::atom::entry","rss::maker::atom::entry::channel","rss::maker::atom::entry::channel::cloud","rss::maker::atom::entry::channel::description","rss::maker::atom::entry::channel::generator","rss::maker::atom::entry::channel::skipdays","rss::maker::atom::entry::channel::skipdays::day","rss::maker::atom::entry::channel::skiphours","rss::maker::atom::entry::channel::skiphours::hour","rss::maker::atom::entry::image","rss::maker::atom::entry::items","rss::maker::atom::entry::items::item","rss::maker::atom::entry::textinput","rss::maker::atom::feed","rss::maker::atom::feed::channel","rss::maker::atom::feed::channel::categories","rss::maker::atom::feed::channel::categories::category","rss::maker::atom::feed::channel::cloud","rss::maker::atom::feed::channel::generator","rss::maker::atom::feed::channel::links","rss::maker::atom::feed::channel::links::link","rss::maker::atom::feed::channel::skipdays","rss::maker::atom::feed::channel::skipdays::day","rss::maker::atom::feed::channel::skiphours","rss::maker::atom::feed::channel::skiphours::hour","rss::maker::atom::feed::image","rss::maker::atom::feed::items","rss::maker::atom::feed::items::item","rss::maker::atom::feed::items::item::categories","rss::maker::atom::feed::items::item::categories::category","rss::maker::atom::feed::items::item::content","rss::maker::atom::feed::items::item::enclosure","rss::maker::atom::feed::items::item::guid","rss::maker::atom::feed::items::item::links","rss::maker::atom::feed::items::item::links::link","rss::maker::atom::feed::items::item::source","rss::maker::atom::feed::items::item::source::categories","rss::maker::atom::feed::items::item::source::categories::category","rss::maker::atom::feed::items::item::source::generator","rss::maker::atom::feed::items::item::source::icon","rss::maker::atom::feed::items::item::source::links","rss::maker::atom::feed::items::item::source::links::link","rss::maker::atom::feed::items::item::source::logo","rss::maker::atom::feed::textinput","rss::maker::atomcategory","rss::maker::atomgenerator","rss::maker::atomlink","rss::maker::atomlogo","rss::maker::atompersonconstructbase","rss::maker::atompersons","rss::maker::atomtextconstruct","rss::maker::atomtextconstructbase","rss::maker::atomtextconstructbase::ensurexmlcontent","rss::maker::base","rss::maker::channelbase","rss::maker::channelbase::authorsbase","rss::maker::channelbase::authorsbase::authorbase","rss::maker::channelbase::categoriesbase","rss::maker::channelbase::categoriesbase::categorybase","rss::maker::channelbase::cloudbase","rss::maker::channelbase::contributorsbase","rss::maker::channelbase::contributorsbase::contributorbase","rss::maker::channelbase::copyrightbase","rss::maker::channelbase::descriptionbase","rss::maker::channelbase::generatorbase","rss::maker::channelbase::itunescategories","rss::maker::channelbase::itunescategories::itunescategory","rss::maker::channelbase::itunesimage","rss::maker::channelbase::itunesowner","rss::maker::channelbase::linksbase","rss::maker::channelbase::linksbase::linkbase","rss::maker::channelbase::skipdaysbase","rss::maker::channelbase::skipdaysbase::daybase","rss::maker::channelbase::skiphoursbase","rss::maker::channelbase::skiphoursbase::hourbase","rss::maker::channelbase::titlebase","rss::maker::contentmodel","rss::maker::dublincoremodel","rss::maker::itunesbasemodel","rss::maker::ituneschannelmodel","rss::maker::ituneschannelmodel::itunescategoriesbase","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase","rss::maker::ituneschannelmodel::itunesimagebase","rss::maker::ituneschannelmodel::itunesownerbase","rss::maker::itunesitemmodel","rss::maker::itunesitemmodel::itunesdurationbase","rss::maker::imagebase","rss::maker::imagefaviconmodel","rss::maker::imagefaviconmodel::imagefaviconbase","rss::maker::imageitemmodel","rss::maker::imageitemmodel::imageitembase","rss::maker::itemsbase","rss::maker::itemsbase::itembase","rss::maker::itemsbase::itembase::contentbase","rss::maker::itemsbase::itembase::descriptionbase","rss::maker::itemsbase::itembase::enclosurebase","rss::maker::itemsbase::itembase::guidbase","rss::maker::itemsbase::itembase::itunesduration","rss::maker::itemsbase::itembase::rightsbase","rss::maker::itemsbase::itembase::sourcebase","rss::maker::itemsbase::itembase::sourcebase::iconbase","rss::maker::itemsbase::itembase::sourcebase::logobase","rss::maker::itemsbase::itembase::sourcebase::rightsbase","rss::maker::itemsbase::itembase::sourcebase::subtitlebase","rss::maker::itemsbase::itembase::sourcebase::titlebase","rss::maker::itemsbase::itembase::titlebase","rss::maker::rss09","rss::maker::rss091","rss::maker::rss091::channel","rss::maker::rss091::image","rss::maker::rss091::items","rss::maker::rss091::items::item","rss::maker::rss091::textinput","rss::maker::rss092","rss::maker::rss092::channel","rss::maker::rss092::image","rss::maker::rss092::items","rss::maker::rss092::items::item","rss::maker::rss092::textinput","rss::maker::rss09::channel","rss::maker::rss09::channel::authors","rss::maker::rss09::channel::authors::author","rss::maker::rss09::channel::categories","rss::maker::rss09::channel::categories::category","rss::maker::rss09::channel::cloud","rss::maker::rss09::channel::contributors","rss::maker::rss09::channel::contributors::contributor","rss::maker::rss09::channel::copyright","rss::maker::rss09::channel::description","rss::maker::rss09::channel::generator","rss::maker::rss09::channel::links","rss::maker::rss09::channel::links::link","rss::maker::rss09::channel::skipdays","rss::maker::rss09::channel::skipdays::day","rss::maker::rss09::channel::skiphours","rss::maker::rss09::channel::skiphours::hour","rss::maker::rss09::channel::title","rss::maker::rss09::image","rss::maker::rss09::items","rss::maker::rss09::items::item","rss::maker::rss09::items::item::authors","rss::maker::rss09::items::item::authors::author","rss::maker::rss09::items::item::categories","rss::maker::rss09::items::item::categories::category","rss::maker::rss09::items::item::content","rss::maker::rss09::items::item::contributors","rss::maker::rss09::items::item::contributors::contributor","rss::maker::rss09::items::item::description","rss::maker::rss09::items::item::enclosure","rss::maker::rss09::items::item::guid","rss::maker::rss09::items::item::links","rss::maker::rss09::items::item::links::link","rss::maker::rss09::items::item::rights","rss::maker::rss09::items::item::source","rss::maker::rss09::items::item::source::authors","rss::maker::rss09::items::item::source::authors::author","rss::maker::rss09::items::item::source::categories","rss::maker::rss09::items::item::source::categories::category","rss::maker::rss09::items::item::source::contributors","rss::maker::rss09::items::item::source::contributors::contributor","rss::maker::rss09::items::item::source::generator","rss::maker::rss09::items::item::source::icon","rss::maker::rss09::items::item::source::links","rss::maker::rss09::items::item::source::links::link","rss::maker::rss09::items::item::source::logo","rss::maker::rss09::items::item::source::rights","rss::maker::rss09::items::item::source::subtitle","rss::maker::rss09::items::item::source::title","rss::maker::rss09::items::item::title","rss::maker::rss09::textinput","rss::maker::rss10","rss::maker::rss10::channel","rss::maker::rss10::channel::authors","rss::maker::rss10::channel::authors::author","rss::maker::rss10::channel::categories","rss::maker::rss10::channel::categories::category","rss::maker::rss10::channel::cloud","rss::maker::rss10::channel::contributors","rss::maker::rss10::channel::contributors::contributor","rss::maker::rss10::channel::copyright","rss::maker::rss10::channel::description","rss::maker::rss10::channel::generator","rss::maker::rss10::channel::links","rss::maker::rss10::channel::links::link","rss::maker::rss10::channel::skipdays","rss::maker::rss10::channel::skipdays::day","rss::maker::rss10::channel::skiphours","rss::maker::rss10::channel::skiphours::hour","rss::maker::rss10::channel::title","rss::maker::rss10::image","rss::maker::rss10::items","rss::maker::rss10::items::item","rss::maker::rss10::items::item::authors","rss::maker::rss10::items::item::authors::author","rss::maker::rss10::items::item::categories","rss::maker::rss10::items::item::categories::category","rss::maker::rss10::items::item::content","rss::maker::rss10::items::item::contributors","rss::maker::rss10::items::item::contributors::contributor","rss::maker::rss10::items::item::description","rss::maker::rss10::items::item::enclosure","rss::maker::rss10::items::item::guid","rss::maker::rss10::items::item::links","rss::maker::rss10::items::item::links::link","rss::maker::rss10::items::item::rights","rss::maker::rss10::items::item::source","rss::maker::rss10::items::item::source::authors","rss::maker::rss10::items::item::source::authors::author","rss::maker::rss10::items::item::source::categories","rss::maker::rss10::items::item::source::categories::category","rss::maker::rss10::items::item::source::contributors","rss::maker::rss10::items::item::source::contributors::contributor","rss::maker::rss10::items::item::source::generator","rss::maker::rss10::items::item::source::icon","rss::maker::rss10::items::item::source::links","rss::maker::rss10::items::item::source::links::link","rss::maker::rss10::items::item::source::logo","rss::maker::rss10::items::item::source::rights","rss::maker::rss10::items::item::source::subtitle","rss::maker::rss10::items::item::source::title","rss::maker::rss10::items::item::title","rss::maker::rss10::textinput","rss::maker::rss20","rss::maker::rss20::channel","rss::maker::rss20::channel::categories","rss::maker::rss20::channel::categories::category","rss::maker::rss20::channel::cloud","rss::maker::rss20::channel::generator","rss::maker::rss20::channel::skipdays","rss::maker::rss20::channel::skipdays::day","rss::maker::rss20::channel::skiphours","rss::maker::rss20::channel::skiphours::hour","rss::maker::rss20::image","rss::maker::rss20::items","rss::maker::rss20::items::item","rss::maker::rss20::items::item::authors","rss::maker::rss20::items::item::authors::author","rss::maker::rss20::items::item::categories","rss::maker::rss20::items::item::categories::category","rss::maker::rss20::items::item::enclosure","rss::maker::rss20::items::item::guid","rss::maker::rss20::items::item::source","rss::maker::rss20::items::item::source::links","rss::maker::rss20::items::item::source::links::link","rss::maker::rss20::textinput","rss::maker::rssbase","rss::maker::setupdefaultdate","rss::maker::setupdefaultlanguage","rss::maker::slashmodel","rss::maker::syndicationmodel","rss::maker::taxonomytopicmodel","rss::maker::taxonomytopicmodel::taxonomytopicsbase","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase","rss::maker::taxonomytopicsmodel","rss::maker::taxonomytopicsmodel::taxonomytopicsbase","rss::maker::textinputbase","rss::maker::trackbackmodel","rss::maker::trackbackmodel::trackbackaboutsbase","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase","rss::maker::xmlstylesheets","rss::maker::xmlstylesheets::xmlstylesheet","rss::missingattributeerror","rss::missingtagerror","rss::nserror","rss::notavailablevalueerror","rss::notexpectedtagerror","rss::notseterror","rss::notvalidxmlparser","rss::notwellformederror","rss::overlappedprefixerror","rss::parser","rss::rdf","rss::rdf::bag","rss::rdf::bag::li","rss::rdf::channel","rss::rdf::channel::image","rss::rdf::channel::items","rss::rdf::channel::items::seq","rss::rdf::channel::textinput","rss::rdf::image","rss::rdf::item","rss::rdf::li","rss::rdf::seq","rss::rdf::seq::li","rss::rdf::textinput","rss::rexmllikexmlparser","rss::rexmllistener","rss::rexmlparser","rss::rss09","rss::rss10","rss::rootelementmixin","rss::rss","rss::rss::channel","rss::rss::channel::cloud","rss::rss::channel::image","rss::rss::channel::item","rss::rss::channel::item::category","rss::rss::channel::item::enclosure","rss::rss::channel::item::guid","rss::rss::channel::item::source","rss::rss::channel::skipdays","rss::rss::channel::skipdays::day","rss::rss::channel::skiphours","rss::rss::channel::skiphours::hour","rss::rss::channel::textinput","rss::setupmaker","rss::slashmodel","rss::syndicationmodel","rss::taxonomytopicmodel","rss::taxonomytopicmodel::taxonomytopic","rss::taxonomytopicsmodel","rss::taxonomytopicsmodel::taxonomytopics","rss::taxonomytopicsmodel::taxonomytopics::bag","rss::toomuchtagerror","rss::trackbackmodel10","rss::trackbackmodel10::trackbackabout","rss::trackbackmodel10::trackbackping","rss::trackbackmodel20","rss::trackbackmodel20::trackbackabout","rss::trackbackmodel20::trackbackping","rss::trackbackutils","rss::unknownconversionmethoderror","rss::unknowntagerror","rss::unsupportedmakerversionerror","rss::utils","rss::utils::csv","rss::utils::explicitcleanother","rss::utils::inheritedreader","rss::utils::yesother","rss::xml","rss::xml::element","rss::xmlparserlistener","rss::xmlparsernotfound","rss::xmlparserparser","rss::xmlscanlistener","rss::xmlscanparser","rss::xmlstylesheet","rss::xmlstylesheetmixin","racc","racc::cparseparams","racc::parseerror","racc::parseerror","racc::parser","rake","random","random::formatter","range","rangeerror","rational","readline","regexp","regexperror","resolv","resolv::dns","resolv::dns::config","resolv::dns::config::nxdomain","resolv::dns::config::otherresolverror","resolv::dns::decodeerror","resolv::dns::encodeerror","resolv::dns::name","resolv::dns::query","resolv::dns::requester","resolv::dns::requester::requesterror","resolv::dns::resource","resolv::dns::resource::any","resolv::dns::resource::cname","resolv::dns::resource::domainname","resolv::dns::resource::generic","resolv::dns::resource::hinfo","resolv::dns::resource::in","resolv::dns::resource::in::a","resolv::dns::resource::in::aaaa","resolv::dns::resource::in::srv","resolv::dns::resource::in::wks","resolv::dns::resource::loc","resolv::dns::resource::minfo","resolv::dns::resource::mx","resolv::dns::resource::ns","resolv::dns::resource::ptr","resolv::dns::resource::soa","resolv::dns::resource::txt","resolv::hosts","resolv::ipv4","resolv::ipv6","resolv::loc","resolv::loc::alt","resolv::loc::coord","resolv::loc::size","resolv::mdns","resolv::resolverror","resolv::resolvtimeout","rinda","rinda::drbobjecttemplate","rinda::invalidhashtuplekey","rinda::notifytemplateentry","rinda::requestcancelederror","rinda::requestexpirederror","rinda::rindaerror","rinda::ringfinger","rinda::ringprovider","rinda::ringserver","rinda::simplerenewer","rinda::template","rinda::templateentry","rinda::tuple","rinda::tuplebag","rinda::tuplebag::tuplebin","rinda::tupleentry","rinda::tuplespace","rinda::tuplespaceproxy","rinda::waittemplateentry","ripper","ripper::filter","rubylex","rubytoken","rubytoken::tkerror","rubytoken::tkid","rubytoken::tknode","rubytoken::tkopasgn","rubytoken::tkop","rubytoken::tkunknownchar","rubytoken::tkval","rubytoken::token","rubyvm","rubyvm::abstractsyntaxtree","rubyvm::abstractsyntaxtree::node","rubyvm::instructionsequence","rubyvm::mjit","runtimeerror","sdbm","sdbmerror","sockssocket","scanf","scanf::formatspecifier","scanf::formatstring","scripterror","securerandom","securityerror","set","shell","shell::appendfile","shell::appendio","shell::builtincommand","shell::cat","shell::commandprocessor","shell::concat","shell::echo","shell::error","shell::filter","shell::glob","shell::processcontroller","shell::systemcommand","shell::tee","shell::thread","shell::void","shellwords","signal","signalexception","simpledelegator","singleforwardable","singleton","sizedqueue","socket","socket::ancillarydata","socket::constants","socket::ifaddr","socket::option","socket::udpsource","socketerror","sortedset","standarderror","stopiteration","string","stringio","stringscanner","stringscanner::error","struct","symbol","sync","sync_m","sync_m::err","sync_m::err::lockmodefailer","sync_m::err::unknownlocker","synchronizer","synchronizer_m","syntaxerror","syslog","syslog::constants","syslog::facility","syslog::level","syslog::logger","syslog::logger::formatter","syslog::logger::severity","syslog::macros","syslog::option","systemcallerror","systemexit","systemstackerror","tcpserver","tcpsocket","tsort","tsort::cyclic","tempfile","thwait","thread","thread::backtrace::location","threaderror","threadgroup","threadswait","time","timeout","timeout::error","timeout::timeouterror","tracepoint","tracer","tracer::thread","trueclass","typeerror","udpsocket","unixserver","unixsocket","uri","uri::badurierror","uri::error","uri::escape","uri::ftp","uri::file","uri::generic","uri::http","uri::https","uri::invalidcomponenterror","uri::invalidurierror","uri::ldap","uri::ldaps","uri::mailto","uri::regexp","uri::rfc2396_parser","uri::rfc2396_regexp","uri::rfc2396_regexp::pattern","unboundmethod","uncaughtthrowerror","unicodenormalize","webrick","webrick::accesslog","webrick::accesslog::accesslogerror","webrick::basiclog","webrick::cgi","webrick::config","webrick::cookie","webrick::daemon","webrick::genericserver","webrick::htmlutils","webrick::httpauth","webrick::httpauth::authenticator","webrick::httpauth::basicauth","webrick::httpauth::digestauth","webrick::httpauth::htdigest","webrick::httpauth::htgroup","webrick::httpauth::htpasswd","webrick::httpauth::proxyauthenticator","webrick::httpauth::proxybasicauth","webrick::httpauth::proxydigestauth","webrick::httpauth::userdb","webrick::httpproxyserver","webrick::httprequest","webrick::httpresponse","webrick::httpresponse::chunkedwrapper","webrick::httpresponse::invalidheader","webrick::httpserver","webrick::httpservererror","webrick::httpservlet","webrick::httpservlet::abstractservlet","webrick::httpservlet::cgihandler","webrick::httpservlet::defaultfilehandler","webrick::httpservlet::erbhandler","webrick::httpservlet::filehandler","webrick::httpservlet::httpservleterror","webrick::httpservlet::prochandler","webrick::httpstatus","webrick::httpstatus::clienterror","webrick::httpstatus::eoferror","webrick::httpstatus::error","webrick::httpstatus::info","webrick::httpstatus::redirect","webrick::httpstatus::servererror","webrick::httpstatus::status","webrick::httpstatus::success","webrick::httputils","webrick::httputils::formdata","webrick::httpversion","webrick::log","webrick::snirequest","webrick::servererror","webrick::simpleserver","webrick::utils","webrick::utils::timeouthandler","webrick::utils::timeouthandler::process","win32ole","win32ole::variant","win32olequeryinterfaceerror","win32oleruntimeerror","win32ole_event","win32ole_method","win32ole_param","win32ole_record","win32ole_type","win32ole_typelib","win32ole_variable","win32ole_variant","warning","weakref","weakref::referror","xml","xml::parser","xmlencoding_ja","xmlencoding_ja::sjishandler","xmp","xmp::stringinputmethod","yaml","yaml::dbm","yaml::store","zerodivisionerror","zlib","zlib::buferror","zlib::dataerror","zlib::deflate","zlib::error","zlib::gzipfile","zlib::gzipfile::crcerror","zlib::gzipfile::error","zlib::gzipfile::lengtherror","zlib::gzipfile::nofooter","zlib::gzipreader","zlib::gzipwriter","zlib::inflate","zlib::memerror","zlib::needdict","zlib::streamend","zlib::streamerror","zlib::versionerror","zlib::zstream","fatal","unknown","basicobject#!()","delegator#!()","basicobject#!=()","delegator#!=()","object#!~()","bigdecimal#%()","float#%()","integer#%()","numeric#%()","openssl::bn#%()","range#%()","string#%()","array#&()","falseclass#&()","ipaddr#&()","integer#&()","nilclass#&()","process::status#&()","set#&()","trueclass#&()","array#*()","benchmark::tms#*()","bigdecimal#*()","complex#*()","float#*()","integer#*()","openssl::bn#*()","rational#*()","string#*()","bigdecimal#**()","complex#**()","float#**()","integer#**()","openssl::bn#**()","rational#**()","array#+()","benchmark::tms#+()","bigdecimal#+()","complex#+()","date#+()","enumerator#+()","fiddle::pointer#+()","float#+()","integer#+()","openssl::bn#+()","pathname#+()","rational#+()","set#+()","shell::filter#+()","string#+()","time#+()","uri::generic#+()","bigdecimal#+@()","fiddle::pointer#+@()","numeric#+@()","openssl::bn#+@()","string#+@()","array#-()","benchmark::tms#-()","bigdecimal#-()","complex#-()","date#-()","fiddle::pointer#-()","float#-()","integer#-()","openssl::bn#-()","rational#-()","set#-()","time#-()","uri::generic#-()","bigdecimal#-@()","complex#-@()","fiddle::pointer#-@()","float#-@()","integer#-@()","numeric#-@()","openssl::bn#-@()","rational#-@()","string#-@()","benchmark::tms#/()","bigdecimal#/()","complex#/()","float#/()","integer#/()","openssl::bn#/()","pathname#/()","rational#/()","bigdecimal#<()","comparable#<()","float#<()","hash#<()","integer#<()","module#<()","set#<()","shell::filter#<()","array#<<()","bundler::index#<<()","csv#<<()","csv::row#<<()","csv::table#<<()","csv::writer#<<()","date#<<()","digest::base#<<()","digest::instance#<<()","io#<<()","io::generic_writable#<<()","ipaddr#<<()","integer#<<()","logger#<<()","method#<<()","net::internetmessageio::writeadapter#<<()","openssl::bn#<<()","openssl::buffering#<<()","openssl::digest#<<()","openssl::hmac#<<()","proc#<<()","psych::visitors::yamltree#<<()","queue#<<()","rexml::attributes#<<()","rexml::document#<<()","rexml::elements#<<()","rexml::light::node#<<()","rexml::output#<<()","rexml::parent#<<()","rexml::text#<<()","rexml::validation::choice#<<()","rexml::validation::state#<<()","rss::xml::element#<<()","set#<<()","sizedqueue#<<()","string#<<()","stringscanner#<<()","webrick::basiclog#<<()","webrick::httputils::formdata#<<()","zlib::deflate#<<()","zlib::gzipwriter#<<()","zlib::inflate#<<()","bigdecimal#<=()","comparable#<=()","float#<=()","hash#<=()","integer#<=()","module#<=()","set#<=()","array#<=>()","bigdecimal#<=>()","bundler::gemhelpers::platformmatch#<=>()","bundler::lazyspecification::identifier#<=>()","bundler::molinillo::resolver::resolution::unwinddetails#<=>()","bundler::remotespecification#<=>()","date#<=>()","fiddle::pointer#<=>()","file::stat#<=>()","float#<=>()","ipaddr#<=>()","irb::notifier::levelednotifier#<=>()","integer#<=>()","module#<=>()","numeric#<=>()","object#<=>()","openssl::bn#<=>()","openssl::x509::name#<=>()","pathname#<=>()","rdoc::alias#<=>()","rdoc::constant#<=>()","rdoc::context#<=>()","rdoc::methodattr#<=>()","rdoc::mixin#<=>()","rexml::comment#<=>()","rexml::text#<=>()","rss::maker::itemsbase::itembase#<=>()","rational#<=>()","string#<=>()","symbol#<=>()","time#<=>()","webrick::httpversion#<=>()","array#==()","basicobject#==()","bigdecimal#==()","bundler::depproxy#==()","bundler::index#==()","bundler::lazyspecification#==()","bundler::molinillo::dependencygraph#==()","bundler::molinillo::dependencygraph::vertex#==()","bundler::plugin::api::source#==()","bundler::resolver::specgroup#==()","bundler::rubyversion#==()","bundler::settings::mirror#==()","bundler::source::git#==()","bundler::source::metadata#==()","bundler::source::path#==()","csv::row#==()","csv::table#==()","comparable#==()","complex#==()","delegator#==()","digest::instance#==()","encoding::converter#==()","enumerator::arithmeticsequence#==()","exception#==()","fiddle::pointer#==()","float#==()","hash#==()","ipaddr#==()","integer#==()","matchdata#==()","method#==()","module#==()","openssl::bn#==()","openssl::pkey::ec::group#==()","openssl::pkey::ec::point#==()","openssl::ssl::session#==()","openssl::x509::attribute#==()","openssl::x509::crl#==()","openssl::x509::certificate#==()","openssl::x509::extension#==()","openssl::x509::request#==()","openssl::x509::revoked#==()","openstruct#==()","pathname#==()","process::status#==()","rdoc::attr#==()","rdoc::constant#==()","rdoc::toplevel#==()","rexml::attribute#==()","rexml::comment#==()","rexml::instruction#==()","rexml::validation::event#==()","rexml::xmldecl#==()","rss::xml::element#==()","random#==()","range#==()","rational#==()","regexp#==()","set#==()","string#==()","struct#==()","symbol#==()","uri::generic#==()","unboundmethod#==()","bigdecimal#===()","date#===()","enumerator::arithmeticsequence#===()","falseclass#===()","float#===()","ipaddr#===()","integer#===()","method#===()","module#===()","nilclass#===()","object#===()","openssl::bn#===()","pathname#===()","proc#===()","range#===()","regexp#===()","rinda::drbobjecttemplate#===()","rinda::template#===()","rinda::templateentry#===()","set#===()","string#===()","symbol#===()","systemcallerror::===()","trueclass#===()","nilclass#=~()","object#=~()","rexml::light::node#=~()","regexp#=~()","string#=~()","symbol#=~()","bigdecimal#>()","comparable#>()","float#>()","hash#>()","integer#>()","module#>()","set#>()","shell::filter#>()","bigdecimal#>=()","comparable#>=()","float#>=()","hash#>=()","integer#>=()","module#>=()","set#>=()","date#>>()","ipaddr#>>()","integer#>>()","method#>>()","openssl::bn#>>()","proc#>>()","process::status#>>()","shell::filter#>>()","net::pop3::apop()","kernel#array()","kernel#bigdecimal()","object#csv()","kernel#complex()","irb::currentcontext()","thread::debug()","thread::debug=()","object#delegateclass()","object#digest()","openssl::digest()","bigmath#e()","exception2messagemapper#fail()","sync_m::err::fail()","sync_m::err::lockmodefailer::fail()","sync_m::err::unknownlocker::fail()","kernel#float()","kernel#hash()","matrix::i()","kernel#integer()","irb::jobmanager()","syslog::macros#log_mask()","syslog::macros#log_upto()","bigmath#pi()","kernel#pathname()","rss::rss::channel::item::guid#permalink?()","net::http::proxy()","exception2messagemapper#raise()","kernel#rational()","irb::locale#string()","kernel#string()","kernel::uri()","array#[]()","array::[]()","bundler::index#[]()","bundler::settings#[]()","bundler::specset#[]()","cgi::queryextension#[]()","cgi::session#[]()","csv::row#[]()","csv::table#[]()","continuation#[]()","dbm#[]()","drb::drbsslsocket::sslconfig#[]()","drb::gw#[]()","dir::[]()","env::[]()","fiddle::cstructentity#[]()","fiddle::compositehandler#[]()","fiddle::handle::[]()","fiddle::handle#[]()","fiddle::importer#[]()","fiddle::pointer#[]()","fiddle::pointer::[]()","gdbm#[]()","hash#[]()","hash::[]()","integer#[]()","json::[]()","json::ext::generator::state#[]()","json::genericobject#[]()","matchdata#[]()","matrix::[]()","method#[]()","net::httpheader#[]()","oleproperty#[]()","object#[]()","objectspace::weakmap#[]()","openssl::config#[]()","openstruct#[]()","pstore#[]()","prime::trialdivision#[]()","proc#[]()","psych::coder#[]()","rexml::attlistdecl#[]()","rexml::attributes#[]()","rexml::element#[]()","rexml::elements#[]()","rexml::light::node#[]()","rexml::parent#[]()","rexml::parsers::pullevent#[]()","rss::maker::[]()","rss::xml::element#[]()","rinda::tuple#[]()","rinda::tupleentry#[]()","sdbm#[]()","set::[]()","shell::commandprocessor#[]()","string#[]()","stringscanner#[]()","struct#[]()","symbol#[]()","thread#[]()","webrick::cgi#[]()","webrick::genericserver#[]()","webrick::httprequest#[]()","webrick::httpresponse#[]()","webrick::httpstatus::[]()","webrick::httputils::formdata#[]()","win32ole#[]()","win32ole_variant#[]()","yaml::dbm#[]()","array#[]=()","bundler::specset#[]=()","bundler::thor::coreext::orderedhash#[]=()","cgi::session#[]=()","csv::row#[]=()","csv::table#[]=()","dbm#[]=()","drb::gw#[]=()","env::[]=()","fiddle::cstructentity#[]=()","fiddle::pointer#[]=()","gdbm#[]=()","hash#[]=()","json::ext::generator::state#[]=()","json::genericobject#[]=()","net::httpheader#[]=()","oleproperty#[]=()","object#[]=()","objectspace::weakmap#[]=()","openssl::config#[]=()","openstruct#[]=()","pstore#[]=()","psych::coder#[]=()","rexml::attributes#[]=()","rexml::elements#[]=()","rexml::light::node#[]=()","rexml::parent#[]=()","rexml::xpathparser#[]=()","rss::xml::element#[]=()","sdbm#[]=()","string#[]=()","struct#[]=()","thread#[]=()","webrick::httpresponse#[]=()","win32ole#[]=()","win32ole_variant#[]=()","yaml::dbm#[]=()","falseclass#^()","integer#^()","nilclass#^()","set#^()","trueclass#^()","rss::rss::channel::item::guid#_permalink?()","kernel#__callee__()","kernel#__dir__()","drb::drbobject#__drbref()","drb::drbobject#__drbref()","drb::drbobject#__drburi()","drb::drbobject#__drburi()","tracepoint#__enable()","irb::workspace#__evaluate__()","irb::context#__exit__()","delegator#__getobj__()","simpledelegator#__getobj__()","basicobject#__id__()","bundler::lazyspecification#__materialize__()","kernel#__method__()","delegator#__raise__()","basicobject#__send__()","delegator#__setobj__()","simpledelegator#__setobj__()","bundler::endpointspecification#__swap__()","bundler::remotespecification#__swap__()","bigdecimal#_dump()","drb::drbobject#_dump()","drb::drbobject#_dump()","singleton#_dump()","win32ole#_getproperty()","date::_httpdate()","objectspace::_id2ref()","win32ole#_invoke()","date::_iso8601()","date::_jisx0301()","bigdecimal::_load()","drb::drbobject::_load()","drb::drbobject::_load()","singleton::_load()","bundler::endpointspecification#_local_specification()","date::_parse()","bundler::molinillo::dependencygraph::vertex#_path_to?()","racc::parser#_racc_do_parse_rb()","racc::parser#_racc_do_reduce()","racc::parser#_racc_evalact()","racc::parser#_racc_init_sysvars()","racc::parser#_racc_setup()","racc::parser#_racc_yyparse_rb()","date::_rfc2822()","date::_rfc3339()","date::_rfc822()","irb::context#_set_last_value()","win32ole#_setproperty()","date::_strptime()","datetime::_strptime()","date::_xmlschema()","kernel#`()","cgi::htmlextension#a()","abbrev::abbrev()","array#abbrev()","rexml::parsers::xpathparser#abbreviate()","kernel#abort()","net::ftp#abort()","optionparser#abort()","pstore#abort()","process::abort()","thread::abort_on_exception()","thread#abort_on_exception()","thread#abort_on_exception=()","thread::abort_on_exception=()","bigdecimal#abs()","complex#abs()","float#abs()","integer#abs()","numeric#abs()","rational#abs()","complex#abs2()","numeric#abs2()","uri::generic#absolute()","pathname#absolute?()","resolv::dns::name#absolute?()","uri::generic#absolute?()","file::absolute_path()","rubyvm::instructionsequence#absolute_path()","thread::backtrace::location#absolute_path()","optionparser::ac#ac_arg_disable()","optionparser::ac#ac_arg_enable()","optionparser::ac#ac_arg_with()","drb::drbsslsocket::sslconfig#accept()","openssl::ssl::sslserver#accept()","openssl::ssl::sslsocket#accept()","optionparser::accept()","optionparser#accept()","optionparser::list#accept()","psych::visitors::jsontree#accept()","psych::visitors::toruby#accept()","psych::visitors::visitor#accept()","psych::visitors::yamltree#accept()","socket#accept()","tcpserver#accept()","unixserver#accept()","cgi::accept_charset()","cgi::accept_charset=()","socket::accept_loop()","openssl::ssl::sslsocket#accept_nonblock()","socket#accept_nonblock()","tcpserver#accept_nonblock()","unixserver#accept_nonblock()","webrick::httpserver#access_log()","net::ftp#acct()","cmath::acos()","math::acos()","cmath::acosh()","math::acosh()","bundler::permissionerror#action()","bundler::molinillo::dependencygraph::action::action_name()","bundler::molinillo::dependencygraph::addedgenocircular::action_name()","bundler::molinillo::dependencygraph::deleteedge::action_name()","bundler::molinillo::dependencygraph::detachvertexnamed::action_name()","bundler::molinillo::dependencygraph::tag::action_name()","shell::processcontroller::activate()","bundler::resolver::specgroup#activate_platform!()","bundler::molinillo::delegates::resolutionstate#activated()","bundler::stubspecification#activated()","bundler::stubspecification#activated=()","net::http#active?()","net::pop3#active?()","shell::builtincommand#active?()","shell::systemcommand#active?()","shell::processcontroller#active_job?()","shell::processcontroller#active_jobs()","shell::processcontroller#active_jobs_exist?()","shell::processcontroller::active_process_controllers()","acl::acllist#add()","benchmark::tms#add()","bigdecimal#add()","bundler::cli#add()","logger#add()","psych::coder#add()","rdoc::context#add()","rexml::attributes#add()","rexml::doctype#add()","rexml::document#add()","rexml::elements#add()","rexml::parent#add()","rinda::tuplebag::tuplebin#add()","set#add()","syslog::logger#add()","threadgroup#add()","webrick::httpauth::htgroup#add()","benchmark::tms#add!()","set#add?()","rdoc::anymethod#add_alias()","rdoc::attr#add_alias()","rdoc::context#add_alias()","rdoc::methodattr#add_alias()","rdoc::stats#add_alias()","rdoc::toplevel#add_alias()","openssl::x509::request#add_attribute()","rdoc::context#add_attribute()","rdoc::stats#add_attribute()","rexml::element#add_attribute()","rexml::element#add_attributes()","net::imap::add_authenticator()","rdoc::store#add_c_enclosure()","rdoc::store#add_c_variables()","openssl::x509::store#add_cert()","openssl::ocsp::request#add_certid()","openssl::pkcs7#add_certificate()","openssl::ssl::sslcontext#add_certificate()","bundler::molinillo::dependencygraph#add_child_vertex()","rdoc::context#add_class()","rdoc::stats#add_class()","rdoc::context#add_class_or_module()","bundler::ui::shell#add_color()","bundler::ui::silent#add_color()","bundler::plugin#add_command()","rdoc::classmodule#add_comment()","rdoc::context#add_constant()","rdoc::stats#add_constant()","rdoc::toplevel#add_constant()","csv::fieldsconverter#add_converter()","openssl::pkcs7#add_crl()","openssl::x509::store#add_crl()","bundler::definition#add_current_platform()","openssl::pkcs7#add_data()","zlib::inflate#add_dictionary()","bundler::molinillo::dependencygraph#add_edge()","bundler::molinillo::dependencygraph::log#add_edge_no_circular()","rexml::document#add_element()","rexml::element#add_element()","openssl::x509::name#add_entry()","rexml::validation::choice#add_event_to_arry()","rexml::validation::state#add_event_to_arry()","rdoc::context#add_extend()","openssl::x509::crl#add_extension()","openssl::x509::certificate#add_extension()","openssl::x509::revoked#add_extension()","net::httpheader#add_field()","bundler::thor::actions#add_file()","openssl::x509::store#add_file()","rdoc::stats#add_file()","rdoc::store#add_file()","tracer::add_filter()","rdoc::rdoc::add_generator()","bundler::plugin::sourcelist#add_git_source()","bundler::sourcelist#add_git_source()","webrick::httpservlet::filehandler::add_handler()","rss::element::add_have_children_element()","bundler::plugin#add_hook()","rdoc::markup#add_html()","rdoc::context#add_include()","rdoc::toplevel#add_include()","bundler::thor::actions#add_link()","rexml::parsers::baseparser#add_listener()","rexml::parsers::lightparser#add_listener()","rexml::parsers::pullparser#add_listener()","rexml::parsers::sax2parser#add_listener()","rexml::parsers::streamparser#add_listener()","rexml::parsers::treeparser#add_listener()","rexml::parsers::ultralightparser#add_listener()","rss::maker::add_maker()","rdoc::context#add_method()","rdoc::stats#add_method()","rdoc::toplevel#add_method()","rdoc::context#add_module()","rdoc::stats#add_module()","rdoc::context#add_module_alias()","rdoc::context#add_module_by_normal_module()","rexml::element#add_namespace()","rss::element::add_need_initialize_variable()","rss::maker::base::add_need_initialize_variable()","openssl::ocsp::basicresponse#add_nonce()","openssl::ocsp::request#add_nonce()","observable#add_observer()","rss::maker::base::add_other_element()","openssl::x509::store#add_path()","bundler::sourcelist#add_path_source()","bundler::definition#add_platform()","bundler::sourcelist#add_plugin_source()","rss::element::add_plural_form()","drb::drbprotocol::add_protocol()","openssl::pkcs7#add_recipient()","rdoc::markup#add_regexp_handling()","rdoc::context#add_require()","net::imap#add_response_handler()","openssl::x509::crl#add_revoked()","csv#add_row()","bundler::sourcelist#add_rubygems_remote()","bundler::plugin::sourcelist#add_rubygems_source()","bundler::sourcelist#add_rubygems_source()","bundler::thor::actions::classmethods#add_runtime_options!()","shell::processcontroller#add_schedule()","rdoc::context#add_section()","openssl::pkcs7#add_signer()","bundler::index#add_source()","bundler::plugin#add_source()","openssl::ocsp::basicresponse#add_status()","gc::add_stress_to_class()","rexml::element#add_text()","rdoc::context#add_to()","rdoc::toplevel#add_to_classes_or_modules()","rss::element::add_to_element_method()","bundler::plugin#add_to_load_path()","rdoc::tokenstream#add_token()","rdoc::tokenstream#add_tokens()","thread#add_trace_func()","openssl::config#add_value()","bundler::molinillo::dependencygraph#add_vertex()","bundler::molinillo::dependencygraph::log#add_vertex()","rdoc::markup#add_word_pair()","ipsocket#addr()","openssl::ssl::socketforwarder#addr()","socket::ifaddr#addr()","unixsocket#addr()","zlib::zstream#adler()","zlib::adler32()","zlib::adler32_combine()","io#advise()","addrinfo#afamily()","bundler::molinillo::ui#after_resolution()","bundler::resolver#after_resolution()","date#ajd()","psych::emitter#alias()","psych::handler#alias()","psych::treebuilder#alias()","psych::nodes::alias#alias?()","psych::nodes::node#alias?()","shell::alias_command()","shell::commandprocessor::alias_command()","rdoc::parser::alias_extension()","shell::commandprocessor::alias_map()","module#alias_method()","encoding::aliases()","drb::drbserver#alive?()","drb::extserv#alive?()","fiber#alive?()","rinda::tupleentry#alive?()","thread#alive?()","bundler::settings#all()","net::popmail#all()","array#all?()","bundler::settings::mirrorconfig#all?()","enumerable#all?()","rdoc::store#all_classes()","rdoc::store#all_classes_and_modules()","bundler::thor::base::classmethods#all_commands()","bundler::parallelinstaller::specinstallation#all_dependencies()","bundler::bundlererror::all_errors()","rdoc::store#all_files()","rdoc::store#all_modules()","bundler::molinillo::resolver::resolution::unwinddetails#all_requirements()","bundler::plugin::sourcelist#all_sources()","bundler::sourcelist#all_sources()","symbol::all_symbols()","bundler::thor::base::classmethods#all_tasks()","threadswait#all_waits()","threadswait#all_waits()","threadswait::all_waits()","threadswait::all_waits()","integer#allbits?()","class#allocate()","objectspace::allocation_class_path()","objectspace::allocation_generation()","objectspace::allocation_method_id()","objectspace::allocation_sourcefile()","objectspace::allocation_sourceline()","acl#allow_addr?()","bundler::source::git#allow_git_ops?()","bundler::molinillo::delegates::specificationprovider#allow_missing?()","bundler::molinillo::specificationprovider#allow_missing?()","json::ext::generator::state#allow_nan?()","acl#allow_socket?()","bundler::settings#allow_sudo?()","bundler::gemhelper#allowed_push_host()","openssl::ssl::sslsocket#alpn_protocol()","bundler::gemhelper#already_tagged?()","rss::xmlstylesheet#alternate=()","date#amjd()","bundler::molinillo::dependencygraph::vertex#ancestor?()","module#ancestors()","rdoc::classmodule#ancestors()","rdoc::normalclass#ancestors()","rdoc::singleclass#ancestors()","rdoc::store#ancestors()","complex#angle()","float#angle()","numeric#angle()","array#any?()","bundler::mirrorsockets#any?()","enumerable#any?()","hash#any?()","rdoc::context#any_content()","integer#anybits?()","bundler::fetcher::base#api_fetcher?()","bundler::fetcher::compactindex#api_fetcher?()","bundler::fetcher::dependency#api_fetcher?()","net::apop#apop?()","net::apop#apop?()","net::pop3#apop?()","bundler::app_cache()","bundler::plugin::api::source#app_cache_dirname()","bundler::source::git#app_cache_dirname()","bundler::source::path#app_cache_dirname()","bundler::plugin::api::source#app_cache_path()","bundler::settings#app_cache_path()","bundler::app_config_path()","array#append()","net::imap#append()","optionparser::list#append()","shell::commandprocessor#append()","webrick::httputils::formdata#append_data()","rss::atom::commonmodel::append_features()","rss::atom::contentmodel::append_features()","rss::atom::dateconstruct::append_features()","rss::atom::personconstruct::append_features()","rss::atom::textconstruct::append_features()","rss::atom::uricontentmodel::append_features()","rss::basedublincoremodel#append_features()","rss::contentmodel::append_features()","rss::ituneschannelmodel::append_features()","rss::itunesitemmodel::append_features()","rss::imagefaviconmodel::append_features()","rss::imageitemmodel::append_features()","rss::maker::atompersonconstructbase::append_features()","rss::maker::atomtextconstructbase::append_features()","rss::maker::contentmodel::append_features()","rss::maker::dublincoremodel::append_features()","rss::maker::ituneschannelmodel::append_features()","rss::maker::itunesitemmodel::append_features()","rss::maker::imagefaviconmodel::append_features()","rss::maker::imageitemmodel::append_features()","rss::maker::slashmodel::append_features()","rss::maker::syndicationmodel::append_features()","rss::maker::taxonomytopicmodel::append_features()","rss::maker::taxonomytopicsmodel::append_features()","rss::maker::trackbackmodel::append_features()","rss::rss09::append_features()","rss::rss10::append_features()","rss::slashmodel::append_features()","rss::syndicationmodel::append_features()","rss::taxonomytopicmodel::append_features()","rss::taxonomytopicsmodel::append_features()","sync_m::append_features()","sync_m::append_features()","bundler::thor::actions#append_file()","bundler::thor::actions#append_to_file()","net::ftp::mlsxentry#appendable?()","bundler::thor::actions#apply()","rdoc::alias#aref()","rdoc::classmodule#aref()","rdoc::methodattr#aref()","rdoc::anymethod#aref_prefix()","rdoc::attr#aref_prefix()","rdoc::methodattr#aref_prefix()","complex#arg()","float#arg()","numeric#arg()","rdoc::anymethod#arglists()","nomethoderror#args()","bundler::thor::base::classmethods#argument()","bundler::thor::base::classmethods#arguments()","argf#argv()","process::argv0()","method#arity()","proc#arity()","unboundmethod#arity()","win32ole_variant::array()","json::ext::generator::state#array_nl()","json::ext::generator::state#array_nl=()","bigdecimal#as_json()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","json::genericobject#as_json()","openstruct#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","bundler::source::gemspec#as_path_source()","bundler::thor::shell::basic#as_unicode()","pathname#ascend()","encoding#ascii_compatible?()","json::ext::generator::state#ascii_only?()","string#ascii_only?()","encoding::converter::asciicompat_encoding()","date#asctime()","time#asctime()","cmath::asin()","math::asin()","cmath::asinh()","math::asinh()","bundler::thor::shell::basic#ask()","bundler::thor::shell::html#ask()","bundler::ui::shell#ask()","bundler::ui::silent#ask()","bundler::thor::shell::basic#ask_filtered()","bundler::cli::common::ask_for_spec_from()","bundler::thor::shell::basic#ask_simply()","openssl::pkey::ec::group#asn1_flag()","openssl::pkey::ec::group#asn1_flag=()","rdoc::servlet#asset()","fiddle::cstructentity#assign_names()","array#assoc()","env::assoc()","hash#assoc()","array#at()","time::at()","kernel#at_exit()","bigmath#atan()","cmath::atan()","math::atan()","cmath::atan2()","math::atan2()","cmath::atanh()","math::atanh()","file#atime()","file::atime()","file::stat#atime()","pathname#atime()","rss::atom::dateconstruct#atom_validate()","rss::atom::feed::entry::content#atom_validate()","rss::atom::textconstruct#atom_validate()","bundler::retry#attempt()","bundler::retry#attempts()","bundler::retry::attempts()","rexml::sax2listener#attlistdecl()","rexml::streamlistener#attlistdecl()","rexml::parsers::pullevent#attlistdecl?()","module#attr()","module#attr_accessor()","module#attr_reader()","module#attr_writer()","rexml::element#attribute()","rexml::quickpath::attribute()","rexml::doctype#attribute_of()","openssl::x509::request#attributes()","rdoc::store#attributes()","uri::ldap#attributes()","openssl::x509::request#attributes=()","uri::ldap#attributes=()","rexml::doctype#attributes_of()","net::smtp#auth_cram_md5()","openssl::cipher#auth_data=()","net::smtp#auth_login()","net::pop3::auth_only()","net::pop3#auth_only()","net::smtp#auth_plain()","openssl::cipher#auth_tag()","openssl::cipher#auth_tag=()","openssl::cipher#auth_tag_len=()","net::imap#authenticate()","net::smtp#authenticate()","webrick::httpauth::basicauth#authenticate()","webrick::httpauth::digestauth#authenticate()","openssl::cipher#authenticated?()","io#autoclose=()","io#autoclose?()","kernel#autoload()","module#autoload()","kernel#autoload?()","module#autoload?()","zlib::zstream#avail_in()","zlib::zstream#avail_out()","zlib::zstream#avail_out=()","bundler::fetcher::base#available?()","bundler::fetcher::compactindex#available?()","bundler::fetcher::dependency#available?()","bundler::thor::lineeditor::basic::available?()","bundler::thor::lineeditor::readline::available?()","rss::baselistener::available_tags()","rexml::quickpath::axe()","string#b()","exception#backtrace()","thread#backtrace()","exception#backtrace_locations()","thread#backtrace_locations()","bundler::environmentpreserver#backup()","bundler::thor::banner()","bundler::thor::group::banner()","optionparser#banner()","cgi::htmlextension#base()","optionparser#base()","random::formatter#base64()","digest::class::base64digest()","digest::instance#base64digest()","digest::instance#base64digest!()","rubyvm::instructionsequence#base_label()","thread::backtrace::location#base_label()","rdoc::toplevel#base_name()","bundler::thor::base::classmethods#basename()","file::basename()","pathname#basename()","openssl::ocsp::response#basic()","webrick::httpauth#basic_auth()","readline::basic_quote_characters()","readline::basic_quote_characters=()","readline::basic_word_break_characters()","readline::basic_word_break_characters=()","io#beep()","bundler::molinillo::ui#before_resolution()","bundler::resolver#before_resolution()","rdoc::task#before_running_rdoc()","rdoc::task#before_running_rdoc()","enumerator::arithmeticsequence#begin()","matchdata#begin()","range#begin()","rdoc::stats#begin_adding()","stringscanner#beginning_of_line?()","benchmark::benchmark()","bundler::thor::lineeditor::best_available()","comparable#between?()","bundler::bin_path()","gem::bin_path()","net::ftp#binary=()","rdoc::parser::binary?()","gem::binary_mode()","addrinfo#bind()","exception2messagemapper#bind()","fiddle::importer#bind()","socket#bind()","udpsocket#bind()","unboundmethod#bind()","fiddle::importer#bind_function()","kernel#binding()","proc#binding()","tracepoint#binding()","bundler::endpointspecification#bindir()","gem::bindir()","argf#binmode()","io#binmode()","stringio#binmode()","argf#binmode?()","csv#binmode?()","io#binmode?()","io::binread()","pathname#binread()","bundler::cli#binstubs()","io::binwrite()","pathname#binwrite()","file#birthtime()","file::birthtime()","file::stat#birthtime()","pathname#birthtime()","integer#bit_length()","openssl::bn#bit_set?()","openssl::pkey::rsa#blinding_off!()","openssl::pkey::rsa#blinding_on!()","file::stat#blksize()","kernel#block_given?()","digest::base#block_length()","digest::instance#block_length()","openssl::digest#block_length()","shell::processcontroller::block_output_synchronize()","rdoc::methodattr#block_params=()","string#block_scanf()","openssl::cipher#block_size()","file::blockdev?()","file::stat#blockdev?()","filetest#blockdev?()","pathname#blockdev?()","cgi::htmlextension#blockquote()","file::stat#blocks()","benchmark::bm()","benchmark::bmbm()","net::httpresponse#body()","webrick::httprequest#body()","net::httpgenericrequest#body=()","net::httpresponse#body=()","net::httpgenericrequest#body_exist?()","net::httpresponse::body_permitted?()","webrick::httprequest#body_reader()","net::httpgenericrequest#body_stream=()","socket::option#bool()","socket::option::bool()","rexml::functions::boolean()","irb::frame#bottom()","irb::frame::bottom()","bundler::source::git::gitproxy#branch()","rdoc::markdown#break_on_newline()","prettyprint#break_outmost_groups()","debugger__::break_points()","prettyprint#breakable()","prettyprint::singleline#breakable()","socket::ifaddr#broadaddr()","conditionvariable#broadcast()","monitormixin::conditionvariable#broadcast()","array#bsearch()","range#bsearch()","array#bsearch_index()","digest::bubblebabble()","digest::class::bubblebabble()","digest::instance#bubblebabble()","json::ext::generator::state#buffer_initial_length()","json::ext::generator::state#buffer_initial_length=()","bundler::definition::build()","bundler::index::build()","matrix::build()","uri::ftp::build()","uri::file::build()","uri::generic::build()","uri::http::build()","uri::ldap::build()","uri::mailto::build()","uri::generic::build2()","bundler::gemhelper#build_gem()","rdoc::tomdoc#build_heading()","rdoc::tomdoc#build_paragraph()","rdoc::tomdoc#build_verbatim()","bundler::buildmetadata::built_at()","bundler::gemhelper#built_gem_path()","openssl::pkey::ec::builtin_curves()","bundler::bundle_path()","bundler::bundler_major_version()","bundler::plugin::api::source#bundler_plugin_api_source?()","bundler::cli::doctor#bundles_for_gem()","csv::table#by_col()","csv::table#by_col!()","csv::table#by_col_or_row()","csv::table#by_col_or_row!()","openssl::engine::by_id()","csv::table#by_row()","csv::table#by_row!()","socket::option::byte()","socket::option#byte()","argf#bytes()","io#bytes()","rexml::child#bytes()","random#bytes()","random::bytes()","securerandom::bytes()","string#bytes()","stringio#bytes()","zlib::gzipreader#bytes()","string#bytesize()","string#byteslice()","bundler::persistent::net::http::persistent#ca_file=()","bundler::cli#cache()","bundler::plugin#cache()","bundler::plugin::api::source#cache()","bundler::runtime#cache()","bundler::source::git#cache()","bundler::source::path#cache()","bundler::plugin::api#cache_dir()","bundler::plugin::installer::git#cache_path()","bundler::source::git#cache_path()","rdoc::store#cache_path()","bundler::plugin::api::source#cached!()","bundler::source::metadata#cached!()","bundler::source::path#cached!()","bundler::sourcelist#cached!()","gdbm#cachesize=()","rdoc::stats#calculate()","bundler::parallelinstaller#call()","bundler::parallelinstaller::call()","continuation#call()","fiddle::closure::blockcaller#call()","fiddle::function#call()","logger::formatter#call()","method#call()","proc#call()","syslog::logger::formatter#call()","rdoc::anymethod#call_seq=()","kernel#callcc()","tracepoint#callee_id()","kernel#caller()","kernel#caller_locations()","bundler::thor::util::camel_case()","bundler::thor::shell::basic#can_display_colors?()","bundler::thor::shell::color#can_display_colors?()","bundler::thor::shell::html#can_display_colors?()","bundler::plugin::api::source#can_lock?()","bundler::source#can_lock?()","rdoc::parser::can_parse()","rdoc::parser::can_parse_by_name()","bundler::persistent::net::http::persistent#can_retry?()","rinda::tupleentry#cancel()","rinda::waittemplateentry#cancel()","webrick#cancel()","webrick::utils::timeouthandler::cancel()","rinda::tupleentry#canceled?()","optionparser#candidate()","optionparser::completion::candidate()","optionparser::completion#candidate()","psych::emitter#canonical()","psych::emitter#canonical=()","addrinfo#canonname()","net::smtp::response#capabilities()","net::imap#capability()","net::smtp#capable_auth_types()","net::smtp#capable_cram_md5_auth?()","net::smtp#capable_login_auth?()","net::smtp#capable_plain_auth?()","net::smtp#capable_starttls?()","string#capitalize()","symbol#capitalize()","string#capitalize!()","cgi::htmlextension#caption()","open3::capture2()","open3::capture2e()","open3::capture3()","matchdata#captures()","stringscanner#captures()","string#casecmp()","symbol#casecmp()","string#casecmp?()","symbol#casecmp?()","regexp#casefold?()","shell::commandprocessor#cat()","kernel#catch()","timeout::error::catch()","timeout::error::catch()","timeout::error::catch()","exception#cause()","cmath::cbrt()","math::cbrt()","bundler::fileutils::cd()","fileutils::cd()","shell#cd()","shell::cd()","rexml::sax2listener#cdata()","rexml::streamlistener#cdata()","rexml::parsers::pullevent#cdata?()","rexml::element#cdatas()","bigdecimal#ceil()","float#ceil()","integer#ceil()","numeric#ceil()","rational#ceil()","rexml::functions::ceiling()","string#center()","openssl::ssl::sslsocket#cert()","bundler::persistent::net::http::persistent#cert=()","openssl::ocsp::singleresponse#cert_status()","bundler::persistent::net::http::persistent#cert_store=()","openssl::ocsp::request#certid()","openssl::ocsp::singleresponse#certid()","bundler::persistent::net::http::persistent#certificate=()","openssl::pkcs7#certificates()","openssl::pkcs7#certificates=()","net::pop3::certs()","enumerable#chain()","openssl::x509::storecontext#chain()","openssl::netscape::spki#challenge()","webrick::httpauth::basicauth#challenge()","webrick::httpauth::digestauth#challenge()","openssl::netscape::spki#challenge=()","rdoc::encoding::change_encoding()","process::gid::change_privilege()","process::uid::change_privilege()","irb::context#change_workspace()","observable#changed()","observable#changed?()","rss::rexmllikexmlparser#character()","rexml::sax2listener#characters()","file::chardev?()","file::stat#chardev?()","filetest#chardev?()","pathname#chardev?()","stringscanner#charpos()","argf#chars()","io#chars()","string#chars()","stringio#chars()","openuri::meta#charset()","bundler::fileutils::chdir()","bundler::sharedhelpers#chdir()","dir::chdir()","fileutils::chdir()","net::ftp#chdir()","shell#chdir()","bundler::cli#check()","net::imap#check()","pty::check()","rexml::text::check()","stringscanner#check()","bundler::cli::doctor#check!()","json::ext::generator::state#check_circular?()","bundler::thor::base::classmethods#check_default_type!()","rdoc::options#check_files()","bundler::parallelinstaller#check_for_corrupt_lockfile()","rdoc::options#check_generator()","drb::drbserver#check_insecure_method()","pp::ppmethods#check_inspect_key()","openssl::pkey::ec#check_key()","rdoc::parser::check_modeline()","rdoc::task#check_names()","rdoc::task#check_names()","openssl::ocsp::request#check_nonce()","uri::file#check_password()","openssl::x509::certificate#check_private_key()","makemakefile#check_signedness()","makemakefile#check_sizeof()","bundler::thor::check_unknown_options!()","bundler::thor::base::classmethods#check_unknown_options!()","stringscanner#check_until()","uri::file#check_user()","uri::file#check_userinfo()","openssl::ocsp::singleresponse#check_validity()","cgi::htmlextension#checkbox()","cgi::htmlextension#checkbox_group()","bundler::source::git::gitproxy#checkout()","bundler::compactindexclient::updater#checksum_for_file()","bundler::compactindexclient::cache#checksums()","rdoc::context#child_name()","dir#children()","dir::children()","pathname#children()","rexml::light::node#children()","rexml::parent#children()","rubyvm::abstractsyntaxtree::node#children()","bundler::fileutils::chmod()","bundler::thor::actions#chmod()","file::chmod()","file#chmod()","fileutils::chmod()","pathname#chmod()","bundler::fileutils::chmod_r()","fileutils::chmod_r()","kernel#chomp()","string#chomp()","string#chomp!()","kernel#chop()","string#chop()","string#chop!()","bundler::fileutils::chown()","file#chown()","file::chown()","fileutils::chown()","pathname#chown()","bundler::fileutils::chown_r()","fileutils::chown_r()","integer#chr()","string#chr()","dir::chroot()","enumerable#chunk()","enumerator::lazy#chunk()","enumerable#chunk_while()","enumerator::lazy#chunk_while()","webrick::httpresponse#chunked=()","webrick::httpresponse#chunked?()","openssl::engine#cipher()","openssl::ssl::sslsocket#cipher()","openssl::pkcs7#cipher=()","openssl::cipher::ciphers()","openssl::ssl::sslcontext#ciphers()","openssl::ssl::sslcontext#ciphers=()","date::civil()","datetime::civil()","comparable#clamp()","object#class()","rdoc::context#class_attributes()","module#class_eval()","module#class_exec()","rdoc::store#class_file()","rdoc::context#class_method_list()","rdoc::store#class_methods()","rss::baselistener::class_name()","bundler::thor::base::classmethods#class_option()","bundler::thor::base::classmethods#class_options()","rdoc::store#class_path()","module#class_variable_defined?()","module#class_variable_get()","module#class_variable_set()","module#class_variables()","rdoc::context#classes()","rdoc::context#classes_and_modules()","rdoc::context#classes_hash()","rdoc::store#classes_hash()","set#classify()","bundler::cli#clean()","bundler::runtime#clean()","bundler::gemhelper#clean?()","bundler::cli::common::clean_after_install?()","bundler::clean_env()","bundler::clean_exec()","bundler::clean_system()","pathname#cleanpath()","openssl::engine::cleanup()","openssl::x509::storecontext#cleanup()","array#clear()","bundler::thor::coreext::orderedhash#clear()","dbm#clear()","env::clear()","gc::profiler::clear()","gdbm#clear()","hash#clear()","queue#clear()","sdbm#clear()","set#clear()","sizedqueue#clear()","string#clear()","stringscanner#clear()","openssl::bn#clear_bit!()","rdoc::classmodule#clear_comment()","gem::clear_default_specs()","bundler::clear_gemspec_cache()","gem::clear_paths()","bundler::cli#cli_help()","openssl::ssl::sslsocket#client_ca()","webrick::httpstatus::client_error?()","rdoc::task#clobber_task_description()","rdoc::task#clobber_task_description()","process::clock_getres()","process::clock_gettime()","bigdecimal#clone()","method#clone()","numeric#clone()","object#clone()","rexml::attribute#clone()","rexml::cdata#clone()","rexml::comment#clone()","rexml::doctype#clone()","rexml::document#clone()","rexml::element#clone()","rexml::instruction#clone()","rexml::text#clone()","rexml::xmldecl#clone()","singleton#clone()","unboundmethod#clone()","argf#close()","cgi::session#close()","cgi::session::filestore#close()","cgi::session::memorystore#close()","cgi::session::nullstore#close()","cgi::session::pstore#close()","dbm#close()","dir#close()","fiddle::handle#close()","gdbm#close()","io#close()","logger#close()","logger::logdevice#close()","net::ftp#close()","net::imap#close()","openssl::buffering#close()","openssl::ssl::sslserver#close()","queue#close()","resolv::dns#close()","sdbm#close()","sockssocket#close()","sizedqueue#close()","stringio#close()","syslog::close()","tempfile#close()","webrick::basiclog#close()","zlib::gzipfile#close()","zlib::zstream#close()","tempfile#close!()","fiddle::handle#close_enabled?()","io#close_on_exec=()","io#close_on_exec?()","basicsocket#close_read()","io#close_read()","stringio#close_read()","basicsocket#close_write()","io#close_write()","stringio#close_write()","argf#closed?()","dbm#closed?()","gdbm#closed?()","io#closed?()","net::ftp#closed?()","openssl::ssl::socketforwarder#closed?()","queue#closed?()","sdbm#closed?()","stringio#closed?()","zlib::gzipfile#closed?()","zlib::zstream#closed?()","stringio#closed_read?()","stringio#closed_write?()","openssl::engine#cmds()","bundler::fileutils::cmp()","fileutils::cmp()","openssl::bn#cmp()","openssl::ocsp::certificateid#cmp()","openssl::x509::name#cmp()","openssl::ocsp::certificateid#cmp_issuer()","socket::ancillarydata#cmsg_is?()","webrick::httpstatus::status#code()","irb::workspace#code_around_binding()","win32ole::codepage()","win32ole::codepage=()","argf#codepoints()","io#codepoints()","string#codepoints()","stringio#codepoints()","bigdecimal#coerce()","float#coerce()","integer#coerce()","numeric#coerce()","openssl::bn#coerce()","uri::generic#coerce()","openssl::pkey::ec::group#cofactor()","csv#col_sep()","array#collect()","enumerable#collect()","enumerator::lazy#collect()","rexml::elements#collect()","array#collect!()","set#collect!()","enumerable#collect_concat()","enumerator::lazy#collect_concat()","rdoc::tokenstream#collect_tokens()","ripper#column()","ripper::filter#column()","csv::parser#column_separator()","matrix::column_vector()","matrix::columns()","array#combination()","matrix#combine()","matrix::combine()","pp::ppmethods#comma_breakable()","bundler::plugin::api::command()","drb::extservmanager::command()","drb::extservmanager::command=()","bundler::plugin#command?()","bundler::thor::command_help()","bundler::plugin::index#command_plugin()","bundler::thor::base::classmethods#commands()","rexml::sax2listener#comment()","rexml::streamlistener#comment()","zlib::gzipfile#comment()","rdoc::codeobject#comment=()","zlib::gzipwriter#comment=()","rexml::parsers::pullevent#comment?()","bundler::thor::actions#comment_lines()","rexml::element#comments()","date::commercial()","datetime::commercial()","pstore#commit()","bundler::gemhelper#committed?()","array#compact()","hash#compact()","array#compact!()","hash#compact!()","bundler::fetcher::compactindex::compact_index_request()","hash#compare_by_identity()","set#compare_by_identity()","hash#compare_by_identity?()","set#compare_by_identity?()","bundler::fileutils::compare_file()","fileutils::compare_file()","rexml::functions::compare_language()","bundler::fileutils::compare_stream()","fileutils::compare_stream()","encoding::compatible?()","regexp::compile()","rubyvm::instructionsequence::compile()","rubyvm::instructionsequence::compile_file()","rubyvm::instructionsequence::compile_option()","rubyvm::instructionsequence::compile_option=()","optionparser::completion#complete()","optionparser::list#complete()","rdoc::classmodule#complete()","rdoc::store#complete()","readline::completer_quote_characters()","readline::completer_quote_characters=()","readline::completer_word_break_characters()","readline::completer_word_break_characters=()","readline::completion_append_character()","readline::completion_append_character=()","readline::completion_case_fold()","readline::completion_case_fold=()","readline::completion_proc()","readline::completion_proc=()","readline::completion_quote_character()","object#component()","uri::generic#component()","uri::generic::component()","uri::generic#component_ary()","openssl::pkey::dh#compute_key()","array#concat()","rexml::functions::concat()","shell::commandprocessor#concat()","string#concat()","stringscanner#concat()","irb::conf()","bundler::cli#config()","drb::config()","gem::config_file()","gem::configuration()","gem::configuration=()","bundler::configure()","json::ext::generator::state#configure()","bundler::cli::common::configure_gem_version_promoter()","bundler::configured_bundle_path()","bundler::ui::shell#confirm()","bundler::ui::silent#confirm()","bundler::molinillo::delegates::resolutionstate#conflicts()","etc::confstr()","complex#conj()","numeric#conj()","complex#conjugate()","numeric#conjugate()","addrinfo#connect()","drb::drbsslsocket::sslconfig#connect()","net::ftp#connect()","openssl::ssl::sslsocket#connect()","socket#connect()","udpsocket#connect()","win32ole::connect()","basicsocket#connect_address()","addrinfo#connect_from()","addrinfo#connect_internal()","openssl::ssl::sslsocket#connect_nonblock()","socket#connect_nonblock()","addrinfo#connect_to()","bundler::persistent::net::http::persistent#connection_close?()","bundler::persistent::net::http::persistent#connection_for()","bundler::persistenthttp#connection_for()","bundler::persistent::net::http::persistent#connection_keep_alive?()","bundler::cli#console()","io::console()","module#const_defined?()","module#const_get()","bundler::sharedhelpers#const_get_safely()","win32ole::const_load()","module#const_missing()","module#const_set()","module::constants()","module#constants()","rss::itunesitemmodel::itunesduration::construct()","rexml::iosource#consume()","rexml::source#consume()","rexml::functions::contains()","bundler::source::git::gitproxy#contains?()","rss::itunesitemmodel::itunesduration#content=()","rss::maker::itunesitemmodel::itunesdurationbase#content=()","openuri::meta#content_encoding()","webrick::httprequest#content_length()","webrick::httpresponse#content_length()","webrick::httpresponse#content_length=()","rss::element::content_setup()","openuri::meta#content_type()","rss::atom::contentmodel::classmethods#content_type()","webrick::httprequest#content_type()","webrick::httpresponse#content_type()","webrick::httpresponse#content_type=()","bundler::dsl::dslerror#contents()","debugger__::context()","rexml::doctype#context()","rexml::parseexception#context()","rexml::functions::context=()","net::smtp::response#continue?()","net::http#continue_timeout=()","csv#convert()","csv::fieldsconverter#convert()","encoding::converter#convert()","optionparser::completion#convert()","rdoc::markup#convert()","rss::converter#convert()","rss::element#convert()","webrick::httpversion::convert()","bundler::yamlserializer#convert_to_backward_compatible_key()","rss::element#converter=()","csv#converters()","makemakefile#convertible_int()","encoding::converter#convpath()","io#cooked()","io#cooked!()","bundler::fileutils::copy()","fileutils::copy()","net::http#copy()","net::imap#copy()","openssl::bn#copy()","bundler::fileutils::copy_entry()","fileutils::copy_entry()","bundler::fileutils::copy_file()","bundler::thor::actions#copy_file()","fileutils::copy_file()","openssl::ocsp::basicresponse#copy_nonce()","bundler::fileutils::copy_stream()","fileutils::copy_stream()","io::copy_stream()","bundler::source::git::gitproxy#copy_to()","process::status#coredump?()","bigmath#cos()","cmath::cos()","math::cos()","cmath::cosh()","math::cosh()","array#count()","enumerable#count()","gc::count()","rexml::functions::count()","string#count()","objectspace::count_imemo_objects()","objectspace::count_nodes()","objectspace::count_objects()","objectspace::count_objects_size()","observable#count_observers()","objectspace::count_symbols()","objectspace::count_tdata_objects()","bundler::versionranges::reqr#cover?()","range#cover?()","rdoc::stats#coverage_level=()","bundler::fileutils::cp()","fileutils::cp()","fileutils::cp_lr()","bundler::fileutils::cp_r()","fileutils::cp_r()","bundler::gemhelpers::platformmatch::cpu_match()","net::smtp::response#cram_md5_challenge()","zlib::gzipfile#crc()","zlib::crc32()","zlib::crc32_combine()","zlib::crc_table()","net::ftp::mlsxentry#creatable?()","fiddle::cstructbuilder::create()","net::imap#create()","openssl::ocsp::response::create()","openssl::pkcs12::create()","psych::visitors::jsontree::create()","psych::visitors::toruby::create()","psych::visitors::yamltree::create()","resolv::dns::name::create()","resolv::ipv4::create()","resolv::ipv6::create()","resolv::loc::alt::create()","resolv::loc::coord::create()","resolv::loc::size::create()","tempfile::create()","openssl::x509::extensionfactory#create_ext()","openssl::x509::extensionfactory#create_ext_from_array()","openssl::x509::extensionfactory#create_ext_from_hash()","openssl::x509::extensionfactory#create_ext_from_string()","openssl::x509::extensionfactory#create_extension()","bundler::thor::actions#create_file()","rexml::sourcefactory::create_from()","win32ole::create_guid()","makemakefile#create_header()","bundler::thor::actions#create_link()","webrick::utils::create_listeners()","makemakefile#create_makefile()","webrick::httpserver#create_request()","webrick::httpserver#create_response()","webrick::utils::create_self_signed_cert()","net::pop3::create_ssl_params()","fiddle::importer#create_value()","bundler::uricredentialsfilter#credential_filtered_string()","bundler::uricredentialsfilter#credential_filtered_uri()","bundler::settings#credentials_for()","openssl::x509::extension#critical=()","openssl::x509::extension#critical?()","openssl::x509::extensionfactory#crl=()","openssl::pkcs7#crls()","openssl::pkcs7#crls=()","string#crypt()","rdoc::markdown#css()","date#ctime()","file::ctime()","file#ctime()","file::stat#ctime()","pathname#ctime()","time#ctime()","openssl::engine#ctrl_cmd()","fiber::current()","rdoc::rdoc::current()","thread::current()","rdoc::rdoc::current=()","openssl::x509::storecontext#current_cert()","bundler::thor::invocation#current_command_chain()","openssl::x509::storecontext#current_crl()","bundler::definition#current_dependencies()","bundler::gemdeps#current_dependencies()","bundler::dependency#current_env?()","prettyprint#current_group()","rexml::iosource#current_line()","rexml::source#current_line()","bundler::dependency#current_platform?()","bundler::current_ruby()","rdoc::context#current_section()","drb::current_server()","method#curry()","proc#curry()","io#cursor()","io#cursor=()","openssl::pkey::ec::group#curve_name()","date#cwday()","date#cweek()","date#cwyear()","array#cycle()","enumerable#cycle()","matrix::eigenvaluedecomposition#d()","process::daemon()","net::smtp#data()","resolv::dns::resource::txt#data()","socket::ancillarydata#data()","socket::option#data()","openssl::pkcs7#data=()","zlib::zstream#data_type()","gem::datadir()","rss::maker::channelbase#date=()","rss::maker::itemsbase::itembase#date=()","rss::maker::itemsbase::itembase::sourcebase#date=()","logger#datetime_format()","logger#datetime_format=()","date#day()","time#day()","date#day_fraction()","array#dclone()","float#dclone()","integer#dclone()","object#dclone()","symbol#dclone()","rexml::parsers::sax2parser#deafen()","bundler::compactindexclient::debug()","bundler::molinillo::ui#debug()","bundler::resolver#debug()","bundler::ui::shell#debug()","bundler::ui::silent#debug()","logger#debug()","net::imap::debug()","openssl::debug()","syslog::logger#debug()","webrick::basiclog#debug()","net::imap::debug=()","openssl::debug=()","shell#debug=()","shell::debug=()","bundler::molinillo::ui#debug?()","bundler::resolver#debug?()","bundler::ui::shell#debug?()","bundler::ui::silent#debug?()","irb::context#debug?()","logger#debug?()","webrick::basiclog#debug?()","irb::context#debug_level=()","net::smtp#debug_output=()","debugger__::debug_thread_info()","openssl::asn1::decode()","rexml::encoding#decode()","uri::escape#decode()","base64#decode64()","openssl::asn1::decode_all()","net::imap::decode_utf7()","uri::decode_www_form()","uri::decode_www_form_component()","openssl::cipher#decrypt()","openssl::pkcs7#decrypt()","ripper::dedent_string()","rexml::parent#deep_clone()","rss::maker::base::def_array_element()","rss::maker::atompersons#def_atom_persons()","rss::maker::atomtextconstruct::def_atom_text_construct()","erb#def_class()","rss::itunesmodelutils#def_class_accessor()","rss::maker::itunesbasemodel#def_class_accessor()","rss::maker::base::def_classed_element()","rss::maker::base::def_classed_element_without_accessor()","rss::maker::base::def_classed_elements()","rss::converter#def_convert()","rss::element::def_corresponded_attr_reader()","rss::element::def_corresponded_attr_writer()","rss::maker::itunesbasemodel#def_csv_accessor()","rss::maker::base::def_csv_element()","forwardable#def_delegator()","singleforwardable#def_delegator()","forwardable#def_delegators()","singleforwardable#def_delegators()","exception2messagemapper#def_e2message()","rss::itunesmodelutils#def_element_class_accessor()","rss::itunesmodelutils#def_elements_class_accessor()","rss::maker::itunesbasemodel#def_elements_class_accessor()","rss::converter#def_else_enc()","erb::defmethod::def_erb_method()","exception2messagemapper#def_exception()","rss::maker::itunesbasemodel#def_explicit_clean_other_accessor()","irb::contextextender::def_extend_command()","irb::extendcommandbundle::def_extend_command()","optionparser#def_head_option()","rss::converter#def_iconv_convert()","irb::inspector::def_inspector()","forwardable#def_instance_delegator()","forwardable#def_instance_delegators()","erb#def_method()","erb#def_module()","irb::notifier::def_notifier()","irb::notifier::compositenotifier#def_notifier()","optionparser#def_option()","rss::maker::base::def_other_element()","rss::maker::base::def_other_element_without_accessor()","irb::methodextender#def_post_proc()","irb::methodextender#def_pre_proc()","rss::converter#def_same_enc()","singleforwardable#def_single_delegator()","singleforwardable#def_single_delegators()","shell::def_system_command()","shell::commandprocessor::def_system_command()","optionparser#def_tail_option()","rss::converter#def_to_euc_jp_from_iso_2022_jp()","rss::converter#def_to_euc_jp_from_shift_jis()","rss::converter#def_to_euc_jp_from_utf_8()","rss::converter#def_to_iso_2022_jp_from_euc_jp()","rss::converter#def_to_iso_8859_1_from_utf_8()","rss::converter#def_to_shift_jis_from_euc_jp()","rss::converter#def_to_shift_jis_from_utf_8()","rss::converter#def_to_utf_8_from_euc_jp()","rss::converter#def_to_utf_8_from_iso_8859_1()","rss::converter#def_to_utf_8_from_shift_jis()","rss::converter#def_uconv_convert_if_can()","rss::maker::itunesbasemodel#def_yes_other_accessor()","hash#default()","rexml::xmldecl::default()","win32ole_param#default()","hash#default=()","drb::drbserver::default_acl()","drb::drbserver::default_argc_limit()","bundler::retry::default_attempts()","bundler::default_bundle_dir()","bundler::sharedhelpers#default_bundle_dir()","bundler::thor::default_command()","win32ole_type#default_event_sources()","encoding::default_external()","encoding::default_external=()","bundler::stubspecification#default_gem()","bundler::default_gemfile()","bundler::sharedhelpers#default_gemfile()","drb::drbserver::default_id_conv()","net::imap::default_imap_port()","net::imap::default_imaps_port()","encoding::default_internal()","encoding::default_internal=()","drb::drbserver::default_load_limit()","bundler::default_lockfile()","bundler::sharedhelpers#default_lockfile()","win32ole_type#default_ole_types()","rss::parser::default_parser()","rss::parser::default_parser=()","net::ftp::default_passive()","net::ftp::default_passive=()","net::pop3::default_pop3_port()","net::pop3::default_pop3s_port()","net::http::default_port()","net::imap::default_port()","net::pop3::default_port()","net::smtp::default_port()","uri::generic::default_port()","uri::generic#default_port()","hash#default_proc()","hash#default_proc=()","shell::default_record_separator()","shell::default_record_separator=()","bundler::retry::default_retries()","drb::drbserver::default_safe_level()","bundler::sourcelist#default_source()","irb::default_src_encoding()","net::smtp::default_ssl_context()","net::imap::default_ssl_port()","net::smtp::default_ssl_port()","net::smtp::default_submission_port()","shell::default_system_path()","shell::default_system_path=()","bundler::thor::default_task()","rdoc::options#default_title=()","net::imap::default_tls_port()","net::smtp::default_tls_port()","rdoc::task#defaults()","rdoc::task#defaults()","optionparser#define()","rdoc::task#define()","rdoc::task#define()","sync_m::define_aliases()","sync_m::define_aliases()","optionparser#define_by_keywords()","objectspace::define_finalizer()","optionparser#define_head()","module#define_method()","object#define_singleton_method()","optionparser#define_tail()","bundler::deployment::define_task()","tracepoint#defined_class()","bundler::plugin::events::defined_event?()","rdoc::context#defined_in?()","bundler::definition()","rdoc::attr#definition()","rdoc::normalclass#definition()","rdoc::normalmodule#definition()","rdoc::singleclass#definition()","rdoc::markdown#definition_lists()","gem::deflate()","zlib::deflate()","zlib::deflate::deflate()","zlib::deflate#deflate()","openssl::pkey::ec::group#degree()","forwardable#delegate()","singleforwardable#delegate()","net::ftp::mlsxentry#deletable?()","array#delete()","bundler::thor::coreext::orderedhash#delete()","cgi::session#delete()","cgi::session::filestore#delete()","cgi::session::memorystore#delete()","cgi::session::nullstore#delete()","cgi::session::pstore#delete()","csv::row#delete()","csv::table#delete()","dbm#delete()","dir::delete()","env::delete()","file::delete()","gdbm#delete()","hash#delete()","irb::jobmanager#delete()","net::ftp#delete()","net::http#delete()","net::imap#delete()","net::popmail#delete()","pstore#delete()","pathname#delete()","rexml::attributes#delete()","rexml::elements#delete()","rexml::parent#delete()","rinda::tuplebag#delete()","rinda::tuplebag::tuplebin#delete()","sdbm#delete()","set#delete()","string#delete()","tempfile#delete()","yaml::dbm#delete()","net::popmail#delete!()","string#delete!()","set#delete?()","net::pop3#delete_all()","net::pop3::delete_all()","rexml::attributes#delete_all()","rexml::elements#delete_all()","array#delete_at()","rexml::parent#delete_at()","rexml::element#delete_attribute()","bundler::molinillo::dependencygraph#delete_edge()","bundler::molinillo::dependencygraph::log#delete_edge()","rexml::element#delete_element()","openstruct#delete_field()","array#delete_if()","bundler::thor::coreext::orderedhash#delete_if()","csv::row#delete_if()","csv::table#delete_if()","dbm#delete_if()","env::delete_if()","gdbm#delete_if()","hash#delete_if()","rexml::parent#delete_if()","sdbm#delete_if()","set#delete_if()","yaml::dbm#delete_if()","rdoc::rubygemshook#delete_legacy_args()","rexml::element#delete_namespace()","observable#delete_observer()","observable#delete_observers()","webrick::httpauth::htdigest#delete_passwd()","webrick::httpauth::htpasswd#delete_passwd()","string#delete_prefix()","string#delete_prefix!()","csv::deletesuffix#delete_suffix()","string#delete_suffix()","string#delete_suffix!()","readline::delete_text()","rinda::tuplebag#delete_unless_alive()","net::popmail#deleted?()","complex#denominator()","float#denominator()","integer#denominator()","numeric#denominator()","rational#denominator()","makemakefile#depend_rules()","bundler::compactindexclient#dependencies()","bundler::compactindexclient::cache#dependencies()","bundler::gemdeps#dependencies()","bundler::parallelinstaller::specinstallation#dependencies()","bundler::remotespecification#dependencies()","bundler::index#dependencies_eql?()","bundler::molinillo::delegates::specificationprovider#dependencies_for()","bundler::molinillo::specificationprovider#dependencies_for()","bundler::resolver#dependencies_for()","bundler::resolver::specgroup#dependencies_for_activated_platforms()","bundler::parallelinstaller::specinstallation#dependencies_installed?()","bundler::fetcher::dependency#dependency_api_uri()","bundler::index#dependency_names()","bundler::source#dependency_names_to_double_check()","bundler::fetcher::dependency#dependency_specs()","module#deprecate_constant()","bundler::cli::deprecated_option()","bundler::molinillo::delegates::resolutionstate#depth()","json::ext::generator::state#depth()","json::ext::generator::state#depth=()","bundler::worker#deq()","queue#deq()","sizedqueue#deq()","webrick::httputils::dequote()","bundler::thor::desc()","bundler::thor::group::desc()","pathname#descend()","bundler::molinillo::dependencygraph::vertex#descendent?()","encoding::converter#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding()","encoding::undefinedconversionerror#destination_encoding()","encoding::invalidbytesequenceerror#destination_encoding_name()","encoding::undefinedconversionerror#destination_encoding_name()","bundler::thor::actions#destination_root()","bundler::thor::actions#destination_root=()","matrix::lupdecomposition#det()","process::detach()","bundler::molinillo::dependencygraph#detach_vertex_named()","bundler::molinillo::dependencygraph::log#detach_vertex_named()","openssl::pkcs7#detached()","openssl::pkcs7#detached=()","openssl::pkcs7#detached?()","enumerable#detect()","rdoc::encoding::detect_encoding()","gem::detect_gemdeps()","bundler::persistent::net::http::persistent::detect_idle_timeout()","matrix::lupdecomposition#determinant()","file::stat#dev()","file::stat#dev_major()","file::stat#dev_minor()","jacobian#dfdxi()","openssl::pkey::ec#dh_compute_key()","matrix::diagonal()","bundler::rubyversion#diff()","array#difference()","set#difference()","array#dig()","csv::row#dig()","csv::table#dig()","hash#dig()","openstruct#dig()","struct#dig()","bundler::sharedhelpers#digest()","digest::class::digest()","digest::instance#digest()","openssl::digest::digest()","openssl::engine#digest()","openssl::hmac::digest()","openssl::hmac#digest()","digest::instance#digest!()","digest::base#digest_length()","digest::instance#digest_length()","openssl::digest#digest_length()","integer#digits()","gem::dir()","net::ftp#dir()","makemakefile#dir_config()","rdoc::classmodule#direct_ancestors()","rdoc::normalclass#direct_ancestors()","bundler::thor::actions#directory()","file::directory?()","file::stat#directory?()","filetest#directory?()","net::ftp::mlsxentry#directory?()","pathname#directory?()","net::ftp::mlsxentry#directory_makable?()","file::dirname()","pathname#dirname()","gc::disable()","gc::profiler::disable()","tracepoint#disable()","fiddle::handle#disable_close()","bundler::thor::disable_required_check!()","net::pop3#disable_ssl()","net::pop3::disable_ssl()","net::smtp#disable_ssl()","net::smtp#disable_starttls()","net::smtp#disable_tls()","rubyvm::instructionsequence#disasm()","rubyvm::instructionsequence::disasm()","rubyvm::instructionsequence::disassemble()","rubyvm::instructionsequence#disassemble()","net::imap#disconnect()","net::imap#disconnected?()","set#disjoint?()","bundler::cli::dispatch()","win32ole_method#dispid()","debugger__::display()","object#display()","rdoc::codeobject#display?()","rdoc::toplevel#display?()","bigdecimal#div()","integer#div()","numeric#div()","set#divide()","bigdecimal#divmod()","float#divmod()","integer#divmod()","numeric#divmod()","fiddle::importer#dlload()","fiddle::dlopen()","fiddle::dlunwrap()","fiddle::dlwrap()","uri::ldap#dn()","uri::ldap#dn=()","rdoc::servlet#do_get()","webrick::httpservlet::abstractservlet#do_get()","webrick::httpservlet::erbhandler#do_get()","webrick::httpservlet::abstractservlet#do_head()","webrick::httpserver#do_options()","webrick::httpservlet::abstractservlet#do_options()","webrick::httpservlet::erbhandler#do_post()","basicsocket::do_not_reverse_lookup()","basicsocket#do_not_reverse_lookup()","basicsocket#do_not_reverse_lookup=()","basicsocket::do_not_reverse_lookup=()","openssl::ssl::socketforwarder#do_not_reverse_lookup=()","racc::parser#do_parse()","rinda::ringserver#do_reply()","rss::baseparser#do_validate()","rss::baseparser#do_validate=()","rinda::ringserver#do_write()","rdoc::stats#doc_stats()","bundler::cli#doctor()","bundler::cli::issue#doctor()","rexml::attribute#doctype()","rexml::document#doctype()","rexml::sax2listener#doctype()","rexml::streamlistener#doctype()","rexml::text#doctype()","rexml::parsers::pullevent#doctype?()","rexml::streamlistener#doctype_end()","rdoc::rdoc#document()","rdoc::rubygemshook#document()","rexml::child#document()","rexml::document#document()","rexml::element#document()","psych::nodes::document#document?()","psych::nodes::node#document?()","rdoc::codeobject#document_children=()","rdoc::codeobject#document_self=()","rdoc::classmodule#document_self_or_methods()","rdoc::servlet#documentation_page()","rdoc::servlet#documentation_search()","rdoc::servlet#documentation_source()","rdoc::classmodule#documented?()","rdoc::codeobject#documented?()","rdoc::constant#documented?()","rdoc::methodattr#documented?()","rexml::validation::event#done?()","rdoc::stats#done_adding()","rdoc::codeobject#done_documenting=()","gem::done_installing()","bundler::plugin::api::source#double_check_for()","bundler::source#double_check_for()","bigdecimal::double_fig()","bundler::molinillo::dependencygraph::action#down()","bundler::molinillo::dependencygraph::addedgenocircular#down()","bundler::molinillo::dependencygraph::deleteedge#down()","bundler::molinillo::dependencygraph::detachvertexnamed#down()","bundler::molinillo::dependencygraph::tag#down()","string#downcase()","symbol#downcase()","string#downcase!()","date#downto()","integer#downto()","rexml::xmldecl#dowrite()","array#drop()","enumerable#drop()","enumerator::lazy#drop()","array#drop_while()","enumerable#drop_while()","enumerator::lazy#drop_while()","openssl::pkey::ec#dsa_sign_asn1()","openssl::pkey::ec#dsa_verify_asn1()","time#dst?()","socket::ifaddr#dstaddr()","encoding#dummy?()","makemakefile#dummy_makefile()","bundler::yamlserializer#dump()","json#dump()","json::genericobject::dump()","marshal::dump()","objectspace::dump()","psych::dump()","rexml::validation::validator#dump()","string#dump()","objectspace::dump_all()","bundler::yamlserializer#dump_hash()","psych::dump_stream()","bigdecimal#dup()","numeric#dup()","object#dup()","singleton#dup()","bundler::cli::doctor#dylibs()","bundler::cli::doctor#dylibs_darwin()","bundler::cli::doctor#dylibs_ldd()","bundler::thor::shell::basic#dynamic_width()","bundler::thor::shell::basic#dynamic_width_stty()","bundler::thor::shell::basic#dynamic_width_tput()","exception2messagemapper::e2mm::e2mm_message()","argf#each()","array#each()","bundler::index#each()","bundler::molinillo::dependencygraph#each()","bundler::molinillo::dependencygraph::log#each()","bundler::settings::mirrors#each()","bundler::thor::coreext::orderedhash#each()","csv#each()","csv::fieldsconverter#each()","csv::row#each()","csv::table#each()","dbm#each()","dir#each()","env::each()","enumerator#each()","enumerator::arithmeticsequence#each()","enumerator::chain#each()","gdbm#each()","getoptlong#each()","hash#each()","io#each()","net::pop3#each()","objectspace::weakmap#each()","openssl::asn1::constructive#each()","openssl::buffering#each()","openssl::config#each()","prime#each()","prime::pseudoprimegenerator#each()","psych::nodes::node#each()","rexml::attlistdecl#each()","rexml::attributes#each()","rexml::elements#each()","rexml::light::node#each()","rexml::parent#each()","rexml::parsers::pullparser#each()","rexml::quickpath::each()","rexml::syncenumerator#each()","rexml::xpath::each()","rss::xml::element#each()","range#each()","rinda::notifytemplateentry#each()","rinda::ringfinger#each()","rinda::tuple#each()","sdbm#each()","set#each()","shell::cat#each()","shell::concat#each()","shell::echo#each()","shell::filter#each()","shell::glob#each()","shell::systemcommand#each()","shell::tee#each()","shell::void#each()","stringio#each()","struct#each()","webrick::httpauth::htdigest#each()","webrick::httpauth::htpasswd#each()","webrick::httprequest#each()","webrick::httpresponse#each()","win32ole#each()","yaml::dbm#each()","zlib::gzipreader#each()","shell::processcontroller::each_active_object()","resolv::each_address()","resolv#each_address()","resolv::dns#each_address()","resolv::hosts#each_address()","resolv::mdns#each_address()","rdoc::classmodule#each_ancestor()","rdoc::context#each_attribute()","rexml::attributes#each_attribute()","argf#each_byte()","io#each_byte()","openssl::buffering#each_byte()","string#each_byte()","stringio#each_byte()","zlib::gzipreader#each_byte()","argf#each_char()","io#each_char()","string#each_char()","stringio#each_char()","zlib::gzipreader#each_char()","dir::each_child()","dir#each_child()","pathname#each_child()","rexml::parent#each_child()","rubyvm::instructionsequence#each_child()","rdoc::context#each_classmodule()","argf#each_codepoint()","io#each_codepoint()","string#each_codepoint()","stringio#each_codepoint()","enumerable#each_cons()","optionparser::each_const()","rdoc::context#each_constant()","webrick::httputils::formdata#each_data()","rexml::element#each_element()","rexml::element#each_element_with_attribute()","rexml::element#each_element_with_text()","enumerable#each_entry()","pathname#each_entry()","rdoc::context#each_extend()","pathname#each_filename()","string#each_grapheme_cluster()","rdoc::context#each_include()","array#each_index()","rexml::parent#each_index()","bundler::thor::coreext::orderedhash#each_key()","dbm#each_key()","env::each_key()","gdbm#each_key()","hash#each_key()","objectspace::weakmap#each_key()","sdbm#each_key()","argf#each_line()","csv::parser::inputsscanner#each_line()","csv::parser::scanner#each_line()","csv::parser::unoptimizedstringio#each_line()","io#each_line()","openssl::buffering#each_line()","pathname#each_line()","string#each_line()","stringio#each_line()","zlib::gzipreader#each_line()","net::pop3#each_mail()","rdoc::context#each_method()","resolv::each_name()","resolv#each_name()","resolv::dns#each_name()","resolv::hosts#each_name()","objectspace::each_object()","getoptlong#each_option()","optionparser::list#each_option()","bundler::thor::coreext::orderedhash#each_pair()","csv::row#each_pair()","dbm#each_pair()","env::each_pair()","gdbm#each_pair()","hash#each_pair()","objectspace::weakmap#each_pair()","openstruct#each_pair()","sdbm#each_pair()","struct#each_pair()","yaml::dbm#each_pair()","rdoc::codeobject#each_parent()","integer::each_prime()","rexml::node#each_recursive()","resolv::dns#each_resource()","rdoc::context#each_section()","enumerable#each_slice()","tsort::each_strongly_connected_component()","tsort#each_strongly_connected_component()","tsort::each_strongly_connected_component_from()","tsort#each_strongly_connected_component_from()","bundler::thor::coreext::orderedhash#each_value()","dbm#each_value()","env::each_value()","gdbm#each_value()","hash#each_value()","objectspace::weakmap#each_value()","sdbm#each_value()","yaml::dbm#each_value()","enumerable#each_with_index()","enumerator#each_with_index()","enumerable#each_with_object()","enumerator#each_with_object()","openssl::ssl::sslcontext#ecdh_curves=()","shell::commandprocessor#echo()","io#echo=()","io#echo?()","openssl::random::egd()","openssl::random::egd_bytes()","process::egid()","process::egid=()","net::smtp#ehlo()","process::gid::eid()","process::uid::eid()","matrix::eigenvaluedecomposition#eigenvalue_matrix()","matrix::eigenvaluedecomposition#eigenvalues()","matrix::eigenvaluedecomposition#eigenvector_matrix()","matrix::eigenvaluedecomposition#eigenvector_matrix_inv()","matrix::eigenvaluedecomposition#eigenvectors()","object#element()","rexml::attribute#element=()","rss::utils#element_initialize_arguments?()","rexml::sax2listener#elementdecl()","rexml::streamlistener#elementdecl()","rexml::parsers::pullevent#elementdecl?()","readline::emacs_editing_mode()","readline::emacs_editing_mode?()","rdoc::markdown#emphasis()","bundler::molinillo::resolutionstate::empty()","matrix::empty()","psych::handler#empty()","array#empty?()","bundler::index#empty?()","bundler::versionranges::empty?()","bundler::versionranges::reqr#empty?()","csv::fieldsconverter#empty?()","dbm#empty?()","dir::empty?()","env::empty?()","file::empty?()","filetest#empty?()","gdbm#empty?()","hash#empty?()","pathname#empty?()","queue#empty?()","rdoc::comment#empty?()","rexml::elements#empty?()","rexml::iosource#empty?()","rexml::parsers::baseparser#empty?()","rexml::source#empty?()","rexml::text#empty?()","sdbm#empty?()","set#empty?()","sizedqueue#empty?()","string#empty?()","stringscanner#empty?()","symbol#empty?()","threadswait#empty?()","threadswait#empty?()","bundler::thor::actions#empty_directory()","gc::enable()","gc::profiler::enable()","tracepoint#enable()","fiddle::handle#enable_close()","makemakefile#enable_config()","openssl::ssl::sslcontext#enable_fallback_scsv()","net::pop3#enable_ssl()","net::pop3::enable_ssl()","net::smtp#enable_ssl()","net::smtp#enable_starttls()","net::smtp#enable_starttls_auto()","net::smtp#enable_tls()","gc::profiler::enabled?()","rubyvm::mjit::enabled?()","tracepoint#enabled?()","openssl::pkcs7::recipientinfo#enc_key()","threadgroup#enclose()","threadgroup#enclosed?()","rexml::encoding#encode()","string#encode()","uri::escape#encode()","rdoc::comment#encode!()","string#encode!()","base64#encode64()","rdoc::text::encode_fallback()","net::imap::encode_utf7()","uri::encode_www_form()","uri::encode_www_form_component()","irb::fileinputmethod#encoding()","irb::readlineinputmethod#encoding()","irb::stdioinputmethod#encoding()","rexml::document#encoding()","regexp#encoding()","ripper#encoding()","string#encoding()","symbol#encoding()","rexml::encoding#encoding=()","rexml::source#encoding=()","rexml::xmldecl#encoding=()","openssl::cipher#encrypt()","openssl::pkcs7::encrypt()","enumerator::arithmeticsequence#end()","matchdata#end()","range#end()","zlib::zstream#end()","rss::rexmllikexmlparser#endelement()","psych::emitter#end_document()","psych::handler#end_document()","psych::treebuilder#end_document()","rexml::sax2listener#end_document()","rexml::sax2listener#end_element()","rexml::parsers::pullevent#end_element?()","psych::emitter#end_mapping()","psych::handler#end_mapping()","rexml::sax2listener#end_prefix_mapping()","ripper#end_seen?()","psych::emitter#end_sequence()","psych::handler#end_sequence()","psych::emitter#end_stream()","psych::handler#end_stream()","psych::treebuilder#end_stream()","string#end_with?()","zlib::zstream#ended?()","etc::endgrent()","etc::endpwent()","openssl::engine::engines()","date#england()","bundler::worker#enq()","queue#enq()","sizedqueue#enq()","bundler::parallelinstaller::specinstallation#enqueued?()","bundler::cli::common::ensure_all_gems_in_lockfile!()","gem::ensure_default_gem_subdirectories()","bundler::definition#ensure_equivalent_gemfile_and_lockfile()","gem::ensure_gem_subdirectories()","net::imap::numvalidator::ensure_mod_sequence_value()","net::imap::numvalidator::ensure_number()","net::imap::numvalidator::ensure_nz_number()","bundler::sharedhelpers#ensure_same_dependencies()","rss::maker::atomtextconstructbase::ensurexmlcontent#ensure_xml_content()","net::ftp::mlsxentry#enterable?()","net::httpresponse#entity()","rexml::doctype#entity()","rexml::parsers::baseparser#entity()","rexml::streamlistener#entity()","rexml::parsers::pullevent#entity?()","fiddle::cstruct::entity_class()","fiddle::cunion::entity_class()","rexml::document::entity_expansion_limit()","rexml::security::entity_expansion_limit()","rexml::document::entity_expansion_limit=()","rexml::security::entity_expansion_limit=()","rexml::document::entity_expansion_text_limit()","rexml::security::entity_expansion_text_limit()","rexml::document::entity_expansion_text_limit=()","rexml::security::entity_expansion_text_limit=()","rexml::sax2listener#entitydecl()","rexml::streamlistener#entitydecl()","rexml::parsers::pullevent#entitydecl?()","dir::entries()","enumerable#entries()","pathname#entries()","range#entries()","enumerator::lazy#enum_for()","object#enum_for()","bundler::cli#env()","bundler::dsl#env()","gem::env_requirement()","bundler::environment()","bundler::env::environment()","optionparser#environment()","argf#eof()","csv#eof()","io#eof()","openssl::buffering#eof()","stringio#eof()","zlib::gzipreader#eof()","argf#eof?()","csv#eof?()","csv::parser::unoptimizedstringio#eof?()","io#eof?()","irb::fileinputmethod#eof?()","irb::readlineinputmethod#eof?()","irb::stdioinputmethod#eof?()","openssl::buffering#eof?()","stringio#eof?()","xmp::stringinputmethod#eof?()","zlib::gzipreader#eof?()","csv::parser::inputsscanner#eos?()","stringscanner#eos?()","array#eql?()","bigdecimal#eql?()","bundler::depproxy#eql?()","bundler::molinillo::dependencygraph::vertex#eql?()","bundler::plugin::api::source#eql?()","bundler::resolver::specgroup#eql?()","bundler::source::git#eql?()","bundler::source::metadata#eql?()","bundler::source::path#eql?()","delegator#eql?()","enumerator::arithmeticsequence#eql?()","fiddle::pointer#eql?()","float#eql?()","hash#eql?()","ipaddr#eql?()","matchdata#eql?()","method#eql?()","numeric#eql?()","object#eql?()","openssl::bn#eql?()","openssl::pkey::ec::group#eql?()","openssl::pkey::ec::point#eql?()","openssl::x509::name#eql?()","openstruct#eql?()","pathname#eql?()","rdoc::toplevel#eql?()","range#eql?()","regexp#eql?()","string#eql?()","struct#eql?()","time#eql?()","uri::generic#eql?()","unboundmethod#eql?()","basicobject#equal?()","math::erf()","math::erfc()","systemcallerror#errno()","bundler::thor::shell::basic#error()","bundler::ui::shell#error()","bundler::ui::silent#error()","logger#error()","openssl::x509::storecontext#error()","rdoc::rdoc#error()","rdoc::servlet#error()","syslog::logger#error()","webrick::basiclog#error()","openssl::x509::storecontext#error=()","logger#error?()","rexml::parsers::pullevent#error?()","ripper#error?()","webrick::basiclog#error?()","webrick::httpstatus::error?()","encoding::invalidbytesequenceerror#error_bytes()","encoding::undefinedconversionerror#error_char()","openssl::x509::storecontext#error_depth()","bundler::persistent::net::http::persistent#error_message()","getoptlong#error_message()","openssl::x509::storecontext#error_string()","openssl::errors()","bundler::persistent::net::http::persistent#escape()","cgi::util#escape()","regexp::escape()","shellwords::escape()","uri::escape#escape()","uri::rfc2396_parser#escape()","webrick::accesslog#escape()","webrick::htmlutils::escape()","webrick::httputils#escape()","webrick::httputils#escape8bit()","cgi::util#escapeelement()","cgi::util#escapehtml()","cgi::util#escape_element()","webrick::httputils#escape_form()","bundler::thor::util::escape_globs()","cgi::util#escape_html()","webrick::httputils#escape_path()","bundler::compactindexclient::updater#etag_for()","process::euid()","process::euid=()","binding#eval()","kernel#eval()","rubyvm::instructionsequence#eval()","bundler::dsl#eval_gemfile()","irb::context#eval_history=()","irb::irb#eval_input()","tracepoint#eval_script()","bundler::dsl::evaluate()","irb::workspace#evaluate()","integer#even?()","tracepoint#event()","win32ole_method#event?()","win32ole_method#event_interface()","psych::handler#event_location()","psych::treebuilder#event_location()","rexml::parsers::pullevent#event_type()","bundler::rubyversion#exact?()","net::imap#examine()","drb::drbunknown#exception()","exception::exception()","exception#exception()","timeout::error#exception()","timeout::error#exception()","timeout::error#exception()","net::smtp::response#exception_class()","rdoc::options#exclude()","enumerator::arithmeticsequence#exclude_end?()","range#exclude_end?()","thread::exclusive()","bundler::cli#exec()","kernel#exec()","process::exec()","bundler::plugin#exec_command()","irb::notifier::abstractnotifier#exec_if()","file::executable?()","file::stat#executable?()","filetest#executable?()","pathname#executable?()","file::executable_real?()","file::stat#executable_real?()","filetest#executable_real?()","pathname#executable_real?()","bundler::endpointspecification#executables()","dir::exist?()","file::exist?()","filetest#exist?()","pathname#exist?()","stringscanner#exist?()","dir::exists?()","file::exists?()","filetest#exists?()","irb::context#exit()","kernel#exit()","process::exit()","thread#exit()","thread::exit()","kernel#exit!()","process::exit!()","bundler::thor::base::classmethods#exit_on_failure?()","bundler::friendlyerrors#exit_status()","localjumperror#exit_value()","process::status#exited?()","process::status#exitstatus()","bigmath::exp()","cmath::exp()","math::exp()","rexml::parsers::xpathparser#expand()","openssl::x509::name::rfc2253dn#expand_hexstring()","openssl::x509::name::rfc2253dn#expand_pair()","file::expand_path()","pathname#expand_path()","shell#expand_path()","shell::commandprocessor#expand_path()","rexml::validation::state#expand_ref_in()","rdoc::text#expand_tabs()","openssl::x509::name::rfc2253dn#expand_value()","rexml::document#expanded_name()","bundler::source::path#expanded_original_path()","io#expect()","rexml::validation::choice#expected()","rexml::validation::interleave#expected()","rexml::validation::oneormore#expected()","rexml::validation::optional#expected()","rexml::validation::state#expected()","rexml::validation::zeroormore#expected()","bundler::persistent::net::http::persistent#expired?()","rinda::tupleentry#expired?()","webrick::cookie#expires()","webrick::cookie#expires=()","bigdecimal#exponent()","openssl::pkey::dh#export()","openssl::pkey::dsa#export()","openssl::pkey::ec#export()","openssl::pkey::rsa#export()","net::imap#expunge()","object#extend()","irb::extendcommandbundle::extend_object()","monitormixin::extend_object()","optionparser::arguable::extend_object()","sync_m::extend_object()","sync_m::extend_object()","rdoc::markdown#extension()","rdoc::markdown::extension()","rdoc::markdown#extension?()","bundler::source#extension_cache_path()","bundler::source::git#extension_dir_name()","bundler::endpointspecification#extensions()","openssl::ocsp::singleresponse#extensions()","openssl::x509::crl#extensions()","openssl::x509::certificate#extensions()","openssl::x509::revoked#extensions()","uri::ldap#extensions()","openssl::x509::crl#extensions=()","openssl::x509::certificate#extensions=()","openssl::x509::revoked#extensions=()","uri::ldap#extensions=()","fiddle::importer#extern()","argf#external_encoding()","io#external_encoding()","stringio#external_encoding()","zlib::gzipreader#external_encoding()","file::extname()","pathname#extname()","uri::extract()","uri::rfc2396_parser#extract()","rdoc::comment#extract_call_seq()","syslog::facility()","exception2messagemapper#fail()","kernel#fail()","bundler::settings::validator::rule#fail!()","bundler::parallelinstaller::specinstallation#failed?()","bundler::settings::mirror#fallback_timeout=()","rexml::functions::false()","socket::ancillarydata#family()","socket::option#family()","addrinfo#family_addrinfo()","json#fast_generate()","gdbm#fastmode=()","logger#fatal()","syslog::logger#fatal()","webrick::basiclog#fatal()","logger#fatal?()","webrick::basiclog#fatal?()","io#fcntl()","openssl::ssl::socketforwarder#fcntl()","stringio#fcntl()","io#fdatasync()","complex#fdiv()","float#fdiv()","integer#fdiv()","numeric#fdiv()","rational#fdiv()","bundler::feature_flag()","enumerator#feed()","rss::rootelementmixin#feed_info()","array#fetch()","bundler::fetcher::downloader#fetch()","csv::row#fetch()","dbm#fetch()","env::fetch()","gdbm#fetch()","hash#fetch()","net::imap#fetch()","pstore#fetch()","rinda::tuple#fetch()","rinda::tupleentry#fetch()","sdbm#fetch()","thread#fetch()","yaml::dbm#fetch()","bundler::plugin::api::source#fetch_gemspec_files()","bundler::gemremotefetcher#fetch_http()","bundler::endpointspecification#fetch_platform()","bundler::remotespecification#fetch_platform()","resolv::dns#fetch_resource()","drb::fetch_server()","bundler::fetcher#fetch_spec()","bundler::fetcher::compactindex#fetch_spec()","bundler::fetcher::index#fetch_spec()","bundler::fetcher::base#fetch_uri()","hash#fetch_values()","bundler::fetcher#fetchers()","csv::row#field()","csv::row#field?()","csv::row#field_row?()","csv#field_size_limit()","csv::parser#field_size_limit()","csv::row#fields()","argf#file()","digest::class::file()","digest::instance#file()","file::file?()","file::stat#file?()","filetest#file?()","net::ftp::mlsxentry#file?()","pathname#file?()","bundler::thor::shell::basic#file_collision()","cgi::htmlextension#file_field()","irb::context#file_input?()","rdoc::codeobject#file_name()","argf#filename()","ripper#filename()","ripper::filter#filename()","readline::filename_quote_characters()","readline::filename_quote_characters=()","argf#fileno()","dir#fileno()","io#fileno()","stringio#fileno()","rdoc::store#files_hash()","bundler::sharedhelpers#filesystem_access()","array#fill()","date#fill()","prettyprint#fill_breakable()","array#filter()","csv::filter()","env::filter()","enumerable#filter()","enumerator::lazy#filter()","hash#filter()","rexml::quickpath::filter()","struct#filter()","uri::ldap#filter()","array#filter!()","env::filter!()","hash#filter!()","set#filter!()","uri::ldap#filter=()","irb::workspace#filter_backtrace()","optionparser::parseerror::filter_backtrace()","bundler::httperror#filter_uri()","openssl::cipher#final()","encoding::find()","enumerable#find()","find::find()","irb::locale#find()","pathname#find()","rinda::tuplebag#find()","rinda::tuplebag::tuplebin#find()","enumerable#find_all()","enumerator::lazy#find_all()","rinda::tuplebag#find_all()","rinda::tuplebag#find_all_template()","rdoc::classmodule#find_ancestor_local_symbol()","rdoc::context#find_attribute()","rdoc::context#find_attribute_named()","bundler::specset#find_by_name_and_platform()","bundler::thor::util::find_by_namespace()","rdoc::store#find_c_enclosure()","bundler::thor::util::find_class_and_command_by_namespace()","bundler::thor::util::find_class_and_task_by_namespace()","rdoc::context#find_class_method_named()","rdoc::classmodule#find_class_named()","rdoc::store#find_class_named()","rdoc::store#find_class_named_from()","rdoc::store#find_class_or_module()","rdoc::toplevel#find_class_or_module()","bundler::thor::find_command_possibilities()","rdoc::context#find_constant_named()","rdoc::context#find_enclosing_module_named()","makemakefile#find_executable()","rdoc::context#find_external_alias()","rdoc::context#find_external_alias_named()","rdoc::context#find_file_named()","rdoc::store#find_file_named()","gem::find_files()","rexml::node#find_first_recursive()","makemakefile#find_header()","bundler::thor::actions#find_in_source_paths()","array#find_index()","enumerable#find_index()","bundler::definition#find_indexed_specs()","rdoc::context#find_instance_method_named()","gem::find_latest_files()","makemakefile#find_library()","rdoc::context#find_local_symbol()","rdoc::toplevel#find_local_symbol()","rdoc::context#find_method()","rdoc::context#find_method_named()","rdoc::context#find_module_named()","rdoc::store#find_module_named()","rdoc::toplevel#find_module_named()","uri::generic#find_proxy()","bundler::definition#find_resolved_spec()","openssl::ocsp::basicresponse#find_response()","rdoc::context#find_symbol()","rdoc::context#find_symbol_module()","shell::commandprocessor#find_system_command()","bundler::thor::find_task_possibilities()","rdoc::store#find_text_page()","makemakefile#find_type()","rdoc::store#find_unique()","gem::find_unresolved_default_spec()","rinda::ringfinger::finger()","bundler::persistent::net::http::persistent#finish()","encoding::converter#finish()","net::http#finish()","net::pop3#finish()","net::smtp#finish()","openssl::engine#finish()","psych::visitors::yamltree#finish()","rdoc::options#finish()","zlib::gzipfile#finish()","zlib::zstream#finish()","rdoc::options#finish_page_dir()","gem::finish_resolve()","threadswait#finished?()","threadswait#finished?()","zlib::zstream#finished?()","bigdecimal#finite?()","complex#finite?()","float#finite?()","numeric#finite?()","openssl::fips_mode()","openssl::fips_mode=()","array#first()","enumerable#first()","enumerator::arithmeticsequence#first()","rexml::quickpath::first()","rexml::xpath::first()","rexml::xpathparser#first()","range#first()","prettyprint::singleline#first?()","rubyvm::abstractsyntaxtree::node#first_column()","rubyvm::abstractsyntaxtree::node#first_lineno()","rubyvm::instructionsequence#first_lineno()","bigdecimal#fix()","rdoc::store#fix_basic_object_inheritance()","regexp#fixed_encoding?()","socket::ifaddr#flags()","openssl::x509::store#flags=()","openssl::x509::storecontext#flags=()","bundler::molinillo::compatibility#flat_map()","enumerable#flat_map()","enumerator::lazy#flat_map()","array#flatten()","hash#flatten()","set#flatten()","array#flatten!()","set#flatten!()","csv#flock()","file#flock()","bigdecimal#floor()","float#floor()","integer#floor()","numeric#floor()","rexml::functions::floor()","rational#floor()","io#flush()","openssl::buffering#flush()","prettyprint#flush()","shell::systemcommand#flush()","stringio#flush()","webrick::httpauth::htdigest#flush()","webrick::httpauth::htgroup#flush()","webrick::httpauth::htpasswd#flush()","zlib::deflate#flush()","zlib::gzipwriter#flush()","rdoc::text#flush_left()","zlib::zstream#flush_next_in()","zlib::zstream#flush_next_out()","openssl::ssl::sslcontext#flush_sessions()","file::fnmatch()","pathname#fnmatch()","file::fnmatch?()","pathname#fnmatch?()","bundler::settings::mirrors#for()","bundler::specset#for()","bundler::versionranges::for()","rdoc::parser::for()","bundler::resolver::specgroup#for?()","basicsocket::for_fd()","io::for_fd()","bundler::versionranges::for_many()","enumerator::lazy#force()","rdoc::codeobject#force_documentation=()","string#force_encoding()","csv#force_quotes?()","addrinfo::foreach()","csv::foreach()","dir::foreach()","io::foreach()","net::pop3::foreach()","shell::commandprocessor#foreach()","kernel#fork()","process::fork()","thread::fork()","cgi::htmlextension#form()","benchmark::tms#format()","irb::locale#format()","kernel#format()","prettyprint::format()","webrick::accesslog#format()","rdoc::comment#format=()","net::imap::format_date()","net::imap::format_datetime()","bundler::thor::command#formatted_usage()","bundler::thor::command#formatted_usage()","bigdecimal#frac()","uri::generic#fragment=()","fiddle::free()","fiddle::pointer#free()","fiddle::pointer#free=()","delegator#freeze()","module#freeze()","object#freeze()","openssl::ssl::sslcontext#freeze()","openstruct#freeze()","pathname#freeze()","string#freeze()","math::frexp()","date#friday?()","time#friday?()","rdoc::store#friendly_path()","json::genericobject::from_hash()","bundler::source::git::from_lock()","bundler::source::path::from_lock()","rdoc::classmodule::from_module()","process::gid::from_name()","process::uid::from_name()","integer::from_prime_division()","json::ext::generator::state::from_state()","bundler::rubyversion::from_string()","bundler::stubspecification::from_stub()","bundler::thor::base::classmethods#from_superclass()","drb::front()","drb::extserv#front()","object#frozen?()","bundler::frozen_bundle?()","io#fsync()","stringio#fsync()","file::ftype()","file::stat#ftype()","pathname#ftype()","bundler::stubspecification#full_gem_path()","exception#full_message()","bundler::lazyspecification#full_name()","bundler::remotespecification#full_name()","rdoc::classmodule#full_name()","rdoc::constant#full_name()","rdoc::context#full_name()","rdoc::methodattr#full_name()","rdoc::mixin#full_name()","rdoc::toplevel#full_name()","rss::element#full_name()","rss::ituneschannelmodel::itunescategory#full_name()","rss::ituneschannelmodel::itunesimage#full_name()","rss::ituneschannelmodel::itunesowner#full_name()","rss::itunesitemmodel::itunesduration#full_name()","rss::imagefaviconmodel::imagefavicon#full_name()","rss::imageitemmodel::imageitem#full_name()","rss::rdf#full_name()","rss::rdf::bag#full_name()","rss::rdf::bag#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::li#full_name()","rss::rdf::seq#full_name()","rss::rdf::seq#full_name()","rss::taxonomytopicmodel::taxonomytopic#full_name()","rss::taxonomytopicsmodel::taxonomytopics#full_name()","rss::xml::element#full_name()","rdoc::codeobject#full_name=()","rdoc::alias#full_old_name()","bundler::stubspecification#full_require_paths()","bundler::source::git::gitproxy#full_version()","rdoc::context#fully_documented?()","rdoc::stats#fully_documented?()","rexml::namespace#fully_expanded_name()","rexml::quickpath::function()","bundler::graph::graphvizclient#g()","math::gamma()","gc#garbage_collect()","objectspace::garbage_collect()","rdoc::rdoc#gather_files()","integer#gcd()","openssl::bn#gcd()","integer#gcdlcm()","bundler::dsl#gem()","bundler::plugin::api::source#gem_install_dir()","bundler::gemhelper#gem_key()","bundler::settings#gem_mirrors()","bundler::cli::common::gem_not_found_message()","bundler::dependency#gem_platforms()","bundler::gemhelper#gem_push?()","bundler::gemhelper#gem_push_host()","bundler::definition#gem_version_promoter()","object#gemfile()","bundler::plugin#gemfile_install()","bundler::dsl#gemspec()","bundler::gemhelper::gemspec()","securerandom::gen_random()","bundler::lockfilegenerator::generate()","bundler::standalone#generate()","csv::generate()","json#generate()","json::ext::generator::state#generate()","openssl::pkey::dh::generate()","openssl::pkey::dsa::generate()","openssl::pkey::ec::generate()","openssl::pkey::rsa::generate()","rdoc::rdoc#generate()","rdoc::rubygemshook#generate()","bundler::lockfilegenerator#generate!()","bundler::plugin::installer::git#generate_bin()","bundler::installer#generate_bundler_executable_stubs()","rexml::validation::state#generate_event()","openssl::pkey::ec#generate_key()","openssl::pkey::dh#generate_key!()","openssl::pkey::ec#generate_key!()","csv::generate_line()","openssl::bn::generate_prime()","bundler::installer#generate_standalone_bundler_executable_stubs()","rdoc::rubygemshook::generation_hook()","openssl::pkey::ec::group#generator()","rdoc::options#generator_descriptions()","rdoc::servlet#generator_for()","bundler::gemhelpers::generic()","bundler::gemhelpers::generic_local_platform()","bundler::sourcelist#get()","bundler::thor::actions#get()","getoptlong#get()","net::ftp#get()","net::http#get()","net::http::get()","net::http#get2()","rexml::attributes#get_attribute()","rexml::attributes#get_attribute_ns()","rss::element::get_attributes()","stringscanner#get_byte()","bundler::cli::console#get_console()","bundler::cli::console#get_constant()","rexml::element#get_elements()","rss::utils#get_file_and_line_from_caller()","rexml::xpathparser#get_first()","bundler::fetcher::dependency#get_formatted_specs_and_deps()","webrick::httpservlet::abstractservlet::get_instance()","rexml::functions::get_namespace()","prime::eratosthenessieve#get_nth_prime()","getoptlong#get_option()","webrick::httpauth::htdigest#get_passwd()","webrick::httpauth::htpasswd#get_passwd()","webrick::httpauth::userdb#get_passwd()","net::http::get_print()","net::http::get_response()","readline::get_screen_size()","rexml::element#get_text()","debugger__::get_thread()","openssl::config#get_value()","net::imap#getacl()","ipsocket::getaddress()","resolv::getaddress()","resolv#getaddress()","resolv::dns#getaddress()","resolv::hosts#getaddress()","resolv::getaddresses()","resolv#getaddresses()","resolv::dns#getaddresses()","resolv::hosts#getaddresses()","addrinfo::getaddrinfo()","socket::getaddrinfo()","net::ftp#getbinaryfile()","argf#getbyte()","io#getbyte()","string#getbyte()","stringio#getbyte()","stringscanner#getbyte()","zlib::gzipreader#getbyte()","argf#getc()","io#getc()","openssl::buffering#getc()","stringio#getc()","zlib::gzipreader#getc()","io#getch()","io::generic_readable#getch()","stringscanner#getch()","net::ftp#getdir()","process::sys::getegid()","process::sys::geteuid()","process::sys::getgid()","time#getgm()","etc::getgrent()","etc::getgrgid()","etc::getgrnam()","socket::gethostbyaddr()","socket::gethostbyname()","tcpsocket::gethostbyname()","socket::gethostname()","socket::getifaddrs()","time#getlocal()","etc::getlogin()","resolv#getname()","resolv::getname()","resolv::dns#getname()","resolv::hosts#getname()","addrinfo#getnameinfo()","socket::getnameinfo()","resolv#getnames()","resolv::getnames()","resolv::dns#getnames()","resolv::hosts#getnames()","optionparser::getopts()","optionparser#getopts()","optionparser::arguable#getopts()","io#getpass()","io::generic_readable#getpass()","basicsocket#getpeereid()","basicsocket#getpeername()","process::getpgid()","process::getpgrp()","process::getpriority()","pty::getpty()","etc::getpwent()","etc::getpwnam()","etc::getpwuid()","net::imap#getquota()","net::imap#getquotaroot()","resolv::dns#getresource()","resolv::dns#getresources()","process::getrlimit()","argf#gets()","csv#gets()","csv::parser::unoptimizedstringio#gets()","io#gets()","irb::fileinputmethod#gets()","irb::inputmethod#gets()","irb::locale#gets()","irb::readlineinputmethod#gets()","irb::stdioinputmethod#gets()","kernel#gets()","openssl::buffering#gets()","stringio#gets()","xmp::stringinputmethod#gets()","zlib::gzipreader#gets()","socket::getservbyname()","socket::getservbyport()","webrick::utils::getservername()","process::getsid()","basicsocket#getsockname()","basicsocket#getsockopt()","openssl::ssl::socketforwarder#getsockopt()","rss::baselistener::getter()","net::ftp#gettextfile()","process::sys::getuid()","time#getutc()","bundler::fileutils::getwd()","dir::getwd()","fileutils::getwd()","pathname::getwd()","file::stat#gid()","process::gid()","process::gid=()","bundler::dsl#git()","bundler::buildmetadata::git_commit_sha()","bundler::git_present?()","bundler::gemhelper#git_push()","bundler::dsl#git_source()","bundler::lazyspecification#git_version()","bundler::remotespecification#git_version()","bundler::dsl#github()","rdoc::markdown#github()","dir::glob()","pathname::glob()","pathname#glob()","shell::commandprocessor#glob()","bundler::plugin::index#global_index_file()","bundler::plugin#global_root()","bundler::sourcelist#global_rubygems_source=()","kernel#global_variables()","bundler::thor::util::globs_for()","time::gm()","time#gmt?()","time#gmt_offset()","time#gmtime()","time#gmtoff()","io#goto()","process::gid::grant_privilege()","process::uid::grant_privilege()","string#grapheme_clusters()","rdoc::stats#great_job()","date#gregorian()","date#gregorian?()","date::gregorian_leap?()","enumerable#grep()","enumerator::lazy#grep()","enumerable#grep_v()","enumerator::lazy#grep_v()","bundler::dsl#group()","bundler::thor::base::classmethods#group()","etc::group()","openssl::pkey::ec#group()","prettyprint#group()","prettyprint::singleline#group()","thread#group()","openssl::pkey::ec#group=()","enumerable#group_by()","prettyprint#group_sub()","bundler::definition#groups()","process::groups()","process::groups=()","file::grpowned?()","file::stat#grpowned?()","filetest#grpowned?()","pathname#grpowned?()","kernel#gsub()","string#gsub()","string#gsub!()","bundler::thor::actions#gsub_file()","bundler::gemhelper#guard_clean()","pp::ppmethods#guard_inspect_key()","kconv::guess()","nkf::guess()","optionparser::switch::guess()","win32ole_type#guid()","win32ole_typelib#guid()","gem::gunzip()","zlib::gunzip()","gem::gzip()","zlib::gzip()","cgi::util#h()","erb::util::h()","rss::utils#h()","bundler::thor::command#handle_argument_error?()","bundler::thor::command#handle_argument_error?()","irb::irb#handle_exception()","thread::handle_interrupt()","bundler::cli::handle_no_command_error()","bundler::thor::command#handle_no_method_error?()","bundler::thor::command#handle_no_method_error?()","rdoc::rdoc#handle_pipe()","fiddle::importer#handler()","win32ole_event#handler()","win32ole_event#handler=()","fiddle::compositehandler#handlers()","rexml::element#has_attributes?()","rexml::element#has_elements?()","rinda::tuplebag#has_expires?()","cgi::queryextension#has_key?()","csv::row#has_key?()","dbm#has_key?()","env::has_key?()","gdbm#has_key?()","hash#has_key?()","sdbm#has_key?()","bundler::definition#has_local_dependencies?()","rexml::light::node#has_name?()","rexml::namespace#has_name?()","rexml::parsers::baseparser#has_next?()","bundler::parallelinstaller::specinstallation#has_post_install_message?()","bundler::definition#has_rubygems_remotes?()","rexml::element#has_text?()","dbm#has_value?()","env::has_value?()","gdbm#has_value?()","hash#has_value?()","sdbm#has_value?()","yaml::dbm#has_value?()","array#hash()","bigdecimal#hash()","bundler::depproxy#hash()","bundler::molinillo::dependencygraph::vertex#hash()","bundler::plugin::api::source#hash()","bundler::resolver::specgroup#hash()","bundler::source::git#hash()","bundler::source::metadata#hash()","bundler::source::path#hash()","enumerator::arithmeticsequence#hash()","float#hash()","hash#hash()","ipaddr#hash()","matchdata#hash()","method#hash()","openssl::bn#hash()","openssl::x509::name#hash()","openstruct#hash()","proc#hash()","rdoc::toplevel#hash()","rexml::attribute#hash()","range#hash()","regexp#hash()","string#hash()","struct#hash()","time#hash()","uri::generic#hash()","unboundmethod#hash()","openssl::ocsp::certificateid#hash_algorithm()","openssl::x509::name#hash_old()","rss::atom::entry#have_author?()","rss::atom::feed#have_author?()","rss::atom::feed::entry#have_author?()","rss::atom::feed::entry::source#have_author?()","rss::element::have_children_elements()","makemakefile#have_const()","rss::element::have_content?()","makemakefile#have_framework()","makemakefile#have_func()","makemakefile#have_header()","makemakefile#have_library()","makemakefile#have_macro()","rss::element#have_required_elements?()","rss::maker::atom::feed::channel#have_required_values?()","rss::maker::atom::feed::items::item#have_required_values?()","rss::maker::base#have_required_values?()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#have_required_values?()","rss::maker::imagefaviconmodel::imagefaviconbase#have_required_values?()","rss::maker::imageitemmodel::imageitembase#have_required_values?()","rss::maker::rss10::image#have_required_values?()","rss::maker::rss10::textinput#have_required_values?()","rss::maker::taxonomytopicmodel::taxonomytopicsbase::taxonomytopicbase#have_required_values?()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#have_required_values?()","makemakefile#have_struct_member()","makemakefile#have_type()","makemakefile#have_var()","rss::atom::feed::entry::content#have_xml_content?()","rss::atom::textconstruct#have_xml_content?()","rss::element#have_xml_content?()","net::http#head()","net::http#head2()","cgi#header()","net::popmail#header()","csv::row#header?()","csv#header_convert()","csv#header_converters()","csv#header_row?()","csv::parser#header_row?()","csv::row#header_row?()","csv#headers()","csv::parser#headers()","csv::row#headers()","csv::table#headers()","uri::mailto#headers=()","net::smtp#helo()","bundler::cli#help()","bundler::thor::help()","bundler::thor#help()","bundler::thor::group::help()","net::ftp#help()","optionparser#help()","win32ole_method#helpcontext()","win32ole_type#helpcontext()","win32ole_method#helpfile()","win32ole_type#helpfile()","win32ole_method#helpstring()","win32ole_type#helpstring()","drb::here?()","drb::drbserver#here?()","random::formatter#hex()","string#hex()","digest::class::hexdigest()","digest::instance#hexdigest()","openssl::hmac::hexdigest()","openssl::hmac#hexdigest()","digest::instance#hexdigest!()","digest::hexencode()","cgi::htmlextension#hidden()","bundler::thor::command#hidden?()","bundler::thor::command#hidden?()","bundler::thor::hiddencommand#hidden?()","bundler::thor::hiddencommand#hidden?()","uri::generic#hierarchical?()","uri::ldap#hierarchical?()","irb::context#history_file()","irb::context#history_file=()","openssl::kdf::hkdf()","bundler::home()","dir::home()","irb::context#home_workspace()","bundler::plugin#hook()","bundler::plugin::api::hook()","bundler::plugin::index#hook_plugins()","bundler::rubyversion#host()","gem::host()","webrick::httprequest#host()","gem::host=()","uri::generic#host=()","uri::generic#hostname()","openssl::ssl::sslsocket#hostname=()","uri::generic#hostname=()","datetime#hour()","time#hour()","rss::itunesitemmodel::itunesduration#hour=()","rss::maker::itunesitemmodel::itunesdurationbase#hour=()","rss::xmlstylesheet#href=()","matrix::hstack()","cgi::htmlextension#html()","rdoc::markdown#html()","erb::util::html_escape()","rss::utils#html_escape()","rdoc::alias#html_name()","rdoc::methodattr#html_name()","ipaddr#hton()","net::http::http_default_port()","cgi#http_header()","bundler::fetcher#http_proxy()","rdoc::context#http_url()","rdoc::toplevel#http_url()","bundler::persistent::net::http::persistent#http_version()","date#httpdate()","date::httpdate()","datetime::httpdate()","time::httpdate()","time#httpdate()","cgi::cookie#httponly=()","net::http::https_default_port()","math::hypot()","numeric#i()","rss::maker::channelbase#icon()","rss::maker::channelbase#icon=()","json::iconv()","openssl::engine#id()","openssl::ssl::session#id()","rexml::functions::id()","symbol#id2name()","bundler::persistent::net::http::persistent#idempotent?()","syslog::ident()","bundler::fileutils::identical?()","file::identical?()","filetest#identical?()","fileutils::identical?()","bundler::lazyspecification#identifier()","matrix::identity()","net::imap#idle()","net::imap#idle_done()","rdoc::servlet#if_modified_since()","socket::ifaddr#ifindex()","io#iflush()","bundler::parallelinstaller::specinstallation#ignorable_dependency?()","rdoc::codeobject#ignore()","bundler::settings#ignore_config?()","rss::baseparser#ignore_unknown_element()","rss::baseparser#ignore_unknown_element=()","rexml::element#ignore_whitespace_nodes()","rdoc::codeobject#ignored?()","complex#imag()","numeric#imag()","rss::rss#image()","cgi::htmlextension#image_button()","rss::imagefaviconmodel::imagefavicon#image_size=()","complex#imaginary()","numeric#imaginary()","cgi::htmlextension#img()","win32ole_type#implemented_ole_types()","fiddle::importer#import_function()","fiddle::importer#import_symbol()","fiddle::importer#import_value()","bundler::sharedhelpers#in_bundle?()","bundler::thor::actions#in_root()","shell::processcontroller::inactivate()","optionparser::inc()","optionparser#inc()","module#include()","array#include?()","bundler::plugin::api::source#include?()","bundler::source#include?()","cgi::queryextension#include?()","csv::row#include?()","dbm#include?()","env::include?()","enumerable#include?()","gdbm#include?()","hash#include?()","ipaddr#include?()","module#include?()","objectspace::weakmap#include?()","rexml::attlistdecl#include?()","range#include?()","sdbm#include?()","set#include?()","string#include?()","bundler::thor::rakecompat::included()","exception2messagemapper::included()","json::ext::generator::generatormethods::string::included()","rss::maker::atomtextconstructbase::ensurexmlcontent::included()","syslog::constants::included()","syslog::macros::included()","module#included_modules()","optionparser::switch::incompatible_argument_styles()","optionparser::switch::noargument::incompatible_argument_styles()","encoding::invalidbytesequenceerror#incomplete_input?()","bundler::thor::shell::basic#indent()","json::ext::generator::state#indent()","rexml::node#indent()","json::ext::generator::state#indent=()","rexml::text#indent_text()","psych::emitter#indentation()","psych::emitter#indentation=()","array#index()","bundler::definition#index()","bundler::plugin#index()","csv::row#index()","env::index()","rexml::elements#index()","rexml::parent#index()","string#index()","yaml::dbm#index()","bundler::plugin::index#index_file()","bundler::resolver#index_for()","rexml::node#index_in_parent()","bundler::molinillo::ui#indicate_progress()","bundler::resolver#indicate_progress()","bigdecimal#infinite?()","complex#infinite?()","float#infinite?()","numeric#infinite?()","openssl::pkey::ec::point#infinity?()","gem::inflate()","zlib::inflate()","zlib::inflate#inflate()","zlib::inflate::inflate()","bundler::cli#info()","bundler::ui::shell#info()","bundler::ui::silent#info()","logger#info()","syslog::logger#info()","webrick::basiclog#info()","logger#info?()","webrick::basiclog#info?()","webrick::httpstatus::info?()","bundler::compactindexclient::cache#info_path()","bundler::thor::base::classmethods#inherited()","rss::element::inherited()","rss::maker::base::inherited()","rss::utils::inheritedreader#inherited_array_reader()","rss::element::inherited_base()","rss::maker::base::inherited_base()","rss::utils::inheritedreader#inherited_hash_reader()","rss::utils::inheritedreader#inherited_reader()","bundler::cli#init()","irb::inspector#init()","process::initgroups()","shell::commandprocessor::initialize()","set#initialize_clone()","array#initialize_copy()","bundler::index#initialize_copy()","bundler::molinillo::dependencygraph#initialize_copy()","bundler::thor::coreext::orderedhash#initialize_copy()","csv::row#initialize_copy()","json::ext::generator::state#initialize_copy()","openssl::bn#initialize_copy()","openssl::cipher#initialize_copy()","openssl::digest#initialize_copy()","openssl::hmac#initialize_copy()","openssl::ocsp::basicresponse#initialize_copy()","openssl::ocsp::certificateid#initialize_copy()","openssl::ocsp::request#initialize_copy()","openssl::ocsp::response#initialize_copy()","openssl::ocsp::singleresponse#initialize_copy()","openssl::pkcs12#initialize_copy()","openssl::pkcs7#initialize_copy()","openssl::pkey::dh#initialize_copy()","openssl::pkey::dsa#initialize_copy()","openssl::pkey::ec#initialize_copy()","openssl::pkey::ec::group#initialize_copy()","openssl::pkey::ec::point#initialize_copy()","openssl::pkey::rsa#initialize_copy()","openssl::ssl::session#initialize_copy()","openssl::x509::attribute#initialize_copy()","openssl::x509::crl#initialize_copy()","openssl::x509::certificate#initialize_copy()","openssl::x509::extension#initialize_copy()","openssl::x509::name#initialize_copy()","openssl::x509::request#initialize_copy()","openssl::x509::revoked#initialize_copy()","string#initialize_copy()","zlib::deflate#initialize_copy()","set#initialize_dup()","net::httpheader#initialize_http_header()","rdoc::context#initialize_methods_etc()","irb::initialize_tracer()","bundler::cli#inject()","bundler::injector::inject()","bundler::injector#inject()","enumerable#inject()","rexml::elements#inject()","bundler::thor::actions#inject_into_class()","bundler::thor::actions#inject_into_file()","bundler::thor::actions#inject_into_module()","rss::atom::feed::entry::content#inline_html?()","rss::maker::itemsbase::itembase::contentbase#inline_html?()","rss::atom::feed::entry::content#inline_other?()","rss::maker::itemsbase::itembase::contentbase#inline_other?()","rss::atom::feed::entry::content#inline_other_base64?()","rss::maker::itemsbase::itembase::contentbase#inline_other_base64?()","rss::atom::feed::entry::content#inline_other_text?()","rss::maker::itemsbase::itembase::contentbase#inline_other_text?()","rss::atom::feed::entry::content#inline_other_xml?()","rss::maker::itemsbase::itembase::contentbase#inline_other_xml?()","rss::atom::feed::entry::content#inline_text?()","rss::maker::itemsbase::itembase::contentbase#inline_text?()","rss::atom::feed::entry::content#inline_xhtml?()","rss::maker::itemsbase::itembase::contentbase#inline_xhtml?()","file::stat#ino()","argf#inplace_mode()","argf#inplace_mode=()","readline::input=()","shell::appendfile#input=()","shell::appendio#input=()","shell::filter#input=()","shell::systemcommand#input=()","win32ole_param#input?()","array#insert()","irb::jobmanager#insert()","string#insert()","rexml::parent#insert_after()","rexml::parent#insert_before()","bundler::thor::actions#insert_into_file()","encoding::converter#insert_output()","readline::insert_text()","bundler::thor::actions#inside()","argf#inspect()","addrinfo#inspect()","array#inspect()","bigdecimal#inspect()","bundler::fetcher#inspect()","bundler::index#inspect()","bundler::molinillo::dependencygraph#inspect()","bundler::molinillo::dependencygraph::vertex#inspect()","bundler::source#inspect()","bundler::thor::coreext::orderedhash#inspect()","cgi::cookie#inspect()","csv#inspect()","csv::row#inspect()","csv::table#inspect()","complex#inspect()","date#inspect()","digest::instance#inspect()","dir#inspect()","env::inspect()","encoding#inspect()","encoding::converter#inspect()","enumerator#inspect()","enumerator::arithmeticsequence#inspect()","enumerator::chain#inspect()","exception#inspect()","falseclass#inspect()","fiber#inspect()","fiddle::pointer#inspect()","file::stat#inspect()","float#inspect()","hash#inspect()","io#inspect()","ipaddr#inspect()","ipsocket#inspect()","irb::irb#inspect()","irb::jobmanager#inspect()","integer#inspect()","matchdata#inspect()","method#inspect()","module#inspect()","net::http#inspect()","net::httpgenericrequest#inspect()","net::httpresponse#inspect()","net::internetmessageio::writeadapter#inspect()","net::pop3#inspect()","net::popmail#inspect()","net::smtp#inspect()","nilclass#inspect()","object#inspect()","objectspace::internalobjectwrapper#inspect()","objectspace::weakmap#inspect()","openssl::config#inspect()","openssl::engine#inspect()","openssl::hmac#inspect()","openssl::x509::certificate#inspect()","openstruct#inspect()","optionparser::parseerror#inspect()","proc#inspect()","process::status#inspect()","rexml::attribute#inspect()","rexml::element#inspect()","rexml::instruction#inspect()","rexml::parsers::pullevent#inspect()","rexml::text#inspect()","rexml::validation::choice#inspect()","rexml::validation::event#inspect()","rexml::validation::interleave#inspect()","rexml::validation::ref#inspect()","rexml::validation::state#inspect()","rexml::xmldecl#inspect()","range#inspect()","rational#inspect()","regexp#inspect()","rubyvm::abstractsyntaxtree::node#inspect()","rubyvm::instructionsequence#inspect()","set#inspect()","shell#inspect()","shell::filter#inspect()","socket::ancillarydata#inspect()","socket::ifaddr#inspect()","socket::option#inspect()","string#inspect()","stringscanner#inspect()","struct#inspect()","symbol#inspect()","syslog::inspect()","thread#inspect()","thread::backtrace::location#inspect()","time#inspect()","tracepoint#inspect()","trueclass#inspect()","uri::generic#inspect()","uri::rfc2396_parser#inspect()","unboundmethod#inspect()","win32ole_method#inspect()","win32ole_param#inspect()","win32ole_record#inspect()","win32ole_type#inspect()","win32ole_typelib#inspect()","win32ole_variable#inspect()","zlib::gzipfile::error#inspect()","irb::context#inspect?()","irb::context#inspect_mode=()","date#inspect_raw()","addrinfo#inspect_sockaddr()","irb::inspector#inspect_value()","bundler::cli#install()","bundler::cli::plugin#install()","bundler::fileutils::install()","bundler::gemhelper#install()","bundler::installer::install()","bundler::plugin#install()","bundler::plugin::api::source#install()","bundler::plugin::installer#install()","bundler::source::git#install()","bundler::source::metadata#install()","bundler::source::path#install()","fileutils::install()","gem::install()","drb::install_acl()","irb::extendcommandbundle#install_alias_method()","rss::baselistener::install_class_name()","rss::basemodel#install_date_element()","bundler::plugin::installer#install_definition()","rss::maker::dublincoremodel::install_dublin_core()","irb::contextextender::install_extend_commands()","irb::extendcommandbundle::install_extend_commands()","bundler::geminstaller#install_from_spec()","bundler::gemhelper#install_gem()","rss::element::install_get_attribute()","rss::baselistener::install_get_text_element()","rss::basemodel#install_have_attribute_element()","rss::basemodel#install_have_child_element()","rss::basemodel#install_have_children_element()","drb::install_id_conv()","bundler::dsl#install_if()","rss::maker::imagefaviconmodel::install_image_favicon()","rss::maker::imageitemmodel::install_image_item()","acl#install_list()","rss::element::install_model()","rss::element::install_must_call_validator()","rss::element::install_ns()","bundler::install_path()","bundler::plugin::api::source#install_path()","bundler::plugin::installer::git#install_path()","bundler::source::git#install_path()","rdoc::rdoc#install_siginfo_handler()","shell::install_system_commands()","bundler::gemhelper::install_tasks()","rss::maker::taxonomytopicmodel::install_taxo_topic()","rss::maker::taxonomytopicsmodel::install_taxo_topics()","rss::basemodel#install_text_element()","bundler::parallelinstaller::specinstallation#installation_attempted?()","bundler::parallelinstaller::specinstallation#installed?()","bundler::plugin#installed?()","bundler::plugin::api::source#installed?()","bundler::plugin::index#installed?()","rdoc::servlet#installed_docs()","csv::instance()","syslog::instance()","rdoc::context#instance_attributes()","forwardable#instance_delegate()","basicobject#instance_eval()","basicobject#instance_exec()","module#instance_method()","rdoc::context#instance_method_list()","module#instance_methods()","rdoc::store#instance_methods()","object#instance_of?()","object#instance_variable_defined?()","object#instance_variable_get()","object#instance_variable_set()","object#instance_variables()","rexml::streamlistener#instruction()","rss::listenermixin#instruction()","rexml::parsers::pullevent#instruction?()","tracepoint#instruction_sequence()","rexml::element#instructions()","socket::ancillarydata#int()","socket::ancillarydata::int()","socket::option::int()","socket::option#int()","prime#int_from_prime_division()","integer#integer?()","numeric#integer?()","string#intern()","symbol#intern()","objectspace::internal_class_of()","argf#internal_encoding()","io#internal_encoding()","stringio#internal_encoding()","objectspace::internalobjectwrapper#internal_object_id()","objectspace::internal_super_of()","debugger__::interrupt()","webrick#interrupt()","set#intersect?()","set#intersection()","dbm#invert()","env::invert()","gdbm#invert()","hash#invert()","sdbm#invert()","yaml::dbm#invert()","openssl::pkey::ec::point#invert!()","win32ole_method#invkind()","bundler::thor::group::invoke()","bundler::thor::invocation#invoke()","win32ole#invoke()","bundler::thor::group::invoke_from_option()","win32ole_method#invoke_kind()","bundler::thor::invocation#invoke_with_padding()","csv#ioctl()","io#ioctl()","io#ioflush()","addrinfo::ip()","ipaddr#ip6_arpa()","ipaddr#ip6_int()","addrinfo#ip?()","addrinfo#ip_address()","socket::ip_address_list()","socket::ancillarydata#ip_pktinfo()","socket::ancillarydata::ip_pktinfo()","addrinfo#ip_port()","addrinfo#ip_unpack()","addrinfo#ipv4?()","ipaddr#ipv4?()","ipaddr#ipv4_compat()","ipaddr#ipv4_compat?()","addrinfo#ipv4_loopback?()","ipaddr#ipv4_mapped()","ipaddr#ipv4_mapped?()","addrinfo#ipv4_multicast?()","socket::option#ipv4_multicast_loop()","socket::option::ipv4_multicast_loop()","socket::option#ipv4_multicast_ttl()","socket::option::ipv4_multicast_ttl()","addrinfo#ipv4_private?()","addrinfo#ipv6?()","ipaddr#ipv6?()","addrinfo#ipv6_linklocal?()","addrinfo#ipv6_loopback?()","addrinfo#ipv6_mc_global?()","addrinfo#ipv6_mc_linklocal?()","addrinfo#ipv6_mc_nodelocal?()","addrinfo#ipv6_mc_orglocal?()","addrinfo#ipv6_mc_sitelocal?()","addrinfo#ipv6_multicast?()","socket::ancillarydata#ipv6_pktinfo()","socket::ancillarydata::ipv6_pktinfo()","socket::ancillarydata#ipv6_pktinfo_addr()","socket::ancillarydata#ipv6_pktinfo_ifindex()","addrinfo#ipv6_sitelocal?()","addrinfo#ipv6_to_ipv4()","addrinfo#ipv6_unique_local?()","addrinfo#ipv6_unspecified?()","addrinfo#ipv6_v4compat?()","addrinfo#ipv6_v4mapped?()","socket#ipv6only!()","binding#irb()","irb::irb()","irb::jobmanager#irb()","irb::irb_abort()","irb::irb_at_exit()","irb::extendcommandbundle#irb_context()","irb::irb_exit()","irb::extendcommandbundle#irb_exit()","irb::context#irb_level()","irb::extendcommandbundle#irb_load()","irb::irbloader#irb_load()","irb::extendcommandbundle#irb_require()","jacobian#isequal()","object#is_a?()","rdoc::constant#is_alias_for()","bundler::molinillo::dependencygraph::vertex#is_reachable_from?()","net::http::is_version_1_2?()","io#isatty()","stringio#isatty()","time#isdst()","kconv::iseuc()","string#iseuc()","kconv::isjis()","string#isjis()","date::iso8601()","date#iso8601()","datetime::iso8601()","datetime#iso8601()","time#iso8601()","time::iso8601()","process::sys::issetugid()","kconv::issjis()","string#issjis()","bundler::cli#issue()","openssl::pkcs7::recipientinfo#issuer()","openssl::pkcs7::signerinfo#issuer()","openssl::x509::crl#issuer()","openssl::x509::certificate#issuer()","openssl::x509::crl#issuer=()","openssl::x509::certificate#issuer=()","openssl::x509::extensionfactory#issuer_certificate=()","openssl::ocsp::certificateid#issuer_key_hash()","openssl::ocsp::certificateid#issuer_name_hash()","bundler::friendlyerrors#issues_url()","kconv::isutf8()","string#isutf8()","date#italy()","rss::atom::entry#items()","rss::rss#items()","kernel#iterator?()","object#itself()","openssl::cipher#iv=()","openssl::cipher#iv_len()","openssl::cipher#iv_len=()","jacobian#jacobian()","date#jd()","date::jd()","datetime::jd()","date::jisx0301()","date#jisx0301()","datetime::jisx0301()","datetime#jisx0301()","shell#jobs()","shell::processcontroller#jobs()","shell::processcontroller#jobs_exist?()","array#join()","file::join()","pathname#join()","shellwords::join()","thread#join()","threadswait#join()","threadswait#join()","uri::join()","uri::rfc2396_parser#join()","threadswait#join_nowait()","threadswait#join_nowait()","bundler::currentruby#jruby?()","class#json_creatable?()","json::genericobject::json_creatable?()","bigdecimal::json_create()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::ext::generator::generatormethods::string::extend#json_create()","json::genericobject::json_create()","openstruct::json_create()","range::json_create()","rational::json_create()","regexp::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","date#julian()","date#julian?()","date::julian_leap?()","bundler::settings::validator::rule#k()","kconv::kconv()","string#kconv()","webrick::httprequest#keep_alive?()","webrick::httpresponse#keep_alive?()","csv::parser::inputsscanner#keep_back()","csv::parser::scanner#keep_back()","csv::parser::inputsscanner#keep_drop()","csv::parser::scanner#keep_drop()","csv::parser::inputsscanner#keep_end()","csv::parser::scanner#keep_end()","array#keep_if()","env::keep_if()","hash#keep_if()","set#keep_if()","csv::parser::inputsscanner#keep_start()","csv::parser::scanner#keep_start()","dbm#key()","env::key()","gdbm#key()","hash#key()","keyerror#key()","sdbm#key()","yaml::dbm#key()","bundler::persistent::net::http::persistent#key=()","openssl::cipher#key=()","cgi::queryextension#key?()","csv::row#key?()","dbm#key?()","env::key?()","gdbm#key?()","hash#key?()","objectspace::weakmap#key?()","sdbm#key?()","thread#key?()","bundler::settings#key_for()","openssl::cipher#key_len()","openssl::cipher#key_len=()","bundler::thor::coreext::orderedhash#keys()","cgi::queryextension#keys()","dbm#keys()","env::keys()","gdbm#keys()","hash#keys()","objectspace::weakmap#keys()","sdbm#keys()","thread#keys()","irb::inspector::keys_with_inspector()","irb::jobmanager#kill()","process::kill()","shell#kill()","shell::systemcommand#kill()","thread#kill()","thread::kill()","shell::processcontroller#kill_job()","object#kind_of?()","matrix::lupdecomposition#l()","rubyvm::instructionsequence#label()","thread::backtrace::location#label()","kernel#lambda()","proc#lambda?()","rexml::functions::lang()","array#last()","enumerator::arithmeticsequence#last()","rexml::functions::last()","range#last()","rss::maker::channelbase#lastbuilddate=()","rubyvm::abstractsyntaxtree::node#last_column()","encoding::converter#last_error()","fiddle::last_error()","fiddle::last_error=()","rubyvm::abstractsyntaxtree::node#last_lineno()","regexp::last_match()","openuri::meta#last_modified()","rdoc::toplevel#last_modified()","process::last_status()","openssl::x509::crl#last_update()","openssl::x509::crl#last_update=()","gc::latest_gc_info()","gem::latest_rubygems_version()","gem::latest_spec_for()","bundler::molinillo::resolver::resolution::possibilityset#latest_version()","gem::latest_version_for()","enumerable#lazy()","enumerator::lazy#lazy()","file::lchmod()","pathname#lchmod()","file::lchown()","pathname#lchown()","integer#lcm()","date#ld()","bundler::cli::doctor#ldd_available?()","math::ldexp()","date#leap?()","date::leap?()","array#length()","dbm#length()","digest::instance#length()","env::length()","gdbm#length()","hash#length()","matchdata#length()","objectspace::weakmap#length()","queue#length()","rexml::attributes#length()","rexml::parent#length()","rexml::syncenumerator#length()","sdbm#length()","set#length()","sizedqueue#length()","string#length()","stringio#length()","struct#length()","symbol#length()","tempfile#length()","bundler::ui::shell#level()","bundler::ui::silent#level()","socket::ancillarydata#level()","socket::option#level()","zlib::gzipfile#level()","bundler::gemversionpromoter#level=()","bundler::ui::shell#level=()","bundler::ui::silent#level=()","irb::notifier::compositenotifier#level=()","logger#level=()","irb::notifier::compositenotifier#level_notifier=()","bundler::similaritydetector#levenshtein_distance()","ripper::lex()","ripper::lex_state_name()","math::lgamma()","csv#liberal_parsing?()","csv::parser#liberal_parsing?()","win32ole_typelib#library_name()","psych::libyaml_version()","bundler::cli#licenses()","bigdecimal::limit()","csv#line()","csv::parser#line()","irb::readlineinputmethod#line()","irb::stdioinputmethod#line()","rexml::parseexception#line()","readline::line_buffer()","psych::emitter#line_width()","psych::emitter#line_width=()","argf#lineno()","csv#lineno()","csv::parser#lineno()","io#lineno()","ripper#lineno()","ripper::filter#lineno()","stringio#lineno()","thread::backtrace::location#lineno()","tracepoint#lineno()","zlib::gzipreader#lineno()","argf#lineno=()","io#lineno=()","stringio#lineno=()","zlib::gzipreader#lineno=()","argf#lines()","io#lines()","string#lines()","stringio#lines()","zlib::gzipreader#lines()","socket::option#linger()","socket::option::linger()","bundler::fileutils::link()","file::link()","fileutils::link()","rss::maker::imagebase#link()","fileutils::link_entry()","bundler::thor::actions#link_file()","ipaddr#link_local?()","rdoc::markdown#link_to()","bundler::cli#list()","encoding::list()","net::ftp#list()","net::imap#list()","signal::list()","thread::list()","threadgroup#list()","webrick::httputils::formdata#list()","rdoc::rdoc#list_files_in_directory()","rdoc::markdown#list_item_from()","net::ftp::mlsxentry#listable?()","addrinfo#listen()","openssl::ssl::sslserver#listen()","rexml::parsers::sax2parser#listen()","socket#listen()","tcpserver#listen()","unixserver#listen()","webrick::genericserver#listen()","rss::rexmlparser::listener()","rss::xmlparserparser::listener()","rss::xmlscanparser::listener()","rss::rexmllikexmlparser#listener=()","string#ljust()","bundler::fileutils::ln()","fileutils::ln()","openssl::asn1::objectid#ln()","bundler::fileutils::ln_s()","fileutils::ln_s()","bundler::fileutils::ln_sf()","fileutils::ln_sf()","bundler::load()","bundler::yamlserializer#load()","irb::locale#load()","json#load()","json::genericobject::load()","kernel#load()","marshal::load()","openssl::engine::load()","optionparser#load()","psych::load()","rdoc::store#load_all()","rdoc::store#load_cache()","rdoc::store#load_class()","rdoc::store#load_class_data()","gem::load_env_plugins()","irb::irbloader#load_file()","psych::load_file()","rubyvm::instructionsequence::load_from_binary()","rubyvm::instructionsequence::load_from_binary_extra_data()","bundler::load_gemspec()","bundler::load_gemspec_uncached()","bundler::load_marshal()","rdoc::store#load_method()","webrick::httputils::load_mime_types()","rdoc::rdoc#load_options()","rdoc::store#load_page()","gem::load_path_insert_index()","bundler::endpointspecification#load_paths()","bundler::plugin::index#load_paths()","bundler::stubspecification#load_paths()","bundler::plugin#load_plugin()","gem::load_plugins()","openssl::engine#load_private_key()","openssl::engine#load_public_key()","openssl::random::load_random_file()","rdoc::rubygemshook::load_rdoc()","bundler::source::git#load_spec_files()","psych::load_stream()","bundler::thor::util::load_thorfile()","gem::load_yaml()","rdoc::load_yaml()","bundler::stubspecification#loaded_from()","time::local()","basicsocket#local_address()","bundler::plugin::index#local_index_file()","bundler::thor::command#local_method?()","bundler::thor::command#local_method?()","rexml::functions::local_name()","rexml::light::node#local_name()","rexml::light::node#local_name=()","bundler::source::git#local_override!()","bundler::settings#local_overrides()","bundler::local_platform()","bundler::plugin#local_root()","bundler::index#local_search()","bundler::source::path#local_specs()","binding#local_variable_defined?()","binding#local_variable_get()","irb::workspace#local_variable_get()","binding#local_variable_set()","irb::workspace#local_variable_set()","binding#local_variables()","kernel#local_variables()","nameerror#local_variables()","win32ole::locale()","win32ole::locale=()","encoding::locale_charmap()","time#localtime()","erb#location=()","gem::location_of_caller()","bundler::settings#locations()","bundler::cli#lock()","bundler::definition#lock()","bundler::processlock::lock()","bundler::runtime#lock()","mutex#lock()","net::http#lock()","bundler::sourcelist#lock_sources()","mutex#locked?()","bundler::definition#locked_bundler_version()","bundler::locked_gems()","bundler::definition#locked_ruby_version()","bundler::definition#locked_ruby_version_object()","bigmath::log()","cmath::log()","logger#log()","math::log()","syslog::log()","webrick::basiclog#log()","webrick::log#log()","cmath::log10()","math::log10()","cmath::log2()","math::log2()","bundler::friendlyerrors#log_error()","net::pop3#logging()","net::ftp#login()","net::imap#login()","rss::maker::channelbase#logo()","rss::maker::channelbase#logo=()","net::imap#logout()","bundler::thor::long_desc()","openssl::asn1::objectid#long_name()","bundler::thor::shell::basic#lookup_color()","rinda::ringfinger#lookup_ring()","rinda::ringfinger#lookup_ring_any()","webrick::httpserver#lookup_server()","kernel#loop()","ipaddr#loopback?()","net::ftp#ls()","openssl::bn#lshift!()","file#lstat()","file::lstat()","pathname#lstat()","string#lstrip()","string#lstrip!()","net::imap#lsub()","lusolve#ludecomp()","lusolve#lusolve()","file::lutime()","bundler::currentruby#maglev?()","complex#magnitude()","float#magnitude()","integer#magnitude()","numeric#magnitude()","rational#magnitude()","net::popmail#mail()","net::smtp#mailfrom()","net::pop3#mails()","irb::context#main()","rdoc::store#main()","thread::main()","rdoc::store#main=()","irb::jobmanager#main_irb()","irb::jobmanager#main_thread()","bundler::gemversionpromoter#major?()","bundler::sharedhelpers#major_deprecation()","win32ole_type#major_version()","win32ole_typelib#major_version()","rss::maker::make()","rss::maker::rssbase#make()","rss::maker::rssbase::make()","openssl::pkey::ec::point#make_affine!()","erb#make_compiler()","bundler::molinillo::dependencygraph::addedgenocircular#make_edge()","bundler::molinillo::dependencygraph::deleteedge#make_edge()","rinda::tupleentry#make_expires()","pathname#make_link()","syslog::logger::make_methods()","webrick::httpauth::basicauth::make_passwd()","webrick::httpauth::digestauth::make_passwd()","webrick::httpauth::userdb#make_passwd()","uri::rfc2396_parser#make_regexp()","rinda::ringserver#make_socket()","optionparser#make_switch()","pathname#make_symlink()","debugger__::make_thread_list()","rinda::tupleentry#make_tuple()","rdoc::store#make_variable_map()","bundler::fileutils::makedirs()","fileutils::makedirs()","rss::atom::contentmodel#maker_target()","rss::atom::feed::logo#maker_target()","rss::atom::personconstruct#maker_target()","rss::taxonomytopicmodel::taxonomytopic#maker_target()","rss::taxonomytopicsmodel::taxonomytopics#maker_target()","rss::maker::makers()","fiddle::malloc()","fiddle::cstructentity::malloc()","fiddle::cunionentity::malloc()","fiddle::pointer::malloc()","gc::malloc_allocated_size()","gc::malloc_allocations()","array#map()","bundler::thor::map()","enumerable#map()","enumerator::lazy#map()","psych::coder#map()","array#map!()","set#map!()","psych::coder#map=()","psych::nodes::mapping#mapping?()","psych::nodes::node#mapping?()","psych::parser#mark()","rdoc::text#markup()","delegator#marshal_dump()","openstruct#marshal_dump()","rdoc::anymethod#marshal_dump()","rdoc::attr#marshal_dump()","rdoc::constant#marshal_dump()","rdoc::toplevel#marshal_dump()","date#marshal_dump_old()","delegator#marshal_load()","openstruct#marshal_load()","rdoc::anymethod#marshal_load()","rdoc::attr#marshal_load()","rdoc::constant#marshal_load()","gem::marshal_version()","ipaddr#mask()","syslog::mask()","ipaddr#mask!()","syslog::mask=()","acl::aclentry#match()","acl::acllist#match()","optionparser::completinghash#match()","rexml::iosource#match()","rexml::quickpath::match()","rexml::source#match()","rexml::xpath::match()","rexml::xpathparser#match()","regexp#match()","rinda::template#match()","rinda::templateentry#match()","string#match()","symbol#match()","csv::matchp#match?()","regexp#match?()","string#match?()","stringscanner#match?()","symbol#match?()","bundler::matchplatform#match_platform()","rexml::source#match_to()","rexml::source#match_to_consume()","stringscanner#matched()","stringscanner#matched?()","stringscanner#matched_size()","bundler::thor::lineeditor::readline::pathcompletion#matches()","rexml::entity::matches?()","rexml::validation::choice#matches?()","rexml::validation::event#matches?()","rexml::validation::interleave#matches?()","rexml::validation::oneormore#matches?()","rexml::validation::optional#matches?()","rexml::validation::sequence#matches?()","bundler::stubspecification#matches_for_glob()","bundler::specset#materialize()","bundler::specset#materialized_for_all_platforms()","array#max()","enumerable#max()","range#max()","sizedqueue#max()","sizedqueue#max=()","enumerable#max_by()","net::imap::max_flag_count()","net::imap::max_flag_count=()","json::ext::generator::state#max_nesting()","json::ext::generator::state#max_nesting=()","net::http#max_retries=()","openssl::ssl::sslcontext#max_version=()","process::maxgroups()","process::maxgroups=()","bundler::sharedhelpers#md5_available?()","date#mday()","time#mday()","net::ftp#mdtm()","benchmark::measure()","net::imap::bodytypebasic#media_subtype()","net::imap::bodytypemessage#media_subtype()","net::imap::bodytypemultipart#media_subtype()","net::imap::bodytypetext#media_subtype()","openssl::mem_check_start()","csv::row#member?()","dbm#member?()","env::member?()","enumerable#member?()","gdbm#member?()","hash#member?()","objectspace::weakmap#member?()","range#member?()","sdbm#member?()","set#member?()","struct#members()","webrick::httpauth::htgroup#members()","benchmark::tms#memberwise()","objectspace::memsize_of()","objectspace::memsize_of_all()","bundler::specset#merge()","bundler::thor::coreext::orderedhash#merge()","hash#merge()","json::ext::generator::state#merge()","rdoc::classmodule#merge()","set#merge()","uri::generic#merge()","bundler::thor::coreext::orderedhash#merge!()","hash#merge!()","uri::generic#merge!()","bundler::compactindexclient::updater::mismatchedchecksumerror#message()","bundler::molinillo::nosuchdependencyerror#message()","bundler::nospaceondeviceerror#message()","bundler::operationnotsupportederror#message()","bundler::permissionerror#message()","bundler::temporaryresourceerror#message()","bundler::virtualprotocolerror#message()","exception#message()","net::readtimeout#message()","net::smtp::response#message()","net::writetimeout#message()","optionparser::parseerror#message()","win32ole_event::message_loop()","bundler::molinillo::versionconflict#message_with_trees()","webrick::httprequest#meta_vars()","object#method()","bundler::thor::base::classmethods#method_added()","shell::commandprocessor::method_added()","module#method_defined?()","rdoc::store#method_file()","tracepoint#method_id()","bundler::dsl#method_missing()","bundler::plugin::api#method_missing()","bundler::plugin::dsl#method_missing()","drb::drbobject#method_missing()","drb::drbobject#method_missing()","delegator#method_missing()","rexml::quickpath::method_missing()","win32ole#method_missing()","win32ole_record#method_missing()","bundler::thor::method_option()","bundler::thor::method_options()","delegator#methods()","object#methods()","win32ole#methods()","rdoc::context#methods_by_type()","rdoc::context#methods_matching()","rss::atom::feed::entry::content#mime_split()","webrick::httputils::mime_type()","array#min()","datetime#min()","enumerable#min()","range#min()","time#min()","enumerable#min_by()","openssl::ssl::sslcontext#min_version=()","bundler::currentruby#mingw?()","enumerable#minmax()","enumerable#minmax_by()","bundler::gemversionpromoter#minor?()","win32ole_type#minor_version()","win32ole_typelib#minor_version()","datetime#minute()","rss::itunesitemmodel::itunesduration#minute=()","rss::maker::itunesitemmodel::itunesdurationbase#minute=()","bundler::settings#mirror_for()","bundler::stubspecification#missing_extensions?()","bundler::parallelinstaller::specinstallation#missing_lockfile_dependencies()","bundler::definition#missing_specs()","bundler::definition#missing_specs?()","date#mjd()","net::http#mkcol()","bundler::fileutils::mkdir()","dir::mkdir()","fileutils::mkdir()","net::ftp#mkdir()","pathname#mkdir()","shell::commandprocessor#mkdir()","bundler::mkdir_p()","bundler::fileutils::mkdir_p()","fileutils::mkdir_p()","file::mkfifo()","bundler::fileutils::mkpath()","fileutils::mkpath()","pathname#mkpath()","time::mktime()","dir::mktmpdir()","net::ftp#mlsd()","net::ftp#mlst()","openssl::bn#mod_add()","openssl::bn#mod_exp()","openssl::bn#mod_inverse()","openssl::bn#mod_mul()","openssl::bn#mod_sqr()","openssl::bn#mod_sub()","bigdecimal::mode()","file::stat#mode()","rss::element::models()","rdoc::mixin#module()","rdoc::classmodule#module?()","rdoc::normalmodule#module?()","module#module_eval()","module#module_exec()","rdoc::store#module_names()","rdoc::context#modules()","rdoc::context#modules_hash()","rdoc::store#modules_hash()","bigdecimal#modulo()","float#modulo()","integer#modulo()","numeric#modulo()","date#mon()","time#mon()","monitormixin#mon_enter()","monitormixin#mon_exit()","monitormixin#mon_locked?()","monitormixin#mon_owned?()","monitormixin#mon_synchronize()","monitormixin#mon_try_enter()","date#monday?()","time#monday?()","date#month()","time#month()","webrick::httpserver#mount()","webrick::httpserver#mount_proc()","pathname#mountpoint?()","bundler::fileutils::move()","fileutils::move()","net::http#move()","net::imap#move()","rinda::tuplespace#move()","bundler::currentruby#mri?()","bundler::currentruby#mswin64?()","bundler::currentruby#mswin?()","file::mtime()","file#mtime()","file::stat#mtime()","net::ftp#mtime()","pathname#mtime()","zlib::gzipfile#mtime()","zlib::gzipwriter#mtime=()","mutex_m#mu_lock()","mutex_m#mu_locked?()","mutex_m#mu_synchronize()","mutex_m#mu_try_lock()","mutex_m#mu_unlock()","openssl::pkey::ec::point#mul()","bigdecimal#mult()","cgi::queryextension#multipart?()","net::imap::bodytypeattachment#multipart?()","net::imap::bodytypebasic#multipart?()","net::imap::bodytypeextension#multipart?()","net::imap::bodytypemessage#multipart?()","net::imap::bodytypemultipart#multipart?()","net::imap::bodytypetext#multipart?()","cgi::htmlextension#multipart_form()","stringscanner::must_c_version()","rss::element::must_call_validators()","bundler::thor::shell::basic#mute()","bundler::thor::shell::basic#mute?()","bundler::fileutils::mv()","fileutils::mv()","net::pop3#n_bytes()","irb::jobmanager#n_jobs()","net::pop3#n_mails()","bundler::depproxy#name()","bundler::gemhelper#name()","bundler::molinillo::delegates::resolutionstate#name()","bundler::source::git#name()","bundler::source::path#name()","encoding#name()","method#name()","module#name()","nameerror#name()","openssl::cipher#name()","openssl::digest#name()","openssl::engine#name()","openssl::pkcs7::signerinfo#name()","rdoc::anymethod#name()","rdoc::toplevel#name()","rexml::document#name()","rexml::functions::name()","rexml::light::node#name()","rexml::notationdecl#name()","rexml::quickpath::name()","socket::ifaddr#name()","thread#name()","unboundmethod#name()","win32ole_method#name()","win32ole_param#name()","win32ole_type#name()","win32ole_typelib#name()","win32ole_variable#name()","rdoc::classmodule#name=()","rexml::light::node#name=()","rexml::namespace#name=()","thread#name=()","bundler::molinillo::delegates::specificationprovider#name_for()","bundler::molinillo::specificationprovider#name_for()","bundler::resolver#name_for()","bundler::molinillo::delegates::specificationprovider#name_for_explicit_dependency_source()","bundler::molinillo::specificationprovider#name_for_explicit_dependency_source()","bundler::resolver#name_for_explicit_dependency_source()","bundler::molinillo::delegates::specificationprovider#name_for_locking_dependency_source()","bundler::molinillo::specificationprovider#name_for_locking_dependency_source()","bundler::resolver#name_for_locking_dependency_source()","rdoc::classmodule#name_for_path()","rdoc::context#name_for_path()","encoding::name_list()","rdoc::alias#name_prefix()","rdoc::methodattr#name_prefix()","matchdata#named_captures()","regexp#named_captures()","bundler::compactindexclient#names()","bundler::compactindexclient::cache#names()","encoding#names()","matchdata#names()","regexp#names()","bundler::compactindexclient::cache#names_path()","bundler::thor::base::classmethods#namespace()","object#namespace()","rexml::attribute#namespace()","rexml::element#namespace()","rexml::light::node#namespace()","rexml::light::node#namespace=()","rexml::functions::namespace_context()","rexml::functions::namespace_context=()","bundler::thor::util::namespace_from_thor_class()","rexml::functions::namespace_uri()","rexml::attributes#namespaces()","rexml::element#namespaces()","rexml::parsers::xpathparser#namespaces=()","rexml::xpathparser#namespaces=()","bundler::thor::util::namespaces_in_content()","bigdecimal#nan?()","float#nan?()","ipaddr#native()","rss::atom::feed::entry::content#need_base64_encode?()","rss::element#need_base64_encode?()","rss::element::need_initialize_variables()","rss::maker::base::need_initialize_variables()","rss::atom::commonmodel::need_parent?()","rss::element::need_parent?()","gem::needs()","float#negative?()","numeric#negative?()","openssl::bn#negative?()","rational#negative?()","prettyprint#nest()","module::nesting()","socket::ifaddr#netmask()","acl::new()","acl::aclentry::new()","acl::acllist::new()","addrinfo::new()","array::new()","basicobject::new()","benchmark::tms::new()","bigdecimal::new()","bundler::cli::new()","bundler::cli::add::new()","bundler::cli::binstubs::new()","bundler::cli::cache::new()","bundler::cli::check::new()","bundler::cli::clean::new()","bundler::cli::config::new()","bundler::cli::console::new()","bundler::cli::doctor::new()","bundler::cli::exec::new()","bundler::cli::gem::new()","bundler::cli::info::new()","bundler::cli::init::new()","bundler::cli::inject::new()","bundler::cli::install::new()","bundler::cli::list::new()","bundler::cli::lock::new()","bundler::cli::open::new()","bundler::cli::outdated::new()","bundler::cli::package::new()","bundler::cli::platform::new()","bundler::cli::pristine::new()","bundler::cli::remove::new()","bundler::cli::show::new()","bundler::cli::update::new()","bundler::cli::viz::new()","bundler::compactindexclient::new()","bundler::compactindexclient::cache::new()","bundler::compactindexclient::updater::new()","bundler::compactindexclient::updater::mismatchedchecksumerror::new()","bundler::definition::new()","bundler::depproxy::new()","bundler::dependency::new()","bundler::dsl::new()","bundler::dsl::dslerror::new()","bundler::endpointspecification::new()","bundler::environmentpreserver::new()","bundler::featureflag::new()","bundler::fetcher::new()","bundler::fetcher::authenticationrequirederror::new()","bundler::fetcher::badauthenticationerror::new()","bundler::fetcher::base::new()","bundler::fetcher::certificatefailureerror::new()","bundler::fetcher::downloader::new()","bundler::fetcher::sslerror::new()","bundler::gemhelper::new()","bundler::geminstaller::new()","bundler::gemrequireerror::new()","bundler::gemversionpromoter::new()","bundler::gemdeps::new()","bundler::genericsystemcallerror::new()","bundler::graph::new()","bundler::graph::graphvizclient::new()","bundler::index::new()","bundler::injector::new()","bundler::installer::new()","bundler::lazyspecification::new()","bundler::lockfilegenerator::new()","bundler::lockfileparser::new()","bundler::mirrorsockets::new()","bundler::molinillo::circulardependencyerror::new()","bundler::molinillo::dependencygraph::new()","bundler::molinillo::dependencygraph::addedgenocircular::new()","bundler::molinillo::dependencygraph::deleteedge::new()","bundler::molinillo::dependencygraph::detachvertexnamed::new()","bundler::molinillo::dependencygraph::log::new()","bundler::molinillo::dependencygraph::tag::new()","bundler::molinillo::dependencygraph::vertex::new()","bundler::molinillo::nosuchdependencyerror::new()","bundler::molinillo::resolver::new()","bundler::molinillo::resolver::resolution::new()","bundler::molinillo::versionconflict::new()","bundler::parallelinstaller::new()","bundler::parallelinstaller::specinstallation::new()","bundler::permissionerror::new()","bundler::persistent::net::http::persistent::new()","bundler::plugin::api::source::new()","bundler::plugin::dsl::new()","bundler::plugin::index::new()","bundler::plugin::index::commandconflict::new()","bundler::plugin::index::sourceconflict::new()","bundler::remotespecification::new()","bundler::resolver::new()","bundler::resolver::specgroup::new()","bundler::retry::new()","bundler::rubyversion::new()","bundler::runtime::new()","bundler::settings::new()","bundler::settings::mirror::new()","bundler::settings::mirrorconfig::new()","bundler::settings::mirrors::new()","bundler::settings::validator::rule::new()","bundler::similaritydetector::new()","bundler::socketaddress::new()","bundler::source::gemspec::new()","bundler::source::git::new()","bundler::source::git::gitcommanderror::new()","bundler::source::git::gitnotallowederror::new()","bundler::source::git::gitnotinstallederror::new()","bundler::source::git::gitproxy::new()","bundler::source::git::missinggitrevisionerror::new()","bundler::source::path::new()","bundler::source::path::installer::new()","bundler::sourcelist::new()","bundler::specset::new()","bundler::standalone::new()","bundler::thor::actions::new()","bundler::thor::base::new()","bundler::thor::command::new()","bundler::thor::command::new()","bundler::thor::coreext::orderedhash::new()","bundler::thor::dynamiccommand::new()","bundler::thor::dynamiccommand::new()","bundler::thor::lineeditor::basic::new()","bundler::thor::lineeditor::readline::pathcompletion::new()","bundler::thor::shell::new()","bundler::ui::rgproxy::new()","bundler::ui::shell::new()","bundler::ui::silent::new()","bundler::versionconflict::new()","bundler::worker::new()","bundler::worker::wrappedexception::new()","bundler::yamlsyntaxerror::new()","cgi::new()","cgi::cookie::new()","cgi::session::new()","cgi::session::filestore::new()","cgi::session::memorystore::new()","cgi::session::nullstore::new()","cgi::session::pstore::new()","csv::new()","csv::fieldsconverter::new()","csv::malformedcsverror::new()","csv::parser::new()","csv::parser::inputsscanner::new()","csv::parser::scanner::new()","csv::parser::unoptimizedstringio::new()","csv::row::new()","csv::table::new()","csv::writer::new()","class::new()","class#new()","conditionvariable::new()","dbm::new()","drb::drbarray::new()","drb::drbobject::new()","drb::drbobject::new()","drb::drbremoteerror::new()","drb::drbsslsocket::new()","drb::drbsslsocket::sslconfig::new()","drb::drbserver::new()","drb::drbunknown::new()","drb::drbunknownerror::new()","drb::extserv::new()","drb::extservmanager::new()","drb::gw::new()","drb::timeridconv::new()","date::new()","datetime::new()","delegator::new()","digest::instance#new()","dir::new()","erb::new()","encoding::converter::new()","enumerator::new()","enumerator::chain::new()","enumerator::lazy::new()","exception::new()","fiddle::cstructentity::new()","fiddle::closure::new()","fiddle::closure::blockcaller::new()","fiddle::compositehandler::new()","fiddle::function::new()","fiddle::handle::new()","fiddle::pointer::new()","file::new()","file::stat::new()","gdbm::new()","getoptlong::new()","hash::new()","io::new()","ipaddr::new()","irb::context::new()","irb::fileinputmethod::new()","irb::frame::new()","irb::inputmethod::new()","irb::inspector::new()","irb::irb::new()","irb::jobmanager::new()","irb::locale::new()","irb::notifier::abstractnotifier::new()","irb::notifier::compositenotifier::new()","irb::notifier::levelednotifier::new()","irb::notifier::nomsgnotifier::new()","irb::readlineinputmethod::new()","irb::stdioinputmethod::new()","irb::workspace::new()","json::ext::generator::state::new()","json::ext::parser::new()","keyerror::new()","logger::new()","logger::formatter::new()","logger::logdevice::new()","matrix::new()","matrix::eigenvaluedecomposition::new()","matrix::lupdecomposition::new()","module::new()","monitormixin::new()","monitormixin::conditionvariable::new()","mutex::new()","nameerror::new()","net::ftp::new()","net::ftp::mlsxentry::new()","net::http::new()","net::http::new()","net::httpgenericrequest::new()","net::httprequest::new()","net::imap::new()","net::imap::crammd5authenticator::new()","net::imap::digestmd5authenticator::new()","net::imap::loginauthenticator::new()","net::imap::plainauthenticator::new()","net::imap::responseerror::new()","net::internetmessageio::writeadapter::new()","net::pop3::new()","net::readtimeout::new()","net::smtp::new()","net::smtp::response::new()","net::writetimeout::new()","nomethoderror::new()","oleproperty::new()","openssl::asn1::asn1data::new()","openssl::asn1::constructive::new()","openssl::asn1::primitive::new()","openssl::bn::new()","openssl::buffering::new()","openssl::cipher::new()","openssl::config::new()","openssl::digest::new()","openssl::hmac::new()","openssl::netscape::spki::new()","openssl::ocsp::basicresponse::new()","openssl::ocsp::certificateid::new()","openssl::ocsp::request::new()","openssl::ocsp::response::new()","openssl::ocsp::singleresponse::new()","openssl::pkcs12::new()","openssl::pkcs7::new()","openssl::pkcs7::recipientinfo::new()","openssl::pkcs7::signerinfo::new()","openssl::pkey::dh::new()","openssl::pkey::dsa::new()","openssl::pkey::ec::new()","openssl::pkey::ec::group::new()","openssl::pkey::ec::point::new()","openssl::pkey::pkey::new()","openssl::pkey::rsa::new()","openssl::ssl::sslcontext::new()","openssl::ssl::sslserver::new()","openssl::ssl::sslsocket::new()","openssl::ssl::session::new()","openssl::x509::attribute::new()","openssl::x509::crl::new()","openssl::x509::certificate::new()","openssl::x509::extension::new()","openssl::x509::extensionfactory::new()","openssl::x509::name::new()","openssl::x509::request::new()","openssl::x509::revoked::new()","openssl::x509::store::new()","openssl::x509::storecontext::new()","openstruct::new()","openuri::httperror::new()","openuri::httpredirect::new()","optionparser::new()","optionparser#new()","optionparser::arguable::new()","optionparser::list::new()","optionparser::parseerror::new()","optionparser::switch::new()","pstore::new()","pathname::new()","prettyprint::new()","prettyprint::singleline::new()","prime::eratosthenesgenerator::new()","prime::eratosthenessieve::new()","prime::generator23::new()","prime::pseudoprimegenerator::new()","prime::trialdivisiongenerator::new()","proc::new()","psych::classloader::restricted::new()","psych::coder::new()","psych::disallowedclass::new()","psych::emitter::new()","psych::handler::dumperoptions::new()","psych::handlers::recorder::new()","psych::nodes::alias::new()","psych::nodes::document::new()","psych::nodes::mapping::new()","psych::nodes::node::new()","psych::nodes::scalar::new()","psych::nodes::sequence::new()","psych::nodes::stream::new()","psych::parser::new()","psych::scalarscanner::new()","psych::streaming::classmethods#new()","psych::syntaxerror::new()","psych::syntaxerror::new()","psych::treebuilder::new()","psych::visitors::depthfirst::new()","psych::visitors::emitter::new()","psych::visitors::toruby::new()","psych::visitors::yamltree::new()","queue::new()","rdoc::alias::new()","rdoc::anymethod::new()","rdoc::attr::new()","rdoc::classmodule::new()","rdoc::codeobject::new()","rdoc::comment::new()","rdoc::constant::new()","rdoc::context::new()","rdoc::crossreference::new()","rdoc::erbio::new()","rdoc::markdown::new()","rdoc::markup::new()","rdoc::methodattr::new()","rdoc::mixin::new()","rdoc::parser::new()","rdoc::rdoc::new()","rdoc::require::new()","rdoc::rubygemshook::new()","rdoc::servlet::new()","rdoc::stats::new()","rdoc::store::new()","rdoc::store::missingfileerror::new()","rdoc::task::new()","rdoc::task::new()","rdoc::tomdoc::new()","rdoc::toplevel::new()","rexml::attlistdecl::new()","rexml::attribute::new()","rexml::attributes::new()","rexml::cdata::new()","rexml::child::new()","rexml::comment::new()","rexml::dtd::elementdecl::new()","rexml::dtd::entitydecl::new()","rexml::dtd::notationdecl::new()","rexml::declaration::new()","rexml::doctype::new()","rexml::document::new()","rexml::element::new()","rexml::elementdecl::new()","rexml::elements::new()","rexml::entity::new()","rexml::externalentity::new()","rexml::formatters::default::new()","rexml::formatters::pretty::new()","rexml::formatters::transitive::new()","rexml::iosource::new()","rexml::instruction::new()","rexml::light::node::new()","rexml::notationdecl::new()","rexml::output::new()","rexml::parent::new()","rexml::parseexception::new()","rexml::parsers::baseparser::new()","rexml::parsers::lightparser::new()","rexml::parsers::pullevent::new()","rexml::parsers::pullparser::new()","rexml::parsers::sax2parser::new()","rexml::parsers::streamparser::new()","rexml::parsers::treeparser::new()","rexml::parsers::ultralightparser::new()","rexml::source::new()","rexml::syncenumerator::new()","rexml::text::new()","rexml::undefinednamespaceexception::new()","rexml::validation::choice::new()","rexml::validation::event::new()","rexml::validation::interleave::new()","rexml::validation::oneormore::new()","rexml::validation::ref::new()","rexml::validation::relaxng::new()","rexml::validation::state::new()","rexml::validation::validationexception::new()","rexml::xmldecl::new()","rexml::xpathnode::new()","rexml::xpathparser::new()","rss::atom::entry::new()","rss::atom::feed::new()","rss::baseparser::new()","rss::conversionerror::new()","rss::converter::new()","rss::element::new()","rss::ituneschannelmodel::itunescategory::new()","rss::ituneschannelmodel::itunesimage::new()","rss::ituneschannelmodel::itunesowner::new()","rss::itunesitemmodel::itunesduration::new()","rss::imagefaviconmodel::imagefavicon::new()","rss::imageitemmodel::imageitem::new()","rss::listenermixin::new()","rss::maker::atom::entry::new()","rss::maker::atom::feed::new()","rss::maker::base::new()","rss::maker::itemsbase::new()","rss::maker::rss09::new()","rss::maker::rss091::new()","rss::maker::rss092::new()","rss::maker::rss10::new()","rss::maker::rss20::new()","rss::maker::rssbase::new()","rss::missingattributeerror::new()","rss::missingtagerror::new()","rss::nserror::new()","rss::notavailablevalueerror::new()","rss::notexpectedtagerror::new()","rss::notseterror::new()","rss::notvalidxmlparser::new()","rss::notwellformederror::new()","rss::overlappedprefixerror::new()","rss::parser::new()","rss::rdf::new()","rss::rdf::bag::new()","rss::rdf::bag::new()","rss::rdf::channel::new()","rss::rdf::channel::image::new()","rss::rdf::channel::items::new()","rss::rdf::channel::textinput::new()","rss::rdf::image::new()","rss::rdf::item::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::li::new()","rss::rdf::seq::new()","rss::rdf::seq::new()","rss::rdf::textinput::new()","rss::rootelementmixin::new()","rss::rss::new()","rss::rss::channel::cloud::new()","rss::rss::channel::image::new()","rss::rss::channel::item::category::new()","rss::rss::channel::item::enclosure::new()","rss::rss::channel::item::guid::new()","rss::rss::channel::item::source::new()","rss::rss::channel::skipdays::day::new()","rss::rss::channel::skiphours::hour::new()","rss::rss::channel::textinput::new()","rss::taxonomytopicmodel::taxonomytopic::new()","rss::taxonomytopicsmodel::taxonomytopics::new()","rss::toomuchtagerror::new()","rss::unknownconversionmethoderror::new()","rss::unknowntagerror::new()","rss::unsupportedmakerversionerror::new()","rss::xml::element::new()","rss::xmlparsernotfound::new()","rss::xmlstylesheet::new()","rss::xmlstylesheetmixin::new()","random::new()","range::new()","regexp::new()","resolv::new()","resolv::dns::new()","resolv::dns::resource::domainname::new()","resolv::dns::resource::generic::new()","resolv::dns::resource::hinfo::new()","resolv::dns::resource::in::a::new()","resolv::dns::resource::in::aaaa::new()","resolv::dns::resource::in::srv::new()","resolv::dns::resource::in::wks::new()","resolv::dns::resource::loc::new()","resolv::dns::resource::minfo::new()","resolv::dns::resource::mx::new()","resolv::dns::resource::soa::new()","resolv::dns::resource::txt::new()","resolv::hosts::new()","resolv::loc::alt::new()","resolv::loc::coord::new()","resolv::loc::size::new()","resolv::mdns::new()","rinda::drbobjecttemplate::new()","rinda::notifytemplateentry::new()","rinda::ringfinger::new()","rinda::ringprovider::new()","rinda::ringserver::new()","rinda::simplerenewer::new()","rinda::tuple::new()","rinda::tuplebag::tuplebin::new()","rinda::tupleentry::new()","rinda::tuplespace::new()","rinda::tuplespaceproxy::new()","rinda::waittemplateentry::new()","ripper::new()","ripper::filter::new()","rubyvm::instructionsequence::new()","sdbm::new()","sockssocket::new()","sockssocket::new()","set::new()","shell::new()","shell::appendfile::new()","shell::appendio::new()","shell::cat::new()","shell::commandprocessor::new()","shell::concat::new()","shell::echo::new()","shell::filter::new()","shell::glob::new()","shell::processcontroller::new()","shell::systemcommand::new()","shell::tee::new()","shell::void::new()","signalexception::new()","sizedqueue::new()","socket::new()","socket::ancillarydata::new()","socket::option::new()","socket::udpsource::new()","string::new()","stringio::new()","stringscanner::new()","struct::new()","sync_m::new()","sync_m::new()","syntaxerror::new()","syslog::logger::new()","systemcallerror::new()","systemexit::new()","tcpserver::new()","tcpsocket::new()","tcpsocket::new()","tempfile::new()","thread::new()","threadswait::new()","threadswait::new()","time::new()","tracepoint::new()","udpsocket::new()","unixserver::new()","unixsocket::new()","uri::ftp::new()","uri::generic::new()","uri::ldap::new()","uri::mailto::new()","uri::rfc2396_parser::new()","uncaughtthrowerror::new()","webrick::basiclog::new()","webrick::cgi::new()","webrick::cookie::new()","webrick::genericserver::new()","webrick::httpauth::basicauth::new()","webrick::httpauth::digestauth::new()","webrick::httpauth::htdigest::new()","webrick::httpauth::htgroup::new()","webrick::httpauth::htpasswd::new()","webrick::httpproxyserver::new()","webrick::httprequest::new()","webrick::httpresponse::new()","webrick::httpserver::new()","webrick::httpservlet::abstractservlet::new()","webrick::httpservlet::cgihandler::new()","webrick::httpservlet::defaultfilehandler::new()","webrick::httpservlet::erbhandler::new()","webrick::httpservlet::filehandler::new()","webrick::httputils::formdata::new()","webrick::httpversion::new()","webrick::log::new()","webrick::snirequest::new()","webrick::utils::timeouthandler::new()","win32ole::new()","win32ole_event::new()","win32ole_method::new()","win32ole_param::new()","win32ole_record::new()","win32ole_type::new()","win32ole_typelib::new()","win32ole_variant::new()","weakref::new()","xmp::new()","xmp::stringinputmethod::new()","yaml::store::new()","zlib::deflate::new()","zlib::gzipreader::new()","zlib::gzipwriter::new()","zlib::inflate::new()","date::new!()","irb::methodextender#new_alias_name()","monitormixin#new_cond()","ipaddr::new_ntoh()","datetime#new_offset()","bundler::definition#new_platform?()","random::new_seed()","bundler::definition#new_specs()","date#new_start()","drb::drbobject::new_with()","drb::drbobject::new_with()","drb::drbobject::new_with_uri()","drb::drbobject::new_with_uri()","rss::utils#new_with_value_if_need()","net::http::newobj()","date#next()","enumerator#next()","integer#next()","prime::eratosthenesgenerator#next()","prime::generator23#next()","prime::pseudoprimegenerator#next()","prime::trialdivisiongenerator#next()","rexml::validation::choice#next()","rexml::validation::interleave#next()","rexml::validation::oneormore#next()","rexml::validation::optional#next()","rexml::validation::state#next()","rexml::validation::zeroormore#next()","string#next()","symbol#next()","string#next!()","rexml::validation::interleave#next_current()","date#next_day()","rexml::element#next_element()","float#next_float()","date#next_month()","logger::period#next_rotate_time()","rexml::child#next_sibling=()","rexml::node#next_sibling_node()","racc::parser#next_token()","openssl::ocsp::singleresponse#next_update()","openssl::x509::crl#next_update()","openssl::x509::crl#next_update=()","enumerator#next_values()","threadswait#next_wait()","threadswait#next_wait()","date#next_year()","nilclass#nil?()","object#nil?()","nkf::nkf()","file::stat#nlink()","newton#nlsolve()","net::ftp#nlst()","bundler::thor::shell::basic#no?()","bundler::ui::shell#no?()","bundler::ui::silent#no?()","bundler::thor::base::classmethods#no_commands()","bundler::thor::base::classmethods#no_tasks()","integer#nobits?()","rexml::attlistdecl#node_type()","rexml::attribute#node_type()","rexml::comment#node_type()","rexml::doctype#node_type()","rexml::document#node_type()","rexml::element#node_type()","rexml::instruction#node_type()","rexml::light::node#node_type()","rexml::text#node_type()","rexml::xmldecl#node_type()","io#noecho()","rdoc::classmodule#non_aliases()","io#nonblock()","io#nonblock=()","io#nonblock?()","array#none?()","enumerable#none?()","bigdecimal#nonzero?()","numeric#nonzero?()","net::ftp#noop()","net::imap#noop()","rdoc::comment#normalize()","rexml::parsers::baseparser#normalize()","rss::maker::itemsbase#normalize()","uri::generic#normalize()","uri::generic#normalize!()","rdoc::text#normalize_comment()","webrick::httputils::normalize_path()","rexml::functions::normalize_space()","bundler::persistent::net::http::persistent#normalize_uri()","rexml::entity#normalized()","rdoc::rdoc#normalized_file_list()","rexml::functions::not()","openssl::x509::certificate#not_after()","openssl::x509::certificate#not_after=()","openssl::x509::certificate#not_before()","openssl::x509::certificate#not_before=()","bundler::thor::command#not_debugging?()","bundler::thor::command#not_debugging?()","rdoc::servlet#not_found()","rss::maker::atom::entry::channel::generator::not_set_name()","rss::maker::atom::feed::channel::categories::category::not_set_name()","rss::maker::atom::feed::channel::generator::not_set_name()","rss::maker::atom::feed::channel::links::link::not_set_name()","rss::maker::atom::feed::items::item::categories::category::not_set_name()","rss::maker::atom::feed::items::item::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::categories::category::not_set_name()","rss::maker::atom::feed::items::item::source::generator::not_set_name()","rss::maker::atom::feed::items::item::source::links::link::not_set_name()","rss::maker::atom::feed::items::item::source::logo::not_set_name()","rexml::doctype#notation()","rexml::sax2listener#notationdecl()","rexml::streamlistener#notationdecl()","rexml::parsers::pullevent#notationdecl?()","rexml::doctype#notations()","rdoc::markdown#note()","rdoc::markdown#note_for()","rdoc::markdown#notes()","bundler::definition#nothing_changed?()","rinda::notifytemplateentry#notify()","rinda::tuplespace#notify()","rinda::tuplespaceproxy#notify()","shell::notify()","shell::commandprocessor#notify()","shell::systemcommand#notify()","irb::notifier::abstractnotifier#notify?()","irb::notifier::levelednotifier#notify?()","irb::notifier::nomsgnotifier#notify?()","drb::drbobservable#notify_observers()","observable#notify_observers()","datetime::now()","time::now()","rexml::xmldecl#nowrite()","openssl::ssl::sslsocket#npn_protocol()","etc::nprocessors()","io#nread()","time#nsec()","date::nth_kday()","datetime::nth_kday()","date#nth_kday?()","ipaddr::ntop()","fiddle::pointer#null?()","openssl::bn#num_bits()","openssl::bn#num_bytes()","queue#num_waiting()","sizedqueue#num_waiting()","rexml::functions::number()","complex#numerator()","float#numerator()","integer#numerator()","numeric#numerator()","rational#numerator()","pp::ppmethods#object_address_group()","rdoc::toplevel#object_class()","pp::ppmethods#object_group()","object#object_id()","json::ext::generator::state#object_nl()","json::ext::generator::state#object_nl=()","string#oct()","integer#odd?()","openssl::bn#odd?()","rubyvm::abstractsyntaxtree::of()","rubyvm::instructionsequence::of()","tracer::off()","win32ole_event#off_event()","datetime#offset()","matchdata#offset()","win32ole_method#offset_vtbl()","io#oflush()","openssl::asn1::objectid#oid()","openssl::x509::attribute#oid()","openssl::x509::extension#oid()","openssl::x509::attribute#oid=()","openssl::x509::extension#oid=()","rexml::xmldecl#old_enc=()","win32ole#ole_activex_initialize()","win32ole_type::ole_classes()","win32ole_typelib#ole_classes()","win32ole#ole_free()","win32ole::ole_free()","win32ole#ole_func_methods()","win32ole#ole_get_methods()","win32ole_record#ole_instance_variable_get()","win32ole_record#ole_instance_variable_set()","win32ole#ole_method()","win32ole#ole_method_help()","win32ole#ole_methods()","win32ole_type#ole_methods()","win32ole#ole_obj_help()","win32ole#ole_put_methods()","win32ole#ole_query_interface()","win32ole::ole_reference_count()","win32ole#ole_respond_to?()","win32ole::ole_show_help()","win32ole#ole_type()","win32ole_param#ole_type()","win32ole_type#ole_type()","win32ole_variable#ole_type()","win32ole_param#ole_type_detail()","win32ole_variable#ole_type_detail()","win32ole#ole_typelib()","win32ole_type#ole_typelib()","win32ole_typelib#ole_types()","optionparser#on()","tracer::on()","rss::xmlscanlistener#on_attr_charref()","rss::xmlscanlistener#on_attr_charref_hex()","rss::xmlscanlistener#on_attr_entityref()","rss::xmlscanlistener#on_attr_value()","rss::xmlscanlistener#on_attribute()","rss::xmlscanlistener#on_charref()","rss::xmlscanlistener#on_charref_hex()","openssl::pkey::ec::point#on_curve?()","rss::xmlscanlistener#on_entityref()","racc::parser#on_error()","rss::xmlscanlistener#on_etag()","win32ole_event#on_event()","win32ole_event#on_event_with_outargs()","optionparser#on_head()","rss::xmlscanlistener#on_stag()","rss::xmlscanlistener#on_stag_end()","rss::xmlscanlistener#on_stag_end_empty()","optionparser#on_tail()","rss::xmlscanlistener#on_xmldecl_encoding()","rss::xmlscanlistener#on_xmldecl_end()","rss::xmlscanlistener#on_xmldecl_standalone()","rss::xmlscanlistener#on_xmldecl_version()","array#one?()","enumerable#one?()","openssl::bn#one?()","rdoc::context#ongoing_visibility=()","uri::generic#opaque=()","bundler::cli#open()","csv::open()","dbm::open()","drb::drbprotocol::open()","drb::drbsslsocket::open()","dir::open()","file::open()","gdbm::open()","io::open()","kernel::open()","net::ftp::open()","openuri::openread#open()","pty::open()","pathname#open()","resolv::dns::open()","sdbm::open()","shell::commandprocessor#open()","stringio::open()","syslog::open()","tempfile::open()","tempfile#open()","zlib::gzipreader::open()","zlib::gzipwriter::open()","syslog::open!()","net::smtp#open_message_stream()","drb::drbprotocol::open_server()","drb::drbsslsocket::open_server()","pathname#opendir()","syslog::opened?()","bundler::thor::option()","rdoc::task#option_list()","rdoc::task#option_list()","win32ole_param#optional?()","bundler::source::metadata#options()","bundler::thor::options()","net::http#options()","openssl::ssl::sslcontext#options()","optionparser::arguable#options()","rdoc::codeobject#options()","regexp#options()","syslog::options()","openssl::ssl::sslcontext#options=()","optionparser::arguable#options=()","bundler::plugin::api::source#options_to_lock()","socket::option#optname()","integer#ord()","string#ord()","openssl::pkey::ec::group#order()","optionparser#order()","optionparser#order!()","optionparser::arguable#order!()","getoptlong#ordering=()","date::ordinal()","datetime::ordinal()","rdoc::markdown#orig_initialize()","zlib::gzipfile#orig_name()","zlib::gzipwriter#orig_name=()","bundler::original_env()","method#original_name()","unboundmethod#original_name()","zlib::gzipfile#os_code()","bundler::gemhelpers::platformmatch::os_match()","rss::maker::base::other_elements()","bundler::cli::doctor#otool_available?()","cgi#out()","shell::commandprocessor#out()","rss::atom::feed::entry::content#out_of_line?()","rss::maker::itemsbase::itembase::contentbase#out_of_line?()","bundler::cli#outdated()","bundler::molinillo::ui#output()","readline::output=()","win32ole_param#output?()","rss::rootelementmixin#output_encoding=()","rdoc::rdoc#output_flag_file()","rdoc::methodattr#output_name()","bundler::cli::common::output_post_install_messages()","bundler::cli::common::output_without_groups_message()","file::owned?()","file::stat#owned?()","filetest#owned?()","mutex#owned?()","pathname#owned?()","method#owner()","unboundmethod#owner()","kernel#p()","matrix::lupdecomposition#p()","array#pack()","socket::pack_sockaddr_in()","socket::pack_sockaddr_un()","bundler::cli#package()","bundler::thor::package_name()","bundler::thor::shell::basic#padding=()","openssl::cipher#padding=()","rdoc::store#page()","rdoc::store#page_file()","rdoc::toplevel#page_name()","socket::pair()","unixsocket::pair()","rdoc::markdown#paragraph()","rdoc::anymethod#param_list()","rdoc::anymethod#param_seq()","method#parameters()","proc#parameters()","tracepoint#parameters()","unboundmethod#parameters()","openssl::pkey::dh#params()","openssl::pkey::dsa#params()","openssl::pkey::rsa#params()","win32ole_method#params()","zlib::deflate#params()","cgi::queryextension#params=()","openssl::pkey::dh#params_ok?()","pathname#parent()","rdoc::codeobject#parent()","rexml::light::node#parent()","rexml::child#parent=()","rexml::light::node#parent=()","rexml::text#parent=()","rexml::node#parent?()","rexml::parent#parent?()","rdoc::codeobject#parent_file_name()","rdoc::codeobject#parent_name()","rdoc::methodattr#parent_name()","bundler::settings::mirrors#parse()","cgi::parse()","cgi::cookie::parse()","csv::parse()","csv::parser#parse()","date::parse()","datetime::parse()","json#parse()","json::ext::parser#parse()","net::smtp::response::parse()","openssl::config::parse()","openssl::x509::name::parse()","optionparser#parse()","optionparser::switch::noargument#parse()","optionparser::switch::optionalargument#parse()","optionparser::switch::placedargument#parse()","optionparser::switch::requiredargument#parse()","psych::parse()","psych::parser#parse()","rdoc::classmodule#parse()","rdoc::comment#parse()","rdoc::markdown::parse()","rdoc::markdown#parse()","rdoc::markup::parse()","rdoc::options#parse()","rdoc::rd::parse()","rdoc::text#parse()","rdoc::tomdoc::parse()","rexml::dtd::parser::parse()","rexml::parsers::lightparser#parse()","rexml::parsers::sax2parser#parse()","rexml::parsers::streamparser#parse()","rexml::parsers::treeparser#parse()","rexml::parsers::ultralightparser#parse()","rexml::parsers::xpathparser#parse()","rexml::xpathparser#parse()","rss::baseparser#parse()","rss::itunesitemmodel::itunesduration::parse()","rss::parser::parse()","rss::utils::csv#parse()","rss::utils::explicitcleanother#parse()","rss::utils::yesother#parse()","ripper::parse()","ripper#parse()","ripper::filter#parse()","rubyvm::abstractsyntaxtree::parse()","time::parse()","uri::parse()","uri::rfc2396_parser#parse()","webrick::cookie::parse()","webrick::httprequest#parse()","json#parse!()","optionparser#parse!()","optionparser::arguable#parse!()","rexml::quickpath::parse_args()","openssl::config::parse_config()","fiddle::cparser#parse_ctype()","rdoc::rdoc#parse_dot_doc_file()","psych::parse_file()","rdoc::rdoc#parse_file()","rubyvm::abstractsyntaxtree::parse_file()","rdoc::rdoc#parse_files()","rdoc::parser::parse_files_matching()","webrick::httputils::parse_form_data()","webrick::httputils::parse_header()","rexml::dtd::parser::parse_helper()","psych::scalarscanner#parse_int()","csv::parse_line()","openssl::x509::name::parse_openssl()","irb::outputmethod#parse_printf_format()","webrick::httputils::parse_query()","webrick::httputils::parse_qvalues()","webrick::httputils::parse_range_header()","openssl::x509::name::parse_rfc2253()","webrick::cookie::parse_set_cookie()","webrick::cookie::parse_set_cookies()","fiddle::cparser#parse_signature()","rexml::dtd::entitydecl::parse_source()","rexml::dtd::notationdecl::parse_source()","psych::parse_stream()","rexml::document::parse_stream()","fiddle::cparser#parse_struct_signature()","psych::scalarscanner#parse_time()","psych::parser()","uri::generic#parser()","rdoc::toplevel#parser=()","enumerable#partition()","string#partition()","thread::pass()","etc::passwd()","uri::generic#password()","uri::generic#password=()","cgi::htmlextension#password_field()","net::http#patch()","bundler::cli::common::patch_level_options()","argf#path()","bundler::dsl#path()","bundler::settings#path()","bundler::source::git#path()","csv#path()","dir#path()","file#path()","file::path()","gem::path()","pstore#path()","rdoc::classmodule#path()","rdoc::constant#path()","rdoc::methodattr#path()","rdoc::toplevel#path()","rubyvm::instructionsequence#path()","tempfile#path()","thread::backtrace::location#path()","tracepoint#path()","unixsocket#path()","uri::ftp#path()","win32ole_typelib#path()","uri::generic#path=()","bundler::source#path?()","bundler::molinillo::dependencygraph::vertex#path_to?()","io#pathconf()","gem::paths()","gem::paths=()","optionparser::switch::pattern()","optionparser::switch::noargument::pattern()","rubyvm::mjit::pause()","openssl::kdf::pbkdf2_hmac()","openssl::pkcs5#pbkdf2_hmac()","openssl::pkcs5#pbkdf2_hmac_sha1()","enumerator#peek()","rexml::parsers::baseparser#peek()","rexml::parsers::pullparser#peek()","stringscanner#peek()","coverage::peek_result()","enumerator#peek_values()","stringscanner#peep()","net::http#peer_cert()","openssl::ssl::sslsocket#peer_cert()","openssl::ssl::sslsocket#peer_cert_chain()","ipsocket#peeraddr()","openssl::ssl::socketforwarder#peeraddr()","unixsocket#peeraddr()","rdoc::markdown#peg_parse()","openssl::ssl::sslsocket#pending()","thread#pending_interrupt?()","thread::pending_interrupt?()","rdoc::stats#percent_doc()","bundler::gemhelper#perform_git_push()","rss::maker::itemsbase::itembase::guidbase#permanent_link=()","rss::maker::itemsbase::itembase::guidbase#permanent_link?()","array#permutation()","optionparser#permute()","optionparser#permute!()","optionparser::arguable#permute!()","addrinfo#pfamily()","complex#phase()","float#phase()","numeric#phase()","io#pid()","process::pid()","process::status#pid()","stringio#pid()","io::pipe()","file::pipe?()","file::stat#pipe?()","filetest#pipe?()","pathname#pipe?()","bundler::persistent::net::http::persistent#pipeline()","open3::pipeline()","open3::pipeline_r()","open3::pipeline_rw()","open3::pipeline_start()","open3::pipeline_w()","openssl::cipher#pkcs5_keyivgen()","makemakefile#pkg_config()","bundler::cli#platform()","bundler::dsl#platform()","bundler::resolver::platform_sort_key()","bundler::gemhelpers::platform_specificity_match()","bundler::lazyspecification::identifier#platform_string()","bundler::gemhelpers::platformmatch::platform_version_match()","bundler::dsl#platforms()","gem::platforms()","gem::platforms=()","bundler::matchplatform::platforms_match?()","bundler::dsl#plugin()","bundler::plugin::dsl#plugin()","bundler::plugin::index#plugin_path()","rss::element::plural_forms()","readline::point()","readline::point=()","openssl::pkey::ec::group#point_conversion_form()","openssl::pkey::ec::group#point_conversion_form=()","stringscanner#pointer()","stringscanner#pointer=()","complex#polar()","complex::polar()","numeric#polar()","array#pop()","net::popmail#pop()","queue#pop()","rinda::notifytemplateentry#pop()","sizedqueue#pop()","bundler::molinillo::dependencygraph::log#pop!()","pp::ppmethods#pop_inspect_key()","bundler::molinillo::dependencystate#pop_possibility_state()","rdoc::tokenstream#pop_token()","irb::context#pop_workspace()","shell#popd()","shell#popdir()","io::popen()","open3::popen2()","open3::popen2e()","open3::popen3()","cgi::htmlextension#popup_menu()","net::pop3#port()","webrick::httprequest#port()","uri::generic#port=()","argf#pos()","dir#pos()","io#pos()","stringio#pos()","stringscanner#pos()","zlib::gzipreader#pos()","zlib::gzipwriter#pos()","argf#pos=()","dir#pos=()","io#pos=()","stringio#pos=()","stringscanner#pos=()","rexml::functions::position()","rexml::iosource#position()","rexml::parseexception#position()","rexml::parsers::baseparser#position()","rexml::source#position()","rexml::xpathnode#position()","float#positive?()","numeric#positive?()","rational#positive?()","bundler::molinillo::delegates::resolutionstate#possibilities()","bundler::molinillo::resolver::resolution::conflict#possibility()","net::http#post()","net::http::post()","net::http#post2()","gem::post_build()","openssl::ssl::sslsocket#post_connection_check()","net::http::post_form()","bundler::plugin::api::source#post_install()","bundler::source::path::installer#post_install()","gem::post_install()","bundler::endpointspecification#post_install_message()","matchdata#post_match()","stringscanner#post_match()","gem::post_reset()","gem::post_uninstall()","integer#pow()","bigdecimal#power()","irb::notifier::abstractnotifier#pp()","irb::outputmethod#pp()","kernel::pp()","pp::pp()","pp::ppmethods#pp()","pp::ppmethods#pp_hash()","pp::ppmethods#pp_object()","process::ppid()","irb::notifier::abstractnotifier#ppx()","irb::outputmethod#ppx()","readline::pre_input_hook()","readline::pre_input_hook=()","gem::pre_install()","matchdata#pre_match()","stringscanner#pre_match()","gem::pre_reset()","gem::pre_uninstall()","io#pread()","bigdecimal#precs()","integer#pred()","bundler::molinillo::dependencygraph::vertex#predecessors()","rexml::parsers::xpathparser#predicate()","rexml::quickpath::predicate()","rexml::xpathparser#predicate()","rexml::parsers::xpathparser#predicate_to_string()","gem::prefix()","ipaddr#prefix()","rexml::attribute#prefix()","rexml::light::node#prefix()","ipaddr#prefix=()","rexml::attributes#prefixes()","rexml::element#prefixes()","bundler::thor::shell::basic#prepare_message()","array#prepend()","module#prepend()","optionparser::list#prepend()","string#prepend()","bundler::thor::actions#prepend_file()","bundler::thor::actions#prepend_to_file()","io#pressed?()","cgi::util#pretty()","bundler::sharedhelpers#pretty_dependency()","json#pretty_generate()","kernel#pretty_inspect()","rdoc::alias#pretty_name()","rdoc::methodattr#pretty_name()","rdoc::alias#pretty_new_name()","rdoc::alias#pretty_old_name()","openssl::bn#pretty_print()","openssl::x509::certificate#pretty_print()","openssl::x509::name#pretty_print()","rubyvm::abstractsyntaxtree::node#pretty_print()","rubyvm::abstractsyntaxtree::node#pretty_print_children()","bundler::settings#pretty_values_for()","date#prev_day()","float#prev_float()","date#prev_month()","date#prev_year()","rexml::validation::state#previous=()","rexml::element#previous_element()","logger::period#previous_period_end()","rexml::child#previous_sibling=()","rexml::node#previous_sibling_node()","rinda::ringfinger::primary()","integer#prime?()","openssl::bn#prime?()","prime#prime?()","integer#prime_division()","prime#prime_division()","openssl::bn#prime_fasttest?()","encoding::converter#primitive_convert()","encoding::converter#primitive_errinfo()","argf#print()","cgi#print()","io#print()","io::generic_writable#print()","irb::locale#print()","irb::notifier::abstractnotifier#print()","irb::outputmethod#print()","irb::stdiooutputmethod#print()","kernel#print()","net::internetmessageio::writeadapter#print()","openssl::buffering#print()","zlib::gzipwriter#print()","bundler::thor::shell::basic#print_in_columns()","bundler::sharedhelpers#print_major_deprecations!()","openssl::print_mem_leaks()","bundler::thor::base::classmethods#print_options()","bundler::cli::common::print_post_install_message()","profiler__#print_profile()","bundler::thor::shell::basic#print_table()","irb::print_usage()","bundler::thor::shell::basic#print_wrapped()","bundler::thor::printable_commands()","bundler::thor::group::printable_commands()","bundler::thor::printable_tasks()","bundler::thor::group::printable_tasks()","argf#printf()","io#printf()","io::generic_writable#printf()","irb::locale#printf()","irb::notifier::abstractnotifier#printf()","irb::outputmethod#printf()","kernel#printf()","net::internetmessageio::writeadapter#printf()","openssl::buffering#printf()","zlib::gzipwriter#printf()","irb::notifier::abstractnotifier#printn()","irb::outputmethod#printn()","thread#priority()","thread#priority=()","bundler::cli#pristine()","ipaddr#private?()","openssl::pkey::dh#private?()","openssl::pkey::dsa#private?()","openssl::pkey::ec#private?()","openssl::pkey::rsa#private?()","nomethoderror#private_call?()","module#private_class_method()","module#private_constant()","openssl::pkey::rsa#private_decrypt()","openssl::pkey::rsa#private_encrypt()","module#private_instance_methods()","openssl::pkey::ec#private_key()","bundler::persistent::net::http::persistent#private_key=()","openssl::pkey::ec#private_key=()","openssl::pkey::ec#private_key?()","bundler::thor::command#private_method?()","bundler::thor::command#private_method?()","module#private_method_defined?()","object#private_methods()","kernel#proc()","net::imap::crammd5authenticator#process()","net::imap::digestmd5authenticator#process()","net::imap::loginauthenticator#process()","net::imap::plainauthenticator#process()","rss::rexmllikexmlparser#processinginstruction()","rexml::functions::processing_instruction()","rexml::sax2listener#processing_instruction()","array#product()","win32ole_type#progid()","win32ole_type::progids()","optionparser#program_name()","rexml::sax2listener#progress()","bundler::molinillo::ui#progress_rate()","irb::context#prompt_mode=()","irb::context#prompting?()","set#proper_subset?()","set#proper_superset?()","net::http#propfind()","net::http#proppatch()","module#protected_instance_methods()","module#protected_method_defined?()","delegator#protected_methods()","object#protected_methods()","addrinfo#protocol()","rinda::ringprovider#provide()","bundler::persistent::net::http::persistent#proxy=()","net::http#proxy?()","net::http#proxy_address()","webrick::httpauth#proxy_basic_auth()","bundler::persistent::net::http::persistent#proxy_bypass?()","net::http::proxy_class?()","bundler::persistent::net::http::persistent#proxy_from_env()","net::http#proxy_from_env?()","net::http#proxy_pass()","net::http#proxy_port()","net::http#proxy_user()","net::http#proxyaddr()","net::http#proxyport()","find::prune()","bundler::runtime#prune_cache()","openssl::random::pseudo_bytes()","fiddle::pointer#ptr()","rss::maker::channelbase#pubdate()","rss::maker::itemsbase::itembase#pubdate()","rss::maker::channelbase#pubdate=()","rss::maker::itemsbase::itembase#pubdate=()","rexml::doctype#public()","openssl::pkey::dh#public?()","openssl::pkey::dsa#public?()","openssl::pkey::ec#public?()","openssl::pkey::rsa#public?()","module#public_class_method()","bundler::thor::base::classmethods#public_command()","module#public_constant()","openssl::pkey::rsa#public_decrypt()","openssl::pkey::rsa#public_encrypt()","module#public_instance_method()","module#public_instance_methods()","openssl::netscape::spki#public_key()","openssl::pkey::dh#public_key()","openssl::pkey::dsa#public_key()","openssl::pkey::ec#public_key()","openssl::pkey::rsa#public_key()","openssl::x509::certificate#public_key()","openssl::x509::request#public_key()","openssl::netscape::spki#public_key=()","openssl::pkey::ec#public_key=()","openssl::x509::certificate#public_key=()","openssl::x509::request#public_key=()","openssl::pkey::ec#public_key?()","object#public_method()","module#public_method_defined?()","delegator#public_methods()","object#public_methods()","object#public_send()","bundler::thor::base::classmethods#public_task()","rexml::parsers::baseparser#pull()","rexml::parsers::pullparser#pull()","net::ftp::mlsxentry#purgeable?()","openssl::x509::store#purpose=()","openssl::x509::storecontext#purpose=()","array#push()","csv::row#push()","csv::table#push()","psych::visitors::yamltree#push()","queue#push()","rexml::parent#push()","rinda::tuplebag#push()","sizedqueue#push()","pp::ppmethods#push_inspect_key()","irb::context#push_workspace()","shell#pushd()","shell#pushdir()","net::ftp#put()","encoding::converter#putback()","net::ftp#putbinaryfile()","argf#putc()","io#putc()","kernel#putc()","stringio#putc()","zlib::gzipwriter#putc()","argf#puts()","csv#puts()","io#puts()","io::generic_writable#puts()","irb::locale#puts()","irb::notifier::abstractnotifier#puts()","irb::outputmethod#puts()","kernel#puts()","net::internetmessageio::writeadapter#puts()","openssl::buffering#puts()","xmp#puts()","xmp::stringinputmethod#puts()","zlib::gzipwriter#puts()","net::ftp#puttextfile()","bundler::fileutils::pwd()","bundler::sharedhelpers#pwd()","dir::pwd()","fileutils::pwd()","net::ftp#pwd()","pathname::pwd()","io#pwrite()","webrick::httprequest#query()","uri::generic#query=()","rdoc::options#quiet()","rdoc::options#quiet=()","bundler::ui::shell#quiet?()","bundler::ui::silent#quiet?()","net::ftp#quit()","net::smtp#quit()","bigdecimal#quo()","complex#quo()","float#quo()","numeric#quo()","rational#quo()","regexp::quote()","webrick::httputils::quote()","csv#quote_char()","csv::parser#quote_character()","readline::quoting_detection_proc()","readline::quoting_detection_proc=()","racc::parser#racc_accept()","racc::parser#racc_e_pop()","racc::parser#racc_next_state()","racc::parser#racc_print_stacks()","racc::parser#racc_print_states()","racc::parser#racc_read_token()","racc::parser#racc_reduce()","racc::parser#racc_shift()","racc::parser#racc_token2str()","cgi::htmlextension#radio_button()","cgi::htmlextension#radio_group()","delegator#raise()","kernel#raise()","thread#raise()","rss::baselistener::raise_for_undefined_entity?()","rss::baseparser::raise_for_undefined_entity?()","rss::rexmllistener::raise_for_undefined_entity?()","tracepoint#raised_exception()","bundler::thor::rakecompat::rake_classes()","object#rake_namespace()","kernel#rand()","random::rand()","random#rand()","random::formatter#rand()","openssl::random::random_add()","openssl::random::random_bytes()","random::formatter#random_bytes()","openssl::cipher#random_iv()","openssl::cipher#random_key()","random::formatter#random_number()","webrick::utils::random_string()","array#rassoc()","env::rassoc()","hash#rassoc()","complex#rationalize()","float#rationalize()","integer#rationalize()","nilclass#rationalize()","rational#rationalize()","io#raw()","rexml::element#raw()","io#raw!()","cgi::queryextension#raw_cookie()","cgi::queryextension#raw_cookie2()","gc::profiler::raw_data()","bundler::stubspecification#raw_require_paths()","bundler::currentruby#rbx?()","net::smtp#rcptto()","net::smtp#rcptto_list()","file::stat#rdev()","file::stat#rdev_major()","file::stat#rdev_minor()","rdoc::rubygemshook#rdoc_installed?()","rdoc::task#rdoc_task_description()","rdoc::task#rdoc_task_description()","process::gid::re_exchange()","process::uid::re_exchange()","process::gid::re_exchangeable?()","process::uid::re_exchangeable?()","objectspace::reachable_objects_from()","objectspace::reachable_objects_from_root()","argf#read()","csv::read()","csv#read()","dir#read()","io#read()","io::read()","openssl::buffering#read()","openssl::pkey::read()","openuri::openread#read()","pathname#read()","rexml::iosource#read()","rexml::source#read()","rinda::tuplespace#read()","rinda::tuplespaceproxy#read()","rinda::waittemplateentry#read()","stringio#read()","zlib::gzipreader#read()","rinda::tuplespace#read_all()","rinda::tuplespaceproxy#read_all()","gem::read_binary()","net::httpresponse#read_body()","bundler::read_file()","rdoc::encoding::read_file()","argf#read_nonblock()","io#read_nonblock()","io::generic_readable#read_nonblock()","openssl::buffering#read_nonblock()","openssl::pkcs7::read_smime()","net::ftp#read_timeout=()","net::http#read_timeout=()","net::pop3#read_timeout=()","net::smtp#read_timeout=()","file::readable?()","file::stat#readable?()","filetest#readable?()","net::ftp::mlsxentry#readable?()","pathname#readable?()","irb::inputmethod#readable_after_eof?()","irb::readlineinputmethod#readable_after_eof?()","irb::stdioinputmethod#readable_after_eof?()","file::readable_real?()","file::stat#readable_real?()","filetest#readable_real?()","pathname#readable_real?()","encoding::invalidbytesequenceerror#readagain_bytes()","argf#readbyte()","io#readbyte()","io::generic_readable#readbyte()","zlib::gzipreader#readbyte()","argf#readchar()","io#readchar()","io::generic_readable#readchar()","openssl::buffering#readchar()","zlib::gzipreader#readchar()","argf#readline()","bundler::thor::lineeditor::readline()","bundler::thor::lineeditor::basic#readline()","bundler::thor::lineeditor::readline#readline()","csv#readline()","io#readline()","io::generic_readable#readline()","irb::locale#readline()","kernel#readline()","openssl::buffering#readline()","readline::readline()","zlib::gzipreader#readline()","argf#readlines()","csv::readlines()","csv#readlines()","io::readlines()","io#readlines()","kernel#readlines()","openssl::buffering#readlines()","pathname#readlines()","stringio#readlines()","zlib::gzipreader#readlines()","file::readlink()","pathname#readlink()","argf#readpartial()","io#readpartial()","io::generic_readable#readpartial()","openssl::buffering#readpartial()","webrick::httprequest#readpartial()","zlib::gzipreader#readpartial()","net::smtp#ready()","io#ready?()","bundler::parallelinstaller::specinstallation#ready_to_enqueue?()","complex#real()","numeric#real()","complex#real?()","numeric#real?()","file::realdirpath()","pathname#realdirpath()","fiddle::realloc()","file::realpath()","pathname#realpath()","benchmark::realtime()","localjumperror#reason()","optionparser::parseerror#reason()","webrick::httpstatus::reason_phrase()","webrick::httpstatus::status#reason_phrase()","rexml::validation::relaxng#receive()","binding#receiver()","keyerror#receiver()","method#receiver()","nameerror#receiver()","openssl::pkcs7#recipients()","bundler::persistent::net::http::persistent#reconnect()","bundler::persistent::net::http::persistent#reconnect_ssl()","rexml::document#record_entity_expansion()","rdoc::codeobject#record_location()","rdoc::context#record_location()","optionparser::parseerror#recover()","complex::rect()","complex#rect()","numeric#rect()","complex::rectangular()","complex#rectangular()","numeric#rectangular()","json#recurse_proc()","bundler::molinillo::dependencygraph::vertex#recursive_predecessors()","bundler::molinillo::dependencygraph::vertex#recursive_successors()","basicsocket#recv()","unixsocket#recv_io()","basicsocket#recv_nonblock()","ipsocket#recvfrom()","socket#recvfrom()","unixsocket#recvfrom()","socket#recvfrom_nonblock()","udpsocket#recvfrom_nonblock()","basicsocket#recvmsg()","basicsocket#recvmsg_nonblock()","webrick::httpstatus::redirect?()","readline::redisplay()","enumerable#reduce()","fiddle::pointer#ref()","rdoc::markdown#reference()","bundler::cli::reformatted_help_args()","gem::refresh()","readline::refresh_line()","matchdata#regexp()","optionparser::completion::regexp()","uri::regexp()","drb::extservmanager#regist()","drb::regist_server()","bundler::thor::register()","openssl::asn1::objectid::register()","webrick#register()","webrick::utils::timeouthandler::register()","gem::register_default_spec()","bundler::plugin#register_plugin()","bundler::plugin::index#register_plugin()","rss::baselistener::register_uri()","uri::generic#registry=()","env::rehash()","hash#rehash()","shell::commandprocessor#rehash()","array#reject()","bundler::thor::coreext::orderedhash#reject()","dbm#reject()","env::reject()","enumerable#reject()","enumerator::lazy#reject()","gdbm#reject()","hash#reject()","optionparser::reject()","optionparser#reject()","optionparser::list#reject()","sdbm#reject()","yaml::dbm#reject()","array#reject!()","dbm#reject!()","env::reject!()","gdbm#reject!()","hash#reject!()","sdbm#reject!()","set#reject!()","pathname#relative?()","uri::generic#relative?()","pathname#relative_path_from()","bundler::thor::actions#relative_to_original_destination_root()","optionparser#release()","bundler::buildmetadata::release?()","bundler::resolver#relevant_sources_for_vertex()","drb::drbunknown#reload()","webrick::httpauth::htdigest#reload()","webrick::httpauth::htgroup#reload()","webrick::httpauth::htpasswd#reload()","bigdecimal#remainder()","integer#remainder()","numeric#remainder()","bundler::plugin::api::source#remote!()","bundler::source::metadata#remote!()","bundler::source::path#remote!()","bundler::sourcelist#remote!()","basicsocket#remote_address()","webrick::httprequest#remote_ip()","bundler::fetcher::base#remote_uri()","bundler::cli#remove()","bundler::fileutils::remove()","bundler::injector::remove()","bundler::injector#remove()","fileutils::remove()","optionparser#remove()","rdoc::rubygemshook#remove()","rexml::attribute#remove()","rexml::child#remove()","bundler::thor::base::classmethods#remove_argument()","bundler::thor::base::classmethods#remove_class_option()","module#remove_class_variable()","bundler::thor::base::classmethods#remove_command()","bundler::fileutils::remove_dir()","bundler::thor::actions#remove_dir()","fileutils::remove_dir()","bundler::fileutils::remove_entry()","fileutils::remove_entry()","bundler::fileutils::remove_entry_secure()","fileutils::remove_entry_secure()","bundler::fileutils::remove_file()","bundler::thor::actions#remove_file()","fileutils::remove_file()","rdoc::context#remove_from_documentation?()","rdoc::encoding::remove_frozen_string_literal()","webrick::httpservlet::filehandler::remove_handler()","object#remove_instance_variable()","rdoc::context#remove_invisible()","bundler::thor::group::remove_invocation()","rdoc::encoding::remove_magic_comment()","module#remove_method()","rdoc::parser::remove_modeline()","rdoc::store#remove_nodoc()","rdoc::classmodule#remove_nodoc_children()","bundler::definition#remove_platform()","rdoc::comment#remove_private()","net::imap#remove_response_handler()","drb::remove_server()","rdoc::rdoc#remove_siginfo_handler()","gc::remove_stress_to_class()","bundler::thor::base::classmethods#remove_task()","rdoc::rdoc#remove_unparseable()","gem::remove_unresolved_default_spec()","bundler::definition#removed_specs()","net::ftp::mlsxentry#renamable?()","file::rename()","net::ftp#rename()","net::imap#rename()","pathname#rename()","rinda::simplerenewer#renew()","rinda::tupleentry#renew()","io#reopen()","logger#reopen()","logger::logdevice#reopen()","stringio#reopen()","syslog::reopen()","gdbm#reorganize()","array#repeated_combination()","array#repeated_permutation()","array#replace()","bundler::thor::coreext::orderedhash#replace()","dbm#replace()","env::replace()","gdbm#replace()","hash#replace()","sdbm#replace()","set#replace()","string#replace()","yaml::dbm#replace()","rexml::parent#replace_child()","bundler::sourcelist#replace_sources!()","rexml::child#replace_with()","encoding::converter#replacement()","encoding::converter#replacement=()","encoding#replicate()","bundler::settings::tcpsocketprobe#replies?()","socket::udpsource#reply()","rinda::ringserver#reply_service()","bundler::env::report()","gc::profiler::report()","rdoc::stats#report()","rdoc::stats#report_attributes()","rdoc::stats#report_class_module()","rdoc::stats#report_constants()","rdoc::stats#report_methods()","thread#report_on_exception()","thread::report_on_exception()","thread::report_on_exception=()","thread#report_on_exception=()","psych::coder#represent_map()","psych::coder#represent_object()","psych::coder#represent_scalar()","psych::coder#represent_seq()","bundler::fetcher::downloader#request()","bundler::persistent::net::http::persistent#request()","net::http#request()","net::httpgenericrequest#request_body_permitted?()","net::http#request_get()","net::http#request_head()","bundler::friendlyerrors#request_issue_report_for()","net::http#request_post()","uri::http#request_uri()","bundler::definition#requested_specs()","bundler::gemdeps#requested_specs()","bundler::require()","bundler::runtime#require()","irb::locale#require()","kernel#require()","bundler::cli::clean#require_path_or_force()","bundler::endpointspecification#require_paths()","kernel#require_relative()","bundler::require_thor_actions()","bundler::thor::command#required_options()","bundler::thor::command#required_options()","rss::element::required_prefix()","rss::ituneschannelmodel::itunescategory::required_prefix()","rss::ituneschannelmodel::itunesimage::required_prefix()","rss::ituneschannelmodel::itunesowner::required_prefix()","rss::itunesitemmodel::itunesduration::required_prefix()","rss::imagefaviconmodel::imagefavicon::required_prefix()","rss::imageitemmodel::imageitem::required_prefix()","rss::taxonomytopicmodel::taxonomytopic::required_prefix()","rss::taxonomytopicsmodel::taxonomytopics::required_prefix()","rss::atom::commonmodel::required_uri()","rss::element::required_uri()","rss::ituneschannelmodel::itunescategory::required_uri()","rss::ituneschannelmodel::itunesimage::required_uri()","rss::ituneschannelmodel::itunesowner::required_uri()","rss::itunesitemmodel::itunesduration::required_uri()","rss::imagefaviconmodel::imagefavicon::required_uri()","rss::imageitemmodel::imageitem::required_uri()","rss::rdf::required_uri()","rss::rdf::bag::required_uri()","rss::rdf::bag::required_uri()","rss::rdf::channel::required_uri()","rss::rdf::channel::image::required_uri()","rss::rdf::channel::items::required_uri()","rss::rdf::channel::textinput::required_uri()","rss::rdf::image::required_uri()","rss::rdf::item::required_uri()","rss::rdf::li::required_uri()","rss::rdf::li::required_uri()","rss::rdf::li::required_uri()","rss::rdf::seq::required_uri()","rss::rdf::seq::required_uri()","rss::rdf::textinput::required_uri()","rss::taxonomytopicmodel::taxonomytopic::required_uri()","rss::taxonomytopicsmodel::taxonomytopics::required_uri()","bundler::depproxy#requirement()","bundler::molinillo::delegates::resolutionstate#requirement()","gem::dependency#requirement()","bundler::molinillo::delegates::specificationprovider#requirement_satisfied_by?()","bundler::molinillo::specificationprovider#requirement_satisfied_by?()","bundler::resolver#requirement_satisfied_by?()","bundler::molinillo::delegates::resolutionstate#requirements()","bundler::molinillo::dependencygraph::vertex#requirements()","bundler::gemdeps#requires()","bundler::requires_sudo?()","rdoc::task#rerdoc_task_description()","rdoc::task#rerdoc_task_description()","bundler::persistent::net::http::persistent#reset()","cgi::htmlextension#reset()","digest::base#reset()","digest::instance#reset()","net::pop3#reset()","openssl::cipher#reset()","openssl::digest#reset()","openssl::hmac#reset()","rexml::validation::choice#reset()","rexml::validation::interleave#reset()","rexml::validation::oneormore#reset()","rexml::validation::state#reset()","rexml::validation::validator#reset()","set#reset()","stringscanner#reset()","zlib::zstream#reset()","bundler::reset!()","bundler::plugin#reset!()","bundler::reset_paths!()","bundler::reset_rubygems!()","bundler::definition#resolve()","bundler::molinillo::resolver#resolve()","bundler::molinillo::resolver::resolution#resolve()","bundler::resolver::resolve()","rdoc::crossreference#resolve()","rdoc::context#resolve_aliases()","bundler::definition#resolve_remotely!()","bundler::definition#resolve_with_cache!()","rss::rdf::channel::items#resources()","rss::taxonomytopicsmodel::taxonomytopics#resources()","bundler::lazyspecification#respond_to?()","bundler::remotespecification#respond_to?()","drb::drbobject#respond_to?()","drb::drbobject#respond_to?()","object#respond_to?()","bundler::plugin::api#respond_to_missing?()","delegator#respond_to_missing?()","object#respond_to_missing?()","net::httpgenericrequest#response_body_permitted?()","openssl::ocsp::basicresponse#responses()","csv::parser::inputsscanner#rest()","stringscanner#rest()","stringscanner#rest?()","stringscanner#rest_size()","bundler::environmentpreserver#restore()","cgi::session::filestore#restore()","cgi::session::memorystore#restore()","cgi::session::nullstore#restore()","cgi::session::pstore#restore()","json::restore()","marshal::restore()","stringscanner#restsize()","coverage::result()","erb#result()","gc::profiler::result()","stopiteration#result()","erb#result_with_hash()","debugger__::resume()","fiber#resume()","net::ftp#retrbinary()","net::ftp#retrlines()","csv#return_headers?()","csv::parser#return_headers?()","win32ole_method#return_type()","win32ole_method#return_type_detail()","tracepoint#return_value()","win32ole_method#return_vtype()","win32ole_param#retval?()","array#reverse()","ipaddr#reverse()","string#reverse()","array#reverse!()","string#reverse!()","array#reverse_each()","bundler::molinillo::dependencygraph::log#reverse_each()","enumerable#reverse_each()","bundler::molinillo::resolver::resolution::unwinddetails#reversed_requirement_tree_index()","bundler::source::git#revision()","bundler::source::git::gitproxy#revision()","openssl::ocsp::singleresponse#revocation_reason()","openssl::ocsp::singleresponse#revocation_time()","openssl::x509::crl#revoked()","openssl::x509::crl#revoked=()","argf#rewind()","csv#rewind()","csv::writer#rewind()","dir#rewind()","enumerator#rewind()","enumerator::chain#rewind()","io#rewind()","prime::eratosthenesgenerator#rewind()","prime::generator23#rewind()","prime::pseudoprimegenerator#rewind()","prime::trialdivisiongenerator#rewind()","rexml::parsers::lightparser#rewind()","rexml::parsers::ultralightparser#rewind()","stringio#rewind()","zlib::gzipreader#rewind()","bundler::molinillo::dependencygraph#rewind_to()","bundler::molinillo::dependencygraph::log#rewind_to()","cgi::util#rfc1123_date()","date::rfc2822()","date#rfc2822()","datetime::rfc2822()","time#rfc2822()","time::rfc2822()","date#rfc3339()","date::rfc3339()","datetime::rfc3339()","datetime#rfc3339()","date#rfc822()","date::rfc822()","datetime::rfc822()","time::rfc822()","time#rfc822()","rdoc::rubygemshook#ri_installed?()","rdoc::servlet#ri_paths()","process::gid::rid()","process::uid::rid()","array#rindex()","string#rindex()","string#rjust()","bundler::fileutils::rm()","fileutils::rm()","bundler::fileutils::rm_f()","fileutils::rm_f()","bundler::fileutils::rm_r()","fileutils::rm_r()","bundler::rm_rf()","bundler::fileutils::rm_rf()","fileutils::rm_rf()","bundler::fileutils::rmdir()","dir::rmdir()","fileutils::rmdir()","net::ftp#rmdir()","pathname#rmdir()","shell::commandprocessor#rmdir()","bundler::fileutils::rmtree()","fileutils::rmtree()","pathname#rmtree()","bundler::root()","bundler::plugin#root()","bundler::plugin::api::source#root()","bundler::plugin::installer::git#root()","bundler::sharedhelpers#root()","bundler::source::path#root()","psych::nodes::document#root()","rdoc::servlet#root()","rexml::document#root()","rexml::element#root()","rexml::light::node#root()","pstore#root?()","pathname#root?()","rexml::element#root_node()","rdoc::servlet#root_search()","bundler::molinillo::dependencygraph#root_vertex_named()","pstore#roots()","array#rotate()","array#rotate!()","bigdecimal#round()","float#round()","integer#round()","numeric#round()","rexml::functions::round()","rational#round()","time#round()","uri::generic#route_from()","uri::generic#route_to()","csv#row_sep()","csv::parser#row_separator()","matrix::row_vector()","matrix::rows()","string#rpartition()","net::smtp#rset()","openssl::bn#rshift!()","rss::baseparser#rss()","string#rstrip()","string#rstrip!()","bundler::rubydsl#ruby()","gem::ruby()","bundler::currentruby#ruby?()","gem::ruby_api_version()","bundler::thor::util::ruby_command()","bundler::ruby_scope()","gem::ruby_version()","bundler::gemhelper#rubygem_push()","bundler::sourcelist#rubygems_primary_remotes()","bundler::sourcelist#rubygems_remotes()","bundler::sourcelist#rubygems_sources()","gem::rubygems_version()","bundler::cli::add#run()","bundler::cli::binstubs#run()","bundler::cli::cache#run()","bundler::cli::check#run()","bundler::cli::clean#run()","bundler::cli::config#run()","bundler::cli::console#run()","bundler::cli::doctor#run()","bundler::cli::exec#run()","bundler::cli::gem#run()","bundler::cli::info#run()","bundler::cli::init#run()","bundler::cli::inject#run()","bundler::cli::install#run()","bundler::cli::issue#run()","bundler::cli::list#run()","bundler::cli::lock#run()","bundler::cli::open#run()","bundler::cli::outdated#run()","bundler::cli::package#run()","bundler::cli::platform#run()","bundler::cli::pristine#run()","bundler::cli::remove#run()","bundler::cli::show#run()","bundler::cli::update#run()","bundler::cli::viz#run()","bundler::graph::graphvizclient#run()","bundler::installer#run()","bundler::thor::actions#run()","bundler::thor::command#run()","bundler::thor::command#run()","bundler::thor::dynamiccommand#run()","bundler::thor::dynamiccommand#run()","erb#run()","irb::irb#run()","thread#run()","webrick::genericserver#run()","webrick::httpserver#run()","shell::commandprocessor::run_config()","bundler::thor::actions#run_ruby_script()","coverage::running?()","thread#safe_level()","psych::safe_load()","bundler::fileutils::safe_unlink()","fileutils::safe_unlink()","array#sample()","rdoc::options#sanitize_path()","bundler::lazyspecification#satisfies?()","date#saturday?()","time#saturday?()","rdoc::store#save()","rdoc::store#save_cache()","rdoc::store#save_class()","bigdecimal::save_exception_mode()","irb::context#save_history()","irb::context#save_history=()","bigdecimal::save_limit()","rdoc::store#save_method()","rdoc::store#save_page()","bundler::plugin#save_plugins()","bigdecimal::save_rounding_mode()","bundler::thor::shell::basic#say()","bundler::ui::rgproxy#say()","bundler::thor::shell::basic#say_status()","matrix::scalar()","psych::coder#scalar()","psych::emitter#scalar()","psych::handler#scalar()","psych::treebuilder#scalar()","psych::coder#scalar=()","psych::nodes::node#scalar?()","psych::nodes::scalar#scalar?()","csv::parser::inputsscanner#scan()","openssl::x509::name::rfc2253dn#scan()","rexml::iosource#scan()","rexml::source#scan()","string#scan()","stringscanner#scan()","csv::parser::inputsscanner#scan_all()","stringscanner#scan_full()","stringscanner#scan_until()","io#scanf()","kernel#scanf()","string#scanf()","uri::generic#scheme=()","uri::scheme_list()","uri::ldap#scope()","uri::ldap#scope=()","cgi::htmlextension#scrolling_list()","string#scrub()","string#scrub!()","openssl::kdf::scrypt()","bundler::index#search()","irb::jobmanager#search()","net::imap#search()","optionparser::list#search()","bundler::index#search_all()","optionparser::search_const()","encoding::converter::search_convpath()","bundler::molinillo::delegates::specificationprovider#search_for()","bundler::molinillo::specificationprovider#search_for()","bundler::resolver#search_for()","stringscanner#search_full()","rdoc::classmodule#search_record()","rdoc::methodattr#search_record()","rdoc::toplevel#search_record()","webrick::httpserver#search_servlet()","datetime#sec()","time#sec()","datetime#sec_fraction()","datetime#second()","rss::itunesitemmodel::itunesduration#second=()","rss::maker::itunesitemmodel::itunesdurationbase#second=()","datetime#second_fraction()","rdoc::codeobject#section()","rdoc::context#section_contents()","openssl::config#sections()","rdoc::context#sections()","bundler::lockfileparser::sections_in_lockfile()","bundler::lockfileparser::sections_to_ignore()","cgi::cookie#secure=()","openssl::ssl::sslcontext#security_level()","openssl::ssl::sslcontext#security_level=()","rdoc::methodattr#see()","openssl::pkey::ec::group#seed()","openssl::random::seed()","random#seed()","openssl::pkey::ec::group#seed=()","argf#seek()","dir#seek()","io#seek()","stringio#seek()","array#select()","dbm#select()","env::select()","enumerable#select()","enumerator::lazy#select()","gdbm#select()","hash#select()","io::select()","kernel#select()","net::imap#select()","sdbm#select()","struct#select()","uri::generic#select()","yaml::dbm#select()","array#select!()","env::select!()","hash#select!()","set#select!()","bundler::gemhelpers::select_best_platform_match()","bundler::cli::common::select_spec()","tracepoint#self()","basicsocket#send()","object#send()","rexml::functions::send()","udpsocket#send()","unixsocket#send_io()","net::smtp#send_mail()","net::smtp#send_message()","net::http#send_request()","net::ftp#sendcmd()","irb::frame::sender()","net::smtp#sendmail()","basicsocket#sendmsg()","basicsocket#sendmsg_nonblock()","optionparser#separator()","pp::ppmethods#seplist()","psych::coder#seq=()","psych::nodes::node#sequence?()","psych::nodes::sequence#sequence?()","openssl::ocsp::certificateid#serial()","openssl::pkcs7::recipientinfo#serial()","openssl::pkcs7::signerinfo#serial()","openssl::x509::certificate#serial()","openssl::x509::revoked#serial()","openssl::x509::certificate#serial=()","openssl::x509::revoked#serial=()","webrick::httpstatus::server_error?()","webrick::httprequest#server_name()","drb::extservmanager#service()","webrick::cgi#service()","webrick::httpserver#service()","webrick::httpservlet::abstractservlet#service()","openssl::ssl::sslsocket#session()","openssl::ssl::sslsocket#session=()","openssl::ssl::sslcontext#session_add()","openssl::ssl::sslcontext#session_cache_mode()","openssl::ssl::sslcontext#session_cache_mode=()","openssl::ssl::sslcontext#session_cache_size()","openssl::ssl::sslcontext#session_cache_size=()","openssl::ssl::sslcontext#session_cache_stats()","openssl::ssl::sslcontext#session_remove()","openssl::ssl::sslsocket#session_reused?()","bundler::settings::validator::rule#set()","ipaddr#set()","uri::ldap#set_attributes()","exception#set_backtrace()","optionparser::parseerror#set_backtrace()","openssl::bn#set_bit!()","bundler::sharedhelpers#set_bundle_environment()","webrick::utils::set_close_on_exec()","bundler::thor::shell::color#set_color()","bundler::thor::shell::html#set_color()","bundler::settings#set_command_option()","bundler::settings#set_command_option_if_given()","object#set_component()","rdoc::context#set_constant_visibility_for()","openssl::pkey::rsa#set_crt_params()","fiddle::cstructentity#set_ctypes()","fiddle::cunionentity#set_ctypes()","rdoc::context#set_current_section()","net::http#set_debug_output()","net::pop3#set_debug_output()","net::smtp#set_debug_output()","openssl::engine#set_default()","openssl::x509::store#set_default_paths()","zlib::deflate#set_dictionary()","zlib::inflate#set_dictionary()","uri::ldap#set_dn()","object#set_element()","argf#set_encoding()","io#set_encoding()","stringio#set_encoding()","bundler::sharedhelpers#set_env()","bundler::thor::actions::capturableerb#set_eoutvar()","erb#set_eoutvar()","rdoc::erbio#set_eoutvar()","rdoc::erbpartial#set_eoutvar()","getoptlong#set_error()","webrick::httpresponse#set_error()","uri::ldap#set_extensions()","openssl::pkey::rsa#set_factors()","uri::ldap#set_filter()","openssl::pkey::ec::group#set_generator()","tracer::set_get_line_procs()","bundler::settings#set_global()","uri::mailto#set_headers()","uri::file#set_host()","uri::generic#set_host()","openssl::pkey::dh#set_key()","openssl::pkey::dsa#set_key()","openssl::pkey::rsa#set_key()","debugger__::set_last_thread()","irb::context#set_last_value()","bundler::settings#set_local()","rss::element#set_next_element()","webrick::utils::set_non_blocking()","uri::generic#set_opaque()","optionparser::parseerror#set_option()","getoptlong#set_options()","openssl::ssl::sslcontext#set_params()","webrick::httpauth::htdigest#set_passwd()","webrick::httpauth::htpasswd#set_passwd()","webrick::httpauth::userdb#set_passwd()","uri::file#set_password()","uri::generic#set_password()","uri::ftp#set_path()","uri::generic#set_path()","bundler::molinillo::dependencygraph#set_payload()","bundler::molinillo::dependencygraph::log#set_payload()","uri::file#set_port()","uri::generic#set_port()","openssl::pkey::dh#set_pqg()","openssl::pkey::dsa#set_pqg()","webrick::httpresponse#set_redirect()","uri::generic#set_scheme()","uri::ldap#set_scope()","readline::set_screen_size()","rss::imagefaviconmodel::imagefavicon#set_size()","net::ftp#set_socket()","uri::mailto#set_to()","openssl::pkey::ec::point#set_to_infinity!()","debugger__::set_trace()","kernel#set_trace_func()","thread#set_trace_func()","uri::ftp#set_typecode()","uri::file#set_user()","uri::generic#set_user()","uri::file#set_userinfo()","uri::generic#set_userinfo()","rdoc::context#set_visibility_for()","net::imap#setacl()","string#setbyte()","process::sys::setegid()","process::sys::seteuid()","process::sys::setgid()","file::setgid?()","file::stat#setgid?()","filetest#setgid?()","pathname#setgid?()","etc::setgrent()","process::setpgid()","process::setpgrp()","process::setpriority()","process::setproctitle()","win32ole#setproperty()","etc::setpwent()","net::imap#setquota()","process::sys::setregid()","process::sys::setresgid()","process::sys::setresuid()","process::sys::setreuid()","process::sys::setrgid()","process::setrlimit()","process::sys::setruid()","process::setsid()","basicsocket#setsockopt()","openssl::ssl::socketforwarder#setsockopt()","rss::baselistener::setter()","bundler::settings()","process::sys::setuid()","file::setuid?()","file::stat#setuid?()","filetest#setuid?()","pathname#setuid?()","bundler::setup()","bundler::runtime#setup()","openssl::ssl::sslcontext#setup()","rdoc::rubygemshook#setup()","drb::drbsslsocket::sslconfig#setup_certificate()","rdoc::options#setup_generator()","rss::atom::entry#setup_maker()","rss::rdf::bag#setup_maker()","rss::rdf::bag#setup_maker()","rss::rdf::seq#setup_maker()","rss::rdf::seq#setup_maker()","rss::rootelementmixin#setup_maker()","rss::setupmaker#setup_maker()","rss::xmlstylesheet#setup_maker()","rss::rss#setup_maker_elements()","rdoc::rdoc#setup_output_dir()","webrick::accesslog#setup_params()","drb::drbsslsocket::sslconfig#setup_ssl_context()","logger#sev_threshold=()","ripper::sexp()","ripper::sexp_raw()","shell::processcontroller#sfork()","bundler::gemhelper#sh()","bundler::gemhelper#sh_with_code()","bundler::molinillo::dependencygraph::vertex#shallow_eql?()","bundler::thor::base::shell()","bundler::thor::shell#shell()","shellwords::shellescape()","string#shellescape()","array#shelljoin()","shellwords::shelljoin()","shellwords::shellsplit()","string#shellsplit()","shellwords::shellwords()","array#shift()","bundler::thor::coreext::orderedhash#shift()","csv#shift()","dbm#shift()","env::shift()","gdbm#shift()","hash#shift()","queue#shift()","sdbm#shift()","sizedqueue#shift()","yaml::dbm#shift()","openssl::asn1::objectid#short_name()","bundler::dependency#should_include?()","bundler::cli#show()","rdoc::servlet#show_documentation()","optionparser::show_version()","array#shuffle()","array#shuffle!()","basicsocket#shutdown()","bundler::persistent::net::http::persistent#shutdown()","openssl::ssl::sslserver#shutdown()","rinda::ringserver#shutdown()","webrick::genericserver#shutdown()","bundler::persistent::net::http::persistent#shutdown_in_all_threads()","process::gid::sid_available?()","process::uid::sid_available?()","bigdecimal#sign()","openssl::netscape::spki#sign()","openssl::ocsp::basicresponse#sign()","openssl::ocsp::request#sign()","openssl::pkcs7::sign()","openssl::pkey::pkey#sign()","openssl::x509::crl#sign()","openssl::x509::certificate#sign()","openssl::x509::request#sign()","openssl::pkey::rsa#sign_pss()","conditionvariable#signal()","monitormixin::conditionvariable#signal()","rinda::waittemplateentry#signal()","irb::irb#signal_handle()","irb::irb#signal_status()","process::status#signaled?()","signal::signame()","rdoc::tomdoc::signature()","openssl::x509::crl#signature_algorithm()","openssl::x509::certificate#signature_algorithm()","openssl::x509::request#signature_algorithm()","openssl::ocsp::request#signed?()","openssl::pkcs7::signerinfo#signed_time()","openssl::pkcs7#signers()","signalexception#signo()","bundler::ui::shell#silence()","bundler::ui::silent#silence()","bundler::similaritydetector#similar_word_list()","bundler::similaritydetector#similar_words()","bigmath#sin()","cmath::sin()","math::sin()","bundler::versionranges::reqr#single?()","rexml::validation::event#single?()","singleforwardable#single_delegate()","bundler::rubyversion#single_version_string()","prettyprint::singleline_format()","pp::singleline_pp()","object#singleton_class()","module#singleton_class?()","object#singleton_method()","rexml::functions::singleton_method_added()","object#singleton_methods()","matrix::lupdecomposition#singular?()","cmath::sinh()","math::sinh()","net::ftp#site()","array#size()","bundler::index#size()","dbm#size()","digest::instance#size()","env::size()","enumerator#size()","enumerator::arithmeticsequence#size()","enumerator::chain#size()","fiddle::cstructentity::size()","fiddle::cunionentity::size()","fiddle::pointer#size()","file::size()","file#size()","file::stat#size()","filetest#size()","gdbm#size()","hash#size()","integer#size()","matchdata#size()","net::ftp#size()","objectspace::weakmap#size()","pathname#size()","prime::pseudoprimegenerator#size()","queue#size()","rexml::attributes#size()","rexml::elements#size()","rexml::light::node#size()","rexml::parent#size()","rexml::syncenumerator#size()","range#size()","rinda::tuple#size()","rinda::tupleentry#size()","sdbm#size()","set#size()","sizedqueue#size()","string#size()","stringio#size()","stringscanner#size()","struct#size()","symbol#size()","tempfile#size()","fiddle::pointer#size=()","rss::imagefaviconmodel::imagefavicon#size=()","file::size?()","file::stat#size?()","filetest#size?()","pathname#size?()","win32ole_method#size_opt_params()","win32ole_method#size_params()","fiddle::importer#sizeof()","argf#skip()","bundler::deprecate::skip()","stringscanner#skip()","bundler::deprecate::skip=()","csv#skip_blanks?()","csv::parser#skip_blanks?()","bundler::deprecate::skip_during()","csv#skip_lines()","csv::parser#skip_lines()","stringscanner#skip_until()","kernel#sleep()","mutex#sleep()","mutex_m#sleep()","array#slice()","env::slice()","hash#slice()","ripper::slice()","string#slice()","symbol#slice()","array#slice!()","string#slice!()","enumerable#slice_after()","enumerator::lazy#slice_after()","enumerable#slice_before()","enumerator::lazy#slice_before()","bundler::compactindexclient::updater#slice_body()","enumerable#slice_when()","enumerator::lazy#slice_when()","openssl::asn1::objectid#sn()","bundler::thor::util::snake_case()","rdoc::text#snippet()","socket::sockaddr_in()","socket::sockaddr_un()","file::socket?()","file::stat#socket?()","filetest#socket?()","pathname#socket?()","socket::socketpair()","unixsocket::socketpair()","addrinfo#socktype()","matrix::lupdecomposition#solve()","array#sort()","enumerable#sort()","net::imap#sort()","array#sort!()","bundler::specset#sort!()","enumerable#sort_by()","array#sort_by!()","bundler::molinillo::delegates::specificationprovider#sort_dependencies()","bundler::molinillo::specificationprovider#sort_dependencies()","bundler::resolver#sort_dependencies()","bundler::remotespecification#sort_obj()","bundler::resolver::sort_platforms()","rdoc::context#sort_sections()","bundler::index::sort_specs()","bundler::index#sort_specs()","bundler::gemversionpromoter#sort_versions()","bundler::dsl#source()","bundler::plugin#source()","bundler::plugin::api::source()","bundler::plugin::dsl#source()","json::ext::parser#source()","rdoc::store#source()","rexml::parsers::sax2parser#source()","regexp#source()","bundler::stubspecification#source=()","bundler::plugin#source?()","bundler::plugin::index#source?()","encoding::converter#source_encoding()","encoding::invalidbytesequenceerror#source_encoding()","encoding::undefinedconversionerror#source_encoding()","encoding::invalidbytesequenceerror#source_encoding_name()","encoding::undefinedconversionerror#source_encoding_name()","irb::irbloader#source_file()","bundler::plugin#source_from_lock()","binding#source_location()","method#source_location()","proc#source_location()","unboundmethod#source_location()","win32ole_type#source_ole_types()","bundler::thor::actions#source_paths()","bundler::thor::actions::classmethods#source_paths()","bundler::thor::actions::classmethods#source_paths_for_search()","bundler::plugin::index#source_plugin()","bundler::cli::source_root()","bundler::thor::actions::classmethods#source_root()","gem::sources()","gem::sources=()","json::ext::generator::state#space()","json::ext::generator::state#space=()","json::ext::generator::state#space_before()","json::ext::generator::state#space_before=()","kernel#spawn()","pty::spawn()","process::spawn()","bundler::compactindexclient#spec()","gem::spec_cache_dir()","bundler::definition#spec_git_paths()","bundler::index#spec_names()","readline::special_prefixes()","readline::special_prefixes=()","bundler::dependency#specific?()","bundler::compactindexclient::cache#specific_dependency()","bundler::definition#specs()","bundler::fetcher#specs()","bundler::fetcher::compactindex#specs()","bundler::fetcher::dependency#specs()","bundler::fetcher::index#specs()","bundler::gemdeps#specs()","bundler::plugin::api::source#specs()","bundler::source::git#specs()","bundler::source::metadata#specs()","bundler::source::path#specs()","bundler::definition#specs_for()","bundler::fetcher::compactindex#specs_for_names()","bundler::specs_path()","bundler::fetcher#specs_with_retry()","bigdecimal#split()","file::split()","pathname#split()","shellwords::split()","string#split()","uri::split()","uri::rfc2396_parser#split()","webrick::httputils::split_header_value()","kernel#sprintf()","openssl::bn#sqr()","bigdecimal#sqrt()","bigmath#sqrt()","cmath::sqrt()","integer::sqrt()","math::sqrt()","string#squeeze()","string#squeeze!()","kernel#srand()","random::srand()","win32ole_type#src_type()","bundler::persistent::net::http::persistent#ssl()","net::smtp#ssl?()","webrick::httprequest#ssl?()","net::pop3::ssl_params()","webrick::genericserver#ssl_servername_callback()","webrick::httpserver#ssl_servername_callback()","openssl::ssl::sslsocket#ssl_version()","bundler::persistent::net::http::persistent#ssl_version=()","openssl::ssl::sslcontext#ssl_version=()","rexml::document#stand_alone?()","bundler::cli::start()","bundler::persistent::net::http::persistent#start()","bundler::resolver#start()","bundler::thor::base::classmethods#start()","coverage::start()","date#start()","gc::start()","irb::start()","net::http#start()","net::http::start()","net::pop3::start()","net::pop3#start()","net::smtp#start()","net::smtp::start()","psych::streaming#start()","psych::visitors::yamltree#start()","shell::systemcommand#start()","thread::start()","webrick::cgi#start()","webrick::daemon::start()","webrick::genericserver#start()","webrick::simpleserver::start()","rss::rexmllikexmlparser#startelement()","rdoc::tokenstream#start_collecting_tokens()","rdoc::codeobject#start_doc()","psych::emitter#start_document()","psych::handler#start_document()","psych::treebuilder#start_document()","rexml::sax2listener#start_document()","rexml::sax2listener#start_element()","rexml::parsers::pullevent#start_element?()","shell::systemcommand#start_export()","shell::systemcommand#start_import()","shell::processcontroller#start_job()","psych::emitter#start_mapping()","psych::handler#start_mapping()","rexml::sax2listener#start_prefix_mapping()","profiler__#start_profile()","psych::emitter#start_sequence()","psych::handler#start_sequence()","drb::start_service()","psych::emitter#start_stream()","psych::handler#start_stream()","psych::treebuilder#start_stream()","string#start_with?()","net::http#started?()","net::pop3#started?()","net::smtp#started?()","rexml::functions::starts_with()","net::imap#starttls()","net::smtp#starttls()","net::smtp#starttls?()","net::smtp#starttls_always?()","net::smtp#starttls_auto?()","csv#stat()","file::stat()","gc::stat()","io#stat()","pathname#stat()","rubyvm::stat()","tracepoint::stat()","openssl::ssl::sslsocket#state()","ripper#state()","ripper::filter#state()","net::ftp#status()","net::imap#status()","openssl::ocsp::basicresponse#status()","openssl::ocsp::response#status()","pty::childexited#status()","systemexit#status()","thread#status()","webrick::httpresponse#status=()","openssl::random::status?()","bundler::bundlererror::status_code()","bundler::dsl::dslerror#status_code()","webrick::httpresponse#status_line()","openssl::ocsp::response#status_string()","net::smtp::response#status_type_char()","bundler::thor::shell::basic#stderr()","bundler::thor::shell::basic#stdout()","debugger__::stdout()","debugger__::stdout=()","date#step()","enumerator::arithmeticsequence#step()","numeric#step()","range#step()","file::sticky?()","file::stat#sticky?()","filetest#sticky?()","pathname#sticky?()","bundler::worker#stop()","thread::stop()","webrick::genericserver#stop()","thread#stop?()","rdoc::codeobject#stop_doc()","bundler::thor::stop_on_unknown_option!()","profiler__#stop_profile()","drb::stop_service()","drb::drbserver#stop_service()","drb::extserv#stop_service()","process::status#stopped?()","process::status#stopsig()","net::ftp#storbinary()","dbm#store()","env::store()","gdbm#store()","hash#store()","net::imap#store()","sdbm#store()","yaml::dbm#store()","rdoc::anymethod#store=()","rdoc::classmodule#store=()","rdoc::codeobject#store=()","rdoc::constant#store=()","rdoc::methodattr#store=()","rdoc::mixin#store=()","rdoc::rdoc#store=()","rdoc::servlet#store_for()","net::ftp#storlines()","rexml::parsers::baseparser#stream=()","psych::nodes::node#stream?()","psych::nodes::stream#stream?()","zlib::zstream#stream_end?()","psych::handler#streaming?()","gc::stress()","gc::stress=()","date#strftime()","datetime#strftime()","time#strftime()","bundler::thor::base::classmethods#strict_args_position!()","base64#strict_decode64()","base64#strict_encode64()","rdoc::markdown#strike()","matchdata#string()","rexml::functions::string()","stringio#string()","stringscanner#string()","stringio#string=()","stringscanner#string=()","rexml::functions::string_length()","rexml::functions::string_value()","string#strip()","string#strip!()","rdoc::text#strip_hashes()","rdoc::text#strip_newlines()","rdoc::text#strip_stars()","rdoc::markdown#strong()","tsort::strongly_connected_components()","tsort#strongly_connected_components()","date::strptime()","datetime::strptime()","time::strptime()","fiddle::importer#struct()","webrick::utils::su()","bigdecimal#sub()","kernel#sub()","pathname#sub()","string#sub()","string#sub!()","bundler::molinillo::resolver::resolution::unwinddetails#sub_dependencies_to_avoid()","pathname#sub_ext()","bundler::thor::base::subclass_files()","bundler::thor::base::subclasses()","bundler::thor::subcommand()","bundler::thor::subcommand_classes()","bundler::thor::subcommand_help()","bundler::thor::subcommands()","resolv::dns::name#subdomain_of?()","openssl::x509::certificate#subject()","openssl::x509::request#subject()","openssl::x509::certificate#subject=()","openssl::x509::request#subject=()","openssl::x509::extensionfactory#subject_certificate=()","openssl::x509::extensionfactory#subject_request=()","cgi::htmlextension#submit()","net::imap#subscribe()","time#subsec()","set#subset?()","rexml::functions::substring()","rexml::functions::substring_after()","rexml::functions::substring_before()","bundler::thor::subtask()","bundler::thor::subtask_help()","bundler::thor::subtasks()","set#subtract()","date#succ()","ipaddr#succ()","integer#succ()","prime::eratosthenesgenerator#succ()","prime::generator23#succ()","prime::pseudoprimegenerator#succ()","prime::trialdivisiongenerator#succ()","string#succ()","symbol#succ()","time#succ()","string#succ!()","net::smtp::response#success?()","process::status#success?()","systemexit#success?()","webrick::httpstatus::success?()","bundler::molinillo::dependencygraph::vertex#successors()","bundler::sudo()","gem::suffix_pattern()","gem::suffixes()","array#sum()","enumerable#sum()","rexml::functions::sum()","string#sum()","optionparser#summarize()","optionparser::list#summarize()","optionparser::switch#summarize()","rdoc::stats#summary()","date#sunday?()","time#sunday?()","shell::systemcommand#super_each()","method#super_method()","unboundmethod#super_method()","class#superclass()","rdoc::classmodule#superclass()","rdoc::normalmodule#superclass()","rdoc::classmodule#superclass=()","rdoc::anymethod#superclass_method()","set#superset?()","rss::maker::supported?()","rdoc::codeobject#suppress()","rdoc::codeobject#suppressed?()","debugger__::suspend()","irb::irb#suspend_context()","irb::irb#suspend_input_method()","irb::irb#suspend_name()","irb::irb#suspend_workspace()","string#swapcase()","symbol#swapcase()","string#swapcase!()","irb::jobmanager#switch()","process::gid::switch()","process::uid::switch()","optionparser::switch#switch_name()","fiddle::compositehandler#sym()","fiddle::handle#sym()","fiddle::handle::sym()","psych::classloader::restricted#symbolize()","bundler::fileutils::symlink()","file::symlink()","fileutils::symlink()","file::symlink?()","file::stat#symlink?()","filetest#symlink?()","pathname#symlink?()","gdbm#sync()","io#sync()","stringio#sync()","zlib::gzipfile#sync()","zlib::inflate#sync()","io#sync=()","stringio#sync=()","zlib::gzipfile#sync=()","sync_m#sync_exclusive?()","sync_m#sync_exclusive?()","sync_m#sync_extend()","sync_m#sync_extend()","sync_m#sync_inspect()","sync_m#sync_inspect()","bundler::thor::coreext::orderedhash#sync_keys!()","sync_m#sync_lock()","sync_m#sync_lock()","sync_m#sync_locked?()","sync_m#sync_locked?()","zlib::inflate#sync_point?()","sync_m#sync_shared?()","sync_m#sync_shared?()","sync_m#sync_synchronize()","sync_m#sync_synchronize()","sync_m#sync_try_lock()","sync_m#sync_try_lock()","sync_m#sync_unlock()","sync_m#sync_unlock()","monitormixin#synchronize()","mutex#synchronize()","gdbm#syncmode=()","socket#sysaccept()","tcpserver#sysaccept()","unixserver#sysaccept()","kernel#syscall()","openssl::ssl::sslsocket#sysclose()","etc::sysconf()","etc::sysconfdir()","syslog::logger::syslog()","syslog::logger::syslog=()","io::sysopen()","pathname#sysopen()","io#sysread()","io::generic_readable#sysread()","object#sysread()","openssl::ssl::sslsocket#sysread()","io#sysseek()","openssl::pkey::dsa#syssign()","bundler::rubyversion::system()","kernel#system()","net::ftp#system()","rexml::doctype#system()","shell::commandprocessor#system()","bundler::system_bindir()","shell#system_path=()","etc::systmpdir()","openssl::pkey::dsa#sysverify()","io#syswrite()","openssl::ssl::sslsocket#syswrite()","csv::table()","bundler::molinillo::dependencygraph#tag()","bundler::molinillo::dependencygraph::log#tag()","uncaughtthrowerror#tag()","rexml::streamlistener#tag_end()","rss::listenermixin#tag_end()","rss::element#tag_name()","rss::element::tag_name()","rexml::streamlistener#tag_start()","rss::listenermixin#tag_start()","bundler::gemhelper#tag_version()","delegator#taint()","object#taint()","pathname#taint()","object#tainted?()","array#take()","enumerable#take()","enumerator::lazy#take()","rinda::tuplespace#take()","rinda::tuplespaceproxy#take()","array#take_while()","enumerable#take_while()","enumerator::lazy#take_while()","cmath::tan()","math::tan()","cmath::tanh()","math::tanh()","object#tap()","object#task()","bundler::thor::task_help()","bundler::thor::base::classmethods#tasks()","addrinfo::tcp()","socket::tcp()","socket::tcp_server_loop()","socket::tcp_server_sockets()","shell::commandprocessor#tee()","argf#tell()","dir#tell()","io#tell()","stringio#tell()","zlib::gzipreader#tell()","zlib::gzipwriter#tell()","bundler::thor::actions#template()","rdoc::options#template_dir_for()","bundler::settings#temporary()","bundler::thor::shell::basic#terminal_width()","getoptlong#terminate()","optionparser::terminate()","optionparser#terminate()","shell::systemcommand#terminate()","stringscanner#terminate()","thread#terminate()","webrick#terminate()","webrick::utils::timeouthandler::terminate()","shell::processcontroller#terminate_job()","getoptlong#terminated?()","process::status#termsig()","kernel#test()","shell::commandprocessor#test()","date::test_all()","date::test_civil()","date::test_commercial()","date::test_nth_kday()","date::test_ordinal()","date::test_unit_conv()","date::test_weeknum()","prettyprint#text()","prettyprint::singleline#text()","rexml::element#text()","rexml::functions::text()","rexml::streamlistener#text()","rss::listenermixin#text()","rdoc::comment#text=()","rexml::element#text=()","rexml::light::node#text=()","rdoc::toplevel#text?()","rexml::parsers::pullevent#text?()","cgi::htmlextension#text_field()","cgi::htmlextension#textarea()","rss::rss#textinput()","rexml::element#texts()","object#then()","openssl::ocsp::singleresponse#this_update()","bundler::thor::actions#thor()","bundler::thor::util::thor_classes_in()","bundler::thor::util::thor_root()","bundler::thor::util::thor_root_glob()","drb::thread()","irb::jobmanager#thread()","net::imap#thread()","debugger__::thread_list()","debugger__::thread_list_all()","thread#thread_variable?()","thread#thread_variable_get()","thread#thread_variable_set()","thread#thread_variables()","kernel#throw()","date#thursday?()","time#thursday?()","gem::time()","openssl::ssl::session#time()","openssl::x509::revoked#time()","openssl::ssl::session#time=()","openssl::x509::revoked#time=()","openssl::x509::store#time=()","openssl::x509::storecontext#time=()","object#timeout()","openssl::ssl::session#timeout()","timeout::timeout()","openssl::ssl::session#timeout=()","resolv::dns#timeouts=()","integer#times()","process::times()","socket::ancillarydata#timestamp()","rdoc::store#title()","rdoc::store#title=()","net::smtp#tls?()","bundler::tmp()","bundler::plugin::api#tmp()","bundler::tmp_home_path()","openssl::ssl::sslsocket#tmp_key()","dir::tmpdir()","uri::mailto#to=()","argf#to_a()","array#to_a()","benchmark::tms#to_a()","bundler::specset#to_a()","bundler::thor::coreext::orderedhash#to_a()","csv::table#to_a()","dbm#to_a()","env::to_a()","enumerable#to_a()","enumerator::lazy#to_a()","gdbm#to_a()","hash#to_a()","matchdata#to_a()","matrix::eigenvaluedecomposition#to_a()","matrix::lupdecomposition#to_a()","nilclass#to_a()","openssl::x509::extension#to_a()","openssl::x509::name#to_a()","optionparser#to_a()","rexml::attributes#to_a()","rexml::elements#to_a()","rexml::parent#to_a()","range#to_a()","rinda::ringfinger::to_a()","rinda::ringfinger#to_a()","rubyvm::instructionsequence#to_a()","sdbm#to_a()","set#to_a()","shell::filter#to_a()","struct#to_a()","time#to_a()","yaml::dbm#to_a()","array#to_ary()","matrix::eigenvaluedecomposition#to_ary()","matrix::lupdecomposition#to_ary()","webrick::httputils::formdata#to_ary()","rss::rootelementmixin#to_atom()","rubyvm::instructionsequence#to_binary()","integer#to_bn()","openssl::bn#to_bn()","openssl::pkey::ec::point#to_bn()","complex#to_c()","nilclass#to_c()","numeric#to_c()","string#to_c()","rss::utils#to_class_name()","csv::row#to_csv()","csv::table#to_csv()","bigdecimal#to_d()","float#to_d()","integer#to_d()","nilclass#to_d()","rational#to_d()","date#to_date()","datetime#to_date()","time#to_date()","date#to_datetime()","datetime#to_datetime()","time#to_datetime()","bundler::dsl#to_definition()","openssl::asn1::asn1data#to_der()","openssl::asn1::constructive#to_der()","openssl::asn1::primitive#to_der()","openssl::netscape::spki#to_der()","openssl::ocsp::basicresponse#to_der()","openssl::ocsp::certificateid#to_der()","openssl::ocsp::request#to_der()","openssl::ocsp::response#to_der()","openssl::ocsp::singleresponse#to_der()","openssl::pkcs12#to_der()","openssl::pkcs7#to_der()","openssl::pkey::dh#to_der()","openssl::pkey::dsa#to_der()","openssl::pkey::ec#to_der()","openssl::pkey::ec::group#to_der()","openssl::pkey::rsa#to_der()","openssl::ssl::session#to_der()","openssl::x509::attribute#to_der()","openssl::x509::crl#to_der()","openssl::x509::certificate#to_der()","openssl::x509::extension#to_der()","openssl::x509::name#to_der()","openssl::x509::request#to_der()","openssl::x509::revoked#to_der()","bigdecimal#to_digits()","bundler::molinillo::dependencygraph#to_dot()","rss::element::to_element_methods()","enumerator::lazy#to_enum()","object#to_enum()","bigdecimal#to_f()","complex#to_f()","float#to_f()","integer#to_f()","nilclass#to_f()","rational#to_f()","string#to_f()","time#to_f()","rss::maker::atom::entry::items#to_feed()","rss::maker::atom::entry::items::item#to_feed()","rss::maker::atom::feed::channel#to_feed()","rss::maker::atom::feed::channel::cloud#to_feed()","rss::maker::atom::feed::channel::skipdays#to_feed()","rss::maker::atom::feed::channel::skiphours#to_feed()","rss::maker::atom::feed::image#to_feed()","rss::maker::atom::feed::items#to_feed()","rss::maker::atom::feed::items::item#to_feed()","rss::maker::atom::feed::items::item::content#to_feed()","rss::maker::atom::feed::items::item::enclosure#to_feed()","rss::maker::atom::feed::items::item::guid#to_feed()","rss::maker::atom::feed::items::item::source#to_feed()","rss::maker::atom::feed::items::item::source::icon#to_feed()","rss::maker::atomcategory#to_feed()","rss::maker::atomgenerator#to_feed()","rss::maker::atomlink#to_feed()","rss::maker::atomlogo#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed()","rss::maker::ituneschannelmodel::itunesimagebase#to_feed()","rss::maker::ituneschannelmodel::itunesownerbase#to_feed()","rss::maker::itunesitemmodel::itunesdurationbase#to_feed()","rss::maker::imagefaviconmodel::imagefaviconbase#to_feed()","rss::maker::imageitemmodel::imageitembase#to_feed()","rss::maker::rss09::channel#to_feed()","rss::maker::rss09::channel::authors#to_feed()","rss::maker::rss09::channel::authors::author#to_feed()","rss::maker::rss09::channel::categories#to_feed()","rss::maker::rss09::channel::cloud#to_feed()","rss::maker::rss09::channel::contributors#to_feed()","rss::maker::rss09::channel::copyright#to_feed()","rss::maker::rss09::channel::description#to_feed()","rss::maker::rss09::channel::generator#to_feed()","rss::maker::rss09::channel::links#to_feed()","rss::maker::rss09::channel::links::link#to_feed()","rss::maker::rss09::channel::skipdays#to_feed()","rss::maker::rss09::channel::skipdays::day#to_feed()","rss::maker::rss09::channel::skiphours#to_feed()","rss::maker::rss09::channel::skiphours::hour#to_feed()","rss::maker::rss09::channel::title#to_feed()","rss::maker::rss09::image#to_feed()","rss::maker::rss09::items#to_feed()","rss::maker::rss09::items::item#to_feed()","rss::maker::rss09::items::item::authors#to_feed()","rss::maker::rss09::items::item::categories#to_feed()","rss::maker::rss09::items::item::content#to_feed()","rss::maker::rss09::items::item::contributors#to_feed()","rss::maker::rss09::items::item::description#to_feed()","rss::maker::rss09::items::item::enclosure#to_feed()","rss::maker::rss09::items::item::guid#to_feed()","rss::maker::rss09::items::item::links#to_feed()","rss::maker::rss09::items::item::links::link#to_feed()","rss::maker::rss09::items::item::rights#to_feed()","rss::maker::rss09::items::item::source#to_feed()","rss::maker::rss09::items::item::source::authors#to_feed()","rss::maker::rss09::items::item::source::categories#to_feed()","rss::maker::rss09::items::item::source::contributors#to_feed()","rss::maker::rss09::items::item::source::generator#to_feed()","rss::maker::rss09::items::item::source::icon#to_feed()","rss::maker::rss09::items::item::source::links#to_feed()","rss::maker::rss09::items::item::source::logo#to_feed()","rss::maker::rss09::items::item::source::rights#to_feed()","rss::maker::rss09::items::item::source::subtitle#to_feed()","rss::maker::rss09::items::item::source::title#to_feed()","rss::maker::rss09::items::item::title#to_feed()","rss::maker::rss09::textinput#to_feed()","rss::maker::rss10::channel#to_feed()","rss::maker::rss10::channel::authors#to_feed()","rss::maker::rss10::channel::authors::author#to_feed()","rss::maker::rss10::channel::categories#to_feed()","rss::maker::rss10::channel::cloud#to_feed()","rss::maker::rss10::channel::contributors#to_feed()","rss::maker::rss10::channel::copyright#to_feed()","rss::maker::rss10::channel::description#to_feed()","rss::maker::rss10::channel::generator#to_feed()","rss::maker::rss10::channel::links#to_feed()","rss::maker::rss10::channel::links::link#to_feed()","rss::maker::rss10::channel::skipdays#to_feed()","rss::maker::rss10::channel::skiphours#to_feed()","rss::maker::rss10::channel::title#to_feed()","rss::maker::rss10::image#to_feed()","rss::maker::rss10::items#to_feed()","rss::maker::rss10::items::item#to_feed()","rss::maker::rss10::items::item::authors#to_feed()","rss::maker::rss10::items::item::categories#to_feed()","rss::maker::rss10::items::item::content#to_feed()","rss::maker::rss10::items::item::contributors#to_feed()","rss::maker::rss10::items::item::description#to_feed()","rss::maker::rss10::items::item::enclosure#to_feed()","rss::maker::rss10::items::item::guid#to_feed()","rss::maker::rss10::items::item::links#to_feed()","rss::maker::rss10::items::item::rights#to_feed()","rss::maker::rss10::items::item::source#to_feed()","rss::maker::rss10::items::item::source::authors#to_feed()","rss::maker::rss10::items::item::source::categories#to_feed()","rss::maker::rss10::items::item::source::contributors#to_feed()","rss::maker::rss10::items::item::source::generator#to_feed()","rss::maker::rss10::items::item::source::icon#to_feed()","rss::maker::rss10::items::item::source::links#to_feed()","rss::maker::rss10::items::item::source::logo#to_feed()","rss::maker::rss10::items::item::source::rights#to_feed()","rss::maker::rss10::items::item::source::subtitle#to_feed()","rss::maker::rss10::items::item::source::title#to_feed()","rss::maker::rss10::items::item::title#to_feed()","rss::maker::rss10::textinput#to_feed()","rss::maker::rss20::channel::categories#to_feed()","rss::maker::rss20::channel::categories::category#to_feed()","rss::maker::rss20::channel::cloud#to_feed()","rss::maker::rss20::channel::generator#to_feed()","rss::maker::rss20::items::item::authors#to_feed()","rss::maker::rss20::items::item::authors::author#to_feed()","rss::maker::rss20::items::item::categories#to_feed()","rss::maker::rss20::items::item::categories::category#to_feed()","rss::maker::rss20::items::item::enclosure#to_feed()","rss::maker::rss20::items::item::guid#to_feed()","rss::maker::rss20::items::item::source#to_feed()","rss::maker::rss20::items::item::source::links#to_feed()","rss::maker::rss20::items::item::source::links::link#to_feed()","rss::maker::rssbase#to_feed()","rss::maker::trackbackmodel::trackbackaboutsbase::trackbackaboutbase#to_feed()","rss::maker::xmlstylesheets::xmlstylesheet#to_feed()","rss::rootelementmixin#to_feed()","rss::maker::ituneschannelmodel::itunescategoriesbase::itunescategorybase#to_feed_for_categories()","bundler::rubyversion#to_gem_version_with_patchlevel()","array#to_h()","bundler::buildmetadata::to_h()","csv::row#to_h()","env::to_h()","enumerable#to_h()","hash#to_h()","json::ext::generator::state#to_h()","nilclass#to_h()","openssl::x509::extension#to_h()","openstruct#to_h()","struct#to_h()","win32ole_record#to_h()","bundler::specset#to_hash()","bundler::thor::coreext::orderedhash#to_hash()","csv::row#to_hash()","dbm#to_hash()","env::to_hash()","gdbm#to_hash()","hash#to_hash()","json::ext::generator::state#to_hash()","json::genericobject#to_hash()","sdbm#to_hash()","yaml::dbm#to_hash()","rdoc::tokenstream::to_html()","argf#to_i()","bigdecimal#to_i()","csv#to_i()","complex#to_i()","fiddle::closure#to_i()","fiddle::function#to_i()","fiddle::handle#to_i()","fiddle::pointer#to_i()","float#to_i()","io#to_i()","ipaddr#to_i()","integer#to_i()","nilclass#to_i()","openssl::bn#to_i()","process::status#to_i()","rational#to_i()","string#to_i()","time#to_i()","webrick::httpstatus::status#to_i()","drb::to_id()","drb::drbidconv#to_id()","drb::drbidconv#to_id()","drb::drbserver#to_id()","bigdecimal#to_int()","fiddle::pointer#to_int()","float#to_int()","integer#to_int()","numeric#to_int()","openssl::bn#to_int()","argf#to_io()","csv#to_io()","io#to_io()","openssl::ssl::sslserver#to_io()","zlib::gzipfile#to_io()","bigdecimal#to_json()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::ext::generator::generatormethods::array#to_json()","json::ext::generator::generatormethods::bignum#to_json()","json::ext::generator::generatormethods::falseclass#to_json()","json::ext::generator::generatormethods::fixnum#to_json()","json::ext::generator::generatormethods::float#to_json()","json::ext::generator::generatormethods::hash#to_json()","json::ext::generator::generatormethods::integer#to_json()","json::ext::generator::generatormethods::nilclass#to_json()","json::ext::generator::generatormethods::object#to_json()","json::ext::generator::generatormethods::string#to_json()","json::ext::generator::generatormethods::trueclass#to_json()","json::genericobject#to_json()","openstruct#to_json()","psych::to_json()","range#to_json()","rational#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::ext::generator::generatormethods::string#to_json_raw()","json::ext::generator::generatormethods::string#to_json_raw_object()","bundler::definition#to_lock()","bundler::dependency#to_lock()","bundler::lazyspecification#to_lock()","bundler::plugin::api::source#to_lock()","bundler::source::git#to_lock()","bundler::source::path#to_lock()","uri::mailto#to_mailtext()","resolv::ipv4#to_name()","resolv::ipv6#to_name()","drb::to_obj()","drb::drbidconv#to_obj()","drb::drbidconv#to_obj()","drb::drbserver#to_obj()","openssl::pkey::ec::point#to_octet_string()","dir#to_path()","file#to_path()","pathname#to_path()","openssl::netscape::spki#to_pem()","openssl::pkcs7#to_pem()","openssl::pkey::dh#to_pem()","openssl::pkey::dsa#to_pem()","openssl::pkey::ec#to_pem()","openssl::pkey::ec::group#to_pem()","openssl::pkey::rsa#to_pem()","openssl::ssl::session#to_pem()","openssl::x509::crl#to_pem()","openssl::x509::certificate#to_pem()","openssl::x509::request#to_pem()","hash#to_proc()","method#to_proc()","proc#to_proc()","symbol#to_proc()","fiddle::pointer::to_ptr()","bigdecimal#to_r()","complex#to_r()","float#to_r()","integer#to_r()","nilclass#to_r()","rational#to_r()","string#to_r()","time#to_r()","ipaddr#to_range()","uri::mailto#to_rfc822text()","rss::rootelementmixin#to_rss()","psych::nodes::node#to_ruby()","argf#to_s()","addrinfo#to_s()","array#to_s()","benchmark::tms#to_s()","bigdecimal#to_s()","bundler::depproxy#to_s()","bundler::dsl::dslerror#to_s()","bundler::lazyspecification#to_s()","bundler::molinillo::resolver::resolution::possibilityset#to_s()","bundler::parallelinstaller::specinstallation#to_s()","bundler::plugin::api::source#to_s()","bundler::remotespecification#to_s()","bundler::resolver::specgroup#to_s()","bundler::rubyversion#to_s()","bundler::source::git#to_s()","bundler::source::metadata#to_s()","bundler::source::path#to_s()","bundler::versionranges::reqr#to_s()","cgi::cookie#to_s()","csv::row#to_s()","csv::table#to_s()","complex#to_s()","date#to_s()","datetime#to_s()","digest::instance#to_s()","env::to_s()","encoding#to_s()","exception#to_s()","falseclass#to_s()","fiber#to_s()","fiddle::pointer#to_s()","float#to_s()","hash#to_s()","ipaddr#to_s()","integer#to_s()","matchdata#to_s()","method#to_s()","module#to_s()","nilclass#to_s()","object#to_s()","openssl::bn#to_s()","openssl::config#to_s()","openssl::hmac#to_s()","openssl::netscape::spki#to_s()","openssl::pkcs7#to_s()","openssl::pkey::dh#to_s()","openssl::pkey::dsa#to_s()","openssl::pkey::rsa#to_s()","openssl::x509::crl#to_s()","openssl::x509::certificate#to_s()","openssl::x509::extension#to_s()","openssl::x509::name#to_s()","openssl::x509::request#to_s()","openstruct#to_s()","optionparser#to_s()","optionparser::parseerror#to_s()","pathname#to_s()","proc#to_s()","process::status#to_s()","rexml::attribute#to_s()","rexml::cdata#to_s()","rexml::dtd::entitydecl#to_s()","rexml::dtd::notationdecl#to_s()","rexml::declaration#to_s()","rexml::entity#to_s()","rexml::externalentity#to_s()","rexml::light::node#to_s()","rexml::node#to_s()","rexml::notationdecl#to_s()","rexml::output#to_s()","rexml::parseexception#to_s()","rexml::text#to_s()","rexml::validation::event#to_s()","rexml::validation::ref#to_s()","rexml::validation::state#to_s()","rss::element#to_s()","rss::xml::element#to_s()","rss::xmlstylesheet#to_s()","range#to_s()","rational#to_s()","regexp#to_s()","resolv::dns::name#to_s()","set#to_s()","shell::filter#to_s()","socket::option#to_s()","string#to_s()","struct#to_s()","symbol#to_s()","thread#to_s()","thread::backtrace::location#to_s()","time#to_s()","trueclass#to_s()","uri::ftp#to_s()","uri::generic#to_s()","uri::mailto#to_s()","unboundmethod#to_s()","uncaughtthrowerror#to_s()","webrick::cookie#to_s()","webrick::httputils::formdata#to_s()","webrick::httpversion#to_s()","win32ole_method#to_s()","win32ole_param#to_s()","win32ole_type#to_s()","win32ole_typelib#to_s()","win32ole_variable#to_s()","enumerable#to_set()","set#to_set()","addrinfo#to_sockaddr()","bundler::socketaddress#to_socket_address()","bundler::resolver::specgroup#to_specs()","fiddle::pointer#to_str()","string#to_str()","ipaddr#to_string()","rexml::attribute#to_string()","string#to_sym()","symbol#to_sym()","openssl::netscape::spki#to_text()","openssl::pkey::dh#to_text()","openssl::pkey::dsa#to_text()","openssl::pkey::ec#to_text()","openssl::pkey::ec::group#to_text()","openssl::pkey::rsa#to_text()","openssl::ssl::session#to_text()","openssl::x509::crl#to_text()","openssl::x509::certificate#to_text()","openssl::x509::request#to_text()","date#to_time()","datetime#to_time()","time#to_time()","exception::to_tty?()","openssl::x509::name#to_utf8()","fiddle::pointer#to_value()","argf#to_write_io()","rss::rootelementmixin#to_xml()","bundler::stubspecification#to_yaml()","object#to_yaml()","psych::nodes::node#to_yaml()","date::today()","kconv::toeuc()","string#toeuc()","kconv::tojis()","string#tojis()","rdoc::tokenstream#token_stream()","racc::parser#token_to_str()","psych::scalarscanner#tokenize()","rdoc::tomdoc#tokenize()","ripper::tokenize()","rdoc::tokenstream#tokens_to_s()","kconv::tolocale()","string#tolocale()","rdoc::comment#tomdoc?()","irb::frame#top()","irb::frame::top()","net::popmail#top()","optionparser::top()","optionparser#top()","rdoc::context#top_level()","rdoc::require#top_level()","shell::commandprocessor#top_level_test()","irb::locale#toplevel_load()","kconv::tosjis()","string#tosjis()","zlib::zstream#total_in()","zlib::zstream#total_out()","gc::profiler::total_time()","bundler::fileutils::touch()","fileutils::touch()","kconv::toutf16()","string#toutf16()","kconv::toutf32()","string#toutf32()","kconv::toutf8()","string#toutf8()","string#tr()","string#tr!()","string#tr_s()","string#tr_s!()","bundler::ui::shell#trace()","bundler::ui::silent#trace()","net::http#trace()","tracepoint::trace()","irb::frame#trace_func()","objectspace::trace_object_allocations()","objectspace::trace_object_allocations_clear()","objectspace::trace_object_allocations_debug_start()","objectspace::trace_object_allocations_start()","objectspace::trace_object_allocations_stop()","rubyvm::instructionsequence#trace_points()","kernel#trace_var()","shell::commandprocessor#transact()","pstore#transaction()","fiber#transfer()","psych::nodes::node#transform()","hash#transform_keys()","hash#transform_keys!()","hash#transform_values()","hash#transform_values!()","rexml::functions::translate()","array#transpose()","bundler::sharedhelpers#trap()","kernel#trap()","signal::trap()","openssl::asn1::traverse()","psych::visitors::yamltree#tree()","rexml::functions::true()","bundler::currentruby#truffleruby?()","bigdecimal#truncate()","bundler::thor::shell::basic#truncate()","file::truncate()","file#truncate()","float#truncate()","integer#truncate()","numeric#truncate()","pathname#truncate()","rational#truncate()","stringio#truncate()","delegator#trust()","object#trust()","openssl::x509::store#trust=()","openssl::x509::storecontext#trust=()","gem::try_activate()","makemakefile#try_const()","array::try_convert()","hash::try_convert()","io::try_convert()","regexp::try_convert()","string::try_convert()","mutex#try_lock()","monitormixin#try_mon_enter()","makemakefile#try_type()","bundler::molinillo::dependencygraph::tsort()","tsort::tsort()","tsort#tsort()","tsort::tsort_each()","tsort#tsort_each()","bundler::molinillo::dependencygraph#tsort_each_child()","tsort#tsort_each_child()","bundler::molinillo::dependencygraph#tsort_each_node()","tsort#tsort_each_node()","io#tty?()","stringio#tty?()","date#tuesday?()","time#tuesday?()","time#tv_nsec()","time#tv_sec()","time#tv_usec()","bundler::depproxy#type()","objectspace::internalobjectwrapper#type()","openssl::pkcs7#type()","rdoc::classmodule#type()","rdoc::methodattr#type()","rubyvm::abstractsyntaxtree::node#type()","socket::ancillarydata#type()","openssl::pkcs7#type=()","fiddle::importer#typealias()","uri::ftp#typecode=()","win32ole_type#typekind()","win32ole_type::typelibs()","win32ole_typelib::typelibs()","win32ole_record#typename()","erb::util::u()","matrix::lupdecomposition#u()","openssl::bn#ucmp()","addrinfo::udp()","socket::udp_server_loop()","socket::udp_server_loop_on()","socket::udp_server_recv()","socket::udp_server_sockets()","bundler::ui()","gem::ui()","bundler::ui=()","file::stat#uid()","process::uid()","process::uid=()","net::imap#uid_copy()","net::imap#uid_fetch()","net::imap#uid_move()","net::imap#uid_search()","net::imap#uid_sort()","net::imap#uid_store()","net::imap#uid_thread()","net::popmail#uidl()","file::umask()","webrick::httpserver#umount()","win32ole_event#unadvise()","shell::unalias_command()","shell::commandprocessor::unalias_command()","etc::uname()","method#unbind()","bundler::thor::actions#uncomment_lines()","csv#unconverted_fields?()","csv::parser#unconverted_fields?()","module#undef_method()","shell::undef_system_command()","shell::commandprocessor::undef_system_command()","objectspace::undefine_finalizer()","rdoc::stats#undoc_params()","string#undump()","bundler::persistent::net::http::persistent#unescape()","cgi::util#unescape()","uri::escape#unescape()","uri::rfc2396_parser#unescape()","webrick::httputils#unescape()","cgi::util#unescapeelement()","cgi::util#unescapehtml()","cgi::util#unescape_element()","webrick::httputils#unescape_form()","cgi::util#unescape_html()","io#ungetbyte()","stringio#ungetbyte()","zlib::gzipreader#ungetbyte()","io#ungetc()","openssl::buffering#ungetc()","stringio#ungetc()","zlib::gzipreader#ungetc()","string#unicode_normalize()","string#unicode_normalize!()","string#unicode_normalized?()","array#union()","fiddle::importer#union()","regexp::union()","set#union()","array#uniq()","enumerable#uniq()","enumerator::lazy#uniq()","array#uniq!()","rdoc::store#unique_classes()","rdoc::store#unique_classes_and_modules()","net::popmail#unique_id()","rdoc::store#unique_modules()","matrix::unit()","addrinfo::unix()","socket::unix()","addrinfo#unix?()","bundler::thor::shell::basic#unix?()","addrinfo#unix_path()","socket::ancillarydata::unix_rights()","socket::ancillarydata#unix_rights()","socket::unix_server_loop()","socket::unix_server_socket()","logger#unknown()","syslog::logger#unknown()","bundler::lockfileparser::unknown_sections_in_lockfile()","dir::unlink()","file::unlink()","pathname#unlink()","shell::commandprocessor#unlink()","tempfile#unlink()","mutex#unlock()","net::http#unlock()","bundler::plugin::api::source#unlock!()","bundler::source::git#unlock!()","bundler::definition#unlocking?()","bundler::fetcher::dependency#unmarshalled_dep_gems()","bundler::index#unmet_dependency_names()","bundler::plugin::api::source#unmet_deps()","bundler::source#unmet_deps()","webrick::httpserver#unmount()","rexml::parsers::baseparser#unnormalize()","rexml::entity#unnormalized()","socket::option#unpack()","string#unpack()","string#unpack1()","socket::unpack_sockaddr_in()","socket::unpack_sockaddr_un()","bundler::ui::shell#unprinted_warnings()","bundler::ui::silent#unprinted_warnings()","drb::extservmanager#unregist()","stringscanner#unscan()","array#unshift()","rexml::parent#unshift()","rexml::parsers::baseparser#unshift()","rexml::parsers::pullparser#unshift()","bundler::index#unsorted_search()","net::imap#unsubscribe()","delegator#untaint()","object#untaint()","pathname#untaint()","kernel#untrace_var()","delegator#untrust()","object#untrust()","object#untrusted?()","zlib::gzipreader#unused()","bundler::molinillo::delegates::resolutionstate#unused_unwind_options()","bundler::molinillo::resolver::resolution::unwinddetails#unwinding_to_primary_requirement?()","bundler::molinillo::dependencygraph::action#up()","bundler::molinillo::dependencygraph::addedgenocircular#up()","bundler::molinillo::dependencygraph::deleteedge#up()","bundler::molinillo::dependencygraph::detachvertexnamed#up()","bundler::molinillo::dependencygraph::tag#up()","string#upcase()","symbol#upcase()","string#upcase!()","bundler::cli#update()","bundler::compactindexclient::updater#update()","cgi::session#update()","cgi::session::filestore#update()","cgi::session::memorystore#update()","cgi::session::nullstore#update()","cgi::session::pstore#update()","dbm#update()","digest::base#update()","digest::instance#update()","env::update()","gdbm#update()","hash#update()","openssl::cipher#update()","openssl::digest#update()","openssl::hmac#update()","sdbm#update()","yaml::dbm#update()","rdoc::classmodule#update_aliases()","bundler::compactindexclient#update_and_parse_checksums!()","rdoc::classmodule#update_extends()","rdoc::classmodule#update_includes()","bundler::settings::mirrorconfig#update_mirror()","rdoc::rdoc#update_output_dir()","rdoc::store#update_parser_of_file()","rss::maker::channelbase#updated()","rss::maker::itemsbase::itembase#updated()","rss::maker::itemsbase::itembase::sourcebase#updated()","rss::maker::channelbase#updated=()","rss::maker::itemsbase::itembase#updated=()","rss::maker::itemsbase::itembase::sourcebase#updated=()","rdoc::context#upgrade_to_class()","prime::pseudoprimegenerator#upper_bound()","prime::pseudoprimegenerator#upper_bound=()","date#upto()","integer#upto()","string#upto()","bundler::fileutils::uptodate?()","fileutils::uptodate?()","random::urandom()","bundler::fetcher#uri()","drb::uri()","bundler::settings::mirror#uri=()","bundler::plugin::api::source#uri_hash()","drb::drbprotocol::uri_option()","rss::baselistener::uri_registered?()","erb::util::url_encode()","random::formatter#urlsafe_base64()","base64#urlsafe_decode64()","base64#urlsafe_encode64()","bundler::index#use()","bundler::fetcher#use_api()","gem::use_gemdeps()","csv::parser#use_headers?()","irb::context#use_loader()","irb::context#use_loader=()","irb::context#use_loader?()","rdoc::parser::use_markup()","gem::use_paths()","irb::context#use_readline=()","net::http#use_ssl=()","net::http#use_ssl?()","net::pop3#use_ssl?()","net::pop3::use_ssl?()","bundler::use_system_gems?()","irb::context#use_tracer=()","time#usec()","module::used_modules()","uri::generic#user()","uri::generic#user=()","bundler::fetcher#user_agent()","bundler::user_bundle_path()","bundler::user_cache()","bundler::user_home()","bundler::thor::util::user_home()","gem::user_home()","uri::generic#userinfo()","uri::generic#userinfo=()","time#utc()","time::utc()","time#utc?()","time#utc_offset()","file::utime()","pathname#utime()","random::formatter#uuid()","matrix::eigenvaluedecomposition#v()","matrix::eigenvaluedecomposition#v_inv()","bundler::settings::mirror#valid?()","rss::element#valid?()","date::valid_civil?()","date::valid_commercial?()","date::valid_date?()","string#valid_encoding?()","bundler::specset#valid_for?()","date::valid_jd?()","net::imap::numvalidator::valid_mod_sequence_value?()","net::imap::numvalidator::valid_number?()","net::imap::numvalidator::valid_nz_number?()","date::valid_ordinal?()","rexml::validation::validator#validate()","rss::element#validate()","bundler::settings#validate!()","bundler::settings::mirror#validate!()","bundler::settings::validator::validate!()","bundler::settings::validator::rule#validate!()","rss::atom::duplicatelinkchecker#validate_duplicate_links()","rss::element#validate_for_stream()","rss::imagemodelutils#validate_one_tag_name()","bundler::definition#validate_platforms!()","bundler::plugin#validate_plugin!()","bundler::definition#validate_ruby!()","bundler::definition#validate_runtime!()","cgi::cookie#value()","fiddle::importer#value()","net::httpresponse#value()","openssl::x509::attribute#value()","openssl::x509::extension#value()","rexml::attribute#value()","rexml::cdata#value()","rexml::entity#value()","rexml::text#value()","rinda::tuple#value()","rinda::tupleentry#value()","thread#value()","uncaughtthrowerror#value()","win32ole_variable#value()","win32ole_variant#value()","cgi::cookie#value=()","openssl::x509::attribute#value=()","openssl::x509::extension#value=()","rexml::text#value=()","rss::itunesitemmodel::itunesduration#value=()","win32ole_variant#value=()","dbm#value?()","env::value?()","gdbm#value?()","hash#value?()","sdbm#value?()","bundler::thor::coreext::orderedhash#values()","dbm#values()","env::values()","gdbm#values()","hash#values()","objectspace::weakmap#values()","sdbm#values()","struct#values()","yaml::dbm#values()","array#values_at()","csv::row#values_at()","csv::table#values_at()","dbm#values_at()","env::values_at()","gdbm#values_at()","hash#values_at()","matchdata#values_at()","sdbm#values_at()","stringscanner#values_at()","struct#values_at()","yaml::dbm#values_at()","rss::maker::base#variable_is_set?()","win32ole_variable#variable_kind()","rexml::functions::variables()","win32ole_type#variables()","rexml::functions::variables=()","rexml::xpathparser#variables=()","win32ole_variable#varkind()","win32ole_variant#vartype()","optionparser#ver()","drb::drbserver#verbose()","drb::drbserver::verbose()","drb::drbserver::verbose=()","drb::drbserver#verbose=()","irb::context#verbose?()","net::pop3::verify()","openssl::netscape::spki#verify()","openssl::ocsp::basicresponse#verify()","openssl::ocsp::request#verify()","openssl::pkcs7#verify()","openssl::pkey::pkey#verify()","openssl::x509::crl#verify()","openssl::x509::certificate#verify()","openssl::x509::request#verify()","openssl::x509::store#verify()","openssl::x509::storecontext#verify()","bundler::persistent::net::http::persistent#verify_callback=()","openssl::x509::store#verify_callback=()","openssl::ssl::verify_certificate_identity()","gc::verify_internal_consistency()","bundler::persistent::net::http::persistent#verify_mode=()","openssl::pkey::rsa#verify_pss()","openssl::ssl::sslsocket#verify_result()","gc::verify_transient_heap_internal_consistency()","bundler::cli#version()","bundler::gemhelper#version()","bundler::source::git::gitproxy#version()","erb::version()","irb::version()","openssl::x509::crl#version()","openssl::x509::certificate#version()","openssl::x509::request#version()","optionparser#version()","rexml::document#version()","win32ole_typelib#version()","openssl::x509::crl#version=()","openssl::x509::certificate#version=()","openssl::x509::request#version=()","net::http::version_1_2()","net::http::version_1_2?()","bundler::plugin::installer::git#version_message()","bundler::source#version_message()","bundler::source::metadata#version_message()","bundler::gemhelper#version_tag()","bundler::compactindexclient#versions()","bundler::compactindexclient::cache#versions()","rss::maker::versions()","bundler::compactindexclient::cache#versions_path()","bundler::rubyversion#versions_string()","bundler::molinillo::dependencygraph#vertex_named()","socket::ifaddr#vhid()","readline::vi_editing_mode()","readline::vi_editing_mode?()","webrick::httpserver#virtual_host()","rdoc::options#visibility=()","win32ole_method#visible?()","win32ole_type#visible?()","win32ole_typelib#visible?()","win32ole_variable#visible?()","psych::visitors::yamltree#visit_array()","psych::visitors::yamltree#visit_basicobject()","psych::visitors::yamltree#visit_bigdecimal()","psych::visitors::yamltree#visit_class()","psych::visitors::yamltree#visit_complex()","psych::visitors::yamltree#visit_date()","psych::visitors::yamltree#visit_datetime()","psych::visitors::yamltree#visit_delegator()","psych::visitors::yamltree#visit_encoding()","psych::visitors::yamltree#visit_enumerator()","psych::visitors::yamltree#visit_exception()","psych::visitors::yamltree#visit_falseclass()","psych::visitors::yamltree#visit_float()","psych::visitors::yamltree#visit_hash()","psych::visitors::yamltree#visit_integer()","psych::visitors::yamltree#visit_module()","psych::visitors::yamltree#visit_nameerror()","psych::visitors::yamltree#visit_nilclass()","psych::visitors::yamltree#visit_object()","psych::visitors::emitter#visit_psych_nodes_alias()","psych::visitors::noaliasruby#visit_psych_nodes_alias()","psych::visitors::toruby#visit_psych_nodes_alias()","psych::visitors::emitter#visit_psych_nodes_document()","psych::visitors::toruby#visit_psych_nodes_document()","psych::visitors::emitter#visit_psych_nodes_mapping()","psych::visitors::toruby#visit_psych_nodes_mapping()","psych::visitors::emitter#visit_psych_nodes_scalar()","psych::visitors::toruby#visit_psych_nodes_scalar()","psych::visitors::emitter#visit_psych_nodes_sequence()","psych::visitors::toruby#visit_psych_nodes_sequence()","psych::visitors::emitter#visit_psych_nodes_stream()","psych::visitors::toruby#visit_psych_nodes_stream()","psych::visitors::yamltree#visit_psych_omap()","psych::visitors::yamltree#visit_psych_set()","psych::visitors::yamltree#visit_range()","psych::visitors::yamltree#visit_rational()","psych::visitors::yamltree#visit_regexp()","psych::visitors::yamltree#visit_string()","psych::visitors::yamltree#visit_struct()","psych::visitors::yamltree#visit_symbol()","psych::visitors::yamltree#visit_time()","psych::visitors::yamltree#visit_trueclass()","bundler::cli#viz()","bundler::graph#viz()","net::ftp#voidcmd()","matrix::vstack()","time::w3cdtf()","time#w3cdtf()","conditionvariable#wait()","io#wait()","monitormixin::conditionvariable#wait()","process::wait()","rinda::waittemplateentry#wait()","process::wait2()","shell::builtincommand#wait?()","shell::systemcommand#wait?()","shell::processcontroller#wait_all_jobs_execution()","io#wait_readable()","shell::processcontroller::wait_to_finish_all_process_controllers()","monitormixin::conditionvariable#wait_until()","monitormixin::conditionvariable#wait_while()","io#wait_writable()","process::waitall()","debugger__::waiting()","shell::processcontroller#waiting_job?()","shell::processcontroller#waiting_jobs()","shell::processcontroller#waiting_jobs_exist?()","process::waitpid()","process::waitpid2()","thread#wakeup()","bundler::ui::shell#warn()","bundler::ui::silent#warn()","kernel#warn()","logger#warn()","optionparser#warn()","rdoc::options#warn()","syslog::logger#warn()","webrick::basiclog#warn()","warning#warn()","logger#warn?()","webrick::basiclog#warn?()","bundler::lockfileparser#warn_for_outdated_bundler_version()","bundler::persistenthttp#warn_old_tls_version_rubygems_connection()","date#wday()","time#wday()","weakref#weakref_alive?()","date#wednesday?()","time#wednesday?()","date::weeknum()","datetime::weeknum()","bundler::specset#what_required()","bundler::which()","rexml::element#whitespace()","fiddle::win32_last_error()","fiddle::win32_last_error=()","gem::win_platform?()","io#winsize()","io#winsize=()","optionparser::with()","bundler::with_clean_env()","bundler::sharedhelpers#with_clean_git_env()","makemakefile#with_config()","bundler::with_friendly_errors()","enumerator#with_index()","prime::pseudoprimegenerator#with_index()","enumerator#with_object()","prime::pseudoprimegenerator#with_object()","bundler::with_original_env()","bundler::thor::shell#with_padding()","bundler::cli::common::without_groups_message()","irb::context#workspaces()","file::world_readable?()","file::stat#world_readable?()","filetest#world_readable?()","pathname#world_readable?()","file::world_writable?()","file::stat#world_writable?()","filetest#world_writable?()","pathname#world_writable?()","json::jsonerror::wrap()","rexml::text#wrap()","zlib::gzipfile::wrap()","file::writable?()","file::stat#writable?()","filetest#writable?()","net::ftp::mlsxentry#writable?()","pathname#writable?()","file::writable_real?()","file::stat#writable_real?()","filetest#writable_real?()","pathname#writable_real?()","argf#write()","bundler::env::write()","io::write()","io#write()","logger::logdevice#write()","net::internetmessageio::writeadapter#write()","openssl::buffering#write()","pathname#write()","rexml::attlistdecl#write()","rexml::attribute#write()","rexml::cdata#write()","rexml::comment#write()","rexml::dtd::entitydecl#write()","rexml::dtd::notationdecl#write()","rexml::declaration#write()","rexml::doctype#write()","rexml::document#write()","rexml::element#write()","rexml::entity#write()","rexml::externalentity#write()","rexml::formatters::default#write()","rexml::instruction#write()","rexml::notationdecl#write()","rexml::text#write()","rexml::xmldecl#write()","rinda::tuplespace#write()","rinda::tuplespaceproxy#write()","stringio#write()","zlib::gzipwriter#write()","gem::write_binary()","rexml::formatters::default#write_cdata()","rexml::formatters::pretty#write_cdata()","rexml::formatters::default#write_comment()","rexml::formatters::pretty#write_comment()","rexml::formatters::default#write_document()","rexml::formatters::pretty#write_document()","rexml::formatters::default#write_element()","rexml::formatters::pretty#write_element()","rexml::formatters::transitive#write_element()","csv#write_headers?()","rexml::formatters::default#write_instruction()","io#write_nonblock()","io::generic_writable#write_nonblock()","openssl::buffering#write_nonblock()","rdoc::options#write_options()","openssl::random::write_random_file()","rinda::ringserver#write_services()","openssl::pkcs7::write_smime()","rexml::formatters::default#write_text()","rexml::formatters::pretty#write_text()","rexml::formatters::transitive#write_text()","net::http#write_timeout=()","bundler::sharedhelpers#write_to_gemfile()","rexml::text#write_with_substitution()","bundler::currentruby#x64_mingw?()","rss::atom::feed::entry::content#xhtml()","rss::atom::textconstruct#xhtml()","rss::maker::atomtextconstructbase::ensurexmlcontent#xhtml=()","net::imap#xlist()","rss::atom::feed::entry::content#xml()","rss::maker::itemsbase::itembase::contentbase#xml=()","rss::rexmllikexmlparser#xmldecl()","rss::maker::atomtextconstructbase::ensurexmlcontent#xml_content=()","rss::maker::itemsbase::itembase::contentbase#xml_content=()","rexml::document#xml_decl()","rss::atom::feed::entry::content::xml_getter()","rss::atom::textconstruct::xml_getter()","rss::atom::feed::entry::content::xml_setter()","rss::atom::textconstruct::xml_setter()","rexml::sax2listener#xmldecl()","rexml::streamlistener#xmldecl()","rexml::xmldecl#xmldecl()","rss::listenermixin#xmldecl()","rss::rexmllistener#xmldecl()","rss::xmlparserlistener#xmldecl()","rexml::parsers::pullevent#xmldecl?()","date::xmlschema()","date#xmlschema()","datetime::xmlschema()","datetime#xmlschema()","time::xmlschema()","time#xmlschema()","object#xmp()","rexml::attribute#xpath()","rexml::element#xpath()","rexml::text#xpath()","psych::nodes::node#yaml()","object::yaml_tag()","date#yday()","time#yday()","date#year()","time#year()","bundler::thor::shell::basic#yes?()","bundler::ui::shell#yes?()","bundler::ui::silent#yes?()","fiber::yield()","proc#yield()","object#yield_self()","racc::parser#yyaccept()","ripper#yydebug()","ripper#yydebug=()","racc::parser#yyerrok()","racc::parser#yyerror()","racc::parser#yyparse()","matrix::zero()","bigdecimal#zero?()","file::zero?()","file::stat#zero?()","filetest#zero?()","float#zero?()","numeric#zero?()","openssl::bn#zero?()","pathname#zero?()","array#zip()","enumerable#zip()","enumerator::lazy#zip()","rdoc::parser::zip?()","zlib::zlib_version()","datetime#zone()","time#zone()","time::zone_offset()","array#|()","falseclass#|()","ipaddr#|()","integer#|()","json::genericobject#|()","nilclass#|()","set#|()","shell::filter#|()","trueclass#|()","ipaddr#~()","integer#~()","regexp#~()","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"info":[["ACL","","classes/ACL.html","","<p>Simple Access Control Lists.\n<p>Access control lists are composed of “allow” and “deny” …\n"],["ACL::ACLEntry","","classes/ACL/ACLEntry.html","","<p>An entry in an ACL\n"],["ACL::ACLList","","classes/ACL/ACLList.html","","<p>A list of ACLEntry objects.  Used to implement the allow and deny halves of\nan ACL\n"],["ARGF","","classes/ARGF.html","","<p><code>ARGF</code> is a stream designed for use in scripts that process\nfiles given as command-line arguments or passed …\n"],["Abbrev","","classes/Abbrev.html","","<p>Calculates the set of unambiguous abbreviations for a given set of strings.\n\n<pre><code>require &#39;abbrev&#39;\nrequire &#39;pp&#39; ...\n</code></pre>\n"],["Addrinfo","","classes/Addrinfo.html","","<p>The Addrinfo class maps <code>struct addrinfo</code> to ruby.  This\nstructure identifies an Internet host and a service. …\n"],["ArgumentError","","classes/ArgumentError.html","","<p>Raised when the arguments are wrong and there isn&#39;t a more specific\nException class.\n<p>Ex: passing the …\n"],["Array","","classes/Array.html","","<p>Arrays are ordered, integer-indexed collections of any object.\n<p>Array indexing starts at 0, as in C or …\n"],["Base64","","classes/Base64.html","","<p>The Base64 module provides for the encoding (#encode64, #strict_encode64,\n#urlsafe_encode64) and decoding …\n"],["BasicObject","","classes/BasicObject.html","","<p>BasicObject is the parent class of all classes in Ruby.  It&#39;s an\nexplicit blank class.\n<p>BasicObject …\n"],["BasicSocket","","classes/BasicSocket.html","","<p>BasicSocket is the super class for all the Socket classes.\n"],["Benchmark","","classes/Benchmark.html","","<p>The Benchmark module provides methods to measure and report the time used\nto execute Ruby code.\n<p>Measure …\n"],["Benchmark::Tms","","classes/Benchmark/Tms.html","","<p>A data object, representing the times associated with a benchmark\nmeasurement.\n"],["BigDecimal","","classes/BigDecimal.html","","<p>BigDecimal provides arbitrary-precision floating point decimal arithmetic.\n<p>Introduction\n<p>Ruby provides built-in …\n"],["BigMath","","classes/BigMath.html","","<p>Provides mathematical functions.\n<p>Example:\n\n<pre><code>require &quot;bigdecimal/math&quot;\n\ninclude BigMath\n\na = BigDecimal((PI(100)/2).to_s) ...\n</code></pre>\n"],["Binding","","classes/Binding.html","","<p>Objects of class <code>Binding</code> encapsulate the execution context at\nsome particular place in the code and retain …\n"],["Bundler","","classes/Bundler.html","","<p>frozen_string_literal: true\n<p>frozen_string_literal: true\n<p>frozen_string_literal: true\n"],["Bundler::APIResponseMismatchError","","classes/Bundler/APIResponseMismatchError.html","",""],["Bundler::BuildMetadata","","classes/Bundler/BuildMetadata.html","","<p>Represents metadata from when the Bundler gem was built.\n"],["Bundler::BundlerError","","classes/Bundler/BundlerError.html","",""],["Bundler::CLI","","classes/Bundler/CLI.html","",""],["Bundler::CLI::Add","","classes/Bundler/CLI/Add.html","",""],["Bundler::CLI::Binstubs","","classes/Bundler/CLI/Binstubs.html","",""],["Bundler::CLI::Cache","","classes/Bundler/CLI/Cache.html","",""],["Bundler::CLI::Check","","classes/Bundler/CLI/Check.html","",""],["Bundler::CLI::Clean","","classes/Bundler/CLI/Clean.html","",""],["Bundler::CLI::Common","","classes/Bundler/CLI/Common.html","",""],["Bundler::CLI::Config","","classes/Bundler/CLI/Config.html","",""],["Bundler::CLI::Console","","classes/Bundler/CLI/Console.html","",""],["Bundler::CLI::Doctor","","classes/Bundler/CLI/Doctor.html","",""],["Bundler::CLI::Exec","","classes/Bundler/CLI/Exec.html","",""],["Bundler::CLI::Gem","","classes/Bundler/CLI/Gem.html","",""],["Bundler::CLI::Info","","classes/Bundler/CLI/Info.html","",""],["Bundler::CLI::Init","","classes/Bundler/CLI/Init.html","",""],["Bundler::CLI::Inject","","classes/Bundler/CLI/Inject.html","",""],["Bundler::CLI::Install","","classes/Bundler/CLI/Install.html","",""],["Bundler::CLI::Issue","","classes/Bundler/CLI/Issue.html","",""],["Bundler::CLI::List","","classes/Bundler/CLI/List.html","",""],["Bundler::CLI::Lock","","classes/Bundler/CLI/Lock.html","",""],["Bundler::CLI::Open","","classes/Bundler/CLI/Open.html","",""],["Bundler::CLI::Outdated","","classes/Bundler/CLI/Outdated.html","",""],["Bundler::CLI::Package","","classes/Bundler/CLI/Package.html","",""],["Bundler::CLI::Platform","","classes/Bundler/CLI/Platform.html","",""],["Bundler::CLI::Plugin","","classes/Bundler/CLI/Plugin.html","",""],["Bundler::CLI::Pristine","","classes/Bundler/CLI/Pristine.html","",""],["Bundler::CLI::Remove","","classes/Bundler/CLI/Remove.html","",""],["Bundler::CLI::Show","","classes/Bundler/CLI/Show.html","",""],["Bundler::CLI::Update","","classes/Bundler/CLI/Update.html","",""],["Bundler::CLI::Viz","","classes/Bundler/CLI/Viz.html","",""],["Bundler::CompactIndexClient","","classes/Bundler/CompactIndexClient.html","",""],["Bundler::CompactIndexClient::Cache","","classes/Bundler/CompactIndexClient/Cache.html","",""],["Bundler::CompactIndexClient::Error","","classes/Bundler/CompactIndexClient/Error.html","",""],["Bundler::CompactIndexClient::Updater","","classes/Bundler/CompactIndexClient/Updater.html","",""],["Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","","classes/Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html","",""],["Bundler::CurrentRuby","","classes/Bundler/CurrentRuby.html","",""],["Bundler::CyclicDependencyError","","classes/Bundler/CyclicDependencyError.html","",""],["Bundler::Definition","","classes/Bundler/Definition.html","",""],["Bundler::DepProxy","","classes/Bundler/DepProxy.html","",""],["Bundler::Dependency","","classes/Bundler/Dependency.html","",""],["Bundler::Deployment","","classes/Bundler/Deployment.html","",""],["Bundler::Deprecate","","classes/Bundler/Deprecate.html","",""],["Bundler::DeprecatedError","","classes/Bundler/DeprecatedError.html","",""],["Bundler::Dsl","","classes/Bundler/Dsl.html","",""],["Bundler::Dsl::DSLError","","classes/Bundler/Dsl/DSLError.html","",""],["Bundler::EndpointSpecification","","classes/Bundler/EndpointSpecification.html","","<p>used for Creating Specifications from the Gemcutter Endpoint\n"],["Bundler::Env","","classes/Bundler/Env.html","",""],["Bundler::EnvironmentPreserver","","classes/Bundler/EnvironmentPreserver.html","",""],["Bundler::FeatureFlag","","classes/Bundler/FeatureFlag.html","",""],["Bundler::Fetcher","","classes/Bundler/Fetcher.html","","<p>Handles all the fetching with the rubygems server\n"],["Bundler::Fetcher::AuthenticationRequiredError","","classes/Bundler/Fetcher/AuthenticationRequiredError.html","","<p>This error is raised if HTTP authentication is required, but not provided.\n"],["Bundler::Fetcher::BadAuthenticationError","","classes/Bundler/Fetcher/BadAuthenticationError.html","","<p>This error is raised if HTTP authentication is provided, but incorrect.\n"],["Bundler::Fetcher::Base","","classes/Bundler/Fetcher/Base.html","",""],["Bundler::Fetcher::CertificateFailureError","","classes/Bundler/Fetcher/CertificateFailureError.html","","<p>This is the error raised if OpenSSL fails the cert verification\n"],["Bundler::Fetcher::CompactIndex","","classes/Bundler/Fetcher/CompactIndex.html","",""],["Bundler::Fetcher::Dependency","","classes/Bundler/Fetcher/Dependency.html","",""],["Bundler::Fetcher::Downloader","","classes/Bundler/Fetcher/Downloader.html","",""],["Bundler::Fetcher::FallbackError","","classes/Bundler/Fetcher/FallbackError.html","","<p>This error is raised if the API returns a 413 (only printed in verbose)\n"],["Bundler::Fetcher::Index","","classes/Bundler/Fetcher/Index.html","",""],["Bundler::Fetcher::NetworkDownError","","classes/Bundler/Fetcher/NetworkDownError.html","","<p>This error is raised when it looks like the network is down\n"],["Bundler::Fetcher::SSLError","","classes/Bundler/Fetcher/SSLError.html","","<p>This is the error raised when a source is HTTPS and OpenSSL didn&#39;t load\n"],["Bundler::FileUtils","","classes/Bundler/FileUtils.html","","<p>frozen_string_literal: true\n<p>fileutils.rb\n<p>Copyright © 2000-2007 Minero Aoki\n"],["Bundler::FileUtils::DryRun","","classes/Bundler/FileUtils/DryRun.html","","<p>This module has all methods of Bundler::FileUtils module, but never changes\nfiles/directories, with printing …\n"],["Bundler::FileUtils::LowMethods","","classes/Bundler/FileUtils/LowMethods.html","",""],["Bundler::FileUtils::NoWrite","","classes/Bundler/FileUtils/NoWrite.html","","<p>This module has all methods of Bundler::FileUtils module, but never changes\nfiles/directories.  This …\n"],["Bundler::FileUtils::StreamUtils_","","classes/Bundler/FileUtils/StreamUtils_.html","",""],["Bundler::FileUtils::Verbose","","classes/Bundler/FileUtils/Verbose.html","","<p>This module has all methods of Bundler::FileUtils module, but it outputs\nmessages before acting.  This …\n"],["Bundler::FriendlyErrors","","classes/Bundler/FriendlyErrors.html","",""],["Bundler::GemHelper","","classes/Bundler/GemHelper.html","",""],["Bundler::GemHelper::Rake","","classes/Bundler/GemHelper/Rake.html","",""],["Bundler::GemHelpers","","classes/Bundler/GemHelpers.html","",""],["Bundler::GemHelpers::PlatformMatch","","classes/Bundler/GemHelpers/PlatformMatch.html","",""],["Bundler::GemInstaller","","classes/Bundler/GemInstaller.html","",""],["Bundler::GemNotFound","","classes/Bundler/GemNotFound.html","",""],["Bundler::GemRemoteFetcher","","classes/Bundler/GemRemoteFetcher.html","","<p>Adds support for setting custom HTTP headers when fetching gems from the\nserver.\n<p>TODO: Get rid of this …\n"],["Bundler::GemRequireError","","classes/Bundler/GemRequireError.html","",""],["Bundler::GemVersionPromoter","","classes/Bundler/GemVersionPromoter.html","","<p>This class contains all of the logic for determining the next version of a\nGem to update to based on …\n"],["Bundler::Gemdeps","","classes/Bundler/Gemdeps.html","",""],["Bundler::GemfileError","","classes/Bundler/GemfileError.html","",""],["Bundler::GemfileEvalError","","classes/Bundler/GemfileEvalError.html","",""],["Bundler::GemfileLockNotFound","","classes/Bundler/GemfileLockNotFound.html","",""],["Bundler::GemfileNotFound","","classes/Bundler/GemfileNotFound.html","",""],["Bundler::GemspecError","","classes/Bundler/GemspecError.html","",""],["Bundler::GenericSystemCallError","","classes/Bundler/GenericSystemCallError.html","",""],["Bundler::GitError","","classes/Bundler/GitError.html","",""],["Bundler::Graph","","classes/Bundler/Graph.html","",""],["Bundler::Graph::GraphVizClient","","classes/Bundler/Graph/GraphVizClient.html","",""],["Bundler::HTTPError","","classes/Bundler/HTTPError.html","",""],["Bundler::Index","","classes/Bundler/Index.html","",""],["Bundler::Injector","","classes/Bundler/Injector.html","",""],["Bundler::InstallError","","classes/Bundler/InstallError.html","",""],["Bundler::InstallHookError","","classes/Bundler/InstallHookError.html","",""],["Bundler::Installer","","classes/Bundler/Installer.html","",""],["Bundler::InvalidOption","","classes/Bundler/InvalidOption.html","",""],["Bundler::LazySpecification","","classes/Bundler/LazySpecification.html","",""],["Bundler::LazySpecification::Identifier","","classes/Bundler/LazySpecification/Identifier.html","",""],["Bundler::LockfileError","","classes/Bundler/LockfileError.html","",""],["Bundler::LockfileGenerator","","classes/Bundler/LockfileGenerator.html","",""],["Bundler::LockfileParser","","classes/Bundler/LockfileParser.html","",""],["Bundler::MarshalError","","classes/Bundler/MarshalError.html","",""],["Bundler::MatchPlatform","","classes/Bundler/MatchPlatform.html","",""],["Bundler::MirrorSockets","","classes/Bundler/MirrorSockets.html","","<p>Class used to build the list of sockets that correspond to\n\n<pre><code>a given mirror.</code></pre>\n<p>One mirror may correspond to …\n"],["Bundler::Molinillo","","classes/Bundler/Molinillo.html","","<p>Bundler::Molinillo is a generic dependency resolution algorithm.\n<p>frozen_string_literal: true\n<p>frozen_string_literal …\n"],["Bundler::Molinillo::CircularDependencyError","","classes/Bundler/Molinillo/CircularDependencyError.html","","<p>An error caused by attempting to fulfil a dependency that was circular\n<p>@note This exception will be thrown …\n"],["Bundler::Molinillo::Compatibility","","classes/Bundler/Molinillo/Compatibility.html","","<p>Hacks needed for old Ruby versions.\n"],["Bundler::Molinillo::Delegates","","classes/Bundler/Molinillo/Delegates.html","","<p>@!visibility private\n"],["Bundler::Molinillo::Delegates::ResolutionState","","classes/Bundler/Molinillo/Delegates/ResolutionState.html","","<p>Delegates all {Bundler::Molinillo::ResolutionState} methods to a `#state`\nproperty.\n"],["Bundler::Molinillo::Delegates::SpecificationProvider","","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html","","<p>Delegates all {Bundler::Molinillo::SpecificationProvider} methods to a\n`#specification_provider` property. …\n"],["Bundler::Molinillo::DependencyGraph","","classes/Bundler/Molinillo/DependencyGraph.html","","<p>A directed acyclic graph that is tuned to hold named dependencies\n"],["Bundler::Molinillo::DependencyGraph::Action","","classes/Bundler/Molinillo/DependencyGraph/Action.html","","<p>An action that modifies a {DependencyGraph} that is reversible. @abstract\n"],["Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html","","<p>@!visibility private (see DependencyGraph#add_edge_no_circular)\n"],["Bundler::Molinillo::DependencyGraph::DeleteEdge","","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html","","<p>@!visibility private (see DependencyGraph#delete_edge)\n"],["Bundler::Molinillo::DependencyGraph::DetachVertexNamed","","classes/Bundler/Molinillo/DependencyGraph/DetachVertexNamed.html","","<p>@!visibility private @see DependencyGraph#detach_vertex_named\n"],["Bundler::Molinillo::DependencyGraph::Log","","classes/Bundler/Molinillo/DependencyGraph/Log.html","","<p>A log for dependency graph actions\n"],["Bundler::Molinillo::DependencyGraph::Tag","","classes/Bundler/Molinillo/DependencyGraph/Tag.html","","<p>@!visibility private @see DependencyGraph#tag\n"],["Bundler::Molinillo::DependencyGraph::Vertex","","classes/Bundler/Molinillo/DependencyGraph/Vertex.html","","<p>A vertex in a {DependencyGraph} that encapsulates a {#name} and a\n{#payload}\n"],["Bundler::Molinillo::DependencyState","","classes/Bundler/Molinillo/DependencyState.html","","<p>A state that encapsulates a set of {#requirements} with an {Array} of\npossibilities\n"],["Bundler::Molinillo::NoSuchDependencyError","","classes/Bundler/Molinillo/NoSuchDependencyError.html","","<p>An error caused by searching for a dependency that is completely unknown,\ni.e. has no versions available …\n"],["Bundler::Molinillo::PossibilityState","","classes/Bundler/Molinillo/PossibilityState.html","","<p>A state that encapsulates a single possibility to fulfill the given\n{#requirement}\n"],["Bundler::Molinillo::ResolutionState","","classes/Bundler/Molinillo/ResolutionState.html","",""],["Bundler::Molinillo::Resolver","","classes/Bundler/Molinillo/Resolver.html","","<p>This class encapsulates a dependency resolver. The resolver is responsible\nfor determining which set …\n"],["Bundler::Molinillo::Resolver::Resolution","","classes/Bundler/Molinillo/Resolver/Resolution.html","","<p>A specific resolution from a given {Resolver}\n"],["Bundler::Molinillo::Resolver::Resolution::Conflict","","classes/Bundler/Molinillo/Resolver/Resolution/Conflict.html","",""],["Bundler::Molinillo::Resolver::Resolution::PossibilitySet","","classes/Bundler/Molinillo/Resolver/Resolution/PossibilitySet.html","",""],["Bundler::Molinillo::Resolver::Resolution::UnwindDetails","","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html","",""],["Bundler::Molinillo::ResolverError","","classes/Bundler/Molinillo/ResolverError.html","","<p>An error that occurred during the resolution process\n"],["Bundler::Molinillo::SpecificationProvider","","classes/Bundler/Molinillo/SpecificationProvider.html","","<p>Provides information about specifcations and dependencies to the resolver,\nallowing the {Resolver} class …\n"],["Bundler::Molinillo::UI","","classes/Bundler/Molinillo/UI.html","","<p>Conveys information about the resolution process to a user.\n"],["Bundler::Molinillo::VersionConflict","","classes/Bundler/Molinillo/VersionConflict.html","","<p>An error caused by conflicts in version\n"],["Bundler::NoSpaceOnDeviceError","","classes/Bundler/NoSpaceOnDeviceError.html","",""],["Bundler::OperationNotSupportedError","","classes/Bundler/OperationNotSupportedError.html","",""],["Bundler::ParallelInstaller","","classes/Bundler/ParallelInstaller.html","",""],["Bundler::ParallelInstaller::SpecInstallation","","classes/Bundler/ParallelInstaller/SpecInstallation.html","",""],["Bundler::PathError","","classes/Bundler/PathError.html","",""],["Bundler::PermissionError","","classes/Bundler/PermissionError.html","",""],["Bundler::Persistent","","classes/Bundler/Persistent.html","",""],["Bundler::Persistent::Net","","classes/Bundler/Persistent/Net.html","",""],["Bundler::Persistent::Net::HTTP","","classes/Bundler/Persistent/Net/HTTP.html","",""],["Bundler::Persistent::Net::HTTP::Persistent","","classes/Bundler/Persistent/Net/HTTP/Persistent.html","","<p>Persistent connections for Net::HTTP\n<p>Bundler::Persistent::Net::HTTP::Persistent maintains persistent connections\n…\n"],["Bundler::Persistent::Net::HTTP::Persistent::Error","","classes/Bundler/Persistent/Net/HTTP/Persistent/Error.html","","<p>Error class for errors raised by\nBundler::Persistent::Net::HTTP::Persistent.  Various SystemCallErrors …\n"],["Bundler::Persistent::Net::HTTP::Persistent::SSLReuse","","classes/Bundler/Persistent/Net/HTTP/Persistent/SSLReuse.html","","<p>This Net::HTTP subclass adds SSL session reuse and Server Name Indication\n(SNI) RFC 3546.\n<p>DO NOT DEPEND …\n"],["Bundler::PersistentHTTP","","classes/Bundler/PersistentHTTP.html","",""],["Bundler::Plugin","","classes/Bundler/Plugin.html","","<p>This is the interfacing class represents the API that we intend to provide\nthe plugins to use.\n<p>For plugins …\n"],["Bundler::Plugin::API","","classes/Bundler/Plugin/API.html","",""],["Bundler::Plugin::API::Source","","classes/Bundler/Plugin/API/Source.html","","<p>This class provides the base to build source plugins All the method here\nare required to build a source …\n"],["Bundler::Plugin::DSL","","classes/Bundler/Plugin/DSL.html","","<p>Dsl to parse the Gemfile looking for plugins to install\n"],["Bundler::Plugin::DSL::PluginGemfileError","","classes/Bundler/Plugin/DSL/PluginGemfileError.html","",""],["Bundler::Plugin::Events","","classes/Bundler/Plugin/Events.html","",""],["Bundler::Plugin::Index","","classes/Bundler/Plugin/Index.html","",""],["Bundler::Plugin::Index::CommandConflict","","classes/Bundler/Plugin/Index/CommandConflict.html","",""],["Bundler::Plugin::Index::SourceConflict","","classes/Bundler/Plugin/Index/SourceConflict.html","",""],["Bundler::Plugin::Installer","","classes/Bundler/Plugin/Installer.html","",""],["Bundler::Plugin::Installer::Git","","classes/Bundler/Plugin/Installer/Git.html","",""],["Bundler::Plugin::MalformattedPlugin","","classes/Bundler/Plugin/MalformattedPlugin.html","",""],["Bundler::Plugin::SourceList","","classes/Bundler/Plugin/SourceList.html","",""],["Bundler::Plugin::UndefinedCommandError","","classes/Bundler/Plugin/UndefinedCommandError.html","",""],["Bundler::Plugin::UnknownSourceError","","classes/Bundler/Plugin/UnknownSourceError.html","",""],["Bundler::PluginError","","classes/Bundler/PluginError.html","",""],["Bundler::ProcessLock","","classes/Bundler/ProcessLock.html","",""],["Bundler::ProductionError","","classes/Bundler/ProductionError.html","",""],["Bundler::RemoteSpecification","","classes/Bundler/RemoteSpecification.html","","<p>Represents a lazily loaded gem specification, where the full specification\nis on the source server in …\n"],["Bundler::Resolver","","classes/Bundler/Resolver.html","",""],["Bundler::Resolver::SpecGroup","","classes/Bundler/Resolver/SpecGroup.html","",""],["Bundler::Retry","","classes/Bundler/Retry.html","","<p>General purpose class for retrying code that may fail\n"],["Bundler::RubyDsl","","classes/Bundler/RubyDsl.html","",""],["Bundler::RubyVersion","","classes/Bundler/RubyVersion.html","",""],["Bundler::RubyVersionMismatch","","classes/Bundler/RubyVersionMismatch.html","",""],["Bundler::Runtime","","classes/Bundler/Runtime.html","",""],["Bundler::SecurityError","","classes/Bundler/SecurityError.html","",""],["Bundler::Settings","","classes/Bundler/Settings.html","",""],["Bundler::Settings::Mirror","","classes/Bundler/Settings/Mirror.html","","<p>A mirror\n<p>Contains both the uri that should be used as a mirror and the\n\n<pre><code>fallback timeout which will be used ...\n</code></pre>\n"],["Bundler::Settings::MirrorConfig","","classes/Bundler/Settings/MirrorConfig.html","","<p>Class used to parse one configuration line\n<p>Gets the configuration line and the value.\n\n<pre><code>This object provides ...\n</code></pre>\n"],["Bundler::Settings::Mirrors","","classes/Bundler/Settings/Mirrors.html","","<p>Class used to build the mirror set and then find a mirror for a given URI\n<p>@param prober [Prober object, …\n"],["Bundler::Settings::TCPSocketProbe","","classes/Bundler/Settings/TCPSocketProbe.html","","<p>Class used for probing TCP availability for a given mirror.\n"],["Bundler::Settings::Validator","","classes/Bundler/Settings/Validator.html","",""],["Bundler::Settings::Validator::Rule","","classes/Bundler/Settings/Validator/Rule.html","",""],["Bundler::SharedHelpers","","classes/Bundler/SharedHelpers.html","",""],["Bundler::SimilarityDetector","","classes/Bundler/SimilarityDetector.html","",""],["Bundler::SocketAddress","","classes/Bundler/SocketAddress.html","","<p>Socket address builder.\n<p>Given a socket type, a host and a port,\n\n<pre><code>provides a method to build sockaddr string\n</code></pre>\n"],["Bundler::Source","","classes/Bundler/Source.html","",""],["Bundler::Source::Gemspec","","classes/Bundler/Source/Gemspec.html","",""],["Bundler::Source::Git","","classes/Bundler/Source/Git.html","",""],["Bundler::Source::Git::GitCommandError","","classes/Bundler/Source/Git/GitCommandError.html","",""],["Bundler::Source::Git::GitNotAllowedError","","classes/Bundler/Source/Git/GitNotAllowedError.html","",""],["Bundler::Source::Git::GitNotInstalledError","","classes/Bundler/Source/Git/GitNotInstalledError.html","",""],["Bundler::Source::Git::GitProxy","","classes/Bundler/Source/Git/GitProxy.html","","<p>The GitProxy is responsible to interact with git repositories. All actions\nrequired by the Git source …\n"],["Bundler::Source::Git::MissingGitRevisionError","","classes/Bundler/Source/Git/MissingGitRevisionError.html","",""],["Bundler::Source::Metadata","","classes/Bundler/Source/Metadata.html","",""],["Bundler::Source::Path","","classes/Bundler/Source/Path.html","",""],["Bundler::Source::Path::Installer","","classes/Bundler/Source/Path/Installer.html","",""],["Bundler::SourceList","","classes/Bundler/SourceList.html","",""],["Bundler::SpecSet","","classes/Bundler/SpecSet.html","",""],["Bundler::Standalone","","classes/Bundler/Standalone.html","",""],["Bundler::StubSpecification","","classes/Bundler/StubSpecification.html","",""],["Bundler::SudoNotPermittedError","","classes/Bundler/SudoNotPermittedError.html","",""],["Bundler::TemporaryResourceError","","classes/Bundler/TemporaryResourceError.html","",""],["Bundler::Thor","","classes/Bundler/Thor.html","",""],["Bundler::Thor::Actions","","classes/Bundler/Thor/Actions.html","",""],["Bundler::Thor::Actions::CapturableERB","","classes/Bundler/Thor/Actions/CapturableERB.html","","<p>Bundler::Thor::Actions#capture depends on what kind of buffer is used in\nERB. Thus CapturableERB fixes …\n"],["Bundler::Thor::Actions::ClassMethods","","classes/Bundler/Thor/Actions/ClassMethods.html","",""],["Bundler::Thor::AmbiguousCommandError","","classes/Bundler/Thor/AmbiguousCommandError.html","",""],["Bundler::Thor::AmbiguousTaskError","","classes/Bundler/Thor/AmbiguousCommandError.html","",""],["Bundler::Thor::Base","","classes/Bundler/Thor/Base.html","",""],["Bundler::Thor::Base::ClassMethods","","classes/Bundler/Thor/Base/ClassMethods.html","",""],["Bundler::Thor::Command","","classes/Bundler/Thor/Command.html","",""],["Bundler::Thor::CoreExt","","classes/Bundler/Thor/CoreExt.html","",""],["Bundler::Thor::CoreExt::OrderedHash","","classes/Bundler/Thor/CoreExt/OrderedHash.html","",""],["Bundler::Thor::DynamicCommand","","classes/Bundler/Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Bundler::Thor::DynamicTask","","classes/Bundler/Thor/DynamicCommand.html","","<p>A dynamic command that handles method missing scenarios.\n"],["Bundler::Thor::Error","","classes/Bundler/Thor/Error.html","","<p>Bundler::Thor::Error is raised when it&#39;s caused by wrong usage of thor\nclasses. Those errors have …\n"],["Bundler::Thor::Group","","classes/Bundler/Thor/Group.html","","<p>Bundler::Thor has a special class called Bundler::Thor::Group. The main\ndifference to Bundler::Thor class …\n"],["Bundler::Thor::HiddenCommand","","classes/Bundler/Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Bundler::Thor::HiddenTask","","classes/Bundler/Thor/HiddenCommand.html","","<p>A command that is hidden in help messages but still invocable.\n"],["Bundler::Thor::Invocation","","classes/Bundler/Thor/Invocation.html","",""],["Bundler::Thor::Invocation::ClassMethods","","classes/Bundler/Thor/Invocation/ClassMethods.html","",""],["Bundler::Thor::InvocationError","","classes/Bundler/Thor/InvocationError.html","","<p>Raised when a command was found, but not invoked properly.\n"],["Bundler::Thor::LineEditor","","classes/Bundler/Thor/LineEditor.html","",""],["Bundler::Thor::LineEditor::Basic","","classes/Bundler/Thor/LineEditor/Basic.html","",""],["Bundler::Thor::LineEditor::Readline","","classes/Bundler/Thor/LineEditor/Readline.html","",""],["Bundler::Thor::LineEditor::Readline::PathCompletion","","classes/Bundler/Thor/LineEditor/Readline/PathCompletion.html","",""],["Bundler::Thor::MalformattedArgumentError","","classes/Bundler/Thor/MalformattedArgumentError.html","",""],["Bundler::Thor::RakeCompat","","classes/Bundler/Thor/RakeCompat.html","","<p>Adds a compatibility layer to your Bundler::Thor classes which allows you\nto use rake package tasks. …\n"],["Bundler::Thor::RakeCompat::Rake","","classes/Bundler/Thor/RakeCompat/Rake.html","",""],["Bundler::Thor::RequiredArgumentMissingError","","classes/Bundler/Thor/RequiredArgumentMissingError.html","",""],["Bundler::Thor::Shell","","classes/Bundler/Thor/Shell.html","",""],["Bundler::Thor::Shell::Basic","","classes/Bundler/Thor/Shell/Basic.html","",""],["Bundler::Thor::Shell::Color","","classes/Bundler/Thor/Shell/Color.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check\nBundler::Thor::Shell::Basic …\n"],["Bundler::Thor::Shell::HTML","","classes/Bundler/Thor/Shell/HTML.html","","<p>Inherit from Bundler::Thor::Shell::Basic and add set_color behavior. Check\nBundler::Thor::Shell::Basic …\n"],["Bundler::Thor::Task","","classes/Bundler/Thor/Command.html","",""],["Bundler::Thor::UndefinedCommandError","","classes/Bundler/Thor/UndefinedCommandError.html","","<p>Raised when a command was not found.\n"],["Bundler::Thor::UndefinedTaskError","","classes/Bundler/Thor/UndefinedCommandError.html","","<p>Raised when a command was not found.\n"],["Bundler::Thor::UnknownArgumentError","","classes/Bundler/Thor/UnknownArgumentError.html","",""],["Bundler::Thor::Util","","classes/Bundler/Thor/Util.html","","<p>This module holds several utilities:\n<p>1) Methods to convert thor namespaces to constants and vice-versa. …\n"],["Bundler::ThreadCreationError","","classes/Bundler/ThreadCreationError.html","",""],["Bundler::UI","","classes/Bundler/UI.html","",""],["Bundler::UI::RGProxy","","classes/Bundler/UI/RGProxy.html","",""],["Bundler::UI::Shell","","classes/Bundler/UI/Shell.html","",""],["Bundler::UI::Silent","","classes/Bundler/UI/Silent.html","",""],["Bundler::URICredentialsFilter","","classes/Bundler/URICredentialsFilter.html","",""],["Bundler::VersionConflict","","classes/Bundler/VersionConflict.html","","<p>Internal error, should be rescued\n"],["Bundler::VersionRanges","","classes/Bundler/VersionRanges.html","",""],["Bundler::VersionRanges::ReqR","","classes/Bundler/VersionRanges/ReqR.html","",""],["Bundler::VirtualProtocolError","","classes/Bundler/VirtualProtocolError.html","",""],["Bundler::Worker","","classes/Bundler/Worker.html","",""],["Bundler::Worker::WrappedException","","classes/Bundler/Worker/WrappedException.html","",""],["Bundler::YAMLSerializer","","classes/Bundler/YAMLSerializer.html","","<p>A stub yaml serializer that can handle only hashes and strings (as of now).\n"],["Bundler::YamlLibrarySyntaxError","","classes/Psych/SyntaxError.html","",""],["Bundler::YamlSyntaxError","","classes/Bundler/YamlSyntaxError.html","",""],["CGI","","classes/CGI.html","","<p>Overview\n<p>The Common Gateway Interface (CGI) is a simple protocol for passing an HTTP\nrequest from a web …\n"],["CGI::Cookie","","classes/CGI/Cookie.html","","<p>Class representing an HTTP cookie.\n<p>In addition to its specific fields and methods, a Cookie instance is …\n"],["CGI::HTML3","","classes/CGI/HTML3.html","",""],["CGI::HTML4","","classes/CGI/HTML4.html","",""],["CGI::HTML4Fr","","classes/CGI/HTML4Fr.html","",""],["CGI::HTML4Tr","","classes/CGI/HTML4Tr.html","",""],["CGI::HTML5","","classes/CGI/HTML5.html","",""],["CGI::HtmlExtension","","classes/CGI/HtmlExtension.html","","<p>Mixin module providing HTML generation methods.\n<p>For example,\n\n<pre><code>cgi.a(&quot;http://www.example.com&quot;) { &quot;Example&quot; ...</code></pre>\n"],["CGI::InvalidEncoding","","classes/CGI/InvalidEncoding.html","","<p>Exception raised when there is an invalid encoding detected\n"],["CGI::QueryExtension","","classes/CGI/QueryExtension.html","","<p>Mixin module that provides the following:\n<p>Access to the CGI environment variables as methods.  See documentation …\n"],["CGI::Session","","classes/CGI/Session.html","","<p>Overview\n<p>This file provides the CGI::Session class, which provides session support\nfor CGI scripts.   …\n"],["CGI::Session::FileStore","","classes/CGI/Session/FileStore.html","","<p>File-based session storage class.\n<p>Implements session storage as a flat file of &#39;key=value&#39; values. …\n"],["CGI::Session::MemoryStore","","classes/CGI/Session/MemoryStore.html","","<p>In-memory session storage class.\n<p>Implements session storage as a global in-memory hash.  Session data …\n"],["CGI::Session::NullStore","","classes/CGI/Session/NullStore.html","","<p>Dummy session storage class.\n<p>Implements session storage place holder.  No actual storage will be done. …\n"],["CGI::Session::PStore","","classes/CGI/Session/PStore.html","","<p>PStore-based session storage class.\n<p>This builds upon the top-level PStore class provided by the library …\n"],["CGI::Util","","classes/CGI/Util.html","",""],["CMath","","classes/CMath.html","","<p>frozen_string_literal: true\n<p>Trigonometric and transcendental functions for complex numbers.\n<p>CMath is a …\n"],["CSV","","classes/CSV.html","","<p>This class provides a complete interface to CSV files and data.  It offers\ntools to enable you to read …\n"],["CSV::DeleteSuffix","","classes/CSV/DeleteSuffix.html","",""],["CSV::FieldsConverter","","classes/CSV/FieldsConverter.html","",""],["CSV::MalformedCSVError","","classes/CSV/MalformedCSVError.html","","<p>The error thrown when the parser encounters illegal CSV formatting.\n"],["CSV::MatchP","","classes/CSV/MatchP.html","",""],["CSV::Parser","","classes/CSV/Parser.html","",""],["CSV::Parser::InputsScanner","","classes/CSV/Parser/InputsScanner.html","",""],["CSV::Parser::InvalidEncoding","","classes/CSV/Parser/InvalidEncoding.html","",""],["CSV::Parser::Scanner","","classes/CSV/Parser/Scanner.html","",""],["CSV::Parser::UnoptimizedStringIO","","classes/CSV/Parser/UnoptimizedStringIO.html","",""],["CSV::Row","","classes/CSV/Row.html","","<p>A CSV::Row is part Array and part Hash.  It retains an order for the fields\nand allows duplicates just …\n"],["CSV::Table","","classes/CSV/Table.html","","<p>A CSV::Table is a two-dimensional data structure for representing CSV\ndocuments.  Tables allow you to …\n"],["CSV::Writer","","classes/CSV/Writer.html","",""],["Capistrano","","classes/Capistrano.html","",""],["Class","","classes/Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n<p>Classes in Ruby are first-class objects—each is …\n"],["ClosedQueueError","","classes/ClosedQueueError.html","","<p>The exception class which will be raised when pushing into a closed Queue. \nSee Queue#close and SizedQueue#close …\n"],["Comparable","","classes/Comparable.html","","<p>The <code>Comparable</code> mixin is used by classes whose objects may be\nordered. The class must define the <code>&lt;=&gt;</code> …\n"],["Complex","","classes/Complex.html","","<p>A complex number can be represented as a paired real number with imaginary\nunit; a+bi.  Where a is real …\n"],["ConditionVariable","","classes/ConditionVariable.html","","<p>ConditionVariable objects augment class Mutex. Using condition variables,\nit is possible to suspend while …\n"],["Continuation","","classes/Continuation.html","","<p>Continuation objects are generated by Kernel#callcc, after having\n+require+d <em>continuation</em>. They hold …\n"],["Coverage","","classes/Coverage.html","","<p>Coverage provides coverage measurement feature for Ruby. This feature is\nexperimental, so these APIs …\n"],["DBM","","classes/DBM.html","","<p>Introduction\n<p>The DBM class provides a wrapper to a Unix-style dbm or Database Manager\nlibrary.\n<p>Dbm databases …\n"],["DBMError","","classes/DBMError.html","","<p>Exception class used to return errors from the dbm library.\n"],["DEBUGGER__","","classes/DEBUGGER__.html","","<p>This library provides debugging functionality to Ruby.\n<p>To add a debugger to your code, start by requiring …\n"],["DEBUGGER__::Thread","","classes/DEBUGGER__/Thread.html","",""],["DRb","","classes/DRb.html","","<p>Overview\n<p>dRuby is a distributed object system for Ruby.  It is written in pure Ruby\nand uses its own protocol. …\n"],["DRb::DRbArray","","classes/DRb/DRbArray.html","","<p>An Array wrapper that can be sent to another server via DRb.\n<p>All entries in the array will be dumped or …\n"],["DRb::DRbBadScheme","","classes/DRb/DRbBadScheme.html","","<p>Error raised by a dRuby protocol when it doesn&#39;t support the scheme\nspecified in a URI.  See DRb::DRbProtocol …\n"],["DRb::DRbBadURI","","classes/DRb/DRbBadURI.html","","<p>Error raised by the DRbProtocol module when it cannot find any protocol\nimplementation support the scheme …\n"],["DRb::DRbConn","","classes/DRb/DRbConn.html","","<p>Class handling the connection between a DRbObject and the server the real\nobject lives on.\n<p>This class …\n"],["DRb::DRbConn::Thread","","classes/DRb/DRbConn/Thread.html","",""],["DRb::DRbConnError","","classes/DRb/DRbConnError.html","","<p>Error raised when an error occurs on the underlying communication protocol.\n"],["DRb::DRbError","","classes/DRb/DRbError.html","","<p>Superclass of all errors raised in the DRb module.\n"],["DRb::DRbIdConv","","classes/DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbIdConv","","classes/DRb/DRbIdConv.html","","<p>Class responsible for converting between an object and its id.\n<p>This, the default implementation, uses …\n"],["DRb::DRbMessage","","classes/DRb/DRbMessage.html","","<p>Handler for sending and receiving drb messages.\n<p>This takes care of the low-level marshalling and unmarshalling …\n"],["DRb::DRbObject","","classes/DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObject","","classes/DRb/DRbObject.html","","<p>Object wrapping a reference to a remote drb object.\n<p>Method calls on this object are relayed to the remote …\n"],["DRb::DRbObservable","","classes/DRb/DRbObservable.html","","<p>The Observable module extended to DRb.  See Observable for details.\n"],["DRb::DRbProtocol","","classes/DRb/DRbProtocol.html","",""],["DRb::DRbRemoteError","","classes/DRb/DRbRemoteError.html","","<p>An exception wrapping an error object\n"],["DRb::DRbSSLSocket","","classes/DRb/DRbSSLSocket.html","","<p>The protocol for DRb over an SSL socket\n<p>The URI for a DRb socket over SSL is:\n<code>drbssl://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbSSLSocket::SSLConfig","","classes/DRb/DRbSSLSocket/SSLConfig.html","","<p>SSLConfig handles the needed SSL information for establishing a\nDRbSSLSocket connection, including generating …\n"],["DRb::DRbServer","","classes/DRb/DRbServer.html","","<p>Class representing a drb server instance.\n<p>A DRbServer must be running in the local process before any …\n"],["DRb::DRbServer::InvokeMethod18Mixin","","classes/DRb/DRbServer/InvokeMethod18Mixin.html","",""],["DRb::DRbServerNotFound","","classes/DRb/DRbServerNotFound.html","","<p>Error raised by the DRb module when an attempt is made to refer to the\ncontext&#39;s current drb server …\n"],["DRb::DRbTCPSocket","","classes/DRb/DRbTCPSocket.html","","<p>The default drb protocol which communicates over a TCP socket.\n<p>The DRb TCP protocol URI looks like:\n<code>druby://&lt;host&gt;:&lt;port&gt;?&lt;option&gt;</code> …\n"],["DRb::DRbUNIXSocket","","classes/DRb/DRbUNIXSocket.html","","<p>Implements DRb over a UNIX socket\n<p>DRb UNIX socket URIs look like\n<code>drbunix:&lt;path&gt;?&lt;option&gt;</code>. …\n"],["DRb::DRbUndumped","","classes/DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUndumped","","classes/DRb/DRbUndumped.html","","<p>Mixin module making an object undumpable or unmarshallable.\n<p>If an object which includes this module is …\n"],["DRb::DRbUnknown","","classes/DRb/DRbUnknown.html","","<p>Class wrapping a marshalled object whose type is unknown locally.\n<p>If an object is returned by a method …\n"],["DRb::DRbUnknownError","","classes/DRb/DRbUnknownError.html","","<p>An exception wrapping a DRb::DRbUnknown object\n"],["DRb::ExtServ","","classes/DRb/ExtServ.html","",""],["DRb::ExtServManager","","classes/DRb/ExtServManager.html","",""],["DRb::GW","","classes/DRb/GW.html","","<p>The GW provides a synchronized store for participants in the gateway to\ncommunicate.\n"],["DRb::GWIdConv","","classes/DRb/GWIdConv.html","","<p>Gateway id conversion forms a gateway between different DRb protocols or\nnetworks.\n<p>The gateway needs to …\n"],["DRb::Thread","","classes/DRb/Thread.html","",""],["DRb::TimerIdConv","","classes/DRb/TimerIdConv.html","","<p>Timer id conversion keeps objects alive for a certain amount of time after\ntheir last access.  The default …\n"],["DRb::TimerIdConv::TimerHolder2","","classes/DRb/TimerIdConv/TimerHolder2.html","",""],["DRb::TimerIdConv::TimerHolder2::InvalidIndexError","","classes/DRb/TimerIdConv/TimerHolder2/InvalidIndexError.html","",""],["Data","","classes/Data.html","","<p>This is a deprecated class, base class for C extensions using\nData_Make_Struct or Data_Wrap_Struct.\n"],["Date","","classes/Date.html","","<p>date and datetime class - Tadayoshi Funaba 1998-2011\n<p>&#39;date&#39; provides two classes: Date and DateTime …\n"],["DateTime","","classes/DateTime.html","","<p>DateTime\n<p>A subclass of Date that easily handles date, hour, minute, second, and\noffset.\n<p>DateTime does not …\n"],["Delegator","","classes/Delegator.html","","<p>This library provides three different ways to delegate method calls to an\nobject.  The easiest to use …\n"],["Digest","","classes/Digest.html","","<p>This module provides a framework for message digest libraries.\n<p>You may want to look at OpenSSL::Digest …\n"],["Digest::Base","","classes/Digest/Base.html","","<p>This abstract class provides a common interface to message digest\nimplementation classes written in  …\n"],["Digest::Class","","classes/Digest/Class.html","","<p>This module stands as a base class for digest implementation classes.\n"],["Digest::Instance","","classes/Digest/Instance.html","","<p>This module provides instance methods for a digest implementation object to\ncalculate message digest …\n"],["Digest::MD5","","classes/Digest/MD5.html","","<p>A class for calculating message digests using the MD5 Message-Digest\nAlgorithm by RSA Data Security, …\n"],["Digest::RMD160","","classes/Digest/RMD160.html","","<p>A class for calculating message digests using RIPEMD-160 cryptographic hash\nfunction, designed by Hans …\n"],["Digest::SHA1","","classes/Digest/SHA1.html","","<p>A class for calculating message digests using the SHA-1 Secure Hash\nAlgorithm by NIST (the US&#39; National …\n"],["Dir","","classes/Dir.html","","<p>Objects of class <code>Dir</code> are directory streams representing\ndirectories in the underlying file system. They …\n"],["ENV","","classes/ENV.html","","<p>ENV is a hash-like accessor for environment variables.\n"],["EOFError","","classes/EOFError.html","","<p>Raised by some IO operations when reaching the end of file. Many IO methods\nexist in two forms,\n<p>one that …\n"],["ERB","","classes/ERB.html","",""],["ERB::DefMethod","","classes/ERB/DefMethod.html","","<p>Utility module to define eRuby script as instance method.\n<p>Example\n<p>example.rhtml:\n"],["ERB::Util","","classes/ERB/Util.html","","<p>A utility module for conversion routines, often handy in HTML generation.\n"],["EXCEPTION_TYPE","","classes/EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","classes/EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","classes/EXCEPTION_TYPE.html","",""],["EXCEPTION_TYPE","","classes/EXCEPTION_TYPE.html","",""],["Encoding","","classes/Encoding.html","","<p>An Encoding instance represents a character encoding usable in Ruby. It is\ndefined as a constant under …\n"],["Encoding::CompatibilityError","","classes/Encoding/CompatibilityError.html","","<p>Raised by Encoding and String methods when the source encoding is\nincompatible with the target encoding. …\n"],["Encoding::Converter","","classes/Encoding/Converter.html","","<p>Encoding conversion class.\n"],["Encoding::ConverterNotFoundError","","classes/Encoding/ConverterNotFoundError.html","","<p>Raised by transcoding methods when a named encoding does not correspond\nwith a known converter.\n"],["Encoding::InvalidByteSequenceError","","classes/Encoding/InvalidByteSequenceError.html","","<p>Raised by Encoding and String methods when the string being transcoded\ncontains a byte invalid for the …\n"],["Encoding::UndefinedConversionError","","classes/Encoding/UndefinedConversionError.html","","<p>Raised by Encoding and String methods when a transcoding operation fails.\n"],["EncodingError","","classes/EncodingError.html","","<p>EncodingError is the base class for encoding errors.\n"],["English","","classes/English.html","","<p>frozen_string_literal: true\n\n<pre><code>Include the English library file in a Ruby script, and you can\nreference the ...</code></pre>\n"],["Enumerable","","classes/Enumerable.html","","<p>The <code>Enumerable</code> mixin provides collection classes with several\ntraversal and searching methods, and with …\n"],["Enumerator","","classes/Enumerator.html","","<p>A class which allows both internal and external iteration.\n<p>An Enumerator can be created by the following …\n"],["Enumerator::ArithmeticSequence","","classes/Enumerator/ArithmeticSequence.html","","<p>Enumerator::ArithmeticSequence is a subclass of Enumerator, that is a\nrepresentation of sequences of …\n"],["Enumerator::Chain","","classes/Enumerator/Chain.html","","<p>Enumerator::Chain is a subclass of Enumerator, which represents a chain of\nenumerables that works as …\n"],["Enumerator::Generator","","classes/Enumerator/Generator.html","","<p>Generator\n"],["Enumerator::Lazy","","classes/Enumerator/Lazy.html","","<p>Lazy\n"],["Enumerator::Yielder","","classes/Enumerator/Yielder.html","","<p>Yielder\n"],["Errno","","classes/Errno.html","","<p>Ruby exception objects are subclasses of <code>Exception</code>. However,\noperating systems typically report errors …\n"],["Errno::ECONNABORTED","","classes/Errno/ECONNABORTED.html","","<p>Client sent TCP reset (RST) before server has accepted the connection\nrequested by client.\n"],["Errno::ECONNRESET","","classes/Errno/ECONNRESET.html","","<p>Remote host reset the connection request.\n"],["Errno::EPROTO","","classes/Errno/EPROTO.html","","<p>Protocol error.\n"],["Etc","","classes/Etc.html","","<p>The Etc module provides access to information typically stored in files in\nthe /etc directory on Unix …\n"],["Exception","","classes/Exception.html","","<p>Descendants of class Exception are used to communicate between Kernel#raise\nand <code>rescue</code> statements in …\n"],["Exception2MessageMapper","","classes/Exception2MessageMapper.html","","<p>frozen_string_literal: true\n<p>Helper module for easily defining exceptions with predefined messages.\n<p>Usage …\n"],["Exception2MessageMapper::E2MM","","classes/Exception2MessageMapper/E2MM.html","",""],["FalseClass","","classes/FalseClass.html","","<p>The global value <code>false</code> is the only instance of class\n<code>FalseClass</code> and represents a logically false value …\n"],["Fcntl","","classes/Fcntl.html","","<p>Fcntl loads the constants defined in the system&#39;s &lt;fcntl.h&gt; C\nheader file, and used with both …\n"],["Fiber","","classes/Fiber.html","","<p>Fibers are primitives for implementing light weight cooperative concurrency\nin Ruby. Basically they are …\n"],["FiberError","","classes/FiberError.html","","<p>Raised when an invalid operation is attempted on a Fiber, in particular\nwhen attempting to call/resume …\n"],["Fiddle","","classes/Fiddle.html","","<p>A libffi wrapper for Ruby.\n<p>Description\n<p>Fiddle is an extension to translate a foreign function interface …\n"],["Fiddle::BasicTypes","","classes/Fiddle/BasicTypes.html","","<p>Adds basic type aliases to the including class for use with\nFiddle::Importer.\n<p>The aliases added are <code>uint</code> …\n"],["Fiddle::CParser","","classes/Fiddle/CParser.html","","<p>A mixin that provides methods for parsing C struct and prototype\nsignatures.\n<p>Example\n\n<pre><code>require &#39;fiddle/import&#39; ...\n</code></pre>\n"],["Fiddle::CStruct","","classes/Fiddle/CStruct.html","","<p>C struct shell\n"],["Fiddle::CStructBuilder","","classes/Fiddle/CStructBuilder.html","","<p>Used to construct C classes (CUnion, CStruct, etc)\n<p>Fiddle::Importer#struct and Fiddle::Importer#union …\n"],["Fiddle::CStructEntity","","classes/Fiddle/CStructEntity.html","","<p>A C struct wrapper\n"],["Fiddle::CUnion","","classes/Fiddle/CUnion.html","","<p>C union shell\n"],["Fiddle::CUnionEntity","","classes/Fiddle/CUnionEntity.html","","<p>A C union wrapper\n"],["Fiddle::Closure","","classes/Fiddle/Closure.html","","<p>Description\n<p>An FFI closure wrapper, for handling callbacks.\n<p>Example\n"],["Fiddle::Closure::BlockCaller","","classes/Fiddle/Closure/BlockCaller.html","","<p>Extends Fiddle::Closure to allow for building the closure in a block\n"],["Fiddle::CompositeHandler","","classes/Fiddle/CompositeHandler.html","","<p>Used internally by Fiddle::Importer\n"],["Fiddle::DLError","","classes/Fiddle/DLError.html","","<p>standard dynamic load exception\n"],["Fiddle::Function","","classes/Fiddle/Function.html","","<p>Description\n<p>A representation of a C function\n<p>Examples\n"],["Fiddle::Handle","","classes/Fiddle/Handle.html","","<p>The Fiddle::Handle is the manner to access the dynamic library\n<p>Example\n<p>Setup\n"],["Fiddle::Importer","","classes/Fiddle/Importer.html","","<p>A DSL that provides the means to dynamically load libraries and build\nmodules around them including calling …\n"],["Fiddle::Pointer","","classes/Fiddle/Pointer.html","","<p>Fiddle::Pointer is a class to handle C pointers\n"],["Fiddle::Win32Types","","classes/Fiddle/Win32Types.html","","<p>Adds Windows type aliases to the including class for use with\nFiddle::Importer.\n<p>The aliases added are: …\n"],["File","","classes/File.html","","<p>A <code>File</code> is an abstraction of any file object accessible by the\nprogram and is closely associated with …\n"],["File::Constants","","classes/File/Constants.html","","<p>File::Constants provides file-related constants.  All possible file\nconstants are listed in the documentation …\n"],["File::Stat","","classes/File/Stat.html","","<p>Objects of class <code>File::Stat</code> encapsulate common status\ninformation for <code>File</code> objects. The information is …\n"],["FileTest","","classes/FileTest.html","","<p><code>FileTest</code> implements file test operations similar to those used\nin <code>File::Stat</code>. It exists as a standalone …\n"],["FileUtils","","classes/FileUtils.html","","<p>fileutils.rb\n<p>Copyright © 2000-2007 Minero Aoki\n<p>This program is free software. You can distribute/modify …\n"],["FileUtils::DryRun","","classes/FileUtils/DryRun.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories, with printing message …\n"],["FileUtils::LowMethods","","classes/FileUtils/LowMethods.html","",""],["FileUtils::NoWrite","","classes/FileUtils/NoWrite.html","","<p>This module has all methods of FileUtils module, but never changes\nfiles/directories.  This equates to …\n"],["FileUtils::StreamUtils_","","classes/FileUtils/StreamUtils_.html","",""],["FileUtils::StreamUtils_::RbConfig","","classes/FileUtils/StreamUtils_/RbConfig.html","",""],["FileUtils::Verbose","","classes/FileUtils/Verbose.html","","<p>This module has all methods of FileUtils module, but it outputs messages\nbefore acting.  This equates …\n"],["Find","","classes/Find.html","","<p>The <code>Find</code> module supports the top-down traversal of a set of\nfile paths.\n<p>For example, to total the size …\n"],["Float","","classes/Float.html","","<p>Float objects represent inexact real numbers using the native\narchitecture&#39;s double-precision floating …\n"],["FloatDomainError","","classes/FloatDomainError.html","","<p>Raised when attempting to convert special float values (in particular\n<code>Infinity</code> or <code>NaN</code>) to numerical classes …\n"],["Forwardable","","classes/Forwardable.html","","<p>The Forwardable module provides delegation of specified methods to a\ndesignated object, using the methods …\n"],["FrozenError","","classes/FrozenError.html","","<p>Raised when there is an attempt to modify a frozen object.\n\n<pre><code>[1, 2, 3].freeze &lt;&lt; 4\n</code></pre>\n<p><em>raises the exception:</em> …\n"],["GC","","classes/GC.html","","<p>The GC module provides an interface to Ruby&#39;s mark and sweep garbage\ncollection mechanism.\n<p>Some of …\n"],["GC::Profiler","","classes/GC/Profiler.html","","<p>The GC profiler provides access to information on GC runs including time,\nlength and object space size. …\n"],["GDBM","","classes/GDBM.html","","<p>Summary\n<p>Ruby extension for GNU dbm (gdbm) – a simple database engine for storing\nkey-value pairs on disk. …\n"],["GDBMError","","classes/GDBMError.html","",""],["GDBMFatalError","","classes/GDBMFatalError.html","",""],["Gem","","classes/Gem.html","","<p>RubyGems is the Ruby standard for publishing and managing third party\nlibraries.\n<p>For user documentation, …\n"],["Gem::Dependency","","classes/Gem/Dependency.html","",""],["GetoptLong","","classes/GetoptLong.html","","<p>The GetoptLong class allows you to parse command line options similarly to\nthe GNU getopt_long() C library …\n"],["GetoptLong::AmbiguousOption","","classes/GetoptLong/AmbiguousOption.html","",""],["GetoptLong::Error","","classes/GetoptLong/Error.html","","<p>Error types.\n"],["GetoptLong::InvalidOption","","classes/GetoptLong/InvalidOption.html","",""],["GetoptLong::MissingArgument","","classes/GetoptLong/MissingArgument.html","",""],["GetoptLong::NeedlessArgument","","classes/GetoptLong/NeedlessArgument.html","",""],["HTTPClientException","","classes/HTTPClientException.html","",""],["HTTPGatewayTimeOut","","classes/HTTPGatewayTimeOut.html","",""],["HTTPMovedTemporarily","","classes/HTTPMovedTemporarily.html","",""],["HTTPMultipleChoice","","classes/HTTPMultipleChoice.html","",""],["HTTPRequestEntityTooLarge","","classes/HTTPRequestEntityTooLarge.html","",""],["HTTPRequestTimeOut","","classes/HTTPRequestTimeOut.html","",""],["HTTPRequestURITooLarge","","classes/HTTPRequestURITooLarge.html","",""],["HTTPRequestURITooLong","","classes/HTTPRequestURITooLong.html","",""],["HTTPRequestURITooLong","","classes/HTTPRequestURITooLong.html","",""],["HTTPRequestedRangeNotSatisfiable","","classes/HTTPRequestedRangeNotSatisfiable.html","",""],["Hash","","classes/Hash.html","","<p>A Hash is a dictionary-like collection of unique keys and their values.\nAlso called associative arrays, …\n"],["IO","","classes/IO.html","","<p>Expect library adds the IO instance method #expect, which does similar act\nto tcl&#39;s expect extension. …\n"],["IO::EAGAINWaitReadable","","classes/IO/EAGAINWaitReadable.html","","<p>exception to wait for reading by EAGAIN. see IO.select.\n"],["IO::EAGAINWaitWritable","","classes/IO/EAGAINWaitWritable.html","","<p>exception to wait for writing by EAGAIN. see IO.select.\n"],["IO::EINPROGRESSWaitReadable","","classes/IO/EINPROGRESSWaitReadable.html","","<p>exception to wait for reading by EINPROGRESS. see IO.select.\n"],["IO::EINPROGRESSWaitWritable","","classes/IO/EINPROGRESSWaitWritable.html","","<p>exception to wait for writing by EINPROGRESS. see IO.select.\n"],["IO::EWOULDBLOCKWaitReadable","","classes/IO/EWOULDBLOCKWaitReadable.html","","<p>exception to wait for reading by EWOULDBLOCK. see IO.select.\n"],["IO::EWOULDBLOCKWaitWritable","","classes/IO/EWOULDBLOCKWaitWritable.html","","<p>exception to wait for writing by EWOULDBLOCK. see IO.select.\n"],["IO::WaitReadable","","classes/IO/WaitReadable.html","","<p>exception to wait for reading. see IO.select.\n"],["IO::WaitWritable","","classes/IO/WaitWritable.html","","<p>exception to wait for writing. see IO.select.\n"],["IO::generic_readable","","classes/IO/generic_readable.html","",""],["IO::generic_writable","","classes/IO/generic_writable.html","",""],["IOError","","classes/IOError.html","","<p>Raised when an IO operation fails.\n\n<pre><code>File.open(&quot;/etc/hosts&quot;) {|f| f &lt;&lt; &quot;example&quot;}\n  #=&gt; IOError: not opened ...\n</code></pre>\n"],["IPAddr","","classes/IPAddr.html","","<p>IPAddr provides a set of methods to manipulate an IP address.  Both IPv4\nand IPv6 are supported.\n<p>Example …\n"],["IPAddr::AddressFamilyError","","classes/IPAddr/AddressFamilyError.html","","<p>Raised when the address family is invalid such as an address with an\nunsupported family, an address with …\n"],["IPAddr::Error","","classes/IPAddr/Error.html","","<p>Generic IPAddr related error. Exceptions raised in this class should\ninherit from Error.\n"],["IPAddr::InvalidAddressError","","classes/IPAddr/InvalidAddressError.html","","<p>Raised when the provided IP address is an invalid address.\n"],["IPAddr::InvalidPrefixError","","classes/IPAddr/InvalidPrefixError.html","","<p>Raised when the address is an invalid length.\n"],["IPSocket","","classes/IPSocket.html","","<p>IPSocket is the super class of TCPSocket and UDPSocket.\n"],["IRB","","classes/IRB.html","","<p>IRB stands for “interactive Ruby” and is a tool to interactively execute\nRuby expressions read …\n"],["IRB::Abort","","classes/IRB/Abort.html","","<p>An exception raised by IRB.irb_abort\n"],["IRB::Context","","classes/IRB/Context.html","","<p>A class that wraps the current state of the irb session, including the\nconfiguration of IRB.conf.\n"],["IRB::ContextExtender","","classes/IRB/ContextExtender.html","","<p>Extends methods for the Context module\n"],["IRB::ExtendCommand","","classes/IRB/ExtendCommand.html","",""],["IRB::ExtendCommand::ChangeWorkspace","","classes/IRB/ExtendCommand/ChangeWorkspace.html","",""],["IRB::ExtendCommand::CurrentWorkingWorkspace","","classes/IRB/ExtendCommand/CurrentWorkingWorkspace.html","",""],["IRB::ExtendCommand::Foreground","","classes/IRB/ExtendCommand/Foreground.html","",""],["IRB::ExtendCommand::Fork","","classes/IRB/ExtendCommand/Fork.html","",""],["IRB::ExtendCommand::Help","","classes/IRB/ExtendCommand/Help.html","",""],["IRB::ExtendCommand::IrbCommand","","classes/IRB/ExtendCommand/IrbCommand.html","",""],["IRB::ExtendCommand::Jobs","","classes/IRB/ExtendCommand/Jobs.html","",""],["IRB::ExtendCommand::Kill","","classes/IRB/ExtendCommand/Kill.html","",""],["IRB::ExtendCommand::Load","","classes/IRB/ExtendCommand/Load.html","",""],["IRB::ExtendCommand::Nop","","classes/IRB/ExtendCommand/Nop.html","",""],["IRB::ExtendCommand::PopWorkspace","","classes/IRB/ExtendCommand/PopWorkspace.html","",""],["IRB::ExtendCommand::PushWorkspace","","classes/IRB/ExtendCommand/PushWorkspace.html","",""],["IRB::ExtendCommand::Require","","classes/IRB/ExtendCommand/Require.html","",""],["IRB::ExtendCommand::Source","","classes/IRB/ExtendCommand/Source.html","",""],["IRB::ExtendCommand::Workspaces","","classes/IRB/ExtendCommand/Workspaces.html","",""],["IRB::ExtendCommandBundle","","classes/IRB/ExtendCommandBundle.html","","<p>Installs the default irb extensions command bundle.\n"],["IRB::FileInputMethod","","classes/IRB/FileInputMethod.html","","<p>Use a File for IO with irb, see InputMethod\n"],["IRB::Frame","","classes/IRB/Frame.html","",""],["IRB::InputMethod","","classes/IRB/InputMethod.html","",""],["IRB::Inspector","","classes/IRB/Inspector.html","","<p>An irb inspector\n<p>In order to create your own custom inspector there are two things you\nshould be aware …\n"],["IRB::Irb","","classes/IRB/Irb.html","",""],["IRB::IrbLoader","","classes/IRB/IrbLoader.html","","<p>Provides a few commands for loading files within an irb session.\n<p>See ExtendCommandBundle for more information. …\n"],["IRB::JobManager","","classes/IRB/JobManager.html","",""],["IRB::LoadAbort","","classes/IRB/LoadAbort.html","","<p>Raised in the event of an exception in a file loaded from an Irb session\n"],["IRB::Locale","","classes/IRB/Locale.html","",""],["IRB::MethodExtender","","classes/IRB/MethodExtender.html","","<p>A convenience module for extending Ruby methods.\n"],["IRB::Notifier","","classes/IRB/Notifier.html","","<p>An output formatter used internally by the lexer.\n"],["IRB::Notifier::AbstractNotifier","","classes/IRB/Notifier/AbstractNotifier.html","","<p>An abstract class, or superclass, for CompositeNotifier and LeveledNotifier\nto inherit. It provides several …\n"],["IRB::Notifier::CompositeNotifier","","classes/IRB/Notifier/CompositeNotifier.html","","<p>A class that can be used to create a group of notifier objects with the\nintent of representing a leveled …\n"],["IRB::Notifier::LeveledNotifier","","classes/IRB/Notifier/LeveledNotifier.html","","<p>A leveled notifier is comparable to the composite group from\nCompositeNotifier#notifiers.\n"],["IRB::Notifier::NoMsgNotifier","","classes/IRB/Notifier/NoMsgNotifier.html","","<p>NoMsgNotifier is a LeveledNotifier that&#39;s used as the default notifier\nwhen creating a new CompositeNotifier …\n"],["IRB::OutputMethod","","classes/IRB/OutputMethod.html","","<p>An abstract output class for IO in irb. This is mainly used internally by\nIRB::Notifier. You can define …\n"],["IRB::ReadlineInputMethod","","classes/IRB/ReadlineInputMethod.html","",""],["IRB::SLex","","classes/IRB/SLex.html","",""],["IRB::SLex::Node","","classes/IRB/SLex/Node.html","",""],["IRB::StdioInputMethod","","classes/IRB/StdioInputMethod.html","",""],["IRB::StdioOutputMethod","","classes/IRB/StdioOutputMethod.html","","<p>A standard output printer\n"],["IRB::WorkSpace","","classes/IRB/WorkSpace.html","",""],["IndexError","","classes/IndexError.html","","<p>Raised when the given index is invalid.\n\n<pre><code>a = [:foo, :bar]\na.fetch(0)   #=&gt; :foo\na[4]         #=&gt; nil\na.fetch(4) ...\n</code></pre>\n"],["Integer","","classes/Integer.html","","<p>Holds Integer values.  You cannot add a singleton method to an Integer\nobject, any attempt to do so will …\n"],["Interrupt","","classes/Interrupt.html","","<p>Raised when the interrupt signal is received, typically because the user\nhas pressed Control-C (on most …\n"],["JRuby","","classes/JRuby.html","",""],["JSON","","classes/JSON.html","","<p>JavaScript Object Notation (JSON)\n<p>JSON is a lightweight data-interchange format. It is easy for us humans …\n"],["JSON::CircularDatastructure","","classes/JSON/CircularDatastructure.html","",""],["JSON::Ext","","classes/JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON&#39;s\nfunctionality as C extensions.\n"],["JSON::Ext::Generator","","classes/JSON/Ext/Generator.html","","<p>This is the JSON generator implemented as a C extension. It can be\nconfigured to be used by setting\n\n<pre><code>JSON.generator ...\n</code></pre>\n"],["JSON::Ext::Generator::GeneratorMethods","","classes/JSON/Ext/Generator/GeneratorMethods.html","",""],["JSON::Ext::Generator::GeneratorMethods::Array","","classes/JSON/Ext/Generator/GeneratorMethods/Array.html","",""],["JSON::Ext::Generator::GeneratorMethods::Bignum","","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html","",""],["JSON::Ext::Generator::GeneratorMethods::FalseClass","","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Fixnum","","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html","",""],["JSON::Ext::Generator::GeneratorMethods::Float","","classes/JSON/Ext/Generator/GeneratorMethods/Float.html","",""],["JSON::Ext::Generator::GeneratorMethods::Hash","","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html","",""],["JSON::Ext::Generator::GeneratorMethods::Integer","","classes/JSON/Ext/Generator/GeneratorMethods/Integer.html","",""],["JSON::Ext::Generator::GeneratorMethods::NilClass","","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html","",""],["JSON::Ext::Generator::GeneratorMethods::Object","","classes/JSON/Ext/Generator/GeneratorMethods/Object.html","",""],["JSON::Ext::Generator::GeneratorMethods::String","","classes/JSON/Ext/Generator/GeneratorMethods/String.html","",""],["JSON::Ext::Generator::GeneratorMethods::String::Extend","","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html","",""],["JSON::Ext::Generator::GeneratorMethods::TrueClass","","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html","",""],["JSON::Ext::Generator::State","","classes/JSON/Ext/Generator/State.html","",""],["JSON::Ext::Parser","","classes/JSON/Ext/Parser.html","","<p>This is the JSON parser implemented as a C extension. It can be configured\nto be used by setting\n\n<pre><code>JSON.parser ...\n</code></pre>\n"],["JSON::GeneratorError","","classes/JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::GenericObject","","classes/JSON/GenericObject.html","",""],["JSON::JSONError","","classes/JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","classes/JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means …\n"],["JSON::NestingError","","classes/JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","classes/JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::UnparserError","","classes/JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Jacobian","","classes/Jacobian.html","",""],["Kconv","","classes/Kconv.html","","<p>Kanji Converter for Ruby.\n"],["Kernel","","classes/Kernel.html","","<p>frozen_string_literal: true\n<p>The Kernel module is included by class Object, so its methods are available\n…\n"],["KeyError","","classes/KeyError.html","","<p>Raised when the specified key is not found. It is a subclass of IndexError.\n\n<pre><code>h = {&quot;foo&quot; =&gt; :bar}\nh.fetch(&quot;foo&quot;) ...\n</code></pre>\n"],["LUSolve","","classes/LUSolve.html","","<p>Solves a*x = b for x, using LU decomposition.\n"],["LoadError","","classes/LoadError.html","","<p>Raised when a file required (a Ruby script, extension library, …) fails to\nload.\n\n<pre><code>require &#39;this/file/does/not/exist&#39;\n</code></pre>\n"],["LocalJumpError","","classes/LocalJumpError.html","","<p>Raised when Ruby can&#39;t yield as requested.\n<p>A typical scenario is attempting to yield when no block …\n"],["Logger","","classes/Logger.html","","<p>Description\n<p>The Logger class provides a simple but sophisticated logging utility that\nyou can use to output …\n"],["Logger::Formatter","","classes/Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Logger::LogDevice","","classes/Logger/LogDevice.html","","<p>Device used for logging messages.\n"],["Logger::Period","","classes/Logger/Period.html","",""],["Logger::Severity","","classes/Logger/Severity.html","","<p>Logging severity.\n"],["MakeMakefile","","classes/MakeMakefile.html","","<p>mkmf.rb is used by Ruby C extensions to generate a Makefile which will\ncorrectly compile and link the …\n"],["MakeMakefile::Logging","","classes/MakeMakefile/Logging.html","",""],["MakeMakefile::RbConfig","","classes/MakeMakefile/RbConfig.html","",""],["MakeMakefile::STRING_OR_FAILED_FORMAT","","classes/MakeMakefile/STRING_OR_FAILED_FORMAT.html","",""],["Marshal","","classes/Marshal.html","","<p>The marshaling library converts collections of Ruby objects into a byte\nstream, allowing them to be stored …\n"],["MatchData","","classes/MatchData.html","","<p><code>MatchData</code> encapsulates the result of matching a Regexp against\nstring. It is returned by Regexp#match …\n"],["Math","","classes/Math.html","","<p>The Math module contains module functions for basic trigonometric and\ntranscendental functions. See class …\n"],["Math::DomainError","","classes/Math/DomainError.html","","<p>Raised when a mathematical function is evaluated outside of its domain of\ndefinition.\n<p>For example, since …\n"],["Matrix","","classes/Matrix.html","","<p>The <code>Matrix</code> class represents a mathematical matrix. It provides\nmethods for creating matrices, operating …\n"],["Matrix::EigenvalueDecomposition","","classes/Matrix/EigenvalueDecomposition.html","","<p>Eigenvalues and eigenvectors of a real matrix.\n<p>Computes the eigenvalues and eigenvectors of a matrix  …\n"],["Matrix::LUPDecomposition","","classes/Matrix/LUPDecomposition.html","","<p>For an m-by-n matrix A with m &gt;= n, the LU decomposition is an m-by-n\nunit lower triangular matrix …\n"],["Method","","classes/Method.html","","<p>Method objects are created by <code>Object#method</code>, and are\nassociated with a particular object (not just with …\n"],["Module","","classes/Module.html","","<p>A <code>Module</code> is a collection of methods and constants. The methods\nin a module may be instance methods or …\n"],["Monitor","","classes/Monitor.html","","<p>Use the Monitor class when you want to have a lock object for blocks with\nmutual exclusion.\n\n<pre><code>require &#39;monitor&#39; ...\n</code></pre>\n"],["MonitorMixin","","classes/MonitorMixin.html","","<p>In concurrent programming, a monitor is an object or module intended to be\nused safely by more than one …\n"],["MonitorMixin::ConditionVariable","","classes/MonitorMixin/ConditionVariable.html","","<p>FIXME: This isn&#39;t documented in Nutshell.\n<p>Since MonitorMixin.new_cond returns a ConditionVariable …\n"],["MonitorMixin::ConditionVariable::Timeout","","classes/MonitorMixin/ConditionVariable/Timeout.html","",""],["Mutex","","classes/Mutex.html","","<p>Mutex implements a simple semaphore that can be used to coordinate access\nto shared data from multiple …\n"],["Mutex_m","","classes/Mutex_m.html","","<p>mutex_m.rb\n<p>When &#39;mutex_m&#39; is required, any object that extends or includes\nMutex_m will be treated …\n"],["NKF","","classes/NKF.html","","<p>NKF - Ruby extension for Network Kanji Filter\n<p>Description\n<p>This is a Ruby Extension version of nkf (Network …\n"],["NameError","","classes/NameError.html","","<p>Raised when a given name is invalid or undefined.\n\n<pre><code>puts foo\n</code></pre>\n<p><em>raises the exception:</em>\n"],["Net","","classes/Net.html","",""],["Net::APOP","","classes/Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::APOPSession","","classes/Net/APOP.html","","<p>This class is equivalent to POP3, except that it uses APOP authentication.\n"],["Net::FTP","","classes/Net/FTP.html","","<p>This class implements the File Transfer Protocol.  If you have used a\ncommand-line FTP program, and are …\n"],["Net::FTP::BufferedSSLSocket","","classes/Net/FTP/BufferedSSLSocket.html","",""],["Net::FTP::BufferedSocket","","classes/Net/FTP/BufferedSocket.html","",""],["Net::FTP::MLSxEntry","","classes/Net/FTP/MLSxEntry.html","","<p>MLSxEntry represents an entry in responses of MLST/MLSD. Each entry has the\nfacts (e.g., size, last modification …\n"],["Net::FTP::NullSocket","","classes/Net/FTP/NullSocket.html","",""],["Net::FTPConnectionError","","classes/Net/FTPConnectionError.html","",""],["Net::FTPError","","classes/Net/FTPError.html","",""],["Net::FTPPermError","","classes/Net/FTPPermError.html","",""],["Net::FTPProtoError","","classes/Net/FTPProtoError.html","",""],["Net::FTPReplyError","","classes/Net/FTPReplyError.html","",""],["Net::FTPTempError","","classes/Net/FTPTempError.html","",""],["Net::HTTP","","classes/Net/HTTP.html","","<p>An HTTP client API for Ruby.\n<p>Net::HTTP provides a rich library which can be used to build HTTP\nuser-agents. …\n"],["Net::HTTP::Copy","","classes/Net/HTTP/Copy.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Delete","","classes/Net/HTTP/Delete.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Get","","classes/Net/HTTP/Get.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Head","","classes/Net/HTTP/Head.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Lock","","classes/Net/HTTP/Lock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Mkcol","","classes/Net/HTTP/Mkcol.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Move","","classes/Net/HTTP/Move.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Options","","classes/Net/HTTP/Options.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Patch","","classes/Net/HTTP/Patch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Post","","classes/Net/HTTP/Post.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Propfind","","classes/Net/HTTP/Propfind.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Proppatch","","classes/Net/HTTP/Proppatch.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Put","","classes/Net/HTTP/Put.html","","<p>See Net::HTTPGenericRequest for attributes and methods. See Net::HTTP for\nusage examples.\n"],["Net::HTTP::Trace","","classes/Net/HTTP/Trace.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTP::Unlock","","classes/Net/HTTP/Unlock.html","","<p>See Net::HTTPGenericRequest for attributes and methods.\n"],["Net::HTTPAccepted","","classes/Net/HTTPAccepted.html","",""],["Net::HTTPAlreadyReported","","classes/Net/HTTPAlreadyReported.html","",""],["Net::HTTPBadGateway","","classes/Net/HTTPBadGateway.html","",""],["Net::HTTPBadRequest","","classes/Net/HTTPBadRequest.html","",""],["Net::HTTPBadResponse","","classes/Net/HTTPBadResponse.html","",""],["Net::HTTPClientError","","classes/Net/HTTPClientError.html","",""],["Net::HTTPConflict","","classes/Net/HTTPConflict.html","",""],["Net::HTTPContinue","","classes/Net/HTTPContinue.html","",""],["Net::HTTPCreated","","classes/Net/HTTPCreated.html","",""],["Net::HTTPEarlyHints","","classes/Net/HTTPEarlyHints.html","",""],["Net::HTTPError","","classes/Net/HTTPError.html","",""],["Net::HTTPExceptions","","classes/Net/HTTPExceptions.html","","<p>frozen_string_literal: false Net::HTTP exception class. You cannot use\nNet::HTTPExceptions directly; …\n"],["Net::HTTPExpectationFailed","","classes/Net/HTTPExpectationFailed.html","",""],["Net::HTTPFailedDependency","","classes/Net/HTTPFailedDependency.html","",""],["Net::HTTPFatalError","","classes/Net/HTTPFatalError.html","",""],["Net::HTTPForbidden","","classes/Net/HTTPForbidden.html","",""],["Net::HTTPFound","","classes/Net/HTTPFound.html","",""],["Net::HTTPGatewayTimeout","","classes/Net/HTTPGatewayTimeout.html","",""],["Net::HTTPGenericRequest","","classes/Net/HTTPGenericRequest.html","","<p>frozen_string_literal: false HTTPGenericRequest is the parent of the\nHTTPRequest class. Do not use this …\n"],["Net::HTTPGone","","classes/Net/HTTPGone.html","",""],["Net::HTTPHeader","","classes/Net/HTTPHeader.html","","<p>frozen_string_literal: false The HTTPHeader module defines methods for\nreading and writing HTTP headers. …\n"],["Net::HTTPHeaderSyntaxError","","classes/Net/HTTPHeaderSyntaxError.html","",""],["Net::HTTPIMUsed","","classes/Net/HTTPIMUsed.html","",""],["Net::HTTPInformation","","classes/Net/HTTPInformation.html","",""],["Net::HTTPInsufficientStorage","","classes/Net/HTTPInsufficientStorage.html","",""],["Net::HTTPInternalServerError","","classes/Net/HTTPInternalServerError.html","","<p>444 No Response - Nginx 449 Retry With - Microsoft 450 Blocked by Windows\nParental Controls - Microsoft …\n"],["Net::HTTPLengthRequired","","classes/Net/HTTPLengthRequired.html","",""],["Net::HTTPLocked","","classes/Net/HTTPLocked.html","",""],["Net::HTTPLoopDetected","","classes/Net/HTTPLoopDetected.html","",""],["Net::HTTPMethodNotAllowed","","classes/Net/HTTPMethodNotAllowed.html","",""],["Net::HTTPMisdirectedRequest","","classes/Net/HTTPMisdirectedRequest.html","","<p>418 I&#39;m a teapot - RFC 2324; a joke RFC 420 Enhance Your Calm - Twitter\n"],["Net::HTTPMovedPermanently","","classes/Net/HTTPMovedPermanently.html","",""],["Net::HTTPMultiStatus","","classes/Net/HTTPMultiStatus.html","",""],["Net::HTTPMultipleChoices","","classes/Net/HTTPMultipleChoices.html","",""],["Net::HTTPNetworkAuthenticationRequired","","classes/Net/HTTPNetworkAuthenticationRequired.html","",""],["Net::HTTPNoContent","","classes/Net/HTTPNoContent.html","",""],["Net::HTTPNonAuthoritativeInformation","","classes/Net/HTTPNonAuthoritativeInformation.html","",""],["Net::HTTPNotAcceptable","","classes/Net/HTTPNotAcceptable.html","",""],["Net::HTTPNotExtended","","classes/Net/HTTPNotExtended.html","","<p>509 Bandwidth Limit Exceeded - Apache bw/limited extension\n"],["Net::HTTPNotFound","","classes/Net/HTTPNotFound.html","",""],["Net::HTTPNotImplemented","","classes/Net/HTTPNotImplemented.html","",""],["Net::HTTPNotModified","","classes/Net/HTTPNotModified.html","",""],["Net::HTTPOK","","classes/Net/HTTPOK.html","",""],["Net::HTTPPartialContent","","classes/Net/HTTPPartialContent.html","",""],["Net::HTTPPayloadTooLarge","","classes/Net/HTTPPayloadTooLarge.html","",""],["Net::HTTPPaymentRequired","","classes/Net/HTTPPaymentRequired.html","",""],["Net::HTTPPermanentRedirect","","classes/Net/HTTPPermanentRedirect.html","",""],["Net::HTTPPreconditionFailed","","classes/Net/HTTPPreconditionFailed.html","",""],["Net::HTTPPreconditionRequired","","classes/Net/HTTPPreconditionRequired.html","",""],["Net::HTTPProcessing","","classes/Net/HTTPProcessing.html","",""],["Net::HTTPProxyAuthenticationRequired","","classes/Net/HTTPProxyAuthenticationRequired.html","",""],["Net::HTTPRangeNotSatisfiable","","classes/Net/HTTPRangeNotSatisfiable.html","",""],["Net::HTTPRedirection","","classes/Net/HTTPRedirection.html","",""],["Net::HTTPRequest","","classes/Net/HTTPRequest.html","","<p>frozen_string_literal: false HTTP request class. This class wraps together\nthe request header and the …\n"],["Net::HTTPRequestHeaderFieldsTooLarge","","classes/Net/HTTPRequestHeaderFieldsTooLarge.html","",""],["Net::HTTPRequestTimeout","","classes/Net/HTTPRequestTimeout.html","",""],["Net::HTTPResetContent","","classes/Net/HTTPResetContent.html","",""],["Net::HTTPResponse","","classes/Net/HTTPResponse.html","","<p>frozen_string_literal: false HTTP response class.\n<p>This class wraps together the response header and the …\n"],["Net::HTTPRetriableError","","classes/Net/HTTPRetriableError.html","",""],["Net::HTTPSeeOther","","classes/Net/HTTPSeeOther.html","",""],["Net::HTTPServerError","","classes/Net/HTTPServerError.html","",""],["Net::HTTPServerException","","classes/Net/HTTPServerException.html","",""],["Net::HTTPServiceUnavailable","","classes/Net/HTTPServiceUnavailable.html","",""],["Net::HTTPSuccess","","classes/Net/HTTPSuccess.html","",""],["Net::HTTPSwitchProtocol","","classes/Net/HTTPSwitchProtocol.html","",""],["Net::HTTPTemporaryRedirect","","classes/Net/HTTPTemporaryRedirect.html","","<p>306 Switch Proxy - no longer unused\n"],["Net::HTTPTooManyRequests","","classes/Net/HTTPTooManyRequests.html","",""],["Net::HTTPURITooLong","","classes/Net/HTTPURITooLong.html","",""],["Net::HTTPUnauthorized","","classes/Net/HTTPUnauthorized.html","",""],["Net::HTTPUnavailableForLegalReasons","","classes/Net/HTTPUnavailableForLegalReasons.html","",""],["Net::HTTPUnknownResponse","","classes/Net/HTTPUnknownResponse.html","","<p>frozen_string_literal: true\n<p>www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n"],["Net::HTTPUnprocessableEntity","","classes/Net/HTTPUnprocessableEntity.html","",""],["Net::HTTPUnsupportedMediaType","","classes/Net/HTTPUnsupportedMediaType.html","",""],["Net::HTTPUpgradeRequired","","classes/Net/HTTPUpgradeRequired.html","","<p>425 Unordered Collection - existed only in draft\n"],["Net::HTTPUseProxy","","classes/Net/HTTPUseProxy.html","",""],["Net::HTTPVariantAlsoNegotiates","","classes/Net/HTTPVariantAlsoNegotiates.html","",""],["Net::HTTPVersionNotSupported","","classes/Net/HTTPVersionNotSupported.html","",""],["Net::IMAP","","classes/Net/IMAP.html","","<p>Net::IMAP implements Internet Message Access Protocol (IMAP) client\nfunctionality.  The protocol is described …\n"],["Net::IMAP::BadResponseError","","classes/Net/IMAP/BadResponseError.html","","<p>Error raised upon a “BAD” response from the server, indicating that the\nclient command violated …\n"],["Net::IMAP::BodyTypeAttachment","","classes/Net/IMAP/BodyTypeAttachment.html","","<p>Net::IMAP::BodyTypeAttachment represents attachment body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeBasic","","classes/Net/IMAP/BodyTypeBasic.html","","<p>Net::IMAP::BodyTypeBasic represents basic body structures of messages.\n<p>Fields:\n<p>media_type &mdash; Returns the content …\n"],["Net::IMAP::BodyTypeExtension","","classes/Net/IMAP/BodyTypeExtension.html","",""],["Net::IMAP::BodyTypeMessage","","classes/Net/IMAP/BodyTypeMessage.html","","<p>Net::IMAP::BodyTypeMessage represents MESSAGE/RFC822 body structures of\nmessages.\n<p>Fields:\n<p>envelope &mdash; Returns …\n"],["Net::IMAP::BodyTypeMultipart","","classes/Net/IMAP/BodyTypeMultipart.html","","<p>Net::IMAP::BodyTypeMultipart represents multipart body structures of\nmessages.\n<p>Fields:\n<p>media_type &mdash; Returns …\n"],["Net::IMAP::BodyTypeText","","classes/Net/IMAP/BodyTypeText.html","","<p>Net::IMAP::BodyTypeText represents TEXT body structures of messages.\n<p>Fields:\n<p>lines &mdash; Returns the size of …\n"],["Net::IMAP::ByeResponseError","","classes/Net/IMAP/ByeResponseError.html","","<p>Error raised upon a “BYE” response from the server, indicating that the\nclient is not being …\n"],["Net::IMAP::CramMD5Authenticator","","classes/Net/IMAP/CramMD5Authenticator.html","","<p>Authenticator for the “CRAM-MD5” authentication type.  See #authenticate().\n"],["Net::IMAP::DataFormatError","","classes/Net/IMAP/DataFormatError.html","","<p>Error raised when data is in the incorrect format.\n"],["Net::IMAP::DigestMD5Authenticator","","classes/Net/IMAP/DigestMD5Authenticator.html","","<p>Authenticator for the “DIGEST-MD5” authentication type.  See\n#authenticate().\n"],["Net::IMAP::Error","","classes/Net/IMAP/Error.html","","<p>Superclass of IMAP errors.\n"],["Net::IMAP::FlagCountError","","classes/Net/IMAP/FlagCountError.html","","<p>Error raised when too many flags are interned to symbols.\n"],["Net::IMAP::LoginAuthenticator","","classes/Net/IMAP/LoginAuthenticator.html","","<p>Authenticator for the “LOGIN” authentication type.  See #authenticate().\n"],["Net::IMAP::NoResponseError","","classes/Net/IMAP/NoResponseError.html","","<p>Error raised upon a “NO” response from the server, indicating that the\nclient command could …\n"],["Net::IMAP::NumValidator","","classes/Net/IMAP/NumValidator.html","","<p>Common validators of number and nz_number types\n"],["Net::IMAP::PlainAuthenticator","","classes/Net/IMAP/PlainAuthenticator.html","","<p>Authenticator for the “PLAIN” authentication type.  See #authenticate().\n"],["Net::IMAP::ResponseError","","classes/Net/IMAP/ResponseError.html","","<p>Superclass of all errors used to encapsulate “fail” responses from the\nserver.\n"],["Net::IMAP::ResponseParseError","","classes/Net/IMAP/ResponseParseError.html","","<p>Error raised when a response from the server is non-parseable.\n"],["Net::InternetMessageIO","","classes/Net/InternetMessageIO.html","",""],["Net::InternetMessageIO::NetPrivate","","classes/Net/InternetMessageIO/NetPrivate.html","",""],["Net::InternetMessageIO::WriteAdapter","","classes/Net/InternetMessageIO/WriteAdapter.html","","<p>The writer adapter class\n"],["Net::OpenTimeout","","classes/Net/OpenTimeout.html","","<p>OpenTimeout, a subclass of Timeout::Error, is raised if a connection cannot\nbe created within the open_timeout. …\n"],["Net::POP3","","classes/Net/POP3.html","","<p>What is This Library?\n<p>This library provides functionality for retrieving email via POP3, the Post\nOffice …\n"],["Net::POPAuthenticationError","","classes/Net/POPAuthenticationError.html","","<p>POP3 authentication error.\n"],["Net::POPBadResponse","","classes/Net/POPBadResponse.html","","<p>Unexpected response from the server.\n"],["Net::POPError","","classes/Net/POPError.html","","<p>Non-authentication POP3 protocol error (reply code “-ERR”, except\nauthentication).\n"],["Net::POPMail","","classes/Net/POPMail.html","","<p>This class represents a message which exists on the POP server. Instances\nof this class are created by …\n"],["Net::ProtoAuthError","","classes/Net/ProtoAuthError.html","",""],["Net::ProtoCommandError","","classes/Net/ProtoCommandError.html","",""],["Net::ProtoFatalError","","classes/Net/ProtoFatalError.html","",""],["Net::ProtoRetriableError","","classes/Net/ProtoRetriableError.html","",""],["Net::ProtoServerError","","classes/Net/ProtoServerError.html","",""],["Net::ProtoSyntaxError","","classes/Net/ProtoSyntaxError.html","",""],["Net::ProtoUnknownError","","classes/Net/ProtoUnknownError.html","",""],["Net::ProtocRetryError","","classes/Net/ProtocRetryError.html","",""],["Net::ProtocolError","","classes/Net/ProtocolError.html","",""],["Net::ReadTimeout","","classes/Net/ReadTimeout.html","","<p>ReadTimeout, a subclass of Timeout::Error, is raised if a chunk of the\nresponse cannot be read within …\n"],["Net::SMTP","","classes/Net/SMTP.html","","<p>What is This Library?\n<p>This library provides functionality to send internet mail via SMTP, the\nSimple  …\n"],["Net::SMTP::Response","","classes/Net/SMTP/Response.html","","<p>This class represents a response received by the SMTP server. Instances of\nthis class are created by …\n"],["Net::SMTPAuthenticationError","","classes/Net/SMTPAuthenticationError.html","","<p>Represents an SMTP authentication error.\n"],["Net::SMTPError","","classes/Net/SMTPError.html","","<p>Module mixed in to all SMTP error classes\n"],["Net::SMTPFatalError","","classes/Net/SMTPFatalError.html","","<p>Represents a fatal SMTP error (error code 5xx, except for 500)\n"],["Net::SMTPServerBusy","","classes/Net/SMTPServerBusy.html","","<p>Represents SMTP error code 420 or 450, a temporary error.\n"],["Net::SMTPSyntaxError","","classes/Net/SMTPSyntaxError.html","","<p>Represents an SMTP command syntax error (error code 500)\n"],["Net::SMTPUnknownError","","classes/Net/SMTPUnknownError.html","","<p>Unexpected reply code returned from server.\n"],["Net::SMTPUnsupportedCommand","","classes/Net/SMTPUnsupportedCommand.html","","<p>Command is not supported on server.\n"],["Net::WriteTimeout","","classes/Net/WriteTimeout.html","","<p>WriteTimeout, a subclass of Timeout::Error, is raised if a chunk of the\nresponse cannot be written within …\n"],["Newton","","classes/Newton.html","","<p>newton.rb\n<p>Solves the nonlinear algebraic equation system f = 0 by Newton&#39;s\nmethod. This program is …\n"],["NilClass","","classes/NilClass.html","","<p>The class of the singleton object <code>nil</code>.\n"],["NoMemoryError","","classes/NoMemoryError.html","","<p>Raised when memory allocation fails.\n"],["NoMethodError","","classes/NoMethodError.html","","<p>Raised when a method is called on a receiver which doesn&#39;t have it\ndefined and also fails to respond …\n"],["NotImplementedError","","classes/NotImplementedError.html","","<p>Raised when a feature is not implemented on the current platform. For\nexample, methods depending on the …\n"],["Numeric","","classes/Numeric.html","","<p>Numeric is the class from which all higher-level numeric classes should\ninherit.\n<p>Numeric allows instantiation …\n"],["OLEProperty","","classes/OLEProperty.html","","<p>frozen_string_literal: false OLEProperty helper class of Property with\narguments.\n"],["Object","","classes/Object.html","","<p>frozen_string_literal: true\n<p>Object is the default root of all Ruby objects.  Object inherits from\nBasicObject …\n"],["Object::ParseError","","classes/Racc/ParseError.html","",""],["Object::TimeoutError","","classes/Timeout/Error.html","","<p>Raised by Timeout.timeout when the block times out.\n"],["ObjectSpace","","classes/ObjectSpace.html","","<p>The objspace library extends the ObjectSpace module and adds several\nmethods to get internal statistic …\n"],["ObjectSpace::InternalObjectWrapper","","classes/ObjectSpace/InternalObjectWrapper.html","","<p>This class is used as a return value from\nObjectSpace::reachable_objects_from.\n<p>When ObjectSpace::reachable_objects_from …\n"],["ObjectSpace::WeakMap","","classes/ObjectSpace/WeakMap.html","","<p>An ObjectSpace::WeakMap object holds references to any objects, but those\nobjects can get garbage collected. …\n"],["Observable","","classes/Observable.html","","<p>The Observer pattern (also known as publish/subscribe) provides a simple\nmechanism for one object to …\n"],["Open3","","classes/Open3.html","","<p>Open3 grants you access to stdin, stdout, stderr and a thread to wait for\nthe child process when running …\n"],["OpenSSL","","classes/OpenSSL.html","","<p>frozen_string_literal: false\n<p>frozen_string_literal: false\n<p>frozen_string_literal: false\n"],["OpenSSL::ASN1","","classes/OpenSSL/ASN1.html","","<p>Abstract Syntax Notation One (or ASN.1) is a notation syntax to describe\ndata structures and is defined …\n"],["OpenSSL::ASN1::ASN1Data","","classes/OpenSSL/ASN1/ASN1Data.html","","<p>The top-level class representing any ASN.1 object. When parsed by\nASN1.decode, tagged values are always …\n"],["OpenSSL::ASN1::ASN1Error","","classes/OpenSSL/ASN1/ASN1Error.html","","<p>Generic error class for all errors raised in ASN1 and any of the classes\ndefined in it.\n"],["OpenSSL::ASN1::Constructive","","classes/OpenSSL/ASN1/Constructive.html","","<p>The parent class for all constructed encodings. The <em>value</em>\nattribute of a Constructive is always an Array …\n"],["OpenSSL::ASN1::ObjectId","","classes/OpenSSL/ASN1/ObjectId.html","","<p>Represents the primitive object id for OpenSSL::ASN1\n"],["OpenSSL::ASN1::Primitive","","classes/OpenSSL/ASN1/Primitive.html","","<p>The parent class for all primitive encodings. Attributes are the same as\nfor ASN1Data, with the addition …\n"],["OpenSSL::BN","","classes/OpenSSL/BN.html","",""],["OpenSSL::BNError","","classes/OpenSSL/BNError.html","","<p>Generic Error for all of OpenSSL::BN (big num)\n"],["OpenSSL::Buffering","","classes/OpenSSL/Buffering.html","","<p>OpenSSL IO buffering mix-in module.\n<p>This module allows an OpenSSL::SSL::SSLSocket to behave like an IO …\n"],["OpenSSL::Cipher","","classes/OpenSSL/Cipher.html","","<p>Provides symmetric algorithms for encryption and decryption. The algorithms\nthat are available depend …\n"],["OpenSSL::Cipher::Cipher","","classes/OpenSSL/Cipher/Cipher.html","","<p>Deprecated.\n<p>This class is only provided for backwards compatibility. Use\nOpenSSL::Cipher.\n"],["OpenSSL::Cipher::CipherError","","classes/OpenSSL/Cipher/CipherError.html","",""],["OpenSSL::Config","","classes/OpenSSL/Config.html","","<p>OpenSSL::Config\n<p>Configuration for the openssl library.\n<p>Many system&#39;s installation of openssl library …\n"],["OpenSSL::ConfigError","","classes/OpenSSL/ConfigError.html","","<p>General error for openssl library configuration files. Including\nformatting, parsing errors, etc.\n"],["OpenSSL::Digest","","classes/OpenSSL/Digest.html","","<p>OpenSSL::Digest allows you to compute message digests (sometimes\ninterchangeably called “hashes”) …\n"],["OpenSSL::Digest::DigestError","","classes/OpenSSL/Digest/DigestError.html","","<p>Generic Exception class that is raised if an error occurs during a Digest\noperation.\n"],["OpenSSL::Engine","","classes/OpenSSL/Engine.html","","<p>This class is the access to openssl&#39;s ENGINE cryptographic module\nimplementation.\n<p>See also, www.openssl.org/docs/crypto/engine.html …\n"],["OpenSSL::Engine::EngineError","","classes/OpenSSL/Engine/EngineError.html","","<p>This is the generic exception for OpenSSL::Engine related errors\n"],["OpenSSL::ExtConfig","","classes/OpenSSL/ExtConfig.html","","<p>This module contains configuration information about the SSL extension, for\nexample if socket support …\n"],["OpenSSL::HMAC","","classes/OpenSSL/HMAC.html","","<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code\n(HMAC). It is a type of message …\n"],["OpenSSL::HMACError","","classes/OpenSSL/HMACError.html","","<p>Document-class: OpenSSL::HMAC\n<p>OpenSSL::HMAC allows computing Hash-based Message Authentication Code\n(HMAC). …\n"],["OpenSSL::KDF","","classes/OpenSSL/KDF.html","","<p>Provides functionality of various KDFs (key derivation function).\n<p>KDF is typically used for securely deriving …\n"],["OpenSSL::KDF::KDFError","","classes/OpenSSL/KDF/KDFError.html","","<p>Generic exception class raised if an error occurs in OpenSSL::KDF module.\n"],["OpenSSL::Netscape","","classes/OpenSSL/Netscape.html","","<p>OpenSSL::Netscape is a namespace for SPKI (Simple Public Key\nInfrastructure) which implements Signed …\n"],["OpenSSL::Netscape::SPKI","","classes/OpenSSL/Netscape/SPKI.html","","<p>A Simple Public Key Infrastructure implementation (pronounced “spooky”).\nThe structure is defined …\n"],["OpenSSL::Netscape::SPKIError","","classes/OpenSSL/Netscape/SPKIError.html","","<p>Generic Exception class that is raised if an error occurs during an\noperation on an instance of OpenSSL::Netscape::SPKI …\n"],["OpenSSL::OCSP","","classes/OpenSSL/OCSP.html","","<p>OpenSSL::OCSP implements Online Certificate Status Protocol requests and\nresponses.\n<p>Creating and sending …\n"],["OpenSSL::OCSP::BasicResponse","","classes/OpenSSL/OCSP/BasicResponse.html","","<p>An OpenSSL::OCSP::BasicResponse contains the status of a certificate check\nwhich is created from an  …\n"],["OpenSSL::OCSP::CertificateId","","classes/OpenSSL/OCSP/CertificateId.html","","<p>An OpenSSL::OCSP::CertificateId identifies a certificate to the CA so that\na status check can be performed. …\n"],["OpenSSL::OCSP::OCSPError","","classes/OpenSSL/OCSP/OCSPError.html","","<p>OCSP error class.\n"],["OpenSSL::OCSP::Request","","classes/OpenSSL/OCSP/Request.html","","<p>An OpenSSL::OCSP::Request contains the certificate information for\ndetermining if a certificate has been …\n"],["OpenSSL::OCSP::Response","","classes/OpenSSL/OCSP/Response.html","","<p>An OpenSSL::OCSP::Response contains the status of a certificate check which\nis created from an OpenSSL::OCSP::Request …\n"],["OpenSSL::OCSP::SingleResponse","","classes/OpenSSL/OCSP/SingleResponse.html","","<p>An OpenSSL::OCSP::SingleResponse represents an OCSP SingleResponse\nstructure, which contains the basic …\n"],["OpenSSL::OpenSSLError","","classes/OpenSSL/OpenSSLError.html","","<p>Generic error, common for all classes under OpenSSL module\n"],["OpenSSL::PKCS12","","classes/OpenSSL/PKCS12.html","","<p>Defines a file format commonly used to store private keys with accompanying\npublic key certificates, …\n"],["OpenSSL::PKCS12::PKCS12Error","","classes/OpenSSL/PKCS12/PKCS12Error.html","",""],["OpenSSL::PKCS5","","classes/OpenSSL/PKCS5.html","",""],["OpenSSL::PKCS7","","classes/OpenSSL/PKCS7.html","",""],["OpenSSL::PKCS7::PKCS7Error","","classes/OpenSSL/PKCS7/PKCS7Error.html","",""],["OpenSSL::PKCS7::RecipientInfo","","classes/OpenSSL/PKCS7/RecipientInfo.html","",""],["OpenSSL::PKCS7::SignerInfo","","classes/OpenSSL/PKCS7/SignerInfo.html","",""],["OpenSSL::PKey","","classes/OpenSSL/PKey.html","","<p>frozen_string_literal: false\n<p>Asymmetric Public Key Algorithms\n<p>Asymmetric public key algorithms solve the …\n"],["OpenSSL::PKey::DH","","classes/OpenSSL/PKey/DH.html","","<p>An implementation of the Diffie-Hellman key exchange protocol based on\ndiscrete logarithms in finite …\n"],["OpenSSL::PKey::DHError","","classes/OpenSSL/PKey/DHError.html","","<p>Generic exception that is raised if an operation on a DH PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::DSA","","classes/OpenSSL/PKey/DSA.html","","<p>DSA, the Digital Signature Algorithm, is specified in NIST&#39;s FIPS\n186-3. It is an asymmetric public …\n"],["OpenSSL::PKey::DSAError","","classes/OpenSSL/PKey/DSAError.html","","<p>Generic exception that is raised if an operation on a DSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::PKey::EC","","classes/OpenSSL/PKey/EC.html","","<p>OpenSSL::PKey::EC provides access to Elliptic Curve Digital Signature\nAlgorithm (ECDSA) and Elliptic …\n"],["OpenSSL::PKey::EC::Group","","classes/OpenSSL/PKey/EC/Group.html","",""],["OpenSSL::PKey::EC::Group::Error","","classes/OpenSSL/PKey/EC/Group/Error.html","",""],["OpenSSL::PKey::EC::Point","","classes/OpenSSL/PKey/EC/Point.html","",""],["OpenSSL::PKey::EC::Point::Error","","classes/OpenSSL/PKey/EC/Point/Error.html","",""],["OpenSSL::PKey::ECError","","classes/OpenSSL/PKey/ECError.html","",""],["OpenSSL::PKey::PKey","","classes/OpenSSL/PKey/PKey.html","","<p>An abstract class that bundles signature creation (PKey#sign) and\nvalidation (PKey#verify) that is common …\n"],["OpenSSL::PKey::PKeyError","","classes/OpenSSL/PKey/PKeyError.html","","<p>Raised when errors occur during PKey#sign or PKey#verify.\n"],["OpenSSL::PKey::RSA","","classes/OpenSSL/PKey/RSA.html","","<p>RSA is an asymmetric public key algorithm that has been formalized in RFC\n3447. It is in widespread use …\n"],["OpenSSL::PKey::RSAError","","classes/OpenSSL/PKey/RSAError.html","","<p>Generic exception that is raised if an operation on an RSA PKey fails\nunexpectedly or in case an instantiation …\n"],["OpenSSL::Random","","classes/OpenSSL/Random.html","",""],["OpenSSL::Random::RandomError","","classes/OpenSSL/Random/RandomError.html","",""],["OpenSSL::SSL","","classes/OpenSSL/SSL.html","","<p>Use SSLContext to set up the parameters for a TLS (former SSL) connection.\nBoth client and server TLS …\n"],["OpenSSL::SSL::SSLContext","","classes/OpenSSL/SSL/SSLContext.html","","<p>An SSLContext is used to set various options regarding certificates,\nalgorithms, verification, session …\n"],["OpenSSL::SSL::SSLError","","classes/OpenSSL/SSL/SSLError.html","","<p>Generic error class raised by SSLSocket and SSLContext.\n"],["OpenSSL::SSL::SSLErrorWaitReadable","","classes/OpenSSL/SSL/SSLErrorWaitReadable.html","",""],["OpenSSL::SSL::SSLErrorWaitWritable","","classes/OpenSSL/SSL/SSLErrorWaitWritable.html","",""],["OpenSSL::SSL::SSLServer","","classes/OpenSSL/SSL/SSLServer.html","","<p>SSLServer represents a TCP/IP server socket with Secure Sockets Layer.\n"],["OpenSSL::SSL::SSLSocket","","classes/OpenSSL/SSL/SSLSocket.html","",""],["OpenSSL::SSL::Session","","classes/OpenSSL/SSL/Session.html","",""],["OpenSSL::SSL::Session::SessionError","","classes/OpenSSL/SSL/Session/SessionError.html","",""],["OpenSSL::SSL::SocketForwarder","","classes/OpenSSL/SSL/SocketForwarder.html","",""],["OpenSSL::X509","","classes/OpenSSL/X509.html","",""],["OpenSSL::X509::Attribute","","classes/OpenSSL/X509/Attribute.html","",""],["OpenSSL::X509::AttributeError","","classes/OpenSSL/X509/AttributeError.html","",""],["OpenSSL::X509::CRL","","classes/OpenSSL/X509/CRL.html","",""],["OpenSSL::X509::CRLError","","classes/OpenSSL/X509/CRLError.html","",""],["OpenSSL::X509::Certificate","","classes/OpenSSL/X509/Certificate.html","","<p>Implementation of an X.509 certificate as specified in RFC 5280. Provides\naccess to a certificate&#39;s …\n"],["OpenSSL::X509::CertificateError","","classes/OpenSSL/X509/CertificateError.html","",""],["OpenSSL::X509::Extension","","classes/OpenSSL/X509/Extension.html","",""],["OpenSSL::X509::ExtensionError","","classes/OpenSSL/X509/ExtensionError.html","",""],["OpenSSL::X509::ExtensionFactory","","classes/OpenSSL/X509/ExtensionFactory.html","",""],["OpenSSL::X509::Name","","classes/OpenSSL/X509/Name.html","","<p>An X.509 name represents a hostname, email address or other entity\nassociated with a public key.\n<p>You can …\n"],["OpenSSL::X509::Name::RFC2253DN","","classes/OpenSSL/X509/Name/RFC2253DN.html","",""],["OpenSSL::X509::NameError","","classes/OpenSSL/X509/NameError.html","",""],["OpenSSL::X509::Request","","classes/OpenSSL/X509/Request.html","",""],["OpenSSL::X509::RequestError","","classes/OpenSSL/X509/RequestError.html","",""],["OpenSSL::X509::Revoked","","classes/OpenSSL/X509/Revoked.html","",""],["OpenSSL::X509::RevokedError","","classes/OpenSSL/X509/RevokedError.html","",""],["OpenSSL::X509::Store","","classes/OpenSSL/X509/Store.html","","<p>The X509 certificate store holds trusted CA certificates used to verify\npeer certificates.\n<p>The easiest …\n"],["OpenSSL::X509::StoreContext","","classes/OpenSSL/X509/StoreContext.html","","<p>A StoreContext is used while validating a single certificate and holds the\nstatus involved.\n"],["OpenSSL::X509::StoreError","","classes/OpenSSL/X509/StoreError.html","",""],["OpenStruct","","classes/OpenStruct.html","","<p>An OpenStruct is a data structure, similar to a Hash, that allows the\ndefinition of arbitrary attributes …\n"],["OpenURI","","classes/OpenURI.html","","<p>OpenURI is an easy-to-use wrapper for Net::HTTP, Net::HTTPS and Net::FTP.\n<p>Example\n<p>It is possible to open …\n"],["OpenURI::HTTPError","","classes/OpenURI/HTTPError.html","",""],["OpenURI::HTTPRedirect","","classes/OpenURI/HTTPRedirect.html","","<p>Raised on redirection, only occurs when <code>redirect</code> option for\nHTTP is <code>false</code>.\n"],["OpenURI::Meta","","classes/OpenURI/Meta.html","","<p>Mixin for holding meta-information.\n"],["OpenURI::OpenRead","","classes/OpenURI/OpenRead.html","","<p>Mixin for HTTP and FTP URIs.\n"],["OptionParser","","classes/OptionParser.html","","<p>OptionParser\n<p>Introduction\n<p>OptionParser is a class for command-line option analysis.  It is much more\nadvanced, …\n"],["OptionParser::AC","","classes/OptionParser/AC.html","",""],["OptionParser::Acceptables","","classes/OptionParser/Acceptables.html","","<p>Acceptable argument classes. Now contains DecimalInteger, OctalInteger and\nDecimalNumeric. See Acceptable …\n"],["OptionParser::AmbiguousArgument","","classes/OptionParser/AmbiguousArgument.html","","<p>Raises when the given argument word can&#39;t be completed uniquely.\n"],["OptionParser::AmbiguousOption","","classes/OptionParser/AmbiguousOption.html","","<p>Raises when ambiguously completable string is encountered.\n"],["OptionParser::Arguable","","classes/OptionParser/Arguable.html","","<p>Extends command line arguments array (ARGV) to parse itself.\n"],["OptionParser::CompletingHash","","classes/OptionParser/CompletingHash.html","","<p>Hash with completion search feature. See OptionParser::Completion.\n"],["OptionParser::Completion","","classes/OptionParser/Completion.html","","<p>Keyword completion module.  This allows partial arguments to be specified\nand resolved against a list …\n"],["OptionParser::InvalidArgument","","classes/OptionParser/InvalidArgument.html","","<p>Raises when the given argument does not match required format.\n"],["OptionParser::InvalidOption","","classes/OptionParser/InvalidOption.html","","<p>Raises when switch is undefined.\n"],["OptionParser::List","","classes/OptionParser/List.html","","<p>Simple option list providing mapping from short and/or long option string\nto OptionParser::Switch and …\n"],["OptionParser::MissingArgument","","classes/OptionParser/MissingArgument.html","","<p>Raises when a switch with mandatory argument has no argument.\n"],["OptionParser::NeedlessArgument","","classes/OptionParser/NeedlessArgument.html","","<p>Raises when there is an argument for a switch which takes no argument.\n"],["OptionParser::OptionMap","","classes/OptionParser/OptionMap.html","","<p>Map from option/keyword string to object with completion.\n"],["OptionParser::ParseError","","classes/OptionParser/ParseError.html","","<p>Base class of exceptions from OptionParser.\n"],["OptionParser::Switch","","classes/OptionParser/Switch.html","","<p>Individual switch class.  Not important to the user.\n<p>Defined within Switch are several Switch-derived …\n"],["OptionParser::Switch::NoArgument","","classes/OptionParser/Switch/NoArgument.html","","<p>Switch that takes no arguments.\n"],["OptionParser::Switch::OptionalArgument","","classes/OptionParser/Switch/OptionalArgument.html","","<p>Switch that can omit argument.\n"],["OptionParser::Switch::PlacedArgument","","classes/OptionParser/Switch/PlacedArgument.html","","<p>Switch that takes an argument, which does not begin with &#39;-&#39;.\n"],["OptionParser::Switch::RequiredArgument","","classes/OptionParser/Switch/RequiredArgument.html","","<p>Switch that takes an argument.\n"],["PP","","classes/PP.html","","<p>A pretty-printer for Ruby objects.\n<p>What PP Does\n<p>Standard output by #p returns this:\n"],["PP::PPMethods","","classes/PP/PPMethods.html","",""],["PStore","","classes/PStore.html","","<p>PStore implements a file based persistence mechanism based on a Hash.  User\ncode can store hierarchies …\n"],["PStore::Error","","classes/PStore/Error.html","","<p>The error type thrown by all PStore methods.\n"],["PTY","","classes/PTY.html","","<p>Creates and manages pseudo terminals (PTYs).  See also\nen.wikipedia.org/wiki/Pseudo_terminal\n<p>PTY allows …\n"],["PTY::ChildExited","","classes/PTY/ChildExited.html","","<p>Thrown when PTY::check is called for a pid that represents a process that\nhas exited.\n"],["Pathname","","classes/Pathname.html","","<p>Pathname represents the name of a file or directory on the filesystem, but\nnot the file itself.\n<p>The pathname …\n"],["PrettyPrint","","classes/PrettyPrint.html","","<p>frozen_string_literal: true\n<p>This class implements a pretty printing algorithm. It finds line breaks and\n…\n"],["PrettyPrint::SingleLine","","classes/PrettyPrint/SingleLine.html","","<p>PrettyPrint::SingleLine is used by PrettyPrint.singleline_format\n<p>It is passed to be similar to a PrettyPrint …\n"],["Prime","","classes/Prime.html","","<p>The set of all prime numbers.\n<p>Example\n\n<pre><code>Prime.each(100) do |prime|\n  p prime  #=&gt; 2, 3, 5, 7, 11, ...., 97 ...</code></pre>\n"],["Prime::EratosthenesGenerator","","classes/Prime/EratosthenesGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code>.\n<p>Uses <code>EratosthenesSieve</code>.\n"],["Prime::EratosthenesSieve","","classes/Prime/EratosthenesSieve.html","","<p>Internal use. An implementation of Eratosthenes&#39; sieve\n"],["Prime::Generator23","","classes/Prime/Generator23.html","","<p>Generates all integers which are greater than 2 and are not divisible by\neither 2 or 3.\n<p>This is a pseudo-prime …\n"],["Prime::PseudoPrimeGenerator","","classes/Prime/PseudoPrimeGenerator.html","","<p>An abstract class for enumerating pseudo-prime numbers.\n<p>Concrete subclasses should override succ, next, …\n"],["Prime::TrialDivision","","classes/Prime/TrialDivision.html","","<p>Internal use. An implementation of prime table by trial division method.\n"],["Prime::TrialDivisionGenerator","","classes/Prime/TrialDivisionGenerator.html","","<p>An implementation of <code>PseudoPrimeGenerator</code> which uses a prime\ntable generated by trial division.\n"],["Proc","","classes/Proc.html","","<p>A <code>Proc</code> object is an encapsulation of a block of code, which\ncan be stored in a local variable, passed …\n"],["Process","","classes/Process.html","","<p>Module to handle processes.\n"],["Process::GID","","classes/Process/GID.html","","<p>The <code>Process::GID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Process::Status","","classes/Process/Status.html","","<p><code>Process::Status</code> encapsulates the information on the status of\na running or terminated system process. …\n"],["Process::Sys","","classes/Process/Sys.html","","<p>The <code>Process::Sys</code> module contains UID and GID functions which\nprovide direct bindings to the system calls …\n"],["Process::UID","","classes/Process/UID.html","","<p>The <code>Process::UID</code> module contains a collection of module\nfunctions which can be used to portably get, …\n"],["Profiler__","","classes/Profiler__.html","","<p>frozen_string_literal: true Profile provides a way to Profile your Ruby\napplication.\n<p>Profiling your program …\n"],["Psych","","classes/Psych.html","","<p>Overview\n<p>Psych is a YAML parser and emitter. Psych leverages libyaml [Home page:\npyyaml.org/wiki/LibYAML …\n"],["Psych::BadAlias","","classes/Psych/BadAlias.html","",""],["Psych::ClassLoader","","classes/Psych/ClassLoader.html","",""],["Psych::ClassLoader::Restricted","","classes/Psych/ClassLoader/Restricted.html","",""],["Psych::Coder","","classes/Psych/Coder.html","","<p>If an object defines <code>encode_with</code>, then an instance of\nPsych::Coder will be passed to the method when …\n"],["Psych::DisallowedClass","","classes/Psych/DisallowedClass.html","",""],["Psych::Emitter","","classes/Psych/Emitter.html","",""],["Psych::Exception","","classes/Psych/Exception.html","",""],["Psych::Handler","","classes/Psych/Handler.html","","<p>Psych::Handler is an abstract base class that defines the events used when\ndealing with Psych::Parser …\n"],["Psych::Handler::DumperOptions","","classes/Psych/Handler/DumperOptions.html","","<p>Configuration options for dumping YAML.\n"],["Psych::Handlers","","classes/Psych/Handlers.html","",""],["Psych::Handlers::Recorder","","classes/Psych/Handlers/Recorder.html","","<p>This handler will capture an event and record the event.  Recorder events\nare available vial Psych::Handlers::Recorder#events …\n"],["Psych::JSON","","classes/Psych/JSON.html","",""],["Psych::JSON::Stream","","classes/Psych/JSON/Stream.html","",""],["Psych::JSON::TreeBuilder","","classes/Psych/JSON/TreeBuilder.html","","<p>Psych::JSON::TreeBuilder is an event based AST builder.  Events are sent to\nan instance of Psych::JSON::TreeBuilder …\n"],["Psych::Nodes","","classes/Psych/Nodes.html","","<p>Overview\n<p>When using Psych.load to deserialize a YAML document, the document is\ntranslated to an intermediary …\n"],["Psych::Nodes::Alias","","classes/Psych/Nodes/Alias.html","","<p>This class represents a YAML Alias. It points to an <code>anchor</code>.\n<p>A Psych::Nodes::Alias is a terminal node and …\n"],["Psych::Nodes::Document","","classes/Psych/Nodes/Document.html","","<p>This represents a YAML Document.  This node must be a child of\nPsych::Nodes::Stream.  A Psych::Nodes::Document …\n"],["Psych::Nodes::Mapping","","classes/Psych/Nodes/Mapping.html","","<p>This class represents a YAML Mapping.\n<p>A Psych::Nodes::Mapping node may have 0 or more children, but must …\n"],["Psych::Nodes::Node","","classes/Psych/Nodes/Node.html","","<p>The base class for any Node in a YAML parse tree.  This class should never\nbe instantiated.\n"],["Psych::Nodes::Scalar","","classes/Psych/Nodes/Scalar.html","","<p>This class represents a YAML Scalar.\n<p>This node type is a terminal node and should not have any children. …\n"],["Psych::Nodes::Sequence","","classes/Psych/Nodes/Sequence.html","","<p>This class represents a YAML sequence.\n<p>A YAML sequence is basically a list, and looks like this:\n\n<pre><code>%YAML ...</code></pre>\n"],["Psych::Nodes::Stream","","classes/Psych/Nodes/Stream.html","","<p>Represents a YAML stream.  This is the root node for any YAML parse tree. \nThis node must have one or …\n"],["Psych::Omap","","classes/Psych/Omap.html","",""],["Psych::Parser","","classes/Psych/Parser.html","","<p>YAML event parser class.  This class parses a YAML document and calls\nevents on the handler that is passed …\n"],["Psych::Parser::Mark","","classes/Psych/Parser/Mark.html","",""],["Psych::ScalarScanner","","classes/Psych/ScalarScanner.html","","<p>Scan scalars for built in types\n"],["Psych::Set","","classes/Psych/Set.html","",""],["Psych::Stream","","classes/Psych/Stream.html","","<p>Psych::Stream is a streaming YAML emitter.  It will not buffer your YAML,\nbut send it straight to an …\n"],["Psych::Streaming","","classes/Psych/Streaming.html","",""],["Psych::Streaming::ClassMethods","","classes/Psych/Streaming/ClassMethods.html","",""],["Psych::SyntaxError","","classes/Psych/SyntaxError.html","",""],["Psych::TreeBuilder","","classes/Psych/TreeBuilder.html","","<p>This class works in conjunction with Psych::Parser to build an in-memory\nparse tree that represents a …\n"],["Psych::Visitors","","classes/Psych/Visitors.html","",""],["Psych::Visitors::DepthFirst","","classes/Psych/Visitors/DepthFirst.html","",""],["Psych::Visitors::Emitter","","classes/Psych/Visitors/Emitter.html","",""],["Psych::Visitors::JSONTree","","classes/Psych/Visitors/JSONTree.html","",""],["Psych::Visitors::NoAliasRuby","","classes/Psych/Visitors/NoAliasRuby.html","",""],["Psych::Visitors::ToRuby","","classes/Psych/Visitors/ToRuby.html","","<p>This class walks a YAML AST, converting each node to Ruby\n"],["Psych::Visitors::Visitor","","classes/Psych/Visitors/Visitor.html","",""],["Psych::Visitors::YAMLTree","","classes/Psych/Visitors/YAMLTree.html","","<p>YAMLTree builds a YAML ast given a Ruby object.  For example:\n\n<pre><code>builder = Psych::Visitors::YAMLTree.new ...\n</code></pre>\n"],["Queue","","classes/Queue.html","","<p>The Queue class implements multi-producer, multi-consumer queues. It is\nespecially useful in threaded …\n"],["RDoc","","classes/RDoc.html","","<p>RDoc produces documentation for Ruby source files by parsing the source and\nextracting the definition …\n"],["RDoc::Alias","","classes/RDoc/Alias.html","","<p>frozen_string_literal: true\n<p>Represent an alias, which is an old_name/new_name pair associated with a\nparticular …\n"],["RDoc::AnonClass","","classes/RDoc/AnonClass.html","","<p>frozen_string_literal: true\n<p>An anonymous class like:\n\n<pre><code>c = Class.new do end\n</code></pre>\n"],["RDoc::AnyMethod","","classes/RDoc/AnyMethod.html","","<p>frozen_string_literal: true\n<p>AnyMethod is the base class for objects representing methods\n"],["RDoc::Attr","","classes/RDoc/Attr.html","","<p>frozen_string_literal: true\n<p>An attribute created by #attr, #attr_reader, #attr_writer or #attr_accessor\n…\n"],["RDoc::ClassModule","","classes/RDoc/ClassModule.html","","<p>frozen_string_literal: true\n<p>ClassModule is the base class for objects representing either a class or a\n…\n"],["RDoc::CodeObject","","classes/RDoc/CodeObject.html","","<p>frozen_string_literal: true\n<p>Base class for the RDoc code tree.\n<p>We contain the common stuff for contexts …\n"],["RDoc::Comment","","classes/RDoc/Comment.html","","<p>frozen_string_literal: true\n<p>A comment holds the text comment for a RDoc::CodeObject and provides a\nunified …\n"],["RDoc::Constant","","classes/RDoc/Constant.html","","<p>frozen_string_literal: true\n<p>A constant\n"],["RDoc::Context","","classes/RDoc/Context.html","","<p>A Context is something that can hold modules, classes, methods, attributes,\naliases, requires, and includes. …\n"],["RDoc::CrossReference","","classes/RDoc/CrossReference.html","","<p>frozen_string_literal: true\n<p>RDoc::CrossReference is a reusable way to create cross references for\nnames. …\n"],["RDoc::ERBIO","","classes/RDoc/ERBIO.html","","<p>A subclass of ERB that writes directly to an IO.  Credit to Aaron Patterson\nand Masatoshi SEKI.\n<p>To use: …\n"],["RDoc::ERBPartial","","classes/RDoc/ERBPartial.html","","<p>frozen_string_literal: true\n<p>Allows an ERB template to be rendered in the context (binding) of an\nexisting …\n"],["RDoc::Encoding","","classes/RDoc/Encoding.html","","<p>This class is a wrapper around File IO and Encoding that helps RDoc load\nfiles and convert them to the …\n"],["RDoc::Error","","classes/RDoc/Error.html","","<p>Exception thrown by any rdoc error.\n"],["RDoc::Extend","","classes/RDoc/Extend.html","","<p>frozen_string_literal: true\n<p>A Module extension to a class with #extend\n\n<pre><code>RDoc::Extend.new &#39;Enumerable&#39;, &#39;comment ...</code></pre>\n"],["RDoc::Generator","","classes/RDoc/Generator.html","","<p>frozen_string_literal: true\n<p>RDoc uses generators to turn parsed source code in the form of an\nRDoc::CodeObject …\n"],["RDoc::GhostMethod","","classes/RDoc/GhostMethod.html","","<p>frozen_string_literal: true\n<p>GhostMethod represents a method referenced only by a comment\n"],["RDoc::I18n","","classes/RDoc/I18n.html","","<p>frozen_string_literal: true\n<p>This module provides i18n related features.\n"],["RDoc::Include","","classes/RDoc/Include.html","","<p>frozen_string_literal: true\n<p>A Module included in a class with #include\n\n<pre><code>RDoc::Include.new &#39;Enumerable&#39;, ...</code></pre>\n"],["RDoc::Markdown","","classes/RDoc/Markdown.html","","<p>RDoc::Markdown as described by the markdown syntax.\n<p>To choose Markdown as your only default format see …\n"],["RDoc::Markdown::MemoEntry","","classes/RDoc/Markdown/MemoEntry.html","",""],["RDoc::Markdown::ParseError","","classes/RDoc/Markdown/ParseError.html","",""],["RDoc::Markdown::RuleInfo","","classes/RDoc/Markdown/RuleInfo.html","",""],["RDoc::Markup","","classes/RDoc/Markup.html","","<p>frozen_string_literal: true\n<p>RDoc::Markup parses plain text documents and attempts to decompose them\ninto …\n"],["RDoc::MetaMethod","","classes/RDoc/MetaMethod.html","","<p>frozen_string_literal: true\n<p>MetaMethod represents a meta-programmed method\n"],["RDoc::MethodAttr","","classes/RDoc/MethodAttr.html","","<p>frozen_string_literal: true\n<p>Abstract class representing either a method or an attribute.\n"],["RDoc::Mixin","","classes/RDoc/Mixin.html","","<p>frozen_string_literal: true\n<p>A Mixin adds features from a module into another context.  RDoc::Include\nand …\n"],["RDoc::NormalClass","","classes/RDoc/NormalClass.html","","<p>frozen_string_literal: true\n<p>A normal class, neither singleton nor anonymous\n"],["RDoc::NormalModule","","classes/RDoc/NormalModule.html","","<p>frozen_string_literal: true\n<p>A normal module, like NormalClass\n"],["RDoc::Options","","classes/RDoc/Options.html","","<p>RDoc::Options handles the parsing and storage of options\n<p>Saved Options\n<p>You can save some options like the …\n"],["RDoc::Parser","","classes/RDoc/Parser.html","","<p>A parser is simple a class that subclasses RDoc::Parser and implements\n#scan to fill in an RDoc::TopLevel …\n"],["RDoc::RD","","classes/RDoc/RD.html","","<p>frozen_string_literal: true\n<p>RDoc::RD implements the RD format from the rdtool gem.\n<p>To choose RD as your …\n"],["RDoc::RDoc","","classes/RDoc/RDoc.html","","<p>This is the driver for generating RDoc output.  It handles file parsing and\ngeneration of output.\n<p>To use …\n"],["RDoc::RI","","classes/RDoc/RI.html","","<p>Namespace for the ri command line tool&#39;s implementation.\n<p>See <code>ri --help</code> for details.\n"],["RDoc::RI::Error","","classes/RDoc/RI/Error.html","","<p>Base RI error class\n"],["RDoc::Require","","classes/RDoc/Require.html","","<p>frozen_string_literal: true\n<p>A file loaded by #require\n"],["RDoc::RubygemsHook","","classes/RDoc/RubygemsHook.html","","<p>Gem::RDoc provides methods to generate RDoc and ri data for installed gems\nupon gem installation.\n<p>This …\n"],["RDoc::Servlet","","classes/RDoc/Servlet.html","","<p>This is a WEBrick servlet that allows you to browse ri documentation.\n<p>You can show documentation through …\n"],["RDoc::SingleClass","","classes/RDoc/SingleClass.html","","<p>frozen_string_literal: true\n<p>A singleton class\n"],["RDoc::Stats","","classes/RDoc/Stats.html","","<p>frozen_string_literal: true\n<p>RDoc statistics collector which prints a summary and report of a\nproject&#39;s …\n"],["RDoc::Store","","classes/RDoc/Store.html","","<p>A set of rdoc data for a single project (gem, path, etc.).\n<p>The store manages reading and writing ri data …\n"],["RDoc::Store::Error","","classes/RDoc/Store/Error.html","","<p>Errors raised from loading or saving the store\n"],["RDoc::Store::MissingFileError","","classes/RDoc/Store/MissingFileError.html","","<p>Raised when a stored file for a class, module, page or method is missing.\n"],["RDoc::Task","","classes/RDoc/Task.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["RDoc::Text","","classes/RDoc/Text.html","","<p>Methods for manipulating comment text\n"],["RDoc::TokenStream","","classes/RDoc/TokenStream.html","","<p>frozen_string_literal: true\n<p>A TokenStream is a list of tokens, gathered during the parse of some entity\n…\n"],["RDoc::TomDoc","","classes/RDoc/TomDoc.html","","<p>A parser for TomDoc based on TomDoc 1.0.0-rc1 (02adef9b5a)\n<p>The TomDoc specification can be found at:\n<p>tomdoc.org …\n"],["RDoc::TopLevel","","classes/RDoc/TopLevel.html","","<p>frozen_string_literal: true\n<p>A TopLevel context is a representation of the contents of a single file\n"],["RDocTask","","classes/RDocTask.html","","<p>RDoc::Task creates the following rake tasks to generate and clean up RDoc\noutput:\n<p>rdoc &mdash; Main task for this …\n"],["REXML","","classes/REXML.html","","<p>frozen_string_literal: false\n<p>frozen_string_literal: false\n<p>frozen_string_literal: false\n"],["REXML::AttlistDecl","","classes/REXML/AttlistDecl.html","","<p>This class needs:\n<p>Documentation\n<p>Work!  Not all types of attlists are intelligently parsed, so we just\n"],["REXML::Attribute","","classes/REXML/Attribute.html","","<p>Defines an Element Attribute; IE, a attribute=value pair, as in:\n&lt;element attribute=“value”/&gt;. …\n"],["REXML::Attributes","","classes/REXML/Attributes.html","","<p>A class that defines the set of Attributes of an Element and provides\noperations for accessing elements …\n"],["REXML::CData","","classes/REXML/CData.html","",""],["REXML::Child","","classes/REXML/Child.html","","<p>A Child object is something contained by a parent, and this class contains\nmethods to support that.  …\n"],["REXML::Comment","","classes/REXML/Comment.html","","<p>Represents an XML comment; that is, text between &lt;!– … –&gt;\n"],["REXML::DTD","","classes/REXML/DTD.html","",""],["REXML::DTD::AttlistDecl","","classes/REXML/DTD/AttlistDecl.html","",""],["REXML::DTD::ElementDecl","","classes/REXML/DTD/ElementDecl.html","",""],["REXML::DTD::EntityDecl","","classes/REXML/DTD/EntityDecl.html","",""],["REXML::DTD::NotationDecl","","classes/REXML/DTD/NotationDecl.html","",""],["REXML::DTD::Parser","","classes/REXML/DTD/Parser.html","",""],["REXML::Declaration","","classes/REXML/Declaration.html","","<p>This is an abstract class.  You never use this directly; it serves as a\nparent class for the specific …\n"],["REXML::DocType","","classes/REXML/DocType.html","","<p>Represents an XML DOCTYPE declaration; that is, the contents of\n&lt;!DOCTYPE … &gt;.  DOCTYPES can …\n"],["REXML::Document","","classes/REXML/Document.html","","<p>Represents a full XML document, including PIs, a doctype, etc.  A Document\nhas a single child that can …\n"],["REXML::Element","","classes/REXML/Element.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::ElementDecl","","classes/REXML/ElementDecl.html","",""],["REXML::Elements","","classes/REXML/Elements.html","","<p>A class which provides filtering of children for Elements, and XPath search\nsupport.  You are expected …\n"],["REXML::Encoding","","classes/REXML/Encoding.html","",""],["REXML::Entity","","classes/REXML/Entity.html","",""],["REXML::EntityConst","","classes/REXML/EntityConst.html","","<p>This is a set of entity constants – the ones defined in the XML\nspecification.  These are <code>gt</code>, <code>lt</code>,\n<code>amp</code> …\n"],["REXML::ExternalEntity","","classes/REXML/ExternalEntity.html","",""],["REXML::Formatters","","classes/REXML/Formatters.html","",""],["REXML::Formatters::Default","","classes/REXML/Formatters/Default.html","",""],["REXML::Formatters::Pretty","","classes/REXML/Formatters/Pretty.html","","<p>Pretty-prints an XML document.  This destroys whitespace in text nodes and\nwill insert carriage returns …\n"],["REXML::Formatters::Transitive","","classes/REXML/Formatters/Transitive.html","","<p>The Transitive formatter writes an XML document that parses to an identical\ndocument as the source document. …\n"],["REXML::Functions","","classes/REXML/Functions.html","","<p>If you add a method, keep in mind two things: (1) the first argument will\nalways be a list of nodes from …\n"],["REXML::IOSource","","classes/REXML/IOSource.html","","<p>A Source that wraps an IO.  See the Source class for method documentation\n"],["REXML::Instruction","","classes/REXML/Instruction.html","","<p>Represents an XML Instruction; IE, &lt;? … ?&gt; TODO: Add parent arg (3rd\narg) to constructor\n"],["REXML::Light","","classes/REXML/Light.html","",""],["REXML::Light::Node","","classes/REXML/Light/Node.html","","<p>Represents a tagged XML element.  Elements are characterized by having\nchildren, attributes, and names, …\n"],["REXML::Namespace","","classes/REXML/Namespace.html","","<p>Adds named attributes to an object.\n"],["REXML::Node","","classes/REXML/Node.html","","<p>Represents a node in the tree.  Nodes are never encountered except as\nsuperclasses of other objects. …\n"],["REXML::NotationDecl","","classes/REXML/NotationDecl.html","",""],["REXML::Output","","classes/REXML/Output.html","",""],["REXML::Parent","","classes/REXML/Parent.html","","<p>A parent has children, and has methods for accessing them.  The Parent\nclass is never encountered except …\n"],["REXML::ParseException","","classes/REXML/ParseException.html","",""],["REXML::Parsers","","classes/REXML/Parsers.html","",""],["REXML::Parsers::BaseParser","","classes/REXML/Parsers/BaseParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre><code>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</code></pre>\n"],["REXML::Parsers::LightParser","","classes/REXML/Parsers/LightParser.html","",""],["REXML::Parsers::PullEvent","","classes/REXML/Parsers/PullEvent.html","","<p>A parsing event.  The contents of the event are accessed as an +Array?, and\nthe type is given either …\n"],["REXML::Parsers::PullParser","","classes/REXML/Parsers/PullParser.html","","<p>Using the Pull Parser\n<p><em>This API is experimental, and subject to change.</em>\n\n<pre><code>parser = PullParser.new( &quot;&lt;a&gt;text&lt;b ...</code></pre>\n"],["REXML::Parsers::SAX2Parser","","classes/REXML/Parsers/SAX2Parser.html","","<p>SAX2Parser\n"],["REXML::Parsers::StreamParser","","classes/REXML/Parsers/StreamParser.html","",""],["REXML::Parsers::TreeParser","","classes/REXML/Parsers/TreeParser.html","",""],["REXML::Parsers::UltraLightParser","","classes/REXML/Parsers/UltraLightParser.html","",""],["REXML::Parsers::XPathParser","","classes/REXML/Parsers/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["REXML::QuickPath","","classes/REXML/QuickPath.html","",""],["REXML::SAX2Listener","","classes/REXML/SAX2Listener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::Security","","classes/REXML/Security.html","",""],["REXML::Source","","classes/REXML/Source.html","","<p>A Source can be searched for patterns, and wraps buffers and other objects\nand provides consumption of …\n"],["REXML::SourceFactory","","classes/REXML/SourceFactory.html","","<p>Generates Source-s.  USE THIS CLASS.\n"],["REXML::StreamListener","","classes/REXML/StreamListener.html","","<p>A template for stream parser listeners. Note that the declarations\n(attlistdecl, elementdecl, etc) are …\n"],["REXML::SyncEnumerator","","classes/REXML/SyncEnumerator.html","",""],["REXML::Text","","classes/REXML/Text.html","","<p>Represents text nodes in an XML document\n"],["REXML::UndefinedNamespaceException","","classes/REXML/UndefinedNamespaceException.html","",""],["REXML::Validation","","classes/REXML/Validation.html","",""],["REXML::Validation::Choice","","classes/REXML/Validation/Choice.html","",""],["REXML::Validation::Event","","classes/REXML/Validation/Event.html","",""],["REXML::Validation::Interleave","","classes/REXML/Validation/Interleave.html","",""],["REXML::Validation::OneOrMore","","classes/REXML/Validation/OneOrMore.html","",""],["REXML::Validation::Optional","","classes/REXML/Validation/Optional.html","",""],["REXML::Validation::Ref","","classes/REXML/Validation/Ref.html","",""],["REXML::Validation::RelaxNG","","classes/REXML/Validation/RelaxNG.html","","<p>Implemented:\n<p>empty\n<p>element\n"],["REXML::Validation::Sequence","","classes/REXML/Validation/Sequence.html","",""],["REXML::Validation::State","","classes/REXML/Validation/State.html","",""],["REXML::Validation::ValidationException","","classes/REXML/Validation/ValidationException.html","",""],["REXML::Validation::Validator","","classes/REXML/Validation/Validator.html","",""],["REXML::Validation::ZeroOrMore","","classes/REXML/Validation/ZeroOrMore.html","",""],["REXML::XMLDecl","","classes/REXML/XMLDecl.html","","<p>NEEDS DOCUMENTATION\n"],["REXML::XMLTokens","","classes/REXML/XMLTokens.html","","<p>Defines a number of tokens used for parsing XML.  Not for general\nconsumption.\n"],["REXML::XPath","","classes/REXML/XPath.html","","<p>Wrapper class.  Use this class to access the XPath functions.\n"],["REXML::XPathNode","","classes/REXML/XPathNode.html","","<p>@private\n"],["REXML::XPathParser","","classes/REXML/XPathParser.html","","<p>You don&#39;t want to use this class.  Really.  Use XPath, which is a\nwrapper for this class.  Believe …\n"],["RSS","","classes/RSS.html","","<p>frozen_string_literal: false\n<p>RSS reading and writing\n<p>Really Simple Syndication (RSS) is a family of formats …\n"],["RSS::Atom","","classes/RSS/Atom.html","","<p>Atom is an XML-based document format that is used to describe\n&#39;feeds&#39; of related information. …\n"],["RSS::Atom::CommonModel","","classes/RSS/Atom/CommonModel.html","",""],["RSS::Atom::ContentModel","","classes/RSS/Atom/ContentModel.html","",""],["RSS::Atom::ContentModel::ClassMethods","","classes/RSS/Atom/ContentModel/ClassMethods.html","",""],["RSS::Atom::DateConstruct","","classes/RSS/Atom/DateConstruct.html","","<p>Element used to describe an Atom date and time in the ISO 8601 format\n<p>Examples:\n<p>2013-03-04T15:30:02Z\n"],["RSS::Atom::DuplicateLinkChecker","","classes/RSS/Atom/DuplicateLinkChecker.html","",""],["RSS::Atom::Entry","","classes/RSS/Atom/Entry.html","","<p>Defines a top-level Atom Entry element, used as the document element of a\nstand-alone Atom Entry Document …\n"],["RSS::Atom::Feed","","classes/RSS/Atom/Feed.html","","<p>Defines the top-level element of an Atom Feed Document. It consists of a\nnumber of children Entry elements, …\n"],["RSS::Atom::Feed::Author","","classes/RSS/Atom/Feed/Author.html","","<p>PersonConstruct that contains information regarding the author of a Feed or\nEntry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.author …\n"],["RSS::Atom::Feed::Category","","classes/RSS/Atom/Feed/Category.html","","<p>Contains information about a category associated with a Feed or Entry. It\nhas the following attributes: …\n"],["RSS::Atom::Feed::Contributor","","classes/RSS/Atom/Feed/Contributor.html","","<p>PersonConstruct that contains information regarding the contributors of a\nFeed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.contributor …\n"],["RSS::Atom::Feed::Entry","","classes/RSS/Atom/Feed/Entry.html","","<p>Defines a child Atom Entry element of an Atom Feed element. It has the\nfollowing attributes:\n<p>author\n<p>category …\n"],["RSS::Atom::Feed::Entry::Content","","classes/RSS/Atom/Feed/Entry/Content.html","","<p>Contains or links to the content of the Entry. It has the following\nattributes:\n<p>type\n<p>src\n"],["RSS::Atom::Feed::Entry::Published","","classes/RSS/Atom/Feed/Entry/Published.html","","<p>DateConstruct that usually indicates the time of the initial creation of an\nEntry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.published …\n"],["RSS::Atom::Feed::Entry::Source","","classes/RSS/Atom/Feed/Entry/Source.html","","<p>Defines a Atom Source element. It has the following attributes:\n<p>author\n<p>category\n"],["RSS::Atom::Feed::Entry::Summary","","classes/RSS/Atom/Feed/Entry/Summary.html","","<p>TextConstruct that describes a summary of the Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.summary …\n"],["RSS::Atom::Feed::Generator","","classes/RSS/Atom/Feed/Generator.html","","<p>Contains information on the agent used to generate the feed.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.generator …\n"],["RSS::Atom::Feed::Icon","","classes/RSS/Atom/Feed/Icon.html","","<p>Defines an image that provides a visual identification for a eed. The image\nshould have an aspect ratio …\n"],["RSS::Atom::Feed::Id","","classes/RSS/Atom/Feed/Id.html","","<p>Defines the Universally Unique Identifier (UUID) for a Feed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.id …\n"],["RSS::Atom::Feed::Link","","classes/RSS/Atom/Feed/Link.html","","<p>Defines a reference to a Web resource. It has the following attributes:\n<p>href\n<p>rel\n"],["RSS::Atom::Feed::Logo","","classes/RSS/Atom/Feed/Logo.html","","<p>Defines an image that provides a visual identification for the Feed. The\nimage should have an aspect …\n"],["RSS::Atom::Feed::Rights","","classes/RSS/Atom/Feed/Rights.html","","<p>TextConstruct that contains copyright information regarding the content in\nan Entry or Feed. It should …\n"],["RSS::Atom::Feed::Subtitle","","classes/RSS/Atom/Feed/Subtitle.html","","<p>TextConstruct that conveys a description or subtitle for a Feed.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.subtitle …\n"],["RSS::Atom::Feed::Title","","classes/RSS/Atom/Feed/Title.html","","<p>TextConstruct that conveys a description or title for a Feed or Entry.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.title …\n"],["RSS::Atom::Feed::Updated","","classes/RSS/Atom/Feed/Updated.html","","<p>DateConstruct indicating the most recent time when a Feed or Entry was\nmodified in a way the publisher …\n"],["RSS::Atom::PersonConstruct","","classes/RSS/Atom/PersonConstruct.html","","<p>The PersonConstruct module is used to define a person Atom element that can\nbe used to describe a person, …\n"],["RSS::Atom::PersonConstruct::Email","","classes/RSS/Atom/PersonConstruct/Email.html","","<p>The email of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.email\n"],["RSS::Atom::PersonConstruct::Name","","classes/RSS/Atom/PersonConstruct/Name.html","","<p>The name of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.name\n"],["RSS::Atom::PersonConstruct::Uri","","classes/RSS/Atom/PersonConstruct/Uri.html","","<p>The URI of the person or entity.\n<p>Reference: validator.w3.org/feed/docs/rfc4287.html#element.uri\n"],["RSS::Atom::TextConstruct","","classes/RSS/Atom/TextConstruct.html","","<p>The TextConstruct module is used to define a Text construct Atom element,\nwhich is used to store small …\n"],["RSS::Atom::URIContentModel","","classes/RSS/Atom/URIContentModel.html","",""],["RSS::BaseDublinCoreModel","","classes/RSS/BaseDublinCoreModel.html","",""],["RSS::BaseListener","","classes/RSS/BaseListener.html","",""],["RSS::BaseModel","","classes/RSS/BaseModel.html","",""],["RSS::BaseParser","","classes/RSS/BaseParser.html","",""],["RSS::BaseTrackBackModel","","classes/RSS/BaseTrackBackModel.html","",""],["RSS::ContentModel","","classes/RSS/ContentModel.html","",""],["RSS::ConversionError","","classes/RSS/ConversionError.html","","<p>Raised when a conversion failure occurs.\n"],["RSS::Converter","","classes/RSS/Converter.html","",""],["RSS::DublinCoreModel","","classes/RSS/DublinCoreModel.html","",""],["RSS::DublincoreModel","","classes/RSS/DublinCoreModel.html","",""],["RSS::Element","","classes/RSS/Element.html","",""],["RSS::Error","","classes/RSS/Error.html","","<p>The basic error all other RSS errors stem from. Rescue this error if you\nwant to handle any given RSS …\n"],["RSS::ITunesBaseModel","","classes/RSS/ITunesBaseModel.html","",""],["RSS::ITunesChannelModel","","classes/RSS/ITunesChannelModel.html","",""],["RSS::ITunesChannelModel::ITunesCategory","","classes/RSS/ITunesChannelModel/ITunesCategory.html","",""],["RSS::ITunesChannelModel::ITunesImage","","classes/RSS/ITunesChannelModel/ITunesImage.html","",""],["RSS::ITunesChannelModel::ITunesOwner","","classes/RSS/ITunesChannelModel/ITunesOwner.html","",""],["RSS::ITunesItemModel","","classes/RSS/ITunesItemModel.html","",""],["RSS::ITunesItemModel::ITunesDuration","","classes/RSS/ITunesItemModel/ITunesDuration.html","",""],["RSS::ITunesModelUtils","","classes/RSS/ITunesModelUtils.html","",""],["RSS::ImageFaviconModel","","classes/RSS/ImageFaviconModel.html","",""],["RSS::ImageFaviconModel::ImageFavicon","","classes/RSS/ImageFaviconModel/ImageFavicon.html","",""],["RSS::ImageItemModel","","classes/RSS/ImageItemModel.html","",""],["RSS::ImageItemModel::ImageItem","","classes/RSS/ImageItemModel/ImageItem.html","",""],["RSS::ImageModelUtils","","classes/RSS/ImageModelUtils.html","",""],["RSS::InvalidRSSError","","classes/RSS/InvalidRSSError.html","","<p>The InvalidRSSError error is the base class for a variety of errors related\nto a poorly-formed RSS feed. …\n"],["RSS::ListenerMixin","","classes/RSS/ListenerMixin.html","",""],["RSS::Maker","","classes/RSS/Maker.html","","<p>Provides a set of builders for various RSS objects\n<p>Feeds\n<p>RSS 0.91\n"],["RSS::Maker::Atom","","classes/RSS/Maker/Atom.html","",""],["RSS::Maker::Atom::Entry","","classes/RSS/Maker/Atom/Entry.html","",""],["RSS::Maker::Atom::Entry::Channel","","classes/RSS/Maker/Atom/Entry/Channel.html","",""],["RSS::Maker::Atom::Entry::Channel::Cloud","","classes/RSS/Maker/Atom/Entry/Channel/Cloud.html","",""],["RSS::Maker::Atom::Entry::Channel::Description","","classes/RSS/Maker/Atom/Entry/Channel/Description.html","",""],["RSS::Maker::Atom::Entry::Channel::Generator","","classes/RSS/Maker/Atom/Entry/Channel/Generator.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays","","classes/RSS/Maker/Atom/Entry/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipDays::Day","","classes/RSS/Maker/Atom/Entry/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours","","classes/RSS/Maker/Atom/Entry/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Entry::Channel::SkipHours::Hour","","classes/RSS/Maker/Atom/Entry/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Entry::Image","","classes/RSS/Maker/Atom/Entry/Image.html","",""],["RSS::Maker::Atom::Entry::Items","","classes/RSS/Maker/Atom/Entry/Items.html","",""],["RSS::Maker::Atom::Entry::Items::Item","","classes/RSS/Maker/Atom/Entry/Items/Item.html","",""],["RSS::Maker::Atom::Entry::Textinput","","classes/RSS/Maker/Atom/Entry/Textinput.html","",""],["RSS::Maker::Atom::Feed","","classes/RSS/Maker/Atom/Feed.html","",""],["RSS::Maker::Atom::Feed::Channel","","classes/RSS/Maker/Atom/Feed/Channel.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories","","classes/RSS/Maker/Atom/Feed/Channel/Categories.html","",""],["RSS::Maker::Atom::Feed::Channel::Categories::Category","","classes/RSS/Maker/Atom/Feed/Channel/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Channel::Cloud","","classes/RSS/Maker/Atom/Feed/Channel/Cloud.html","",""],["RSS::Maker::Atom::Feed::Channel::Generator","","classes/RSS/Maker/Atom/Feed/Channel/Generator.html","",""],["RSS::Maker::Atom::Feed::Channel::Links","","classes/RSS/Maker/Atom/Feed/Channel/Links.html","",""],["RSS::Maker::Atom::Feed::Channel::Links::Link","","classes/RSS/Maker/Atom/Feed/Channel/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays","","classes/RSS/Maker/Atom/Feed/Channel/SkipDays.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipDays::Day","","classes/RSS/Maker/Atom/Feed/Channel/SkipDays/Day.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours","","classes/RSS/Maker/Atom/Feed/Channel/SkipHours.html","",""],["RSS::Maker::Atom::Feed::Channel::SkipHours::Hour","","classes/RSS/Maker/Atom/Feed/Channel/SkipHours/Hour.html","",""],["RSS::Maker::Atom::Feed::Image","","classes/RSS/Maker/Atom/Feed/Image.html","",""],["RSS::Maker::Atom::Feed::Items","","classes/RSS/Maker/Atom/Feed/Items.html","",""],["RSS::Maker::Atom::Feed::Items::Item","","classes/RSS/Maker/Atom/Feed/Items/Item.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories","","classes/RSS/Maker/Atom/Feed/Items/Item/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Categories::Category","","classes/RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Content","","classes/RSS/Maker/Atom/Feed/Items/Item/Content.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Enclosure","","classes/RSS/Maker/Atom/Feed/Items/Item/Enclosure.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Guid","","classes/RSS/Maker/Atom/Feed/Items/Item/Guid.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links","","classes/RSS/Maker/Atom/Feed/Items/Item/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Links::Link","","classes/RSS/Maker/Atom/Feed/Items/Item/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source","","classes/RSS/Maker/Atom/Feed/Items/Item/Source.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Generator","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Icon","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::Atom::Feed::Items::Item::Source::Logo","","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html","",""],["RSS::Maker::Atom::Feed::Textinput","","classes/RSS/Maker/Atom/Feed/Textinput.html","",""],["RSS::Maker::AtomCategory","","classes/RSS/Maker/AtomCategory.html","",""],["RSS::Maker::AtomGenerator","","classes/RSS/Maker/AtomGenerator.html","",""],["RSS::Maker::AtomLink","","classes/RSS/Maker/AtomLink.html","",""],["RSS::Maker::AtomLogo","","classes/RSS/Maker/AtomLogo.html","",""],["RSS::Maker::AtomPersonConstructBase","","classes/RSS/Maker/AtomPersonConstructBase.html","",""],["RSS::Maker::AtomPersons","","classes/RSS/Maker/AtomPersons.html","",""],["RSS::Maker::AtomTextConstruct","","classes/RSS/Maker/AtomTextConstruct.html","",""],["RSS::Maker::AtomTextConstructBase","","classes/RSS/Maker/AtomTextConstructBase.html","",""],["RSS::Maker::AtomTextConstructBase::EnsureXMLContent","","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html","",""],["RSS::Maker::Base","","classes/RSS/Maker/Base.html","",""],["RSS::Maker::ChannelBase","","classes/RSS/Maker/ChannelBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase","","classes/RSS/Maker/ChannelBase/AuthorsBase.html","",""],["RSS::Maker::ChannelBase::AuthorsBase::AuthorBase","","classes/RSS/Maker/ChannelBase/AuthorsBase/AuthorBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase","","classes/RSS/Maker/ChannelBase/CategoriesBase.html","",""],["RSS::Maker::ChannelBase::CategoriesBase::CategoryBase","","classes/RSS/Maker/ChannelBase/CategoriesBase/CategoryBase.html","",""],["RSS::Maker::ChannelBase::CloudBase","","classes/RSS/Maker/ChannelBase/CloudBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase","","classes/RSS/Maker/ChannelBase/ContributorsBase.html","",""],["RSS::Maker::ChannelBase::ContributorsBase::ContributorBase","","classes/RSS/Maker/ChannelBase/ContributorsBase/ContributorBase.html","",""],["RSS::Maker::ChannelBase::CopyrightBase","","classes/RSS/Maker/ChannelBase/CopyrightBase.html","",""],["RSS::Maker::ChannelBase::DescriptionBase","","classes/RSS/Maker/ChannelBase/DescriptionBase.html","",""],["RSS::Maker::ChannelBase::GeneratorBase","","classes/RSS/Maker/ChannelBase/GeneratorBase.html","",""],["RSS::Maker::ChannelBase::ITunesCategories","","classes/RSS/Maker/ChannelBase/ITunesCategories.html","",""],["RSS::Maker::ChannelBase::ITunesCategories::ITunesCategory","","classes/RSS/Maker/ChannelBase/ITunesCategories/ITunesCategory.html","",""],["RSS::Maker::ChannelBase::ITunesImage","","classes/RSS/Maker/ChannelBase/ITunesImage.html","",""],["RSS::Maker::ChannelBase::ITunesOwner","","classes/RSS/Maker/ChannelBase/ITunesOwner.html","",""],["RSS::Maker::ChannelBase::LinksBase","","classes/RSS/Maker/ChannelBase/LinksBase.html","",""],["RSS::Maker::ChannelBase::LinksBase::LinkBase","","classes/RSS/Maker/ChannelBase/LinksBase/LinkBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase","","classes/RSS/Maker/ChannelBase/SkipDaysBase.html","",""],["RSS::Maker::ChannelBase::SkipDaysBase::DayBase","","classes/RSS/Maker/ChannelBase/SkipDaysBase/DayBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase","","classes/RSS/Maker/ChannelBase/SkipHoursBase.html","",""],["RSS::Maker::ChannelBase::SkipHoursBase::HourBase","","classes/RSS/Maker/ChannelBase/SkipHoursBase/HourBase.html","",""],["RSS::Maker::ChannelBase::TitleBase","","classes/RSS/Maker/ChannelBase/TitleBase.html","",""],["RSS::Maker::ContentModel","","classes/RSS/Maker/ContentModel.html","",""],["RSS::Maker::DublinCoreModel","","classes/RSS/Maker/DublinCoreModel.html","",""],["RSS::Maker::ITunesBaseModel","","classes/RSS/Maker/ITunesBaseModel.html","",""],["RSS::Maker::ITunesChannelModel","","classes/RSS/Maker/ITunesChannelModel.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase","","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesImageBase","","classes/RSS/Maker/ITunesChannelModel/ITunesImageBase.html","",""],["RSS::Maker::ITunesChannelModel::ITunesOwnerBase","","classes/RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html","",""],["RSS::Maker::ITunesItemModel","","classes/RSS/Maker/ITunesItemModel.html","",""],["RSS::Maker::ITunesItemModel::ITunesDurationBase","","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html","",""],["RSS::Maker::ImageBase","","classes/RSS/Maker/ImageBase.html","",""],["RSS::Maker::ImageFaviconModel","","classes/RSS/Maker/ImageFaviconModel.html","",""],["RSS::Maker::ImageFaviconModel::ImageFaviconBase","","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html","",""],["RSS::Maker::ImageItemModel","","classes/RSS/Maker/ImageItemModel.html","",""],["RSS::Maker::ImageItemModel::ImageItemBase","","classes/RSS/Maker/ImageItemModel/ImageItemBase.html","",""],["RSS::Maker::ItemsBase","","classes/RSS/Maker/ItemsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase","","classes/RSS/Maker/ItemsBase/ItemBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ContentBase","","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::DescriptionBase","","classes/RSS/Maker/ItemsBase/ItemBase/DescriptionBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::EnclosureBase","","classes/RSS/Maker/ItemsBase/ItemBase/EnclosureBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::GuidBase","","classes/RSS/Maker/ItemsBase/ItemBase/GuidBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::ITunesDuration","","classes/RSS/Maker/ItemsBase/ItemBase/ITunesDuration.html","",""],["RSS::Maker::ItemsBase::ItemBase::RightsBase","","classes/RSS/Maker/ItemsBase/ItemBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::IconBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/IconBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::LogoBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/LogoBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::RightsBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/RightsBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::SubtitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/SubtitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::SourceBase::TitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase/TitleBase.html","",""],["RSS::Maker::ItemsBase::ItemBase::TitleBase","","classes/RSS/Maker/ItemsBase/ItemBase/TitleBase.html","",""],["RSS::Maker::RSS09","","classes/RSS/Maker/RSS09.html","",""],["RSS::Maker::RSS091","","classes/RSS/Maker/RSS091.html","",""],["RSS::Maker::RSS091::Channel","","classes/RSS/Maker/RSS091/Channel.html","",""],["RSS::Maker::RSS091::Image","","classes/RSS/Maker/RSS091/Image.html","",""],["RSS::Maker::RSS091::Items","","classes/RSS/Maker/RSS091/Items.html","",""],["RSS::Maker::RSS091::Items::Item","","classes/RSS/Maker/RSS091/Items/Item.html","",""],["RSS::Maker::RSS091::Textinput","","classes/RSS/Maker/RSS091/Textinput.html","",""],["RSS::Maker::RSS092","","classes/RSS/Maker/RSS092.html","",""],["RSS::Maker::RSS092::Channel","","classes/RSS/Maker/RSS092/Channel.html","",""],["RSS::Maker::RSS092::Image","","classes/RSS/Maker/RSS092/Image.html","",""],["RSS::Maker::RSS092::Items","","classes/RSS/Maker/RSS092/Items.html","",""],["RSS::Maker::RSS092::Items::Item","","classes/RSS/Maker/RSS092/Items/Item.html","",""],["RSS::Maker::RSS092::Textinput","","classes/RSS/Maker/RSS092/Textinput.html","",""],["RSS::Maker::RSS09::Channel","","classes/RSS/Maker/RSS09/Channel.html","",""],["RSS::Maker::RSS09::Channel::Authors","","classes/RSS/Maker/RSS09/Channel/Authors.html","",""],["RSS::Maker::RSS09::Channel::Authors::Author","","classes/RSS/Maker/RSS09/Channel/Authors/Author.html","",""],["RSS::Maker::RSS09::Channel::Categories","","classes/RSS/Maker/RSS09/Channel/Categories.html","",""],["RSS::Maker::RSS09::Channel::Categories::Category","","classes/RSS/Maker/RSS09/Channel/Categories/Category.html","",""],["RSS::Maker::RSS09::Channel::Cloud","","classes/RSS/Maker/RSS09/Channel/Cloud.html","",""],["RSS::Maker::RSS09::Channel::Contributors","","classes/RSS/Maker/RSS09/Channel/Contributors.html","",""],["RSS::Maker::RSS09::Channel::Contributors::Contributor","","classes/RSS/Maker/RSS09/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Channel::Copyright","","classes/RSS/Maker/RSS09/Channel/Copyright.html","",""],["RSS::Maker::RSS09::Channel::Description","","classes/RSS/Maker/RSS09/Channel/Description.html","",""],["RSS::Maker::RSS09::Channel::Generator","","classes/RSS/Maker/RSS09/Channel/Generator.html","",""],["RSS::Maker::RSS09::Channel::Links","","classes/RSS/Maker/RSS09/Channel/Links.html","",""],["RSS::Maker::RSS09::Channel::Links::Link","","classes/RSS/Maker/RSS09/Channel/Links/Link.html","",""],["RSS::Maker::RSS09::Channel::SkipDays","","classes/RSS/Maker/RSS09/Channel/SkipDays.html","",""],["RSS::Maker::RSS09::Channel::SkipDays::Day","","classes/RSS/Maker/RSS09/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS09::Channel::SkipHours","","classes/RSS/Maker/RSS09/Channel/SkipHours.html","",""],["RSS::Maker::RSS09::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS09/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS09::Channel::Title","","classes/RSS/Maker/RSS09/Channel/Title.html","",""],["RSS::Maker::RSS09::Image","","classes/RSS/Maker/RSS09/Image.html","",""],["RSS::Maker::RSS09::Items","","classes/RSS/Maker/RSS09/Items.html","",""],["RSS::Maker::RSS09::Items::Item","","classes/RSS/Maker/RSS09/Items/Item.html","",""],["RSS::Maker::RSS09::Items::Item::Authors","","classes/RSS/Maker/RSS09/Items/Item/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Authors::Author","","classes/RSS/Maker/RSS09/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Categories","","classes/RSS/Maker/RSS09/Items/Item/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Categories::Category","","classes/RSS/Maker/RSS09/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Content","","classes/RSS/Maker/RSS09/Items/Item/Content.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors","","classes/RSS/Maker/RSS09/Items/Item/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Contributors::Contributor","","classes/RSS/Maker/RSS09/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Description","","classes/RSS/Maker/RSS09/Items/Item/Description.html","",""],["RSS::Maker::RSS09::Items::Item::Enclosure","","classes/RSS/Maker/RSS09/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS09::Items::Item::Guid","","classes/RSS/Maker/RSS09/Items/Item/Guid.html","",""],["RSS::Maker::RSS09::Items::Item::Links","","classes/RSS/Maker/RSS09/Items/Item/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Links::Link","","classes/RSS/Maker/RSS09/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Rights","","classes/RSS/Maker/RSS09/Items/Item/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source","","classes/RSS/Maker/RSS09/Items/Item/Source.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors","","classes/RSS/Maker/RSS09/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Authors::Author","","classes/RSS/Maker/RSS09/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories","","classes/RSS/Maker/RSS09/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Categories::Category","","classes/RSS/Maker/RSS09/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors","","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Contributors::Contributor","","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Generator","","classes/RSS/Maker/RSS09/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Icon","","classes/RSS/Maker/RSS09/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links","","classes/RSS/Maker/RSS09/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS09/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Logo","","classes/RSS/Maker/RSS09/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Rights","","classes/RSS/Maker/RSS09/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Subtitle","","classes/RSS/Maker/RSS09/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS09::Items::Item::Source::Title","","classes/RSS/Maker/RSS09/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS09::Items::Item::Title","","classes/RSS/Maker/RSS09/Items/Item/Title.html","",""],["RSS::Maker::RSS09::Textinput","","classes/RSS/Maker/RSS09/Textinput.html","",""],["RSS::Maker::RSS10","","classes/RSS/Maker/RSS10.html","",""],["RSS::Maker::RSS10::Channel","","classes/RSS/Maker/RSS10/Channel.html","",""],["RSS::Maker::RSS10::Channel::Authors","","classes/RSS/Maker/RSS10/Channel/Authors.html","",""],["RSS::Maker::RSS10::Channel::Authors::Author","","classes/RSS/Maker/RSS10/Channel/Authors/Author.html","",""],["RSS::Maker::RSS10::Channel::Categories","","classes/RSS/Maker/RSS10/Channel/Categories.html","",""],["RSS::Maker::RSS10::Channel::Categories::Category","","classes/RSS/Maker/RSS10/Channel/Categories/Category.html","",""],["RSS::Maker::RSS10::Channel::Cloud","","classes/RSS/Maker/RSS10/Channel/Cloud.html","",""],["RSS::Maker::RSS10::Channel::Contributors","","classes/RSS/Maker/RSS10/Channel/Contributors.html","",""],["RSS::Maker::RSS10::Channel::Contributors::Contributor","","classes/RSS/Maker/RSS10/Channel/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Channel::Copyright","","classes/RSS/Maker/RSS10/Channel/Copyright.html","",""],["RSS::Maker::RSS10::Channel::Description","","classes/RSS/Maker/RSS10/Channel/Description.html","",""],["RSS::Maker::RSS10::Channel::Generator","","classes/RSS/Maker/RSS10/Channel/Generator.html","",""],["RSS::Maker::RSS10::Channel::Links","","classes/RSS/Maker/RSS10/Channel/Links.html","",""],["RSS::Maker::RSS10::Channel::Links::Link","","classes/RSS/Maker/RSS10/Channel/Links/Link.html","",""],["RSS::Maker::RSS10::Channel::SkipDays","","classes/RSS/Maker/RSS10/Channel/SkipDays.html","",""],["RSS::Maker::RSS10::Channel::SkipDays::Day","","classes/RSS/Maker/RSS10/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS10::Channel::SkipHours","","classes/RSS/Maker/RSS10/Channel/SkipHours.html","",""],["RSS::Maker::RSS10::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS10/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS10::Channel::Title","","classes/RSS/Maker/RSS10/Channel/Title.html","",""],["RSS::Maker::RSS10::Image","","classes/RSS/Maker/RSS10/Image.html","",""],["RSS::Maker::RSS10::Items","","classes/RSS/Maker/RSS10/Items.html","",""],["RSS::Maker::RSS10::Items::Item","","classes/RSS/Maker/RSS10/Items/Item.html","",""],["RSS::Maker::RSS10::Items::Item::Authors","","classes/RSS/Maker/RSS10/Items/Item/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Authors::Author","","classes/RSS/Maker/RSS10/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Categories","","classes/RSS/Maker/RSS10/Items/Item/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Categories::Category","","classes/RSS/Maker/RSS10/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Content","","classes/RSS/Maker/RSS10/Items/Item/Content.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors","","classes/RSS/Maker/RSS10/Items/Item/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Contributors::Contributor","","classes/RSS/Maker/RSS10/Items/Item/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Description","","classes/RSS/Maker/RSS10/Items/Item/Description.html","",""],["RSS::Maker::RSS10::Items::Item::Enclosure","","classes/RSS/Maker/RSS10/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS10::Items::Item::Guid","","classes/RSS/Maker/RSS10/Items/Item/Guid.html","",""],["RSS::Maker::RSS10::Items::Item::Links","","classes/RSS/Maker/RSS10/Items/Item/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Links::Link","","classes/RSS/Maker/RSS10/Items/Item/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Rights","","classes/RSS/Maker/RSS10/Items/Item/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source","","classes/RSS/Maker/RSS10/Items/Item/Source.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors","","classes/RSS/Maker/RSS10/Items/Item/Source/Authors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Authors::Author","","classes/RSS/Maker/RSS10/Items/Item/Source/Authors/Author.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories","","classes/RSS/Maker/RSS10/Items/Item/Source/Categories.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Categories::Category","","classes/RSS/Maker/RSS10/Items/Item/Source/Categories/Category.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors","","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Contributors::Contributor","","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors/Contributor.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Generator","","classes/RSS/Maker/RSS10/Items/Item/Source/Generator.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Icon","","classes/RSS/Maker/RSS10/Items/Item/Source/Icon.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links","","classes/RSS/Maker/RSS10/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS10/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Logo","","classes/RSS/Maker/RSS10/Items/Item/Source/Logo.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Rights","","classes/RSS/Maker/RSS10/Items/Item/Source/Rights.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Subtitle","","classes/RSS/Maker/RSS10/Items/Item/Source/Subtitle.html","",""],["RSS::Maker::RSS10::Items::Item::Source::Title","","classes/RSS/Maker/RSS10/Items/Item/Source/Title.html","",""],["RSS::Maker::RSS10::Items::Item::Title","","classes/RSS/Maker/RSS10/Items/Item/Title.html","",""],["RSS::Maker::RSS10::Textinput","","classes/RSS/Maker/RSS10/Textinput.html","",""],["RSS::Maker::RSS20","","classes/RSS/Maker/RSS20.html","",""],["RSS::Maker::RSS20::Channel","","classes/RSS/Maker/RSS20/Channel.html","",""],["RSS::Maker::RSS20::Channel::Categories","","classes/RSS/Maker/RSS20/Channel/Categories.html","",""],["RSS::Maker::RSS20::Channel::Categories::Category","","classes/RSS/Maker/RSS20/Channel/Categories/Category.html","",""],["RSS::Maker::RSS20::Channel::Cloud","","classes/RSS/Maker/RSS20/Channel/Cloud.html","",""],["RSS::Maker::RSS20::Channel::Generator","","classes/RSS/Maker/RSS20/Channel/Generator.html","",""],["RSS::Maker::RSS20::Channel::SkipDays","","classes/RSS/Maker/RSS20/Channel/SkipDays.html","",""],["RSS::Maker::RSS20::Channel::SkipDays::Day","","classes/RSS/Maker/RSS20/Channel/SkipDays/Day.html","",""],["RSS::Maker::RSS20::Channel::SkipHours","","classes/RSS/Maker/RSS20/Channel/SkipHours.html","",""],["RSS::Maker::RSS20::Channel::SkipHours::Hour","","classes/RSS/Maker/RSS20/Channel/SkipHours/Hour.html","",""],["RSS::Maker::RSS20::Image","","classes/RSS/Maker/RSS20/Image.html","",""],["RSS::Maker::RSS20::Items","","classes/RSS/Maker/RSS20/Items.html","",""],["RSS::Maker::RSS20::Items::Item","","classes/RSS/Maker/RSS20/Items/Item.html","",""],["RSS::Maker::RSS20::Items::Item::Authors","","classes/RSS/Maker/RSS20/Items/Item/Authors.html","",""],["RSS::Maker::RSS20::Items::Item::Authors::Author","","classes/RSS/Maker/RSS20/Items/Item/Authors/Author.html","",""],["RSS::Maker::RSS20::Items::Item::Categories","","classes/RSS/Maker/RSS20/Items/Item/Categories.html","",""],["RSS::Maker::RSS20::Items::Item::Categories::Category","","classes/RSS/Maker/RSS20/Items/Item/Categories/Category.html","",""],["RSS::Maker::RSS20::Items::Item::Enclosure","","classes/RSS/Maker/RSS20/Items/Item/Enclosure.html","",""],["RSS::Maker::RSS20::Items::Item::Guid","","classes/RSS/Maker/RSS20/Items/Item/Guid.html","",""],["RSS::Maker::RSS20::Items::Item::Source","","classes/RSS/Maker/RSS20/Items/Item/Source.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links","","classes/RSS/Maker/RSS20/Items/Item/Source/Links.html","",""],["RSS::Maker::RSS20::Items::Item::Source::Links::Link","","classes/RSS/Maker/RSS20/Items/Item/Source/Links/Link.html","",""],["RSS::Maker::RSS20::Textinput","","classes/RSS/Maker/RSS20/Textinput.html","",""],["RSS::Maker::RSSBase","","classes/RSS/Maker/RSSBase.html","",""],["RSS::Maker::SetupDefaultDate","","classes/RSS/Maker/SetupDefaultDate.html","",""],["RSS::Maker::SetupDefaultLanguage","","classes/RSS/Maker/SetupDefaultLanguage.html","",""],["RSS::Maker::SlashModel","","classes/RSS/Maker/SlashModel.html","",""],["RSS::Maker::SyndicationModel","","classes/RSS/Maker/SyndicationModel.html","",""],["RSS::Maker::TaxonomyTopicModel","","classes/RSS/Maker/TaxonomyTopicModel.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase","","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html","",""],["RSS::Maker::TaxonomyTopicsModel","","classes/RSS/Maker/TaxonomyTopicsModel.html","",""],["RSS::Maker::TaxonomyTopicsModel::TaxonomyTopicsBase","","classes/RSS/Maker/TaxonomyTopicsModel/TaxonomyTopicsBase.html","",""],["RSS::Maker::TextinputBase","","classes/RSS/Maker/TextinputBase.html","",""],["RSS::Maker::TrackBackModel","","classes/RSS/Maker/TrackBackModel.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase","","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase.html","",""],["RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html","",""],["RSS::Maker::XMLStyleSheets","","classes/RSS/Maker/XMLStyleSheets.html","",""],["RSS::Maker::XMLStyleSheets::XMLStyleSheet","","classes/RSS/Maker/XMLStyleSheets/XMLStyleSheet.html","",""],["RSS::MissingAttributeError","","classes/RSS/MissingAttributeError.html","","<p>Certain attributes are required on specific tags in an RSS feed. If a feed\nis missing one of these attributes, …\n"],["RSS::MissingTagError","","classes/RSS/MissingTagError.html","","<p>Since RSS is based on XML, it must have opening and closing tags that\nmatch. If they don&#39;t, a MissingTagError …\n"],["RSS::NSError","","classes/RSS/NSError.html","",""],["RSS::NotAvailableValueError","","classes/RSS/NotAvailableValueError.html","","<p>Attributes are in key-value form, and if there&#39;s no value provided for\nan attribute, a NotAvailableValueError …\n"],["RSS::NotExpectedTagError","","classes/RSS/NotExpectedTagError.html","","<p>Raised when an unexpected tag is encountered.\n"],["RSS::NotSetError","","classes/RSS/NotSetError.html","","<p>Raised when a required variable is not set.\n"],["RSS::NotValidXMLParser","","classes/RSS/NotValidXMLParser.html","",""],["RSS::NotWellFormedError","","classes/RSS/NotWellFormedError.html","",""],["RSS::OverlappedPrefixError","","classes/RSS/OverlappedPrefixError.html","","<p>RSS, being an XML-based format, has namespace support. If two namespaces\nare declared with the same name, …\n"],["RSS::Parser","","classes/RSS/Parser.html","",""],["RSS::RDF","","classes/RSS/RDF.html","",""],["RSS::RDF::Bag","","classes/RSS/RDF/Bag.html","",""],["RSS::RDF::Bag::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Channel","","classes/RSS/RDF/Channel.html","",""],["RSS::RDF::Channel::Image","","classes/RSS/RDF/Channel/Image.html","",""],["RSS::RDF::Channel::Items","","classes/RSS/RDF/Channel/Items.html","",""],["RSS::RDF::Channel::Items::Seq","","classes/RSS/RDF/Seq.html","",""],["RSS::RDF::Channel::Textinput","","classes/RSS/RDF/Channel/Textinput.html","",""],["RSS::RDF::Image","","classes/RSS/RDF/Image.html","",""],["RSS::RDF::Item","","classes/RSS/RDF/Item.html","",""],["RSS::RDF::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Seq","","classes/RSS/RDF/Seq.html","",""],["RSS::RDF::Seq::Li","","classes/RSS/RDF/Li.html","",""],["RSS::RDF::Textinput","","classes/RSS/RDF/Textinput.html","",""],["RSS::REXMLLikeXMLParser","","classes/RSS/REXMLLikeXMLParser.html","",""],["RSS::REXMLListener","","classes/RSS/REXMLListener.html","",""],["RSS::REXMLParser","","classes/RSS/REXMLParser.html","",""],["RSS::RSS09","","classes/RSS/RSS09.html","","<p>RSS 0.9 support\n<p>RSS has three different versions. This module contains support for version\n0.9.1.\n<p>Producing …\n"],["RSS::RSS10","","classes/RSS/RSS10.html","","<p>RSS 1.0 support\n<p>RSS has three different versions. This module contains support for version\n1.0\n<p>Producing …\n"],["RSS::RootElementMixin","","classes/RSS/RootElementMixin.html","",""],["RSS::Rss","","classes/RSS/Rss.html","","<p>RSS 2.0 support\n<p>RSS has three different versions. This module contains support for version\n2.0\n<p>Producing …\n"],["RSS::Rss::Channel","","classes/RSS/Rss/Channel.html","",""],["RSS::Rss::Channel::Cloud","","classes/RSS/Rss/Channel/Cloud.html","",""],["RSS::Rss::Channel::Image","","classes/RSS/Rss/Channel/Image.html","",""],["RSS::Rss::Channel::Item","","classes/RSS/Rss/Channel/Item.html","",""],["RSS::Rss::Channel::Item::Category","","classes/RSS/Rss/Channel/Item/Category.html","",""],["RSS::Rss::Channel::Item::Enclosure","","classes/RSS/Rss/Channel/Item/Enclosure.html","",""],["RSS::Rss::Channel::Item::Guid","","classes/RSS/Rss/Channel/Item/Guid.html","",""],["RSS::Rss::Channel::Item::Source","","classes/RSS/Rss/Channel/Item/Source.html","",""],["RSS::Rss::Channel::SkipDays","","classes/RSS/Rss/Channel/SkipDays.html","",""],["RSS::Rss::Channel::SkipDays::Day","","classes/RSS/Rss/Channel/SkipDays/Day.html","",""],["RSS::Rss::Channel::SkipHours","","classes/RSS/Rss/Channel/SkipHours.html","",""],["RSS::Rss::Channel::SkipHours::Hour","","classes/RSS/Rss/Channel/SkipHours/Hour.html","",""],["RSS::Rss::Channel::TextInput","","classes/RSS/Rss/Channel/TextInput.html","",""],["RSS::SetupMaker","","classes/RSS/SetupMaker.html","",""],["RSS::SlashModel","","classes/RSS/SlashModel.html","",""],["RSS::SyndicationModel","","classes/RSS/SyndicationModel.html","",""],["RSS::TaxonomyTopicModel","","classes/RSS/TaxonomyTopicModel.html","",""],["RSS::TaxonomyTopicModel::TaxonomyTopic","","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html","",""],["RSS::TaxonomyTopicsModel","","classes/RSS/TaxonomyTopicsModel.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics","","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html","",""],["RSS::TaxonomyTopicsModel::TaxonomyTopics::Bag","","classes/RSS/RDF/Bag.html","",""],["RSS::TooMuchTagError","","classes/RSS/TooMuchTagError.html","","<p>Some tags must only exist a specific number of times in a given RSS feed.\nIf a feed has too many occurrences …\n"],["RSS::TrackBackModel10","","classes/RSS/TrackBackModel10.html","",""],["RSS::TrackBackModel10::TrackBackAbout","","classes/RSS/TrackBackModel10/TrackBackAbout.html","",""],["RSS::TrackBackModel10::TrackBackPing","","classes/RSS/TrackBackModel10/TrackBackPing.html","",""],["RSS::TrackBackModel20","","classes/RSS/TrackBackModel20.html","",""],["RSS::TrackBackModel20::TrackBackAbout","","classes/RSS/TrackBackModel20/TrackBackAbout.html","",""],["RSS::TrackBackModel20::TrackBackPing","","classes/RSS/TrackBackModel20/TrackBackPing.html","",""],["RSS::TrackBackUtils","","classes/RSS/TrackBackUtils.html","",""],["RSS::UnknownConversionMethodError","","classes/RSS/UnknownConversionMethodError.html","","<p>Raised when an unknown conversion error occurs.\n"],["RSS::UnknownTagError","","classes/RSS/UnknownTagError.html","","<p>RSS does not allow for free-form tag names, so if an RSS feed contains a\ntag that we don&#39;t know about, …\n"],["RSS::UnsupportedMakerVersionError","","classes/RSS/UnsupportedMakerVersionError.html","","<p>Raised when a RSS::Maker attempts to use an unknown maker.\n"],["RSS::Utils","","classes/RSS/Utils.html","","<p>RSS::Utils is a module that holds various utility functions that are used\nacross many parts of the rest …\n"],["RSS::Utils::CSV","","classes/RSS/Utils/CSV.html","",""],["RSS::Utils::ExplicitCleanOther","","classes/RSS/Utils/ExplicitCleanOther.html","",""],["RSS::Utils::InheritedReader","","classes/RSS/Utils/InheritedReader.html","",""],["RSS::Utils::YesOther","","classes/RSS/Utils/YesOther.html","",""],["RSS::XML","","classes/RSS/XML.html","",""],["RSS::XML::Element","","classes/RSS/XML/Element.html","",""],["RSS::XMLParserListener","","classes/RSS/XMLParserListener.html","",""],["RSS::XMLParserNotFound","","classes/RSS/XMLParserNotFound.html","",""],["RSS::XMLParserParser","","classes/RSS/XMLParserParser.html","",""],["RSS::XMLScanListener","","classes/RSS/XMLScanListener.html","",""],["RSS::XMLScanParser","","classes/RSS/XMLScanParser.html","",""],["RSS::XMLStyleSheet","","classes/RSS/XMLStyleSheet.html","",""],["RSS::XMLStyleSheetMixin","","classes/RSS/XMLStyleSheetMixin.html","",""],["Racc","","classes/Racc.html","","<p>Racc is a LALR(1) parser generator. It is written in Ruby itself, and\ngenerates Ruby programs.\n<p>Command-line …\n"],["Racc::CparseParams","","classes/Racc/CparseParams.html","",""],["Racc::ParseError","","classes/Racc/ParseError.html","",""],["Racc::ParseError","","classes/Racc/ParseError.html","",""],["Racc::Parser","","classes/Racc/Parser.html","",""],["Rake","","classes/Rake.html","",""],["Random","","classes/Random.html","","<p>Random provides an interface to Ruby&#39;s pseudo-random number generator,\nor PRNG.  The PRNG produces …\n"],["Random::Formatter","","classes/Random/Formatter.html","","<p>Format raw random number as Random does\n"],["Range","","classes/Range.html","","<p>A <code>Range</code> represents an interval—a set of values with a\nbeginning and an end. Ranges may be constructed …\n"],["RangeError","","classes/RangeError.html","","<p>Raised when a given numerical value is out of range.\n\n<pre><code>[1, 2, 3].drop(1 &lt;&lt; 100)\n</code></pre>\n<p><em>raises the exception:</em>\n"],["Rational","","classes/Rational.html","","<p>A rational number can be represented as a pair of integer numbers: a/b\n(b&gt;0), where a is the numerator …\n"],["Readline","","classes/Readline.html","","<p>The Readline module provides interface for GNU Readline. This module\ndefines a number of methods to facilitate …\n"],["Regexp","","classes/Regexp.html","","<p>A <code>Regexp</code> holds a regular expression, used to match a pattern\nagainst strings. Regexps are created using …\n"],["RegexpError","","classes/RegexpError.html","","<p>Raised when given an invalid regexp expression.\n\n<pre><code>Regexp.new(&quot;?&quot;)\n</code></pre>\n<p><em>raises the exception:</em>\n"],["Resolv","","classes/Resolv.html","","<p>Resolv is a thread-aware DNS resolver library written in Ruby.  Resolv can\nhandle multiple DNS requests …\n"],["Resolv::DNS","","classes/Resolv/DNS.html","","<p>Resolv::DNS is a DNS stub resolver.\n<p>Information taken from the following places:\n<p>STD0013\n"],["Resolv::DNS::Config","","classes/Resolv/DNS/Config.html","",""],["Resolv::DNS::Config::NXDomain","","classes/Resolv/DNS/Config/NXDomain.html","","<p>Indicates no such domain was found.\n"],["Resolv::DNS::Config::OtherResolvError","","classes/Resolv/DNS/Config/OtherResolvError.html","","<p>Indicates some other unhandled resolver error was encountered.\n"],["Resolv::DNS::DecodeError","","classes/Resolv/DNS/DecodeError.html","","<p>Indicates that the DNS response was unable to be decoded.\n"],["Resolv::DNS::EncodeError","","classes/Resolv/DNS/EncodeError.html","","<p>Indicates that the DNS request was unable to be encoded.\n"],["Resolv::DNS::Name","","classes/Resolv/DNS/Name.html","","<p>A representation of a DNS name.\n"],["Resolv::DNS::Query","","classes/Resolv/DNS/Query.html","","<p>A DNS query abstract class.\n"],["Resolv::DNS::Requester","","classes/Resolv/DNS/Requester.html","",""],["Resolv::DNS::Requester::RequestError","","classes/Resolv/DNS/Requester/RequestError.html","","<p>Indicates a problem with the DNS request.\n"],["Resolv::DNS::Resource","","classes/Resolv/DNS/Resource.html","","<p>A DNS resource abstract class.\n"],["Resolv::DNS::Resource::ANY","","classes/Resolv/DNS/Resource/ANY.html","","<p>A Query type requesting any RR.\n"],["Resolv::DNS::Resource::CNAME","","classes/Resolv/DNS/Resource/CNAME.html","","<p>The canonical name for an alias.\n"],["Resolv::DNS::Resource::DomainName","","classes/Resolv/DNS/Resource/DomainName.html","","<p>Domain Name resource abstract class.\n"],["Resolv::DNS::Resource::Generic","","classes/Resolv/DNS/Resource/Generic.html","","<p>A generic resource abstract class.\n"],["Resolv::DNS::Resource::HINFO","","classes/Resolv/DNS/Resource/HINFO.html","","<p>Host Information resource.\n"],["Resolv::DNS::Resource::IN","","classes/Resolv/DNS/Resource/IN.html","","<p>module IN contains ARPA Internet specific RRs.\n"],["Resolv::DNS::Resource::IN::A","","classes/Resolv/DNS/Resource/IN/A.html","","<p>IPv4 Address resource\n"],["Resolv::DNS::Resource::IN::AAAA","","classes/Resolv/DNS/Resource/IN/AAAA.html","","<p>An IPv6 address record.\n"],["Resolv::DNS::Resource::IN::SRV","","classes/Resolv/DNS/Resource/IN/SRV.html","","<p>SRV resource record defined in RFC 2782\n<p>These records identify the hostname and port that a service is …\n"],["Resolv::DNS::Resource::IN::WKS","","classes/Resolv/DNS/Resource/IN/WKS.html","","<p>Well Known Service resource.\n"],["Resolv::DNS::Resource::LOC","","classes/Resolv/DNS/Resource/LOC.html","","<p>Location resource\n"],["Resolv::DNS::Resource::MINFO","","classes/Resolv/DNS/Resource/MINFO.html","","<p>Mailing list or mailbox information.\n"],["Resolv::DNS::Resource::MX","","classes/Resolv/DNS/Resource/MX.html","","<p>Mail Exchanger resource.\n"],["Resolv::DNS::Resource::NS","","classes/Resolv/DNS/Resource/NS.html","","<p>An authoritative name server.\n"],["Resolv::DNS::Resource::PTR","","classes/Resolv/DNS/Resource/PTR.html","","<p>A Pointer to another DNS name.\n"],["Resolv::DNS::Resource::SOA","","classes/Resolv/DNS/Resource/SOA.html","","<p>Start Of Authority resource.\n"],["Resolv::DNS::Resource::TXT","","classes/Resolv/DNS/Resource/TXT.html","","<p>Unstructured text resource.\n"],["Resolv::Hosts","","classes/Resolv/Hosts.html","","<p>Resolv::Hosts is a hostname resolver that uses the system hosts file.\n"],["Resolv::IPv4","","classes/Resolv/IPv4.html","","<p>A Resolv::DNS IPv4 address.\n"],["Resolv::IPv6","","classes/Resolv/IPv6.html","","<p>A Resolv::DNS IPv6 address.\n"],["Resolv::LOC","","classes/Resolv/LOC.html","",""],["Resolv::LOC::Alt","","classes/Resolv/LOC/Alt.html","","<p>A Resolv::LOC::Alt\n"],["Resolv::LOC::Coord","","classes/Resolv/LOC/Coord.html","","<p>A Resolv::LOC::Coord\n"],["Resolv::LOC::Size","","classes/Resolv/LOC/Size.html","","<p>A Resolv::LOC::Size\n"],["Resolv::MDNS","","classes/Resolv/MDNS.html","","<p>Resolv::MDNS is a one-shot Multicast DNS (mDNS) resolver.  It blindly makes\nqueries to the mDNS addresses …\n"],["Resolv::ResolvError","","classes/Resolv/ResolvError.html","","<p>Indicates a failure to resolve a name or address.\n"],["Resolv::ResolvTimeout","","classes/Resolv/ResolvTimeout.html","","<p>Indicates a timeout resolving a name or address.\n"],["Rinda","","classes/Rinda.html","","<p>A module to implement the Linda distributed computing paradigm in Ruby.\n<p>Rinda is part of DRb (dRuby). …\n"],["Rinda::DRbObjectTemplate","","classes/Rinda/DRbObjectTemplate.html","","<p><em>Documentation?</em>\n"],["Rinda::InvalidHashTupleKey","","classes/Rinda/InvalidHashTupleKey.html","","<p>Raised when a hash-based tuple has an invalid key.\n"],["Rinda::NotifyTemplateEntry","","classes/Rinda/NotifyTemplateEntry.html","","<p>A NotifyTemplateEntry is returned by TupleSpace#notify and is notified of\nTupleSpace changes.  You may …\n"],["Rinda::RequestCanceledError","","classes/Rinda/RequestCanceledError.html","","<p>Raised when trying to use a canceled tuple.\n"],["Rinda::RequestExpiredError","","classes/Rinda/RequestExpiredError.html","","<p>Raised when trying to use an expired tuple.\n"],["Rinda::RindaError","","classes/Rinda/RindaError.html","","<p>Rinda error base class\n"],["Rinda::RingFinger","","classes/Rinda/RingFinger.html","","<p>RingFinger is used by RingServer clients to discover the RingServer&#39;s\nTupleSpace.  Typically, all …\n"],["Rinda::RingProvider","","classes/Rinda/RingProvider.html","","<p>RingProvider uses a RingServer advertised TupleSpace as a name service.\nTupleSpace clients can register …\n"],["Rinda::RingServer","","classes/Rinda/RingServer.html","","<p>A RingServer allows a Rinda::TupleSpace to be located via UDP broadcasts.\nDefault service location uses …\n"],["Rinda::SimpleRenewer","","classes/Rinda/SimpleRenewer.html","","<p>An SimpleRenewer allows a TupleSpace to check if a TupleEntry is still\nalive.\n"],["Rinda::Template","","classes/Rinda/Template.html","","<p>Templates are used to match tuples in Rinda.\n"],["Rinda::TemplateEntry","","classes/Rinda/TemplateEntry.html","","<p>A TemplateEntry is a Template together with expiry and cancellation data.\n"],["Rinda::Tuple","","classes/Rinda/Tuple.html","","<p>A tuple is the elementary object in Rinda programming. Tuples may be\nmatched against templates if the …\n"],["Rinda::TupleBag","","classes/Rinda/TupleBag.html","","<p>TupleBag is an unordered collection of tuples. It is the basis of\nTuplespace.\n"],["Rinda::TupleBag::TupleBin","","classes/Rinda/TupleBag/TupleBin.html","",""],["Rinda::TupleEntry","","classes/Rinda/TupleEntry.html","","<p>A TupleEntry is a Tuple (i.e. a possible entry in some Tuplespace) together\nwith expiry and cancellation …\n"],["Rinda::TupleSpace","","classes/Rinda/TupleSpace.html","","<p>The Tuplespace manages access to the tuples it contains, ensuring mutual\nexclusion requirements are met. …\n"],["Rinda::TupleSpaceProxy","","classes/Rinda/TupleSpaceProxy.html","","<p>TupleSpaceProxy allows a remote Tuplespace to appear as local.\n"],["Rinda::WaitTemplateEntry","","classes/Rinda/WaitTemplateEntry.html","","<p><em>Documentation?</em>\n"],["Ripper","","classes/Ripper.html","","<p>Ripper is a Ruby script parser.\n<p>You can get information from the parser with event-based style. Information\n…\n"],["Ripper::Filter","","classes/Ripper/Filter.html","","<p>This class handles only scanner events, which are dispatched in the\n&#39;right&#39; order (same with …\n"],["RubyLex","","classes/RubyLex.html","",""],["RubyToken","","classes/RubyToken.html","",""],["RubyToken::TkError","","classes/RubyToken/TkError.html","",""],["RubyToken::TkId","","classes/RubyToken/TkId.html","",""],["RubyToken::TkNode","","classes/RubyToken/TkNode.html","",""],["RubyToken::TkOPASGN","","classes/RubyToken/TkOPASGN.html","",""],["RubyToken::TkOp","","classes/RubyToken/TkOp.html","",""],["RubyToken::TkUnknownChar","","classes/RubyToken/TkUnknownChar.html","",""],["RubyToken::TkVal","","classes/RubyToken/TkVal.html","",""],["RubyToken::Token","","classes/RubyToken/Token.html","",""],["RubyVM","","classes/RubyVM.html","","<p>The RubyVM module provides some access to Ruby internals. This module is\nfor very limited purposes, such …\n"],["RubyVM::AbstractSyntaxTree","","classes/RubyVM/AbstractSyntaxTree.html","","<p>AbstractSyntaxTree provides methods to parse Ruby code into abstract syntax\ntrees. The nodes in the tree …\n"],["RubyVM::AbstractSyntaxTree::Node","","classes/RubyVM/AbstractSyntaxTree/Node.html","","<p>RubyVM::AbstractSyntaxTree::Node instances are created by parse methods in\nRubyVM::AbstractSyntaxTree …\n"],["RubyVM::InstructionSequence","","classes/RubyVM/InstructionSequence.html","","<p>The InstructionSequence class represents a compiled sequence of\ninstructions for the Ruby Virtual Machine …\n"],["RubyVM::MJIT","","classes/RubyVM/MJIT.html","","<p>RubyVM::MJIT\n"],["RuntimeError","","classes/RuntimeError.html","","<p>A generic error class raised when an invalid operation is attempted.\nKernel#raise will raise a RuntimeError …\n"],["SDBM","","classes/SDBM.html","","<p>SDBM provides a simple file-based key-value store, which can only store\nString keys and values.\n<p>Note that …\n"],["SDBMError","","classes/SDBMError.html","","<p>Exception class used to return errors from the sdbm library.\n"],["SOCKSSocket","","classes/SOCKSSocket.html","","<p>SOCKS is an Internet protocol that routes packets between a client and a\nserver through a proxy server. …\n"],["Scanf","","classes/Scanf.html","","<p>frozen_string_literal: false scanf for Ruby\n<p>Description\n<p>scanf is an implementation of the C function scanf(3), …\n"],["Scanf::FormatSpecifier","","classes/Scanf/FormatSpecifier.html","",""],["Scanf::FormatString","","classes/Scanf/FormatString.html","",""],["ScriptError","","classes/ScriptError.html","","<p>ScriptError is the superclass for errors raised when a script can not be\nexecuted because of a <code>LoadError</code> …\n"],["SecureRandom","","classes/SecureRandom.html","","<p>Secure random number generator interface.\n<p>This library is an interface to secure random number generators …\n"],["SecurityError","","classes/SecurityError.html","","<p>Raised when attempting a potential unsafe operation, typically when the\n$SAFE level is raised above 0. …\n"],["Set","","classes/Set.html","","<p>Set implements a collection of unordered values with no duplicates. This is\na hybrid of Array&#39;s intuitive …\n"],["Shell","","classes/Shell.html","","<p>Shell implements an idiomatic Ruby interface for common UNIX shell\ncommands.\n<p>It provides users the ability …\n"],["Shell::AppendFile","","classes/Shell/AppendFile.html","",""],["Shell::AppendIO","","classes/Shell/AppendIO.html","",""],["Shell::BuiltInCommand","","classes/Shell/BuiltInCommand.html","",""],["Shell::Cat","","classes/Shell/Cat.html","",""],["Shell::CommandProcessor","","classes/Shell/CommandProcessor.html","","<p>In order to execute a command on your OS, you need to define it as a Shell\nmethod.\n<p>Alternatively, you …\n"],["Shell::Concat","","classes/Shell/Concat.html","",""],["Shell::Echo","","classes/Shell/Echo.html","",""],["Shell::Error","","classes/Shell/Error.html","",""],["Shell::Filter","","classes/Shell/Filter.html","","<p>Any result of command execution is a Filter.\n<p>This class includes Enumerable, therefore a Filter object …\n"],["Shell::Glob","","classes/Shell/Glob.html","",""],["Shell::ProcessController","","classes/Shell/ProcessController.html","",""],["Shell::SystemCommand","","classes/Shell/SystemCommand.html","",""],["Shell::Tee","","classes/Shell/Tee.html","",""],["Shell::Thread","","classes/Shell/Thread.html","",""],["Shell::Void","","classes/Shell/Void.html","",""],["Shellwords","","classes/Shellwords.html","","<p>frozen-string-literal: true\n<p>Manipulates strings like the UNIX Bourne shell\n<p>This module manipulates strings …\n"],["Signal","","classes/Signal.html","","<p>Many operating systems allow signals to be sent to running processes. Some\nsignals have a defined effect …\n"],["SignalException","","classes/SignalException.html","","<p>Raised when a signal is received.\n\n<pre><code>begin\n  Process.kill(&#39;HUP&#39;,Process.pid)\n  sleep # wait for receiver ...</code></pre>\n"],["SimpleDelegator","","classes/SimpleDelegator.html","","<p>A concrete implementation of Delegator, this class provides the means to\ndelegate all supported method …\n"],["SingleForwardable","","classes/SingleForwardable.html","","<p>SingleForwardable can be used to setup delegation at the object level as\nwell.\n\n<pre><code>printer = String.new\nprinter.extend ...\n</code></pre>\n"],["Singleton","","classes/Singleton.html","","<p>The Singleton module implements the Singleton pattern.\n<p>Usage\n<p>To use Singleton, include the module in your …\n"],["SizedQueue","","classes/SizedQueue.html","","<p>This class represents queues of specified size capacity.  The push\noperation may be blocked if the capacity …\n"],["Socket","","classes/Socket.html","","<p>Class <code>Socket</code> provides access to the underlying operating\nsystem socket implementations.  It can be used …\n"],["Socket::AncillaryData","","classes/Socket/AncillaryData.html","","<p>Socket::AncillaryData represents the ancillary data (control information)\nused by sendmsg and recvmsg …\n"],["Socket::Constants","","classes/Socket/Constants.html","","<p>Socket::Constants provides socket-related constants.  All possible socket\nconstants are listed in the …\n"],["Socket::Ifaddr","","classes/Socket/Ifaddr.html","","<p>Socket::Ifaddr represents a result of getifaddrs() function.\n"],["Socket::Option","","classes/Socket/Option.html","","<p>Socket::Option represents a socket option used by BasicSocket#getsockopt\nand BasicSocket#setsockopt. …\n"],["Socket::UDPSource","","classes/Socket/UDPSource.html","","<p>UDP/IP address information used by Socket.udp_server_loop.\n"],["SocketError","","classes/SocketError.html","","<p>SocketError is the error class for socket.\n"],["SortedSet","","classes/SortedSet.html","","<p>SortedSet implements a Set that guarantees that its elements are yielded in\nsorted order (according to …\n"],["StandardError","","classes/StandardError.html","","<p>The most standard error types are subclasses of StandardError. A rescue\nclause without an explicit Exception …\n"],["StopIteration","","classes/StopIteration.html","","<p>Raised to stop the iteration, in particular by Enumerator#next. It is\nrescued by Kernel#loop.\n\n<pre><code>loop do ...</code></pre>\n"],["String","","classes/String.html","","<p>A <code>String</code> object holds and manipulates an arbitrary sequence of\nbytes, typically representing characters. …\n"],["StringIO","","classes/StringIO.html","","<p>Pseudo I/O on String object.\n<p>Commonly used to simulate `$stdio` or `$stderr`\n<p>Examples\n"],["StringScanner","","classes/StringScanner.html","","<p>StringScanner provides for lexical scanning operations on a String.  Here\nis an example of its usage: …\n"],["StringScanner::Error","","classes/StringScanner/Error.html","",""],["Struct","","classes/Struct.html","","<p>A Struct is a convenient way to bundle a number of attributes together,\nusing accessor methods, without …\n"],["Symbol","","classes/Symbol.html","","<p><code>Symbol</code> objects represent names and some strings inside the\nRuby interpreter. They are generated using …\n"],["Sync","","classes/Sync.html","","<p>A class that provides two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Sync_m","","classes/Sync_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["Sync_m::Err","","classes/Sync_m/Err.html","","<p>exceptions\n"],["Sync_m::Err::LockModeFailer","","classes/Sync_m/Err/LockModeFailer.html","",""],["Sync_m::Err::UnknownLocker","","classes/Sync_m/Err/UnknownLocker.html","",""],["Synchronizer","","classes/Synchronizer.html","","<p>A class that provides two-phase lock with a counter.  See Sync_m for\ndetails.\n"],["Synchronizer_m","","classes/Synchronizer_m.html","","<p>A module that provides a two-phase lock with a counter.\n"],["SyntaxError","","classes/SyntaxError.html","","<p>Raised when encountering Ruby code with an invalid syntax.\n\n<pre><code>eval(&quot;1+1=2&quot;)\n</code></pre>\n<p><em>raises the exception:</em>\n"],["Syslog","","classes/Syslog.html","","<p>The syslog package provides a Ruby interface to the POSIX system logging\nfacility.\n<p>Syslog messages are …\n"],["Syslog::Constants","","classes/Syslog/Constants.html","",""],["Syslog::Facility","","classes/Syslog/Facility.html","",""],["Syslog::Level","","classes/Syslog/Level.html","",""],["Syslog::Logger","","classes/Syslog/Logger.html","","<p>Syslog::Logger is a Logger work-alike that logs via syslog instead of to a\nfile.  You can use Syslog::Logger …\n"],["Syslog::Logger::Formatter","","classes/Syslog/Logger/Formatter.html","","<p>Default formatter for log messages.\n"],["Syslog::Logger::Severity","","classes/Syslog/Logger/Severity.html","",""],["Syslog::Macros","","classes/Syslog/Macros.html","",""],["Syslog::Option","","classes/Syslog/Option.html","",""],["SystemCallError","","classes/SystemCallError.html","","<p>SystemCallError is the base class for all low-level platform-dependent\nerrors.\n<p>The errors available on …\n"],["SystemExit","","classes/SystemExit.html","","<p>Raised by <code>exit</code> to initiate the termination of the script.\n"],["SystemStackError","","classes/SystemStackError.html","","<p>Raised in case of a stack overflow.\n\n<pre><code>def me_myself_and_i\n  me_myself_and_i\nend\nme_myself_and_i\n</code></pre>\n<p><em>raises the</em> …\n"],["TCPServer","","classes/TCPServer.html","","<p>TCPServer represents a TCP/IP server socket.\n<p>A simple TCP server may look like:\n\n<pre><code>require &#39;socket&#39;\n\nserver ...\n</code></pre>\n"],["TCPSocket","","classes/TCPSocket.html","","<p>TCPSocket represents a TCP/IP client socket.\n<p>A simple client may look like:\n\n<pre><code>require &#39;socket&#39;\n\ns = TCPSocket.new ...\n</code></pre>\n"],["TSort","","classes/TSort.html","","<p>TSort implements topological sorting using Tarjan&#39;s algorithm for\nstrongly connected components. …\n"],["TSort::Cyclic","","classes/TSort/Cyclic.html","",""],["Tempfile","","classes/Tempfile.html","","<p>A utility class for managing temporary files. When you create a Tempfile\nobject, it will create a temporary …\n"],["ThWait","","classes/ThWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Thread","","classes/Thread.html","","<p>Threads are the Ruby implementation for a concurrent programming model.\n<p>Programs that require multiple …\n"],["Thread::Backtrace::Location","","classes/Thread/Backtrace/Location.html","","<p>An object representation of a stack frame, initialized by\nKernel#caller_locations.\n<p>For example:\n\n<pre><code># caller_locations.rb ...\n</code></pre>\n"],["ThreadError","","classes/ThreadError.html","","<p>Raised when an invalid operation is attempted on a thread.\n<p>For example, when no other thread has been …\n"],["ThreadGroup","","classes/ThreadGroup.html","","<p>ThreadGroup provides a means of keeping track of a number of threads as a\ngroup.\n<p>A given Thread object …\n"],["ThreadsWait","","classes/ThreadsWait.html","","<p>This class watches for termination of multiple threads.  Basic\nfunctionality (wait until specified threads …\n"],["Time","","classes/Time.html","","<p>Time is an abstraction of dates and times. Time is stored internally as the\nnumber of seconds with fraction …\n"],["Timeout","","classes/Timeout.html","","<p>frozen_string_literal: false Timeout long-running blocks\n<p>Synopsis\n\n<pre><code>require &#39;timeout&#39;\nstatus = Timeout::timeout(5) ...\n</code></pre>\n"],["Timeout::Error","","classes/Timeout/Error.html","","<p>Raised by Timeout.timeout when the block times out.\n"],["Timeout::TimeoutError","","classes/Timeout/TimeoutError.html","","<p>Raised by Timeout.timeout when the block times out.\n"],["TracePoint","","classes/TracePoint.html","","<p>A class that provides the functionality of Kernel#set_trace_func in a nice\nObject-Oriented API.\n<p>Example …\n"],["Tracer","","classes/Tracer.html","","<p>Outputs a source level execution trace of a Ruby program.\n<p>It does this by registering an event handler …\n"],["Tracer::Thread","","classes/Tracer/Thread.html","",""],["TrueClass","","classes/TrueClass.html","","<p>The global value <code>true</code> is the only instance of class\n<code>TrueClass</code> and represents a logically true value in …\n"],["TypeError","","classes/TypeError.html","","<p>Raised when encountering an object that is not of the expected type.\n\n<pre><code>[1, 2, 3].first(&quot;two&quot;)\n</code></pre>\n<p><em>raises the</em> …\n"],["UDPSocket","","classes/UDPSocket.html","","<p>UDPSocket represents a UDP/IP socket.\n"],["UNIXServer","","classes/UNIXServer.html","","<p>UNIXServer represents a UNIX domain stream server socket.\n"],["UNIXSocket","","classes/UNIXSocket.html","","<p>UNIXSocket represents a UNIX domain stream client socket.\n"],["URI","","classes/URI.html","","<p>frozen_string_literal: false URI is a module providing classes to handle\nUniform Resource Identifiers …\n"],["URI::BadURIError","","classes/URI/BadURIError.html","","<p>URI is valid, bad usage is not.\n"],["URI::Error","","classes/URI/Error.html","","<p>Base class for all URI exceptions.\n"],["URI::Escape","","classes/URI/Escape.html","","<p>Module for escaping unsafe characters with codes.\n"],["URI::FTP","","classes/URI/FTP.html","","<p>FTP URI syntax is defined by RFC1738 section 3.2.\n<p>This class will be redesigned because of difference …\n"],["URI::File","","classes/URI/File.html","","<p>The “file” URI is defined by RFC8089.\n"],["URI::Generic","","classes/URI/Generic.html","","<p>Base class for all URI classes. Implements generic URI syntax as per RFC\n2396.\n"],["URI::HTTP","","classes/URI/HTTP.html","","<p>The syntax of HTTP URIs is defined in RFC1738 section 3.3.\n<p>Note that the Ruby URI library allows HTTP …\n"],["URI::HTTPS","","classes/URI/HTTPS.html","","<p>The default port for HTTPS URIs is 443, and the scheme is &#39;https:&#39;\nrather than &#39;http:&#39;. …\n"],["URI::InvalidComponentError","","classes/URI/InvalidComponentError.html","","<p>Not a URI component.\n"],["URI::InvalidURIError","","classes/URI/InvalidURIError.html","","<p>Not a URI.\n"],["URI::LDAP","","classes/URI/LDAP.html","","<p>LDAP URI SCHEMA (described in RFC2255).\n"],["URI::LDAPS","","classes/URI/LDAPS.html","","<p>The default port for LDAPS URIs is 636, and the scheme is &#39;ldaps:&#39;\nrather than &#39;ldap:&#39;. …\n"],["URI::MailTo","","classes/URI/MailTo.html","","<p>RFC6068, the mailto URL scheme.\n"],["URI::REGEXP","","classes/URI/REGEXP.html","",""],["URI::RFC2396_Parser","","classes/URI/RFC2396_Parser.html","","<p>Class that parses String&#39;s into URI&#39;s.\n<p>It contains a Hash set of patterns and Regexp&#39;s that …\n"],["URI::RFC2396_REGEXP","","classes/URI/RFC2396_REGEXP.html","","<p>Includes URI::REGEXP::PATTERN\n"],["URI::RFC2396_REGEXP::PATTERN","","classes/URI/RFC2396_REGEXP/PATTERN.html","","<p>Patterns used to parse URI&#39;s\n"],["UnboundMethod","","classes/UnboundMethod.html","","<p>Ruby supports two forms of objectified methods. Class <code>Method</code>\nis used to represent methods that are associated …\n"],["UncaughtThrowError","","classes/UncaughtThrowError.html","","<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding <code>catch</code> block.\n\n<pre><code>throw &quot;foo&quot;, &quot;bar&quot;\n</code></pre>\n"],["UnicodeNormalize","","classes/UnicodeNormalize.html","","<p>define UnicodeNormalize module here so that we don&#39;t have to look it up\n"],["WEBrick","","classes/WEBrick.html","","<p>frozen_string_literal: false\n<p>WEB server toolkit.\n<p>WEBrick is an HTTP server toolkit that can be configured …\n"],["WEBrick::AccessLog","","classes/WEBrick/AccessLog.html","","<p>AccessLog provides logging to various files in various formats.\n<p>Multiple logs may be written to at the …\n"],["WEBrick::AccessLog::AccessLogError","","classes/WEBrick/AccessLog/AccessLogError.html","","<p>Raised if a parameter such as %e, %i, %o or %n is used without fetching a\nspecific field.\n"],["WEBrick::BasicLog","","classes/WEBrick/BasicLog.html","","<p>A generic logging class\n"],["WEBrick::CGI","","classes/WEBrick/CGI.html","","<p>A CGI library using WEBrick requests and responses.\n<p>Example:\n\n<pre><code>class MyCGI &lt; WEBrick::CGI\n  def do_GET req, ...</code></pre>\n"],["WEBrick::Config","","classes/WEBrick/Config.html","",""],["WEBrick::Cookie","","classes/WEBrick/Cookie.html","","<p>Processes HTTP cookies\n"],["WEBrick::Daemon","","classes/WEBrick/Daemon.html","","<p>A generic module for daemonizing a process\n"],["WEBrick::GenericServer","","classes/WEBrick/GenericServer.html","","<p>Base TCP server class.  You must subclass GenericServer and provide a #run\nmethod.\n"],["WEBrick::HTMLUtils","","classes/WEBrick/HTMLUtils.html","",""],["WEBrick::HTTPAuth","","classes/WEBrick/HTTPAuth.html","","<p>HTTPAuth provides both basic and digest authentication.\n<p>To enable authentication for requests in WEBrick …\n"],["WEBrick::HTTPAuth::Authenticator","","classes/WEBrick/HTTPAuth/Authenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes.\n"],["WEBrick::HTTPAuth::BasicAuth","","classes/WEBrick/HTTPAuth/BasicAuth.html","","<p>Basic Authentication for WEBrick\n<p>Use this class to add basic authentication to a WEBrick servlet.\n<p>Here …\n"],["WEBrick::HTTPAuth::DigestAuth","","classes/WEBrick/HTTPAuth/DigestAuth.html","","<p>RFC 2617 Digest Access Authentication for WEBrick\n<p>Use this class to add digest authentication to a WEBrick …\n"],["WEBrick::HTTPAuth::Htdigest","","classes/WEBrick/HTTPAuth/Htdigest.html","","<p>Htdigest accesses apache-compatible digest password files.  Passwords are\nmatched to a realm where they …\n"],["WEBrick::HTTPAuth::Htgroup","","classes/WEBrick/HTTPAuth/Htgroup.html","","<p>Htgroup accesses apache-compatible group files.  Htgroup can be used to\nprovide group-based authentication …\n"],["WEBrick::HTTPAuth::Htpasswd","","classes/WEBrick/HTTPAuth/Htpasswd.html","","<p>Htpasswd accesses apache-compatible password files.  Passwords are matched\nto a realm where they are …\n"],["WEBrick::HTTPAuth::ProxyAuthenticator","","classes/WEBrick/HTTPAuth/ProxyAuthenticator.html","","<p>Module providing generic support for both Digest and Basic authentication\nschemes for proxies.\n"],["WEBrick::HTTPAuth::ProxyBasicAuth","","classes/WEBrick/HTTPAuth/ProxyBasicAuth.html","","<p>Basic authentication for proxy servers.  See BasicAuth for details.\n"],["WEBrick::HTTPAuth::ProxyDigestAuth","","classes/WEBrick/HTTPAuth/ProxyDigestAuth.html","","<p>Digest authentication for proxy servers.  See DigestAuth for details.\n"],["WEBrick::HTTPAuth::UserDB","","classes/WEBrick/HTTPAuth/UserDB.html","","<p>User database mixin for HTTPAuth.  This mixin dispatches user record access\nto the underlying auth_type …\n"],["WEBrick::HTTPProxyServer","","classes/WEBrick/HTTPProxyServer.html","","<p>An HTTP Proxy server which proxies GET, HEAD and POST requests.\n<p>To create a simple proxy server:\n\n<pre><code>require ...\n</code></pre>\n"],["WEBrick::HTTPRequest","","classes/WEBrick/HTTPRequest.html","","<p>An HTTP request.  This is consumed by service and do_* methods in WEBrick\nservlets\n"],["WEBrick::HTTPResponse","","classes/WEBrick/HTTPResponse.html","","<p>An HTTP response.  This is filled in by the service or do_* methods of a\nWEBrick HTTP Servlet.\n"],["WEBrick::HTTPResponse::ChunkedWrapper","","classes/WEBrick/HTTPResponse/ChunkedWrapper.html","",""],["WEBrick::HTTPResponse::InvalidHeader","","classes/WEBrick/HTTPResponse/InvalidHeader.html","",""],["WEBrick::HTTPServer","","classes/WEBrick/HTTPServer.html","","<p>An HTTP Server\n"],["WEBrick::HTTPServerError","","classes/WEBrick/HTTPServerError.html","",""],["WEBrick::HTTPServlet","","classes/WEBrick/HTTPServlet.html","",""],["WEBrick::HTTPServlet::AbstractServlet","","classes/WEBrick/HTTPServlet/AbstractServlet.html","","<p>AbstractServlet allows HTTP server modules to be reused across multiple\nservers and allows encapsulation …\n"],["WEBrick::HTTPServlet::CGIHandler","","classes/WEBrick/HTTPServlet/CGIHandler.html","","<p>Servlet for handling CGI scripts\n<p>Example:\n\n<pre><code>server.mount(&#39;/cgi/my_script&#39;, WEBrick::HTTPServlet::CGIHandler, ...</code></pre>\n"],["WEBrick::HTTPServlet::DefaultFileHandler","","classes/WEBrick/HTTPServlet/DefaultFileHandler.html","","<p>Servlet for serving a single file.  You probably want to use the\nFileHandler servlet instead as it handles …\n"],["WEBrick::HTTPServlet::ERBHandler","","classes/WEBrick/HTTPServlet/ERBHandler.html","","<p>ERBHandler evaluates an ERB file and returns the result.  This handler is\nautomatically used if there …\n"],["WEBrick::HTTPServlet::FileHandler","","classes/WEBrick/HTTPServlet/FileHandler.html","","<p>Serves a directory including fancy indexing and a variety of other options.\n<p>Example:\n\n<pre><code>server.mount(&#39;/assets&#39;, ...</code></pre>\n"],["WEBrick::HTTPServlet::HTTPServletError","","classes/WEBrick/HTTPServlet/HTTPServletError.html","",""],["WEBrick::HTTPServlet::ProcHandler","","classes/WEBrick/HTTPServlet/ProcHandler.html","","<p>Mounts a proc at a path that accepts a request and response.\n<p>Instead of mounting this servlet with WEBrick::HTTPServer#mount …\n"],["WEBrick::HTTPStatus","","classes/WEBrick/HTTPStatus.html","","<p>This module is used to manager HTTP status codes.\n<p>See www.w3.org/Protocols/rfc2616/rfc2616-sec10.html …\n"],["WEBrick::HTTPStatus::ClientError","","classes/WEBrick/HTTPStatus/ClientError.html","","<p>Root of the HTTP client error statuses\n"],["WEBrick::HTTPStatus::EOFError","","classes/WEBrick/HTTPStatus/EOFError.html","",""],["WEBrick::HTTPStatus::Error","","classes/WEBrick/HTTPStatus/Error.html","","<p>Root of the HTTP error statuses\n"],["WEBrick::HTTPStatus::Info","","classes/WEBrick/HTTPStatus/Info.html","","<p>Root of the HTTP info statuses\n"],["WEBrick::HTTPStatus::Redirect","","classes/WEBrick/HTTPStatus/Redirect.html","","<p>Root of the HTTP redirect statuses\n"],["WEBrick::HTTPStatus::ServerError","","classes/WEBrick/HTTPStatus/ServerError.html","","<p>Root of the HTTP server error statuses\n"],["WEBrick::HTTPStatus::Status","","classes/WEBrick/HTTPStatus/Status.html","","<p>Root of the HTTP status class hierarchy\n"],["WEBrick::HTTPStatus::Success","","classes/WEBrick/HTTPStatus/Success.html","","<p>Root of the HTTP success statuses\n"],["WEBrick::HTTPUtils","","classes/WEBrick/HTTPUtils.html","","<p>HTTPUtils provides utility methods for working with the HTTP protocol.\n<p>This module is generally used internally …\n"],["WEBrick::HTTPUtils::FormData","","classes/WEBrick/HTTPUtils/FormData.html","","<p>Stores multipart form data.  FormData objects are created when\nWEBrick::HTTPUtils.parse_form_data is …\n"],["WEBrick::HTTPVersion","","classes/WEBrick/HTTPVersion.html","","<p>Represents an HTTP protocol version\n"],["WEBrick::Log","","classes/WEBrick/Log.html","","<p>A logging class that prepends a timestamp to each message.\n"],["WEBrick::SNIRequest","","classes/WEBrick/SNIRequest.html","",""],["WEBrick::ServerError","","classes/WEBrick/ServerError.html","","<p>Server error exception\n"],["WEBrick::SimpleServer","","classes/WEBrick/SimpleServer.html","","<p>Base server class\n"],["WEBrick::Utils","","classes/WEBrick/Utils.html","",""],["WEBrick::Utils::TimeoutHandler","","classes/WEBrick/Utils/TimeoutHandler.html","","<p>Class used to manage timeout handlers across multiple threads.\n<p>Timeout handlers should be managed by using …\n"],["WEBrick::Utils::TimeoutHandler::Process","","classes/WEBrick/Utils/TimeoutHandler/Process.html","",""],["WIN32OLE","","classes/WIN32OLE.html","","<p>WIN32OLE\n<p><code>WIN32OLE</code> objects represent OLE Automation object in Ruby.\n<p>By using WIN32OLE, you can access OLE …\n"],["WIN32OLE::VARIANT","","classes/WIN32OLE/VARIANT.html","","<p>The WIN32OLE::VARIANT module includes constants of VARIANT type constants.\nThe constants is used when …\n"],["WIN32OLEQueryInterfaceError","","classes/WIN32OLEQueryInterfaceError.html","",""],["WIN32OLERuntimeError","","classes/WIN32OLERuntimeError.html","","<p>Raised when OLE processing failed.\n<p>EX:\n\n<pre><code>obj = WIN32OLE.new(&quot;NonExistProgID&quot;)\n</code></pre>\n"],["WIN32OLE_EVENT","","classes/WIN32OLE_EVENT.html","","<p><code>WIN32OLE_EVENT</code> objects controls OLE event.\n"],["WIN32OLE_METHOD","","classes/WIN32OLE_METHOD.html","","<p><code>WIN32OLE_METHOD</code> objects represent OLE method information.\n"],["WIN32OLE_PARAM","","classes/WIN32OLE_PARAM.html","","<p><code>WIN32OLE_PARAM</code> objects represent param information of the OLE\nmethod.\n"],["WIN32OLE_RECORD","","classes/WIN32OLE_RECORD.html","","<p><code>WIN32OLE_RECORD</code> objects represents VT_RECORD OLE variant.\nWin32OLE returns WIN32OLE_RECORD object if …\n"],["WIN32OLE_TYPE","","classes/WIN32OLE_TYPE.html","","<p><code>WIN32OLE_TYPE</code> objects represent OLE type libarary information.\n"],["WIN32OLE_TYPELIB","","classes/WIN32OLE_TYPELIB.html","","<p><code>WIN32OLE_TYPELIB</code> objects represent OLE tyblib information.\n"],["WIN32OLE_VARIABLE","","classes/WIN32OLE_VARIABLE.html","","<p><code>WIN32OLE_VARIABLE</code> objects represent OLE variable information.\n"],["WIN32OLE_VARIANT","","classes/WIN32OLE_VARIANT.html","","<p><code>WIN32OLE_VARIANT</code> objects represents OLE variant.\n<p>Win32OLE converts Ruby object into OLE variant automatically …\n"],["Warning","","classes/Warning.html","","<p>The Warning module contains a single method named #warn, and the module\nextends itself, making <code>Warning.warn</code> …\n"],["WeakRef","","classes/WeakRef.html","","<p>Weak Reference class that allows a referenced object to be\ngarbage-collected.\n<p>A WeakRef may be used exactly …\n"],["WeakRef::RefError","","classes/WeakRef/RefError.html","","<p>RefError is raised when a referenced object has been recycled by the\ngarbage collector\n"],["XML","","classes/XML.html","",""],["XML::Parser","","classes/XML/Parser.html","",""],["XMLEncoding_ja","","classes/XMLEncoding_ja.html","",""],["XMLEncoding_ja::SJISHandler","","classes/XMLEncoding_ja/SJISHandler.html","",""],["XMP","","classes/XMP.html","","<p>An example printer for irb.\n<p>It&#39;s much like the standard library PrettyPrint, that shows the value …\n"],["XMP::StringInputMethod","","classes/XMP/StringInputMethod.html","","<p>A custom InputMethod class used by XMP for evaluating string io.\n"],["YAML","","classes/YAML.html","","<p>YAML Ain&#39;t Markup Language\n<p>This module provides a Ruby interface for data serialization in YAML\nformat. …\n"],["YAML::DBM","","classes/YAML/DBM.html","","<p>YAML + DBM = YDBM\n<p>YAML::DBM provides the same interface as ::DBM.\n<p>However, while DBM only allows strings …\n"],["YAML::Store","","classes/YAML/Store.html","","<p>YAML::Store provides the same functionality as PStore, except it uses YAML\nto dump objects instead of …\n"],["ZeroDivisionError","","classes/ZeroDivisionError.html","","<p>Raised when attempting to divide an integer by 0.\n\n<pre><code>42 / 0   #=&gt; ZeroDivisionError: divided by 0\n</code></pre>\n<p>Note that …\n"],["Zlib","","classes/Zlib.html","","<p>This module provides access to the zlib library. Zlib is designed to be a\nportable, free, general-purpose, …\n"],["Zlib::BufError","","classes/Zlib/BufError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_BUF_ERROR.\n<p>Usually if no progress is possible.\n"],["Zlib::DataError","","classes/Zlib/DataError.html","","<p>Subclass of Zlib::Error when zlib returns a Z_DATA_ERROR.\n<p>Usually if a stream was prematurely freed.\n"],["Zlib::Deflate","","classes/Zlib/Deflate.html","","<p>Zlib::Deflate is the class for compressing data.  See Zlib::ZStream for\nmore information.\n"],["Zlib::Error","","classes/Zlib/Error.html","","<p>The superclass for all exceptions raised by Ruby/zlib.\n<p>The following exceptions are defined as subclasses …\n"],["Zlib::GzipFile","","classes/Zlib/GzipFile.html","","<p>Zlib::GzipFile is an abstract class for handling a gzip formatted\ncompressed file. The operations are …\n"],["Zlib::GzipFile::CRCError","","classes/Zlib/GzipFile/CRCError.html","","<p>Raised when the CRC checksum recorded in gzip file footer is not equivalent\nto the CRC checksum of the …\n"],["Zlib::GzipFile::Error","","classes/Zlib/GzipFile/Error.html","","<p>Base class of errors that occur when processing GZIP files.\n"],["Zlib::GzipFile::LengthError","","classes/Zlib/GzipFile/LengthError.html","","<p>Raised when the data length recorded in the gzip file footer is not\nequivalent to the length of the actual …\n"],["Zlib::GzipFile::NoFooter","","classes/Zlib/GzipFile/NoFooter.html","","<p>Raised when gzip file footer is not found.\n"],["Zlib::GzipReader","","classes/Zlib/GzipReader.html","","<p>Zlib::GzipReader is the class for reading a gzipped file.  GzipReader\nshould be used as an IO, or -IO-like, …\n"],["Zlib::GzipWriter","","classes/Zlib/GzipWriter.html","","<p>Zlib::GzipWriter is a class for writing gzipped files.  GzipWriter should\nbe used with an instance of …\n"],["Zlib::Inflate","","classes/Zlib/Inflate.html","","<p>Zlib:Inflate is the class for decompressing compressed data.  Unlike\nZlib::Deflate, an instance of this …\n"],["Zlib::MemError","","classes/Zlib/MemError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_MEM_ERROR, usually if there was not enough memory.\n"],["Zlib::NeedDict","","classes/Zlib/NeedDict.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_NEED_DICT if a preset dictionary is needed at this\npoint. …\n"],["Zlib::StreamEnd","","classes/Zlib/StreamEnd.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_END is return if the end of the compressed\ndata has …\n"],["Zlib::StreamError","","classes/Zlib/StreamError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_STREAM_ERROR, usually if the stream state was\ninconsistent. …\n"],["Zlib::VersionError","","classes/Zlib/VersionError.html","","<p>Subclass of Zlib::Error\n<p>When zlib returns a Z_VERSION_ERROR, usually if the zlib library version is\nincompatible …\n"],["Zlib::ZStream","","classes/Zlib/ZStream.html","","<p>Zlib::ZStream is the abstract class for the stream which handles the\ncompressed data. The operations …\n"],["fatal","","classes/fatal.html","","<p>fatal is an Exception that is raised when Ruby has encountered a fatal\nerror and must exit.  You are …\n"],["unknown","","classes/unknown.html","",""],["!","BasicObject","classes/BasicObject.html#method-i-21","()","<p>Boolean negate.\n"],["!","Delegator","classes/Delegator.html#method-i-21","()","<p>Delegates ! to the _<em>getobj</em>_\n"],["!=","BasicObject","classes/BasicObject.html#method-i-21-3D","(p1)","<p>Returns true if two objects are not-equal, otherwise false.\n"],["!=","Delegator","classes/Delegator.html#method-i-21-3D","(obj)","<p>Returns true if two objects are not considered of equal value.\n"],["!~","Object","classes/Object.html#method-i-21~","(p1)","<p>Returns true if two objects do not match (using the <em>=~</em> method),\notherwise false.\n"],["%","BigDecimal","classes/BigDecimal.html#method-i-25","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["%","Float","classes/Float.html#method-i-25","(p1)","<p>Returns the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre><code>6543.21.modulo(137)      #=&gt; 104.21000000000004\n6543.21.modulo(137.24) ...\n</code></pre>\n"],["%","Integer","classes/Integer.html#method-i-25","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["%","Numeric","classes/Numeric.html#method-i-25","(p1)","<p><code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["%","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-25","(p1)",""],["%","Range","classes/Range.html#method-i-25","(p1)","<p>Iterates over the range, passing each <code>n</code>th element to the\nblock. If begin and end are numeric, <code>n</code> is added …\n"],["%","String","classes/String.html#method-i-25","(p1)","<p>Format—Uses <em>str</em> as a format specification, and returns the result\nof applying it to <em>arg</em>. If the format …\n"],["&","Array","classes/Array.html#method-i-26","(p1)","<p>Set Intersection — Returns a new array containing unique elements common to\nthe two arrays. The order …\n"],["&","FalseClass","classes/FalseClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","IPAddr","classes/IPAddr.html#method-i-26","(other)","<p>Returns a new ipaddr built by bitwise AND.\n"],["&","Integer","classes/Integer.html#method-i-26","(p1)","<p>Bitwise AND.\n"],["&","NilClass","classes/NilClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code>. <em>obj</em> is always evaluated as it is\nthe argument to a method call—there is no short-circuit …\n"],["&","Process::Status","classes/Process/Status.html#method-i-26","(p1)","<p>Logical AND of the bits in <em>stat</em> with <em>num</em>.\n\n<pre><code>fork { exit 0x37 }\nProcess.wait\nsprintf(&#39;%04x&#39;, $?.to_i)    ...\n</code></pre>\n"],["&","Set","classes/Set.html#method-i-26","(enum)","<p>Returns a new set containing elements common to the set and the given\nenumerable object.\n\n<pre><code>Set[1, 3, 5] ...\n</code></pre>\n"],["&","TrueClass","classes/TrueClass.html#method-i-26","(p1)","<p>And—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>, <code>true</code> otherwise.\n"],["*","Array","classes/Array.html#method-i-2A","(p1)","<p>Repetition — With a String argument, equivalent to\n<code>ary.join(str)</code>.\n<p>Otherwise, returns a new array built …\n"],["*","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2A","(x)","<p>Returns a new Tms object obtained by memberwise multiplication of the\nindividual times for this Tms object …\n"],["*","BigDecimal","classes/BigDecimal.html#method-i-2A","(p1)","<p>Multiply by the specified value.\n<p>e.g.\n\n<pre><code>c = a.mult(b,n)\nc = a * b\n</code></pre>\n"],["*","Complex","classes/Complex.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre><code>Complex(2, 3)  * Complex(2, 3)   #=&gt; (-5+12i)\nComplex(900)   * Complex(1)    ...\n</code></pre>\n"],["*","Float","classes/Float.html#method-i-2A","(p1)","<p>Returns a new Float which is the product of <code>float</code> and\n<code>other</code>.\n"],["*","Integer","classes/Integer.html#method-i-2A","(p1)","<p>Performs multiplication: the class of the resulting object depends on the\nclass of <code>numeric</code>.\n"],["*","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2A","(p1)",""],["*","Rational","classes/Rational.html#method-i-2A","(p1)","<p>Performs multiplication.\n\n<pre><code>Rational(2, 3)  * Rational(2, 3)   #=&gt; (4/9)\nRational(900)   * Rational(1)   ...\n</code></pre>\n"],["*","String","classes/String.html#method-i-2A","(p1)","<p>Copy — Returns a new String containing <code>integer</code> copies of the\nreceiver. <code>integer</code> must be greater than …\n"],["**","BigDecimal","classes/BigDecimal.html#method-i-2A-2A","(p1)","<p>Returns the value raised to the power of n.\n<p>See BigDecimal#power.\n"],["**","Complex","classes/Complex.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre><code>Complex(&#39;i&#39;) ** 2              #=&gt; (-1+0i)\nComplex(-8) ** Rational(1, 3)  #=&gt; ...\n</code></pre>\n"],["**","Float","classes/Float.html#method-i-2A-2A","(p1)","<p>Raises <code>float</code> to the power of <code>other</code>.\n\n<pre><code>2.0**3   #=&gt; 8.0\n</code></pre>\n"],["**","Integer","classes/Integer.html#method-i-2A-2A","(p1)","<p>Raises <code>int</code> to the power of <code>numeric</code>, which may be\nnegative or fractional. The result may be an Integer …\n"],["**","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2A-2A","(p1)",""],["**","Rational","classes/Rational.html#method-i-2A-2A","(p1)","<p>Performs exponentiation.\n\n<pre><code>Rational(2)    ** Rational(3)     #=&gt; (8/1)\nRational(10)   ** -2             ...\n</code></pre>\n"],["+","Array","classes/Array.html#method-i-2B","(p1)","<p>Concatenation — Returns a new array built by concatenating the two arrays\ntogether to produce a third …\n"],["+","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2B","(other)","<p>Returns a new Tms object obtained by memberwise summation of the individual\ntimes for this Tms object …\n"],["+","BigDecimal","classes/BigDecimal.html#method-i-2B","(p1)","<p>Add the specified value.\n<p>e.g.\n\n<pre><code>c = a.add(b,n)\nc = a + b\n</code></pre>\n"],["+","Complex","classes/Complex.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre><code>Complex(2, 3)  + Complex(2, 3)   #=&gt; (4+6i)\nComplex(900)   + Complex(1)      #=&gt; (901+0i) ...\n</code></pre>\n"],["+","Date","classes/Date.html#method-i-2B","(p1)","<p>Returns a date object pointing <code>other</code> days after self.  The\nother should be a numeric value.  If the other …\n"],["+","Enumerator","classes/Enumerator.html#method-i-2B","(p1)","<p>Returns an enumerator object generated from this enumerator and a given\nenumerable.\n\n<pre><code>e = (1..3).each + ...</code></pre>\n"],["+","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-2B","(p1)","<p>Returns a new pointer instance that has been advanced <code>n</code> bytes.\n"],["+","Float","classes/Float.html#method-i-2B","(p1)","<p>Returns a new Float which is the sum of <code>float</code> and\n<code>other</code>.\n"],["+","Integer","classes/Integer.html#method-i-2B","(p1)","<p>Performs addition: the class of the resulting object depends on the class\nof <code>numeric</code>.\n"],["+","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2B","(p1)",""],["+","Pathname","classes/Pathname.html#method-i-2B","(other)","<p>Appends a pathname fragment to <code>self</code> to produce a new Pathname\nobject.\n\n<pre><code>p1 = Pathname.new(&quot;/usr&quot;)      # ...\n</code></pre>\n"],["+","Rational","classes/Rational.html#method-i-2B","(p1)","<p>Performs addition.\n\n<pre><code>Rational(2, 3)  + Rational(2, 3)   #=&gt; (4/3)\nRational(900)   + Rational(1)      #=&gt; ...\n</code></pre>\n"],["+","Set","classes/Set.html#method-i-2B","(enum)",""],["+","Shell::Filter","classes/Shell/Filter.html#method-i-2B","(filter)","<p>Outputs <code>filter1</code>, and then <code>filter2</code> using Join.new\n"],["+","String","classes/String.html#method-i-2B","(p1)","<p>Concatenation—Returns a new <code>String</code> containing\n<em>other_str</em> concatenated to <em>str</em>.\n\n<pre><code>&quot;Hello from &quot; + self.to_s ...\n</code></pre>\n"],["+","Time","classes/Time.html#method-i-2B","(p1)","<p>Addition — Adds some number of seconds (possibly fractional) to\n<em>time</em> and returns that value as a new …\n"],["+","URI::Generic","classes/URI/Generic.html#method-i-2B","(oth)",""],["+@","BigDecimal","classes/BigDecimal.html#method-i-2B-40","()","<p>Return self.\n\n<pre><code>+BigDecimal(&#39;5&#39;)  #=&gt; 0.5e1\n</code></pre>\n"],["+@","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-2B-40","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n<p>Analogous to the …\n"],["+@","Numeric","classes/Numeric.html#method-i-2B-40","()","<p>Unary Plus—Returns the receiver.\n"],["+@","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2B-40","()",""],["+@","String","classes/String.html#method-i-2B-40","()","<p>If the string is frozen, then return duplicated mutable string.\n<p>If the string is not frozen, then return …\n"],["-","Array","classes/Array.html#method-i-2D","(p1)","<p>Array Difference\n<p>Returns a new array that is a copy of the original array, removing any\nitems that also …\n"],["-","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2D","(other)","<p>Returns a new Tms object obtained by memberwise subtraction of the\nindividual times for the <code>other</code> Tms …\n"],["-","BigDecimal","classes/BigDecimal.html#method-i-2D","(p1)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre><code>c = a - b\n</code></pre>\n"],["-","Complex","classes/Complex.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre><code>Complex(2, 3)  - Complex(2, 3)   #=&gt; (0+0i)\nComplex(900)   - Complex(1)      #=&gt; ...\n</code></pre>\n"],["-","Date","classes/Date.html#method-i-2D","(p1)","<p>Returns the difference between the two dates if the other is a date object.\nIf the other is a numeric …\n"],["-","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-2D","(p1)","<p>Returns a new pointer instance that has been moved back <code>n</code>\nbytes.\n"],["-","Float","classes/Float.html#method-i-2D","(p1)","<p>Returns a new Float which is the difference of <code>float</code> and\n<code>other</code>.\n"],["-","Integer","classes/Integer.html#method-i-2D","(p1)","<p>Performs subtraction: the class of the resulting object depends on the\nclass of <code>numeric</code>.\n"],["-","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2D","(p1)",""],["-","Rational","classes/Rational.html#method-i-2D","(p1)","<p>Performs subtraction.\n\n<pre><code>Rational(2, 3)  - Rational(2, 3)   #=&gt; (0/1)\nRational(900)   - Rational(1)      ...\n</code></pre>\n"],["-","Set","classes/Set.html#method-i-2D","(enum)","<p>Returns a new set built by duplicating the set, removing every element that\nappears in the given enumerable …\n"],["-","Time","classes/Time.html#method-i-2D","(p1)","<p>Difference — Returns a difference in seconds as a Float between\n<em>time</em> and <code>other_time</code>, or subtracts the …\n"],["-","URI::Generic","classes/URI/Generic.html#method-i-2D","(oth)",""],["-@","BigDecimal","classes/BigDecimal.html#method-i-2D-40","()","<p>Return the negation of self.\n\n<pre><code>-BigDecimal(&#39;5&#39;)  #=&gt; -0.5e1\n</code></pre>\n"],["-@","Complex","classes/Complex.html#method-i-2D-40","()","<p>Returns negation of the value.\n\n<pre><code>-Complex(1, 2)  #=&gt; (-1-2i)\n</code></pre>\n"],["-@","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-2D-40","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n<p>Analogous to the …\n"],["-@","Float","classes/Float.html#method-i-2D-40","()","<p>Returns <code>float</code>, negated.\n"],["-@","Integer","classes/Integer.html#method-i-2D-40","()","<p>Returns <code>int</code>, negated.\n"],["-@","Numeric","classes/Numeric.html#method-i-2D-40","()","<p>Unary Minus—Returns the receiver, negated.\n"],["-@","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2D-40","()",""],["-@","Rational","classes/Rational.html#method-i-2D-40","()","<p>Negates <code>rat</code>.\n"],["-@","String","classes/String.html#method-i-2D-40","()","<p>Returns a frozen, possibly pre-existing copy of the string.\n<p>The string will be deduplicated as long as …\n"],["/","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-2F","(x)","<p>Returns a new Tms object obtained by memberwise division of the individual\ntimes for this Tms object …\n"],["/","BigDecimal","classes/BigDecimal.html#method-i-2F","(p1)","<p>Divide by the specified value.\n<p>See BigDecimal#div.\n"],["/","Complex","classes/Complex.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre><code>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...\n</code></pre>\n"],["/","Float","classes/Float.html#method-i-2F","(p1)","<p>Returns a new Float which is the result of dividing <code>float</code> by\n<code>other</code>.\n"],["/","Integer","classes/Integer.html#method-i-2F","(p1)","<p>Performs division: the class of the resulting object depends on the class\nof <code>numeric</code>.\n"],["/","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-2F","(p1)","<p>Division of OpenSSL::BN instances\n"],["/","Pathname","classes/Pathname.html#method-i-2F","(other)",""],["/","Rational","classes/Rational.html#method-i-2F","(p1)","<p>Performs division.\n\n<pre><code>Rational(2, 3)  / Rational(2, 3)   #=&gt; (1/1)\nRational(900)   / Rational(1)      #=&gt; ...\n</code></pre>\n"],["<","BigDecimal","classes/BigDecimal.html#method-i-3C","(p1)","<p>Returns true if a is less than b.\n<p>Values may be coerced to perform the comparison (see ==, BigDecimal#coerce\n…\n"],["<","Comparable","classes/Comparable.html#method-i-3C","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1.\n"],["<","Float","classes/Float.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than\n<code>real</code>.\n<p>The result of <code>NaN &lt; NaN</code> is undefined, so an\nimplementation-dependent …\n"],["<","Hash","classes/Hash.html#method-i-3C","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em>.\n\n<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt; h2    #=&gt; true\nh2 &lt; ...</code></pre>\n"],["<","Integer","classes/Integer.html#method-i-3C","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than\nthat of <code>real</code>.\n"],["<","Module","classes/Module.html#method-i-3C","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],["<","Set","classes/Set.html#method-i-3C","(set)",""],["<","Shell::Filter","classes/Shell/Filter.html#method-i-3C","(src)","<p>Inputs from <code>source</code>, which is either a string of a file name or\nan IO object.\n"],["<<","Array","classes/Array.html#method-i-3C-3C","(p1)","<p>Append—Pushes the given object on to the end of this array. This expression\nreturns the array itself, …\n"],["<<","Bundler::Index","classes/Bundler/Index.html#method-i-3C-3C","(spec)",""],["<<","CSV","classes/CSV.html#method-i-3C-3C","(row)","<p>The primary write method for wrapped Strings and IOs, <code>row</code> (an\nArray or CSV::Row) is converted to CSV …\n"],["<<","CSV::Row","classes/CSV/Row.html#method-i-3C-3C","(arg)","<p>If a two-element Array is provided, it is assumed to be a header and field\nand the pair is appended. …\n"],["<<","CSV::Table","classes/CSV/Table.html#method-i-3C-3C","(row_or_array)","<p>Adds a new row to the bottom end of this table.  You can provide an Array,\nwhich will be converted to …\n"],["<<","CSV::Writer","classes/CSV/Writer.html#method-i-3C-3C","(row)",""],["<<","Date","classes/Date.html#method-i-3C-3C","(p1)","<p>Returns a date object pointing <code>n</code> months before self. The\nargument <code>n</code> should be a numeric value.\n\n<pre><code>Date.new(2001,2,3) ...\n</code></pre>\n"],["<<","Digest::Base","classes/Digest/Base.html#method-i-3C-3C","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["<<","Digest::Instance","classes/Digest/Instance.html#method-i-3C-3C","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["<<","IO","classes/IO.html#method-i-3C-3C","(p1)","<p>String Output—Writes <em>obj</em> to <em>ios</em>. <em>obj</em> will be\nconverted to a string using <code>to_s</code>.\n\n<pre><code>$stdout &lt;&lt; &quot;Hello &quot; &lt;&lt; ...</code></pre>\n"],["<<","IO::generic_writable","classes/IO/generic_writable.html#method-i-3C-3C","(p1)","<p>See IO#<<.\n"],["<<","IPAddr","classes/IPAddr.html#method-i-3C-3C","(num)","<p>Returns a new ipaddr built by bitwise left shift.\n"],["<<","Integer","classes/Integer.html#method-i-3C-3C","(p1)","<p>Returns <code>int</code> shifted left <code>count</code> positions, or\nright if <code>count</code> is negative.\n"],["<<","Logger","classes/Logger.html#method-i-3C-3C","(msg)","<p>Dump given message to the log device without any formatting.  If no log\ndevice exists, return <code>nil</code>.\n"],["<<","Method","classes/Method.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this method and the given\n<em>g</em>. The returned proc takes a variable …\n"],["<<","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-3C-3C","(str)",""],["<<","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-3C-3C","(s)","<p>Writes <em>s</em> to the stream.  <em>s</em> will be converted to a String\nusing <code>.to_s</code> method.\n"],["<<","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-3C-3C","(p1)",""],["<<","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-3C-3C","(p1)",""],["<<","Proc","classes/Proc.html#method-i-3C-3C","(p1)","<p>Returns a proc that is the composition of this proc and the given\n<em>g</em>. The returned proc takes a variable …\n"],["<<","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-3C-3C","(object)",""],["<<","Queue","classes/Queue.html#method-i-3C-3C","(p1)",""],["<<","REXML::Attributes","classes/REXML/Attributes.html#method-i-3C-3C","( attribute )",""],["<<","REXML::Document","classes/REXML/Document.html#method-i-3C-3C","( child )",""],["<<","REXML::Elements","classes/REXML/Elements.html#method-i-3C-3C","(element=nil)",""],["<<","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-3C-3C","(element)","<p>Append a child to this element, optionally under a provided namespace. The\nnamespace argument is ignored …\n"],["<<","REXML::Output","classes/REXML/Output.html#method-i-3C-3C","( content )",""],["<<","REXML::Parent","classes/REXML/Parent.html#method-i-3C-3C","( object )",""],["<<","REXML::Text","classes/REXML/Text.html#method-i-3C-3C","( to_append )","<p>Appends text to this text node.  The text is appended in the\n<code>raw</code> mode of this text node.\n<p><code>returns</code> the text …\n"],["<<","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-3C-3C","( event )",""],["<<","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-3C-3C","( event )",""],["<<","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-3C-3C","(child)",""],["<<","Set","classes/Set.html#method-i-3C-3C","(o)",""],["<<","SizedQueue","classes/SizedQueue.html#method-i-3C-3C","(*args)",""],["<<","String","classes/String.html#method-i-3C-3C","(p1)","<p>Appends the given object to <em>str</em>. If the object is an\n<code>Integer</code>, it is considered a codepoint and converted …\n"],["<<","StringScanner","classes/StringScanner.html#method-i-3C-3C","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre><code>s = StringScanner.new(&quot;Fri ...</code></pre>\n"],["<<","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-3C-3C","(obj)","<p>Synonym for log(INFO, obj.to_s)\n"],["<<","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-3C-3C","(str)","<p>Adds <code>str</code> to this FormData which may be the body, a header or a\nheader entry.\n<p>This is called by WEBrick::HTTPUtils.parse_form_data …\n"],["<<","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-3C-3C","(p1)","<p>Inputs <code>string</code> into the deflate stream just like\nZlib::Deflate#deflate, but returns the Zlib::Deflate …\n"],["<<","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-3C-3C","(p1)","<p>Document-method: &lt;&lt; Same as IO.\n"],["<<","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-3C-3C","(p1)","<p>Same as IO.\n"],["<=","BigDecimal","classes/BigDecimal.html#method-i-3C-3D","(p1)","<p>Returns true if a is less than or equal to b.\n<p>Values may be coerced to perform the comparison (see ==, …\n"],["<=","Comparable","classes/Comparable.html#method-i-3C-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns -1 or …\n"],["<=","Float","classes/Float.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is less than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &lt;= NaN</code> is undefined, so an\nimplementation-dependent …\n"],["<=","Hash","classes/Hash.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if <em>hash</em> is subset of <em>other</em> or\nequals to <em>other</em>.\n\n<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &lt;= ...</code></pre>\n"],["<=","Integer","classes/Integer.html#method-i-3C-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is less than or\nequal to that of <code>real</code>.\n"],["<=","Module","classes/Module.html#method-i-3C-3D","(p1)","<p>Returns true if <em>mod</em> is a subclass of <em>other</em> or is the same\nas <em>other</em>. Returns <code>nil</code> if there&#39;s no relationship\n…\n"],["<=","Set","classes/Set.html#method-i-3C-3D","(set)",""],["<=>","Array","classes/Array.html#method-i-3C-3D-3E","(p1)","<p>Comparison — Returns an integer (<code>-1</code>, <code>0</code>, or\n<code>+1</code>) if this array is less than, equal to, or greater than …\n"],["<=>","BigDecimal","classes/BigDecimal.html#method-i-3C-3D-3E","(p1)","<p>The comparison operator. a &lt;=&gt; b is 0 if a == b, 1 if a &gt; b, -1 if\na &lt; b.\n"],["<=>","Bundler::GemHelpers::PlatformMatch","classes/Bundler/GemHelpers/PlatformMatch.html#method-i-3C-3D-3E","(other)",""],["<=>","Bundler::LazySpecification::Identifier","classes/Bundler/LazySpecification/Identifier.html#method-i-3C-3D-3E","(other)",""],["<=>","Bundler::Molinillo::Resolver::Resolution::UnwindDetails","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-3C-3D-3E","(other)","<p>We compare UnwindDetails when choosing which state to unwind to. If two\noptions have the same state_index …\n"],["<=>","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-3C-3D-3E","(other)","<p>Compare this specification against another object. Using sort_obj is\ncompatible with Gem::Specification …\n"],["<=>","Date","classes/Date.html#method-i-3C-3D-3E","(p1)","<p>Compares the two dates and returns -1, zero, 1 or nil.  The other should be\na date object or a numeric …\n"],["<=>","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-3C-3D-3E","(p1)","<p>Returns -1 if less than, 0 if equal to, 1 if greater than\n<code>other</code>.\n<p>Returns nil if <code>ptr</code> cannot be compared …\n"],["<=>","File::Stat","classes/File/Stat.html#method-i-3C-3D-3E","(p1)","<p>Compares File::Stat objects by comparing their respective modification\ntimes.\n<p><code>nil</code> is returned if <code>other_stat</code> …\n"],["<=>","Float","classes/Float.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>float</code> is less than,\nequal to, or greater than <code>real</code>. This is …\n"],["<=>","IPAddr","classes/IPAddr.html#method-i-3C-3D-3E","(other)","<p>Compares the ipaddr with another.\n"],["<=>","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-i-3C-3D-3E","(other)","<p>Compares the level of this notifier object with the given\n<code>other</code> notifier.\n<p>See the Comparable module for …\n"],["<=>","Integer","classes/Integer.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, or +1 depending on whether <code>int</code> is\nless than, equal to, or greater than <code>numeric</code> …\n"],["<=>","Module","classes/Module.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1 or nil depending on whether\n<code>module</code> includes <code>other_module</code>, they are the …\n"],["<=>","Numeric","classes/Numeric.html#method-i-3C-3D-3E","(p1)","<p>Returns zero if <code>number</code> equals <code>other</code>, otherwise\nreturns <code>nil</code>.\n"],["<=>","Object","classes/Object.html#method-i-3C-3D-3E","(p1)","<p>Returns 0 if <code>obj</code> and <code>other</code> are the same object or\n<code>obj == other</code>, otherwise nil.\n<p>The <code>&lt;=&gt;</code> is used by …\n"],["<=>","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3C-3D-3E","(p1)",""],["<=>","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-3C-3D-3E","(p1)",""],["<=>","Pathname","classes/Pathname.html#method-i-3C-3D-3E","(p1)","<p>Provides a case-sensitive comparison operator for pathnames.\n\n<pre><code>Pathname.new(&#39;/usr&#39;) &lt;=&gt; Pathname.new(&#39;/usr/bin&#39;) ...\n</code></pre>\n"],["<=>","RDoc::Alias","classes/RDoc/Alias.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #new_name\n"],["<=>","RDoc::Constant","classes/RDoc/Constant.html#method-i-3C-3D-3E","(other)","<p>Constants are ordered by name\n"],["<=>","RDoc::Context","classes/RDoc/Context.html#method-i-3C-3D-3E","(other)","<p>Contexts are sorted by full_name\n"],["<=>","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-3C-3D-3E","(other)","<p>Order by #singleton then #name\n"],["<=>","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-3C-3D-3E","(other)","<p>Mixins are sorted by name\n"],["<=>","REXML::Comment","classes/REXML/Comment.html#method-i-3C-3D-3E","(other)","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["<=>","REXML::Text","classes/REXML/Text.html#method-i-3C-3D-3E","( other )","<p><code>other</code> a String or a Text <code>returns</code> the result of\n(to_s &lt;=&gt; arg.to_s)\n"],["<=>","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-3C-3D-3E","(other)",""],["<=>","Rational","classes/Rational.html#method-i-3C-3D-3E","(p1)","<p>Returns -1, 0, or +1 depending on whether <code>rational</code> is less\nthan, equal to, or greater than <code>numeric</code>.\n<p><code>nil</code> …\n"],["<=>","String","classes/String.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Returns -1, 0, +1, or <code>nil</code> depending on whether\n<code>string</code> is less than, equal to, or greater …\n"],["<=>","Symbol","classes/Symbol.html#method-i-3C-3D-3E","(p1)","<p>Compares <code>symbol</code> with <code>other_symbol</code> after calling\n#to_s on each of the symbols. Returns -1, 0, +1, or  …\n"],["<=>","Time","classes/Time.html#method-i-3C-3D-3E","(p1)","<p>Comparison—Compares <code>time</code> with <code>other_time</code>.\n<p>-1, 0, +1 or nil depending on whether <code>time</code> is less  than, …\n"],["<=>","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-i-3C-3D-3E","(other)","<p>Compares this version with <code>other</code> according to the HTTP\nspecification rules.\n"],["==","Array","classes/Array.html#method-i-3D-3D","(p1)","<p>Equality — Two arrays are equal if they contain the same number of elements\nand if each element is …\n"],["==","BasicObject","classes/BasicObject.html#method-i-3D-3D","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["==","BigDecimal","classes/BigDecimal.html#method-i-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["==","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-3D-3D","(other)",""],["==","Bundler::Index","classes/Bundler/Index.html#method-i-3D-3D","(other)","<p>Whether all the specs in self are in other TODO: rename to #include?\n"],["==","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-3D-3D","(other)",""],["==","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two dependency graphs are equal, determined\n\n<pre><code>by a recursive traversal of ...\n</code></pre>\n"],["==","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether the two vertices are equal, determined\n\n<pre><code>by a recursive traversal of each {Vertex#successors}</code></pre>\n"],["==","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-3D-3D","(other)","<p>This shall check if two source object represent the same source.\n<p>The comparison shall take place only …\n"],["==","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-3D-3D","(other)",""],["==","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-3D-3D","(other)",""],["==","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-3D-3D","(other)",""],["==","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-3D-3D","(other)",""],["==","CSV::Row","classes/CSV/Row.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if this row contains the same headers and fields\nin the same order as <code>other</code>.\n"],["==","CSV::Table","classes/CSV/Table.html#method-i-3D-3D","(other)","<p>Returns <code>true</code> if all rows of this table ==()\n<code>other</code>&#39;s rows.\n"],["==","Comparable","classes/Comparable.html#method-i-3D-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0. Also …\n"],["==","Complex","classes/Complex.html#method-i-3D-3D","(p1)","<p>Returns true if cmp equals object numerically.\n\n<pre><code>Complex(2, 3)  == Complex(2, 3)   #=&gt; true\nComplex(5)  ...\n</code></pre>\n"],["==","Delegator","classes/Delegator.html#method-i-3D-3D","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["==","Digest::Instance","classes/Digest/Instance.html#method-i-3D-3D","(p1)","<p>If a string is given, checks whether it is equal to the hex-encoded hash\nvalue of the digest object. …\n"],["==","Encoding::Converter","classes/Encoding/Converter.html#method-i-3D-3D","(p1)",""],["==","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["==","Exception","classes/Exception.html#method-i-3D-3D","(p1)","<p>Equality—If <em>obj</em> is not an <code>Exception</code>, returns\n<code>false</code>. Otherwise, returns <code>true</code> if <em>exc</em>\nand <em>obj</em> share same …\n"],["==","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-3D-3D","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["==","Float","classes/Float.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires  …\n"],["==","Hash","classes/Hash.html#method-i-3D-3D","(p1)","<p>Equality—Two hashes are equal if they each contain the same number of keys\nand if each key-value pair …\n"],["==","IPAddr","classes/IPAddr.html#method-i-3D-3D","(other)","<p>Returns true if two ipaddrs are equal.\n"],["==","Integer","classes/Integer.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with Integer#eql?, which requires\n<code>other</code> to …\n"],["==","MatchData","classes/MatchData.html#method-i-3D-3D","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["==","Method","classes/Method.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["==","Module","classes/Module.html#method-i-3D-3D","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["==","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <em>obj</em> has the same value as\n<em>bn</em>. Contrast this with OpenSSL::BN#eql?, which requires …\n"],["==","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-3D-3D","(p1)",""],["==","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the two Session is the same,\n<code>false</code> if not.\n"],["==","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-3D-3D","(p1)","<p>Compares the two certificates. Note that this takes into account all\nfields, not just the issuer name …\n"],["==","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-3D-3D","(other)",""],["==","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-3D-3D","(other)",""],["==","OpenStruct","classes/OpenStruct.html#method-i-3D-3D","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is\nequal to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["==","Pathname","classes/Pathname.html#method-i-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["==","Process::Status","classes/Process/Status.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if the integer value of <em>stat</em> equals\n<em>other</em>.\n"],["==","RDoc::Attr","classes/RDoc/Attr.html#method-i-3D-3D","(other)","<p>Attributes are equal when their names, singleton and rw are identical\n"],["==","RDoc::Constant","classes/RDoc/Constant.html#method-i-3D-3D","(other)","<p>Constants are equal when their #parent and #name is the same\n"],["==","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-3D-3D","(other)","<p>An RDoc::TopLevel is equal to another with the same relative_name\n"],["==","REXML::Attribute","classes/REXML/Attribute.html#method-i-3D-3D","( other )","<p>Returns true if other is an Attribute and has the same name and value,\nfalse otherwise.\n"],["==","REXML::Comment","classes/REXML/Comment.html#method-i-3D-3D","( other )","<p>Compares this Comment to another; the contents of the comment are used in\nthe comparison.\n"],["==","REXML::Instruction","classes/REXML/Instruction.html#method-i-3D-3D","( other )","<p>@return true if other is an Instruction, and the content and target of the\nother matches the target and …\n"],["==","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-3D-3D","( other )",""],["==","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-3D-3D","( other )",""],["==","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-3D-3D","(other)",""],["==","Random","classes/Random.html#method-i-3D-3D","(p1)","<p>Returns true if the two generators have the same internal state, otherwise\nfalse.  Equivalent generators …\n"],["==","Range","classes/Range.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>==</code>), …\n"],["==","Rational","classes/Rational.html#method-i-3D-3D","(p1)","<p>Returns <code>true</code> if <code>rat</code> equals <code>object</code>\nnumerically.\n\n<pre><code>Rational(2, 3)  == Rational(2, 3)   #=&gt; true\nRational(5) ...\n</code></pre>\n"],["==","Regexp","classes/Regexp.html#method-i-3D-3D","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["==","Set","classes/Set.html#method-i-3D-3D","(other)","<p>Returns true if two sets are equal.  The equality of each couple of\nelements is defined according to …\n"],["==","String","classes/String.html#method-i-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["==","Struct","classes/Struct.html#method-i-3D-3D","(p1)","<p>Equality—Returns <code>true</code> if <code>other</code> has the same\nstruct subclass and has equal member values (according …\n"],["==","Symbol","classes/Symbol.html#method-i-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["==","URI::Generic","classes/URI/Generic.html#method-i-3D-3D","(oth)","<p>Compares two URIs.\n"],["==","UnboundMethod","classes/UnboundMethod.html#method-i-3D-3D","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["===","BigDecimal","classes/BigDecimal.html#method-i-3D-3D-3D","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["===","Date","classes/Date.html#method-i-3D-3D-3D","(p1)","<p>Returns true if they are the same day.\n\n<pre><code>Date.new(2001,2,3) === Date.new(2001,2,3)\n                     ...</code></pre>\n"],["===","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["===","FalseClass","classes/FalseClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Float","classes/Float.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> only if <code>obj</code> has the same value as\n<code>float</code>. Contrast this with Float#eql?, which requires  …\n"],["===","IPAddr","classes/IPAddr.html#method-i-3D-3D-3D","(other)",""],["===","Integer","classes/Integer.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>int</code> equals <code>other</code>\nnumerically. Contrast this with Integer#eql?, which requires\n<code>other</code> to …\n"],["===","Method","classes/Method.html#method-i-3D-3D-3D","(*args)","<p>Invokes the method with <code>obj</code> as the parameter like #call. This\nallows a method object to be the target …\n"],["===","Module","classes/Module.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Returns <code>true</code> if <em>obj</em> is an instance of\n<em>mod</em> or an instance of one of <em>mod</em>&#39;s descendants. …\n"],["===","NilClass","classes/NilClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","Object","classes/Object.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["===","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3D-3D-3D","(p1)",""],["===","Pathname","classes/Pathname.html#method-i-3D-3D-3D","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["===","Proc","classes/Proc.html#method-i-3D-3D-3D","(*args)","<p>Invokes the block with <code>obj</code> as the proc&#39;s parameter like\nProc#call. This allows a proc object to be …\n"],["===","Range","classes/Range.html#method-i-3D-3D-3D","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  Conveniently, <code>===</code> is the\ncomparison …\n"],["===","Regexp","classes/Regexp.html#method-i-3D-3D-3D","(p1)","<p>Case Equality—Used in case statements.\n\n<pre><code>a = &quot;HELLO&quot;\ncase a\nwhen /\\A[a-z]*\\z/; print &quot;Lower case\\n&quot;\nwhen ...</code></pre>\n"],["===","Rinda::DRbObjectTemplate","classes/Rinda/DRbObjectTemplate.html#method-i-3D-3D-3D","(ro)","<p>This DRbObjectTemplate matches <code>ro</code> if the remote object&#39;s\ndrburi and drbref are the same.  <code>nil</code> is …\n"],["===","Rinda::Template","classes/Rinda/Template.html#method-i-3D-3D-3D","(tuple)","<p>Alias for #match.\n"],["===","Rinda::TemplateEntry","classes/Rinda/TemplateEntry.html#method-i-3D-3D-3D","(tuple)",""],["===","Set","classes/Set.html#method-i-3D-3D-3D","(o)","<p>Returns true if the given object is a member of the set, and false\notherwise.\n<p>Used in case statements: …\n"],["===","String","classes/String.html#method-i-3D-3D-3D","(p1)","<p>Equality—Returns whether <code>str</code> == <code>obj</code>, similar to\nObject#==.\n<p>If <code>obj</code> is not an instance of String but responds …\n"],["===","Symbol","classes/Symbol.html#method-i-3D-3D-3D","(p1)","<p>Equality—If <em>sym</em> and <em>obj</em> are exactly the same symbol,\nreturns <code>true</code>.\n"],["===","SystemCallError","classes/SystemCallError.html#method-c-3D-3D-3D","(p1)","<p>Return <code>true</code> if the receiver is a generic\n<code>SystemCallError</code>, or if the error numbers <code>self</code> and\n<em>other</em> are …\n"],["===","TrueClass","classes/TrueClass.html#method-i-3D-3D-3D","(p1)","<p>Case Equality – For class Object, effectively the same as calling\n<code>#==</code>, but typically overridden by descendants …\n"],["=~","NilClass","classes/NilClass.html#method-i-3D~","(p1)","<p>Dummy pattern matching – always returns nil.\n"],["=~","Object","classes/Object.html#method-i-3D~","(p1)","<p>This method is deprecated.\n<p>This is not only unuseful but also troublesome because it may hide a type\nerror. …\n"],["=~","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-3D~","( path )",""],["=~","Regexp","classes/Regexp.html#method-i-3D~","(p1)","<p>Match—Matches <em>rxp</em> against <em>str</em>.\n\n<pre><code>/at/ =~ &quot;input data&quot;   #=&gt; 7\n/ax/ =~ &quot;input data&quot;   #=&gt; nil\n</code></pre>\n<p>If <code>=~</code> is used …\n"],["=~","String","classes/String.html#method-i-3D~","(p1)","<p>Match—If <em>obj</em> is a <code>Regexp</code>, use it as a pattern to\nmatch against <em>str</em>,and returns the position the match …\n"],["=~","Symbol","classes/Symbol.html#method-i-3D~","(p1)","<p>Returns <code>sym.to_s =~ obj</code>.\n"],[">","BigDecimal","classes/BigDecimal.html#method-i-3E","(p1)","<p>Returns true if a is greater than b.\n<p>Values may be coerced to perform the comparison (see ==, BigDecimal#coerce\n…\n"],[">","Comparable","classes/Comparable.html#method-i-3E","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 1.\n"],[">","Float","classes/Float.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than\n<code>real</code>.\n<p>The result of <code>NaN &gt; NaN</code> is undefined, so an\nimplementation-dependent …\n"],[">","Hash","classes/Hash.html#method-i-3E","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em>.\n\n<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt; h2    #=&gt; false\nh2 ...\n</code></pre>\n"],[">","Integer","classes/Integer.html#method-i-3E","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nthat of <code>real</code>.\n"],[">","Module","classes/Module.html#method-i-3E","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>. Returns\n<code>nil</code> if there&#39;s no relationship between the two. …\n"],[">","Set","classes/Set.html#method-i-3E","(set)",""],[">","Shell::Filter","classes/Shell/Filter.html#method-i-3E","(to)","<p>Outputs from <code>source</code>, which is either a string of a file name\nor an IO object.\n"],[">=","BigDecimal","classes/BigDecimal.html#method-i-3E-3D","(p1)","<p>Returns true if a is greater than or equal to b.\n<p>Values may be coerced to perform the comparison (see …\n"],[">=","Comparable","classes/Comparable.html#method-i-3E-3D","(p1)","<p>Compares two objects based on the receiver&#39;s <code>&lt;=&gt;</code>\nmethod, returning true if it returns 0 or …\n"],[">=","Float","classes/Float.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <code>float</code> is greater than or equal to\n<code>real</code>.\n<p>The result of <code>NaN &gt;= NaN</code> is undefined, so an …\n"],[">=","Hash","classes/Hash.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if <em>other</em> is subset of <em>hash</em> or\nequals to <em>hash</em>.\n\n<pre><code>h1 = {a:1, b:2}\nh2 = {a:1, b:2, c:3}\nh1 &gt;= ...</code></pre>\n"],[">=","Integer","classes/Integer.html#method-i-3E-3D","(p1)","<p>Returns <code>true</code> if the value of <code>int</code> is greater than\nor equal to that of <code>real</code>.\n"],[">=","Module","classes/Module.html#method-i-3E-3D","(p1)","<p>Returns true if <em>mod</em> is an ancestor of <em>other</em>, or the two\nmodules are the same. Returns <code>nil</code> if there&#39;s …\n"],[">=","Set","classes/Set.html#method-i-3E-3D","(set)",""],[">>","Date","classes/Date.html#method-i-3E-3E","(p1)","<p>Returns a date object pointing <code>n</code> months after self. The\nargument <code>n</code> should be a numeric value.\n\n<pre><code>Date.new(2001,2,3) ...\n</code></pre>\n"],[">>","IPAddr","classes/IPAddr.html#method-i-3E-3E","(num)","<p>Returns a new ipaddr built by bitwise right-shift.\n"],[">>","Integer","classes/Integer.html#method-i-3E-3E","(p1)","<p>Returns <code>int</code> shifted right <code>count</code> positions, or\nleft if <code>count</code> is negative.\n"],[">>","Method","classes/Method.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this method and the given\n<em>g</em>. The returned proc takes a variable …\n"],[">>","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-3E-3E","(p1)",""],[">>","Proc","classes/Proc.html#method-i-3E-3E","(p1)","<p>Returns a proc that is the composition of this proc and the given\n<em>g</em>. The returned proc takes a variable …\n"],[">>","Process::Status","classes/Process/Status.html#method-i-3E-3E","(p1)","<p>Shift the bits in <em>stat</em> right <em>num</em> places.\n\n<pre><code>fork { exit 99 }   #=&gt; 26563\nProcess.wait       #=&gt; 26563\n$?.to_i ...\n</code></pre>\n"],[">>","Shell::Filter","classes/Shell/Filter.html#method-i-3E-3E","(to)","<p>Appends the output to <code>source</code>, which is either a string of a\nfile name or an IO object.\n"],["APOP","Net::POP3","classes/Net/POP3.html#method-c-APOP","(isapop)","<p>Returns the APOP class if <code>isapop</code> is true; otherwise, returns\nthe POP class.  For example:\n\n<pre><code># Example 1 ...\n</code></pre>\n"],["Array","Kernel","classes/Kernel.html#method-i-Array","(p1)","<p>Returns <code>arg</code> as an Array.\n<p>First tries to call <code>to_ary</code> on <code>arg</code>, then\n<code>to_a</code>. If <code>arg</code> does not respond to\n<code>to_ary</code> …\n"],["BigDecimal","Kernel","classes/Kernel.html#method-i-BigDecimal","(*args)","<p>Create a new BigDecimal object.\n<p>initial &mdash; The initial value, as an Integer, a Float, a Rational, a BigDecimal …\n"],["CSV","Object","classes/Object.html#method-i-CSV","(*args, &block)","<p>Passes <code>args</code> to CSV::instance.\n\n<pre><code>CSV(&quot;CSV,data&quot;).read\n  #=&gt; [[&quot;CSV&quot;, &quot;data&quot;]]\n</code></pre>\n<p>If a block is given, the instance …\n"],["Complex","Kernel","classes/Kernel.html#method-i-Complex","(p1, p2 = v2, p3 = {})","<p>Returns x+i*y;\n\n<pre><code>Complex(1, 2)    #=&gt; (1+2i)\nComplex(&#39;1+2i&#39;)  #=&gt; (1+2i)\nComplex(nil)     #=&gt; TypeError ...\n</code></pre>\n"],["CurrentContext","IRB","classes/IRB.html#method-c-CurrentContext","()","<p>The current IRB::Context of the session, see IRB.conf\n\n<pre><code>irb\nirb(main):001:0&gt; IRB.CurrentContext.irb_name ...</code></pre>\n"],["DEBUG","Thread","classes/Thread.html#method-c-DEBUG","()","<p>Returns the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DEBUG=","Thread","classes/Thread.html#method-c-DEBUG-3D","(p1)","<p>Sets the thread debug level.  Available only if compiled with\nTHREAD_DEBUG=-1.\n"],["DelegateClass","Object","classes/Object.html#method-i-DelegateClass","(superclass)","<p>The primary interface to this library.  Use to setup delegation when\ndefining your class.\n\n<pre><code>class MyClass ...</code></pre>\n"],["Digest","Object","classes/Object.html#method-i-Digest","(name)","<p>Returns a Digest subclass by <code>name</code> in a thread-safe manner even\nwhen on-demand loading is involved.\n\n<pre><code>require ...\n</code></pre>\n"],["Digest","OpenSSL","classes/OpenSSL.html#method-c-Digest","(name)","<p>Returns a Digest subclass by <em>name</em>\n\n<pre><code>require &#39;openssl&#39;\n\nOpenSSL::Digest(&quot;MD5&quot;)\n# =&gt; OpenSSL::Digest::MD5 ...\n</code></pre>\n"],["E","BigMath","classes/BigMath.html#method-i-E","(prec)","<p>Computes e (the base of natural logarithms) to the specified number of\ndigits of precision, <code>numeric</code>. …\n"],["Fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Fail","(err = nil, *rest)",""],["Fail","Sync_m::Err","classes/Sync_m/Err.html#method-c-Fail","(*opt)",""],["Fail","Sync_m::Err::LockModeFailer","classes/Sync_m/Err/LockModeFailer.html#method-c-Fail","(mode)",""],["Fail","Sync_m::Err::UnknownLocker","classes/Sync_m/Err/UnknownLocker.html#method-c-Fail","(th)",""],["Float","Kernel","classes/Kernel.html#method-i-Float","(p1, p2 = {})","<p>Returns <em>arg</em> converted to a float. Numeric types are converted\ndirectly, and with exception to string …\n"],["Hash","Kernel","classes/Kernel.html#method-i-Hash","(p1)","<p>Converts <em>arg</em> to a <code>Hash</code> by calling\n<em>arg</em><code>.to_hash</code>. Returns an empty <code>Hash</code> when\n<em>arg</em> is <code>nil</code> or <code>[]</code>.\n\n<pre><code>Hash([])  ...\n</code></pre>\n"],["I","Matrix","classes/Matrix.html#method-c-I","(n)",""],["Integer","Kernel","classes/Kernel.html#method-i-Integer","(*args)","<p>Converts <em>arg</em> to an <code>Integer</code>. Numeric types are\nconverted directly (with floating point numbers being truncated). …\n"],["JobManager","IRB","classes/IRB.html#method-c-JobManager","()","<p>The current JobManager in the session\n"],["LOG_MASK","Syslog::Macros","classes/Syslog/Macros.html#method-i-LOG_MASK","(p1)","<p>Generates a mask bit for a priority level. See #mask=\n"],["LOG_UPTO","Syslog::Macros","classes/Syslog/Macros.html#method-i-LOG_UPTO","(p1)","<p>Generates a mask value for priority levels at or below the level specified.\nSee #mask=\n"],["PI","BigMath","classes/BigMath.html#method-i-PI","(prec)","<p>Computes the value of pi to the specified number of digits of precision,\n<code>numeric</code>.\n\n<pre><code>BigMath.PI(10).to_s ...\n</code></pre>\n"],["Pathname","Kernel","classes/Kernel.html#method-i-Pathname","(p1)","<p>Creates a new Pathname object from the given string, <code>path</code>, and\nreturns pathname object.\n<p>In order to use …\n"],["PermaLink?","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-i-PermaLink-3F","()",""],["Proxy","Net::HTTP","classes/Net/HTTP.html#method-c-Proxy","(p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)","<p>Creates an HTTP proxy class which behaves like Net::HTTP, but performs all\naccess via the specified proxy. …\n"],["Raise","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-Raise","(err = nil, *rest)",""],["Rational","Kernel","classes/Kernel.html#method-i-Rational","(p1, p2 = v2, p3 = {})","<p>Returns <code>x/y</code> or <code>arg</code> as a Rational.\n\n<pre><code>Rational(2, 3)   #=&gt; (2/3)\nRational(5)      #=&gt; (5/1)\nRational(0.5) ...\n</code></pre>\n"],["String","IRB::Locale","classes/IRB/Locale.html#method-i-String","(mes)",""],["String","Kernel","classes/Kernel.html#method-i-String","(p1)","<p>Returns <em>arg</em> as a <code>String</code>.\n<p>First tries to call its <code>to_str</code> method, then its\n<code>to_s</code> method.\n\n<pre><code>String(self)     ...\n</code></pre>\n"],["URI","Kernel","classes/Kernel.html#method-c-URI","(uri)","<p>Returns <code>uri</code> converted to an URI object.\n"],["[]","Array","classes/Array.html#method-i-5B-5D","(*args)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["[]","Array","classes/Array.html#method-c-5B-5D","(*args)","<p>Returns a new array populated with the given objects.\n\n<pre><code>Array.[]( 1, &#39;a&#39;, /^A/)  # =&gt; [1, &quot;a&quot;, /^A/]\nArray[ ...</code></pre>\n"],["[]","Bundler::Index","classes/Bundler/Index.html#method-i-5B-5D","(query, base = nil)",""],["[]","Bundler::Settings","classes/Bundler/Settings.html#method-i-5B-5D","(name)",""],["[]","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-5B-5D","(key)",""],["[]","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-5B-5D","(key)","<p>Get the value for the parameter with a given key.\n<p>If the parameter has multiple values, only the first …\n"],["[]","CGI::Session","classes/CGI/Session.html#method-i-5B-5D","(key)","<p>Retrieve the session data for key <code>key</code>.\n"],["[]","CSV::Row","classes/CSV/Row.html#method-i-5B-5D","(header_or_index, minimum_index = 0)",""],["[]","CSV::Table","classes/CSV/Table.html#method-i-5B-5D","(index_or_header)","<p>In the default mixed mode, this method returns rows for index access and\ncolumns for header access.  …\n"],["[]","Continuation","classes/Continuation.html#method-i-5B-5D","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["[]","DBM","classes/DBM.html#method-i-5B-5D","(p1)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["[]","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-5B-5D","(key)","<p>A convenience method to access the values like a Hash\n"],["[]","DRb::GW","classes/DRb/GW.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the GW\n"],["[]","Dir","classes/Dir.html#method-c-5B-5D","(*args, p2 = {})","<p>Equivalent to calling <code>Dir.glob([string,...], 0)</code>.\n"],["[]","ENV","classes/ENV.html#method-c-5B-5D","(p1)","<p>Retrieves the <code>value</code> for environment variable <code>name</code>\nas a String.  Returns <code>nil</code> if the named variable does …\n"],["[]","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-i-5B-5D","(name)","<p>Fetch struct member <code>name</code>\n"],["[]","Fiddle::CompositeHandler","classes/Fiddle/CompositeHandler.html#method-i-5B-5D","(symbol)","<p>See Fiddle::CompositeHandler.sym\n"],["[]","Fiddle::Handle","classes/Fiddle/Handle.html#method-c-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>. \nThe function is searched via dlsym on RTLD_NEXT …\n"],["[]","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-5B-5D","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["[]","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-5B-5D","(name)","<p>Returns the function mapped to <code>name</code>, that was created by\neither Fiddle::Importer.extern or Fiddle::Importer.bind …\n"],["[]","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-5B-5D","(p1, p2 = v2)","<p>Returns integer stored at <em>index</em>.\n<p>If <em>start</em> and <em>length</em> are given, a string containing the\nbytes from <em>start</em> …\n"],["[]","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-c-5B-5D","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a Fiddle::Pointer object.\n"],["[]","GDBM","classes/GDBM.html#method-i-5B-5D","(p1)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>.\n"],["[]","Hash","classes/Hash.html#method-i-5B-5D","(p1)","<p>Element Reference—Retrieves the <em>value</em> object corresponding to the\n<em>key</em> object. If not found, returns …\n"],["[]","Hash","classes/Hash.html#method-c-5B-5D","(*args)","<p>Creates a new hash populated with the given objects.\n<p>Similar to the literal <code>{ <em>key</em> =&gt; <em>value</em>, ...\n}</code>. …\n"],["[]","Integer","classes/Integer.html#method-i-5B-5D","(p1)","<p>Bit Reference—Returns the <code>n</code>th bit in the binary representation\nof <code>int</code>, where <code>int[0]</code> is the least significant …\n"],["[]","JSON","classes/JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise …\n"],["[]","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-5B-5D","(p1)","<p>Returns the value returned by method <code>name</code>.\n"],["[]","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-5B-5D","(name)",""],["[]","MatchData","classes/MatchData.html#method-i-5B-5D","(p1, p2 = v2)","<p>Match Reference – <code>MatchData</code> acts as an array, and may be\naccessed using the normal array indexing techniques. …\n"],["[]","Matrix","classes/Matrix.html#method-c-5B-5D","(*rows)","<p>Creates a matrix where each argument is a row.\n\n<pre><code>Matrix[ [25, 93], [-1, 66] ]\n   =&gt;  25 93\n       -1 66</code></pre>\n"],["[]","Method","classes/Method.html#method-i-5B-5D","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre><code>m = 12.method(&quot;+&quot;) ...\n</code></pre>\n"],["[]","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-5B-5D","(key)","<p>Returns the header field corresponding to the case-insensitive key. For\nexample, a key of “Content-Type” …\n"],["[]","OLEProperty","classes/OLEProperty.html#method-i-5B-5D","(*args)",""],["[]","Object","classes/Object.html#method-i-5B-5D","(i, j)","<p>Returns element (<code>i</code>,<code>j</code>) of the matrix.  That is:\nrow <code>i</code>, column <code>j</code>.\n"],["[]","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-5B-5D","(p1)","<p>Retrieves a weakly referenced object with the given key\n"],["[]","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-5B-5D","(section)","<p>Get a specific <em>section</em> from the current configuration\n<p>Given the following configurating file being loaded: …\n"],["[]","OpenStruct","classes/OpenStruct.html#method-i-5B-5D","(name)","<p>Returns the value of an attribute.\n\n<pre><code>require &quot;ostruct&quot;\nperson = OpenStruct.new(&quot;name&quot; =&gt; &quot;John Smith&quot;, &quot;age&quot; ...</code></pre>\n"],["[]","PStore","classes/PStore.html#method-i-5B-5D","(name)","<p>Retrieves a value from the PStore file data, by <em>name</em>.  The\nhierarchy of Ruby objects stored under that …\n"],["[]","Prime::TrialDivision","classes/Prime/TrialDivision.html#method-i-5B-5D","(index)","<p>Returns the +index+th prime number.\n<p><code>index</code> is a 0-based index.\n"],["[]","Proc","classes/Proc.html#method-i-5B-5D","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["[]","Psych::Coder","classes/Psych/Coder.html#method-i-5B-5D","(k)",""],["[]","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-5B-5D","(key)","<p>Access the attlist attribute/value pairs.\n\n<pre><code>value = attlist_decl[ attribute_name ]\n</code></pre>\n"],["[]","REXML::Attributes","classes/REXML/Attributes.html#method-i-5B-5D","(name)","<p>Fetches an attribute value.  If you want to get the Attribute itself, use\nget_attribute()\n<p>name &mdash; an XPath …\n"],["[]","REXML::Element","classes/REXML/Element.html#method-i-5B-5D","(name_or_index)","<p>Fetches an attribute value or a child.\n<p>If String or Symbol is specified, it&#39;s treated as attribute …\n"],["[]","REXML::Elements","classes/REXML/Elements.html#method-i-5B-5D","( index, name=nil)","<p>Fetches a child element.  Filters only Element children, regardless of the\nXPath match.\n<p>index &mdash; the search …\n"],["[]","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-5B-5D","( reference, ns=nil )",""],["[]","REXML::Parent","classes/REXML/Parent.html#method-i-5B-5D","( index )","<p>Fetches a child at a given index @param index the Integer index of the\nchild to fetch\n"],["[]","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-5B-5D","( start, endd=nil)",""],["[]","RSS::Maker","classes/RSS/Maker.html#method-c-5B-5D","(version)","<p>Returns the maker for the <code>version</code>\n"],["[]","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-5B-5D","(name)",""],["[]","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-5B-5D","(k)","<p>Accessor method for elements of the tuple.\n"],["[]","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the tuple.\n"],["[]","SDBM","classes/SDBM.html#method-i-5B-5D","(p1)","<p>Returns the <code>value</code> in the database associated with the given\n<code>key</code> string.\n<p>If no value is found, returns …\n"],["[]","Set","classes/Set.html#method-c-5B-5D","(*ary)","<p>Creates a new set containing the given objects.\n\n<pre><code>Set[1, 2]                   # =&gt; #&lt;Set: {1, 2}&gt;\nSet[1, ...</code></pre>\n"],["[]","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-5B-5D","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["[]","String","classes/String.html#method-i-5B-5D","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["[]","StringScanner","classes/StringScanner.html#method-i-5B-5D","(p1)","<p>Returns the n-th subgroup in the most recent match.\n\n<pre><code>s = StringScanner.new(&quot;Fri Dec 12 1975 14:39&quot;)\ns.scan(/(\\w+) ...</code></pre>\n"],["[]","Struct","classes/Struct.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of the given struct\n<code>member</code> or the member at the given <code>index</code>. …\n"],["[]","Symbol","classes/Symbol.html#method-i-5B-5D","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["[]","Thread","classes/Thread.html#method-i-5B-5D","(p1)","<p>Attribute Reference—Returns the value of a fiber-local variable (current\nthread&#39;s root fiber if …\n"],["[]","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-5B-5D","(key)","<p>Reads <code>key</code> from the configuration\n"],["[]","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-5B-5D","(key)","<p>Retrieves <code>key</code> from the configuration\n"],["[]","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-5B-5D","(header_name)","<p>Retrieves <code>header_name</code>\n"],["[]","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-5B-5D","(field)","<p>Retrieves the response header <code>field</code>\n"],["[]","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-5B-5D","(code)","<p>Returns the status class corresponding to <code>code</code>\n\n<pre><code>WEBrick::HTTPStatus[302]\n=&gt; WEBrick::HTTPStatus::NotFound</code></pre>\n"],["[]","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-5B-5D","(*key)","<p>Retrieves the header at the first entry in <code>key</code>\n"],["[]","WIN32OLE","classes/WIN32OLE.html#method-i-5B-5D","(*args)","<p>Returns the value of Collection specified by a1, a2,.…\n\n<pre><code>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;)\ndict.add(&#39;ruby&#39;, ...</code></pre>\n"],["[]","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-5B-5D","(*args)","<p>Returns the element of WIN32OLE_VARIANT object(OLE array). This method is\navailable only when the variant …\n"],["[]","YAML::DBM","classes/YAML/DBM.html#method-i-5B-5D","( key )","<p>Return value associated with <code>key</code> from database.\n<p>Returns <code>nil</code> if there is no such <code>key</code>.\n<p>See #fetch for more …\n"],["[]=","Array","classes/Array.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment — Sets the element at <code>index</code>, or replaces a\nsubarray from the <code>start</code> index for <code>length</code> …\n"],["[]=","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-5B-5D-3D","(key, value)",""],["[]=","CGI::Session","classes/CGI/Session.html#method-i-5B-5D-3D","(key, val)","<p>Set the session data for key <code>key</code>.\n"],["[]=","CSV::Row","classes/CSV/Row.html#method-i-5B-5D-3D","(*args)","<p>Looks up the field by the semantics described in CSV::Row.field() and\nassigns the <code>value</code>.\n<p>Assigning past …\n"],["[]=","CSV::Table","classes/CSV/Table.html#method-i-5B-5D-3D","(index_or_header, value)","<p>In the default mixed mode, this method assigns rows for index access and\ncolumns for header access.  …\n"],["[]=","DBM","classes/DBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["[]=","DRb::GW","classes/DRb/GW.html#method-i-5B-5D-3D","(key, v)","<p>Stores value <code>v</code> at <code>key</code> in the GW\n"],["[]=","ENV","classes/ENV.html#method-c-5B-5D-3D","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["[]=","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-i-5B-5D-3D","(name, val)","<p>Set struct member <code>name</code>, to value <code>val</code>\n"],["[]=","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-5B-5D-3D","(p1, p2, p3 = v3)","<p>Set the value at <code>index</code> to <code>int</code>.\n<p>Or, set the memory at <code>start</code> until <code>length</code> with the\ncontents of <code>string</code>, the …\n"],["[]=","GDBM","classes/GDBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["[]=","Hash","classes/Hash.html#method-i-5B-5D-3D","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</code></pre>\n"],["[]=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-5B-5D-3D","(p1, p2)","<p>Sets the attribute name to value.\n"],["[]=","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-5B-5D-3D","(name, value)",""],["[]=","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-5B-5D-3D","(key, val)","<p>Sets the header field corresponding to the case-insensitive key.\n"],["[]=","OLEProperty","classes/OLEProperty.html#method-i-5B-5D-3D","(*args)",""],["[]=","Object","classes/Object.html#method-i-5B-5D-3D","(i, j, v)","<p>Set element or elements of matrix.\n"],["[]=","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-5B-5D-3D","(p1, p2)","<p>Creates a weak reference from the given key to the given value\n"],["[]=","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-5B-5D-3D","(section, pairs)","<p>Sets a specific <em>section</em> name with a Hash <em>pairs</em>.\n<p>Given the following configuration being created:\n\n<pre><code>config ...\n</code></pre>\n"],["[]=","OpenStruct","classes/OpenStruct.html#method-i-5B-5D-3D","(name, value)","<p>Sets the value of an attribute.\n\n<pre><code>require &quot;ostruct&quot;\nperson = OpenStruct.new(&quot;name&quot; =&gt; &quot;John Smith&quot;, &quot;age&quot; ...</code></pre>\n"],["[]=","PStore","classes/PStore.html#method-i-5B-5D-3D","(name, value)","<p>Stores an individual Ruby object or a hierarchy of Ruby objects in the data\nstore file under the root …\n"],["[]=","Psych::Coder","classes/Psych/Coder.html#method-i-5B-5D-3D","(k, v)",""],["[]=","REXML::Attributes","classes/REXML/Attributes.html#method-i-5B-5D-3D","( name, value )","<p>Sets an attribute, overwriting any existing attribute value by the same\nname.  Namespace is significant. …\n"],["[]=","REXML::Elements","classes/REXML/Elements.html#method-i-5B-5D-3D","( index, element )","<p>Sets an element, replacing any previous matching element.  If no existing\nelement is found ,the element …\n"],["[]=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-5B-5D-3D","( reference, ns, value=nil )","<p>Doesn&#39;t handle namespaces yet\n"],["[]=","REXML::Parent","classes/REXML/Parent.html#method-i-5B-5D-3D","( *args )","<p>Set an index entry.  See Array.[]= @param index the index of the element to\nset @param opt either the …\n"],["[]=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-5B-5D-3D","( variable_name, value )",""],["[]=","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-5B-5D-3D","(name, value)",""],["[]=","SDBM","classes/SDBM.html#method-i-5B-5D-3D","(p1, p2)","<p>Stores a new <code>value</code> in the database with the given\n<code>key</code> as an index.\n<p>If the <code>key</code> already exists, this will …\n"],["[]=","String","classes/String.html#method-i-5B-5D-3D","(*args)","<p>Element Assignment—Replaces some or all of the content of <em>str</em>. The\nportion of the string affected is …\n"],["[]=","Struct","classes/Struct.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets the value of the given struct <code>member</code>\nor the member at the given <code>index</code>.   …\n"],["[]=","Thread","classes/Thread.html#method-i-5B-5D-3D","(p1, p2)","<p>Attribute Assignment—Sets or creates the value of a fiber-local variable,\nusing either a symbol or …\n"],["[]=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-5B-5D-3D","(field, value)","<p>Sets the response header <code>field</code> to <code>value</code>\n"],["[]=","WIN32OLE","classes/WIN32OLE.html#method-i-5B-5D-3D","(*args)","<p>Sets the value to WIN32OLE object specified by a1, a2, …\n\n<pre><code>dict = WIN32OLE.new(&#39;Scripting.Dictionary&#39;) ...\n</code></pre>\n"],["[]=","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-5B-5D-3D","(*args)","<p>Set the element of WIN32OLE_VARIANT object(OLE array) to val. This method\nis available only when the …\n"],["[]=","YAML::DBM","classes/YAML/DBM.html#method-i-5B-5D-3D","( key, val )","<p>Set <code>key</code> to <code>value</code> in database.\n<p><code>value</code> will be converted to YAML before storage.\n<p>See #store for more information. …\n"],["^","FalseClass","classes/FalseClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Integer","classes/Integer.html#method-i-5E","(p1)","<p>Bitwise EXCLUSIVE OR.\n"],["^","NilClass","classes/NilClass.html#method-i-5E","(p1)","<p>Exclusive Or—If <em>obj</em> is <code>nil</code> or <code>false</code>,\nreturns <code>false</code>; otherwise, returns <code>true</code>.\n"],["^","Set","classes/Set.html#method-i-5E","(enum)","<p>Returns a new set containing elements exclusive between the set and the\ngiven enumerable object.  (set …\n"],["^","TrueClass","classes/TrueClass.html#method-i-5E","(p1)","<p>Exclusive Or—Returns <code>true</code> if <em>obj</em> is <code>nil</code>\nor <code>false</code>, <code>false</code> otherwise.\n"],["_PermaLink?","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-i-_PermaLink-3F","()",""],["__callee__","Kernel","classes/Kernel.html#method-i-__callee__","()","<p>Returns the called name of the current method as a Symbol. If called\noutside of a method, it returns …\n"],["__dir__","Kernel","classes/Kernel.html#method-i-__dir__","()","<p>Returns the canonicalized absolute path of the directory of the file from\nwhich this method is called. …\n"],["__drbref","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drbref","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drbref","()","<p>Get the reference of the object, if local.\n"],["__drburi","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__drburi","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-__drburi","()","<p>Get the URI of the remote object.\n"],["__enable","TracePoint","classes/TracePoint.html#method-i-__enable","(p1, p2)","<p>Activates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre><code>trace.enabled? ...\n</code></pre>\n"],["__evaluate__","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-__evaluate__","(context, statements, file = nil, line = nil)",""],["__exit__","IRB::Context","classes/IRB/Context.html#method-i-__exit__","(ret = 0)",""],["__getobj__","Delegator","classes/Delegator.html#method-i-__getobj__","()","<p>This method must be overridden by subclasses and should return the object\nmethod calls are being delegated …\n"],["__getobj__","SimpleDelegator","classes/SimpleDelegator.html#method-i-__getobj__","()","<p>Returns the current object method calls are being delegated to.\n"],["__id__","BasicObject","classes/BasicObject.html#method-i-__id__","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["__materialize__","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-__materialize__","()",""],["__method__","Kernel","classes/Kernel.html#method-i-__method__","()","<p>Returns the name at the definition of the current method as a Symbol. If\ncalled outside of a method, …\n"],["__raise__","Delegator","classes/Delegator.html#method-i-__raise__","",""],["__send__","BasicObject","classes/BasicObject.html#method-i-__send__","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["__setobj__","Delegator","classes/Delegator.html#method-i-__setobj__","(obj)","<p>This method must be overridden by subclasses and change the object delegate\nto <em>obj</em>.\n"],["__setobj__","SimpleDelegator","classes/SimpleDelegator.html#method-i-__setobj__","(obj)","<p>Changes the delegate object to <em>obj</em>.\n<p>It&#39;s important to note that this does <strong>not</strong> cause\nSimpleDelegator&#39;s …\n"],["__swap__","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-__swap__","(spec)",""],["__swap__","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-__swap__","(spec)","<p>Because Rubyforge cannot be trusted to provide valid specifications once\nthe remote gem is downloaded, …\n"],["_dump","BigDecimal","classes/BigDecimal.html#method-i-_dump","(p1 = v1)","<p>Method used to provide marshalling support.\n\n<pre><code>inf = BigDecimal(&#39;Infinity&#39;)\n  #=&gt; Infinity\nBigDecimal._load(inf._dump) ...\n</code></pre>\n"],["_dump","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-_dump","(lv)","<p>Marshall this object.\n<p>The URI and ref of the object are marshalled.\n"],["_dump","Singleton","classes/Singleton.html#method-i-_dump","(depth = -1)","<p>By default, do not retain any state when marshalling.\n"],["_getproperty","WIN32OLE","classes/WIN32OLE.html#method-i-_getproperty","(p1, p2, p3)","<p>Runs the early binding method to get property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_httpdate","Date","classes/Date.html#method-c-_httpdate","(p1)","<p>Returns a hash of parsed elements.\n"],["_id2ref","ObjectSpace","classes/ObjectSpace.html#method-c-_id2ref","(p1)","<p>Converts an object id to a reference to the object. May not be called on an\nobject id passed as a parameter …\n"],["_invoke","WIN32OLE","classes/WIN32OLE.html#method-i-_invoke","(p1, p2, p3)","<p>Runs the early binding method. The 1st argument specifies dispatch ID, the\n2nd argument specifies the …\n"],["_iso8601","Date","classes/Date.html#method-c-_iso8601","(p1)","<p>Returns a hash of parsed elements.\n"],["_jisx0301","Date","classes/Date.html#method-c-_jisx0301","(p1)","<p>Returns a hash of parsed elements.\n"],["_load","BigDecimal","classes/BigDecimal.html#method-c-_load","(p1)","<p>Internal method used to provide marshalling support. See the Marshal\nmodule.\n"],["_load","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-_load","(s)","<p>Unmarshall a marshalled DRbObject.\n<p>If the referenced object is located within the local server, then the …\n"],["_load","Singleton","classes/Singleton.html#method-c-_load","","<p>By default calls instance(). Override to retain singleton state.\n"],["_local_specification","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-_local_specification","()",""],["_parse","Date","classes/Date.html#method-c-_parse","(*args)","<p>Parses the given representation of date and time, and returns a hash of\nparsed elements.  This method …\n"],["_path_to?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-_path_to-3F","(other, visited = Set.new)","<p>@param [Vertex] other the vertex to check if there&#39;s a path to @param\n[Set&lt;Vertex&gt;] visited …\n"],["_racc_do_parse_rb","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_do_parse_rb","(arg, in_debug)",""],["_racc_do_reduce","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_do_reduce","(arg, act)",""],["_racc_evalact","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_evalact","(act, arg)","<p>common\n"],["_racc_init_sysvars","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_init_sysvars","()",""],["_racc_setup","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_setup","()",""],["_racc_yyparse_rb","Racc::Parser","classes/Racc/Parser.html#method-i-_racc_yyparse_rb","(recv, mid, arg, c_debug)",""],["_rfc2822","Date","classes/Date.html#method-c-_rfc2822","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc3339","Date","classes/Date.html#method-c-_rfc3339","(p1)","<p>Returns a hash of parsed elements.\n"],["_rfc822","Date","classes/Date.html#method-c-_rfc822","(p1)","<p>Returns a hash of parsed elements.\n"],["_set_last_value","IRB::Context","classes/IRB/Context.html#method-i-_set_last_value","(value)","<p>See #set_last_value\n"],["_setproperty","WIN32OLE","classes/WIN32OLE.html#method-i-_setproperty","(p1, p2, p3)","<p>Runs the early binding method to set property. The 1st argument specifies\ndispatch ID, the 2nd argument …\n"],["_strptime","Date","classes/Date.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_strptime","DateTime","classes/DateTime.html#method-c-_strptime","(*args)","<p>Parses the given representation of date and time with the given template,\nand returns a hash of parsed …\n"],["_xmlschema","Date","classes/Date.html#method-c-_xmlschema","(p1)","<p>Returns a hash of parsed elements.\n"],["`","Kernel","classes/Kernel.html#method-i-60","(p1)","<p>Returns the standard output of running <em>cmd</em> in a subshell. The\nbuilt-in syntax <code>%x{...}</code> uses this method. …\n"],["a","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-a","(href = \"\")","<p>Generate an Anchor element as a string.\n<p><code>href</code> can either be a string, giving the URL for the HREF\nattribute, …\n"],["abbrev","Abbrev","classes/Abbrev.html#method-c-abbrev","(words, pattern = nil)","<p>Given a set of strings, calculate the set of unambiguous abbreviations for\nthose strings, and return …\n"],["abbrev","Array","classes/Array.html#method-i-abbrev","(pattern = nil)","<p>Calculates the set of unambiguous abbreviations for the strings in\n<code>self</code>.\n\n<pre><code>require &#39;abbrev&#39;\n%w{ car cone ...</code></pre>\n"],["abbreviate","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-abbreviate","( path )",""],["abort","Kernel","classes/Kernel.html#method-i-abort","(*args)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort","Net::FTP","classes/Net/FTP.html#method-i-abort","()","<p>Aborts the previous command (ABOR command).\n"],["abort","OptionParser","classes/OptionParser.html#method-i-abort","(mesg = $!)",""],["abort","PStore","classes/PStore.html#method-i-abort","()","<p>Ends the current PStore#transaction, discarding any changes to the data\nstore.\n<p>Example:\n\n<pre><code>require &quot;pstore&quot; ...\n</code></pre>\n"],["abort","Process","classes/Process.html#method-c-abort","(*args)","<p>Terminate execution immediately, effectively by calling\n<code>Kernel.exit(false)</code>. If <em>msg</em> is given, it is written …\n"],["abort_on_exception","Thread","classes/Thread.html#method-c-abort_on_exception","()","<p>Returns the status of the global “abort on exception&#39;&#39; condition.\n<p>The default is <code>false</code>.\n<p>When set …\n"],["abort_on_exception","Thread","classes/Thread.html#method-i-abort_on_exception","()","<p>Returns the status of the thread-local “abort on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["abort_on_exception=","Thread","classes/Thread.html#method-i-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if this <code>thr</code> is aborted by an\nexception, the raised exception will be re-raised in the …\n"],["abort_on_exception=","Thread","classes/Thread.html#method-c-abort_on_exception-3D","(p1)","<p>When set to <code>true</code>, if any thread is aborted by an exception,\nthe raised exception will be re-raised in …\n"],["abs","BigDecimal","classes/BigDecimal.html#method-i-abs","()","<p>Returns the absolute value, as a BigDecimal.\n\n<pre><code>BigDecimal(&#39;5&#39;).abs  #=&gt; 0.5e1\nBigDecimal(&#39;-3&#39;).abs #=&gt; 0.3e1\n</code></pre>\n"],["abs","Complex","classes/Complex.html#method-i-abs","()","<p>Returns the absolute part of its polar form.\n\n<pre><code>Complex(-1).abs         #=&gt; 1\nComplex(3.0, -4.0).abs  #=&gt; ...\n</code></pre>\n"],["abs","Float","classes/Float.html#method-i-abs","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre><code>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n34.56.abs      ...\n</code></pre>\n"],["abs","Integer","classes/Integer.html#method-i-abs","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre><code>(-12345).abs   #=&gt; 12345\n-12345.abs     #=&gt; 12345\n12345.abs      #=&gt; ...\n</code></pre>\n"],["abs","Numeric","classes/Numeric.html#method-i-abs","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre><code>12.abs         #=&gt; 12\n(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["abs","Rational","classes/Rational.html#method-i-abs","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre><code>(1/2r).abs    #=&gt; (1/2)\n(-1/2r).abs   #=&gt; (1/2)\n</code></pre>\n<p>Rational#magnitude is …\n"],["abs2","Complex","classes/Complex.html#method-i-abs2","()","<p>Returns square of the absolute value.\n\n<pre><code>Complex(-1).abs2         #=&gt; 1\nComplex(3.0, -4.0).abs2  #=&gt; 25.0\n</code></pre>\n"],["abs2","Numeric","classes/Numeric.html#method-i-abs2","()","<p>Returns square of self.\n"],["absolute","URI::Generic","classes/URI/Generic.html#method-i-absolute","()",""],["absolute?","Pathname","classes/Pathname.html#method-i-absolute-3F","()","<p>Predicate method for testing whether a path is absolute.\n<p>It returns <code>true</code> if the pathname begins with a …\n"],["absolute?","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-absolute-3F","()","<p>True if this name is absolute.\n"],["absolute?","URI::Generic","classes/URI/Generic.html#method-i-absolute-3F","()","<p>Returns true if URI has a scheme (e.g. http:// or https://) specified.\n"],["absolute_path","File","classes/File.html#method-c-absolute_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["absolute_path","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-absolute_path","()","<p>Returns the absolute path of this instruction sequence.\n<p><code>nil</code> if the iseq was evaluated from a string.\n<p>For …\n"],["absolute_path","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-absolute_path","()","<p>Returns the full file path of this frame.\n<p>Same as #path, but includes the absolute path.\n"],["ac_arg_disable","OptionParser::AC","classes/OptionParser/AC.html#method-i-ac_arg_disable","(name, help_string, &block)",""],["ac_arg_enable","OptionParser::AC","classes/OptionParser/AC.html#method-i-ac_arg_enable","(name, help_string, &block)",""],["ac_arg_with","OptionParser::AC","classes/OptionParser/AC.html#method-i-ac_arg_with","(name, help_string, &block)",""],["accept","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-accept","(tcp)","<p>Accept connection to IO <code>tcp</code>, with context of the current\ncertificate configuration\n"],["accept","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-i-accept","()","<p>Works similar to TCPServer#accept.\n"],["accept","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-accept","()","<p>Waits for a SSL/TLS client to initiate a handshake.  The handshake may be\nstarted after unencrypted data …\n"],["accept","OptionParser","classes/OptionParser.html#method-c-accept","(*args, &blk)","<p>See #accept.\n"],["accept","OptionParser","classes/OptionParser.html#method-i-accept","(*args, &blk)","<p>Directs to accept specified class <code>t</code>. The argument string is\npassed to the block in which it should be …\n"],["accept","OptionParser::List","classes/OptionParser/List.html#method-i-accept","(t, pat = /.*/m, &block)","<p>See OptionParser.accept.\n"],["accept","Psych::Visitors::JSONTree","classes/Psych/Visitors/JSONTree.html#method-i-accept","(target)",""],["accept","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-accept","(target)",""],["accept","Psych::Visitors::Visitor","classes/Psych/Visitors/Visitor.html#method-i-accept","(target)",""],["accept","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-accept","(target)",""],["accept","Socket","classes/Socket.html#method-i-accept","()","<p>Accepts a next connection. Returns a new Socket object and Addrinfo object.\n\n<pre><code>serv = Socket.new(:INET, :STREAM, ...</code></pre>\n"],["accept","TCPServer","classes/TCPServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new TCPSocket object.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 14641) ...\n</code></pre>\n"],["accept","UNIXServer","classes/UNIXServer.html#method-i-accept","()","<p>Accepts an incoming connection. It returns a new UNIXSocket object.\n\n<pre><code>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv| ...</code></pre>\n"],["accept_charset","CGI","classes/CGI.html#method-c-accept_charset","()","<p>Return the accept character set for all new CGI instances.\n"],["accept_charset=","CGI","classes/CGI.html#method-c-accept_charset-3D","(accept_charset)","<p>Set the accept character set for all new CGI instances.\n"],["accept_loop","Socket","classes/Socket.html#method-c-accept_loop","(*sockets)","<p>yield socket and client address for each a connection accepted via given\nsockets.\n<p>The arguments are a …\n"],["accept_nonblock","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-accept_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a server in non-blocking manner.\n\n<pre><code># emulates blocking accept\nbegin\n ...</code></pre>\n"],["accept_nonblock","Socket","classes/Socket.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","TCPServer","classes/TCPServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["accept_nonblock","UNIXServer","classes/UNIXServer.html#method-i-accept_nonblock","(exception: true)","<p>Accepts an incoming connection using accept(2) after O_NONBLOCK is set for\nthe underlying file descriptor. …\n"],["access_log","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-access_log","(config, req, res)","<p>Logs <code>req</code> and <code>res</code> in the access logs. \n<code>config</code> is used for the server name.\n"],["acct","Net::FTP","classes/Net/FTP.html#method-i-acct","(account)","<p>Sends the ACCT command.\n<p>This is a less common FTP command, to send account information if the\ndestination …\n"],["acos","CMath","classes/CMath.html#method-c-acos","(z)","<p>Returns the arc cosine of <code>z</code>\n\n<pre><code>CMath.acos(1 + 1i) #=&gt; (0.9045568943023813-1.0612750619050357i)\n</code></pre>\n"],["acos","Math","classes/Math.html#method-c-acos","(p1)","<p>Computes the arc cosine of <code>x</code>. Returns 0..PI.\n<p>Domain: [-1, 1]\n<p>Codomain: [0, PI]\n"],["acosh","CMath","classes/CMath.html#method-c-acosh","(z)","<p>returns the inverse hyperbolic cosine of <code>z</code>\n\n<pre><code>CMath.acosh(1 + 1i) #=&gt; (1.0612750619050357+0.9045568943023813i)\n</code></pre>\n"],["acosh","Math","classes/Math.html#method-c-acosh","(p1)","<p>Computes the inverse hyperbolic cosine of <code>x</code>.\n<p>Domain: [1, INFINITY)\n<p>Codomain: [0, INFINITY)\n"],["action","Bundler::PermissionError","classes/Bundler/PermissionError.html#method-i-action","()",""],["action_name","Bundler::Molinillo::DependencyGraph::Action","classes/Bundler/Molinillo/DependencyGraph/Action.html#method-c-action_name","()","<p>@return [Symbol] The name of the action.\n"],["action_name","Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Bundler::Molinillo::DependencyGraph::DeleteEdge","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["action_name","Bundler::Molinillo::DependencyGraph::DetachVertexNamed","classes/Bundler/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-action_name","()","<p>(see Action#name)\n"],["action_name","Bundler::Molinillo::DependencyGraph::Tag","classes/Bundler/Molinillo/DependencyGraph/Tag.html#method-c-action_name","()","<p>(see Action.action_name)\n"],["activate","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-activate","(pc)",""],["activate_platform!","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-activate_platform-21","(platform)",""],["activated","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-activated","()","<p>(see Bundler::Molinillo::ResolutionState#activated)\n"],["activated","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-activated","()",""],["activated=","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-activated-3D","(activated)",""],["active?","Net::HTTP","classes/Net/HTTP.html#method-i-active-3F","()",""],["active?","Net::POP3","classes/Net/POP3.html#method-i-active-3F","()",""],["active?","Shell::BuiltInCommand","classes/Shell/BuiltInCommand.html#method-i-active-3F","()",""],["active?","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-active-3F","()",""],["active_job?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_job-3F","(job)",""],["active_jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_jobs","()",""],["active_jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-active_jobs_exist-3F","()",""],["active_process_controllers","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-active_process_controllers","()",""],["add","ACL::ACLList","classes/ACL/ACLList.html#method-i-add","(str)","<p>Adds <code>str</code> as an ACLEntry in this list\n"],["add","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-add","()","<p>Returns a new Tms object whose times are the sum of the times for this Tms\nobject, plus the time required …\n"],["add","BigDecimal","classes/BigDecimal.html#method-i-add","(p1, p2)","\n<pre><code>+</code></pre>\n<p>Add the specified value.\n<p>e.g.\n"],["add","Bundler::CLI","classes/Bundler/CLI.html#method-i-add","(*gems)",""],["add","Logger","classes/Logger.html#method-i-add","(severity, message = nil, progname = nil)","<p>Args\n<p><code>severity</code> &mdash; Severity.  Constants are defined in Logger namespace: <code>DEBUG</code>,\n<code>INFO</code>, <code>WARN</code>, <code>ERROR</code>,\n<code>FATAL</code>, or …\n"],["add","Psych::Coder","classes/Psych/Coder.html#method-i-add","(k, v)",""],["add","RDoc::Context","classes/RDoc/Context.html#method-i-add","(klass, name, comment)","<p>Adds an item of type <code>klass</code> with the given <code>name</code>\nand <code>comment</code> to the context.\n<p>Currently only RDoc::Extend …\n"],["add","REXML::Attributes","classes/REXML/Attributes.html#method-i-add","( attribute )","<p>Adds an attribute, overriding any existing attribute by the same name. \nNamespaces are significant.\n<p>attribute … &mdash; "],["add","REXML::DocType","classes/REXML/DocType.html#method-i-add","(child)",""],["add","REXML::Document","classes/REXML/Document.html#method-i-add","( child )","<p>We override this, because XMLDecls and DocTypes must go at the start of the\ndocument\n"],["add","REXML::Elements","classes/REXML/Elements.html#method-i-add","(element=nil)","<p>Adds an element\n<p>element &mdash; if supplied, is either an Element, String, or Source (see\nElement.initialize). …\n"],["add","REXML::Parent","classes/REXML/Parent.html#method-i-add","( object )",""],["add","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-add","(tuple)",""],["add","Set","classes/Set.html#method-i-add","(o)","<p>Adds the given object to the set and returns self.  Use <code>merge</code>\nto add many elements at once.\n\n<pre><code>Set[1, 2].add(3) ...\n</code></pre>\n"],["add","Syslog::Logger","classes/Syslog/Logger.html#method-i-add","(severity, message = nil, progname = nil, &block)","<p>Almost duplicates Logger#add.  <code>progname</code> is ignored.\n"],["add","ThreadGroup","classes/ThreadGroup.html#method-i-add","(p1)","<p>Adds the given <code>thread</code> to this group, removing it from any\nother group to which it may have previously …\n"],["add","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-add","(group, members)","<p>Add an Array of <code>members</code> to <code>group</code>\n"],["add!","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-add-21","(&blk)","<p>An in-place version of #add. Changes the times of this Tms object by making\nit the sum of the times for …\n"],["add?","Set","classes/Set.html#method-i-add-3F","(o)","<p>Adds the given object to the set and returns self.  If the object is\nalready in the set, returns nil. …\n"],["add_alias","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-add_alias","(an_alias, context = nil)","<p>Adds <code>an_alias</code> as an alias for this method in\n<code>context</code>.\n"],["add_alias","RDoc::Attr","classes/RDoc/Attr.html#method-i-add_alias","(an_alias, context)","<p>Add <code>an_alias</code> as an attribute in <code>context</code>.\n"],["add_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> that is automatically resolved\n"],["add_alias","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-add_alias","(an_alias, context)","<p>Abstract method. Contexts in their building phase call this to register a\nnew alias for this known method/attribute. …\n"],["add_alias","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_alias","(as)","<p>Records the parsing of an alias <code>as</code>.\n"],["add_alias","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_alias","(an_alias)","<p>Adds <code>an_alias</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_attribute","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-add_attribute","(p1)",""],["add_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-add_attribute","(attribute)","<p>Adds <code>attribute</code> if not already there. If it is (as method(s) or\nattribute), updates the comment if it …\n"],["add_attribute","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_attribute","(attribute)","<p>Records the parsing of an attribute <code>attribute</code>\n"],["add_attribute","REXML::Element","classes/REXML/Element.html#method-i-add_attribute","( key, value=nil )","<p>Adds an attribute to this element, overwriting any existing attribute by\nthe same name.\n<p>key &mdash; can be either …\n"],["add_attributes","REXML::Element","classes/REXML/Element.html#method-i-add_attributes","(hash)","<p>Add multiple attributes to this element.\n<p>hash &mdash; is either a hash, or array of arrays\n\n\n<pre><code>el.add_attributes( {&quot;name1&quot;=&gt;&quot;value1&quot;, ...</code></pre>\n"],["add_authenticator","Net::IMAP","classes/Net/IMAP.html#method-c-add_authenticator","(auth_type, authenticator)","<p>Adds an authenticator for Net::IMAP#authenticate.  <code>auth_type</code>\nis the type of authentication this authenticator …\n"],["add_c_enclosure","RDoc::Store","classes/RDoc/Store.html#method-i-add_c_enclosure","(variable, namespace)","<p>Adds <code>module</code> as an enclosure (namespace) for the given\n<code>variable</code> for C files.\n"],["add_c_variables","RDoc::Store","classes/RDoc/Store.html#method-i-add_c_variables","(c_parser)","<p>Adds C variables from an RDoc::Parser::C\n"],["add_cert","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_cert","(p1)","<p>Adds the OpenSSL::X509::Certificate <em>cert</em> to the certificate store.\n"],["add_certid","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-add_certid","(p1)","<p>Adds <em>certificate_id</em> to the request.\n"],["add_certificate","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_certificate","(p1)",""],["add_certificate","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-add_certificate","(p1, p2, p3 = v3)","<p>Adds a certificate to the context. <em>pkey</em> must be a corresponding\nprivate key with <em>certificate</em>.\n<p>Multiple …\n"],["add_child_vertex","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-add_child_vertex","(name, payload, parent_names, requirement)","<p>@param [String] name @param [Object] payload @param [Array&lt;String&gt;]\nparent_names @param [Object] …\n"],["add_class","RDoc::Context","classes/RDoc/Context.html#method-i-add_class","(class_type, given_name, superclass = '::Object')","<p>Adds a class named <code>given_name</code> with <code>superclass</code>.\n<p>Both <code>given_name</code> and <code>superclass</code> may contain\n&#39;::&#39;, …\n"],["add_class","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_class","(klass)","<p>Records the parsing of a class <code>klass</code>\n"],["add_class_or_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_class_or_module","(mod, self_hash, all_hash)","<p>Adds the class or module <code>mod</code> to the modules or classes Hash\n<code>self_hash</code>, and to <code>all_hash</code> (either\n<code>TopLevel::modules_hash</code> …\n"],["add_color","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-add_color","(string, *color)",""],["add_color","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-add_color","(string, color)",""],["add_command","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-add_command","(command, cls)","<p>To be called via the API to register to handle a command\n"],["add_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-add_comment","(comment, location)","<p>Adds <code>comment</code> to this ClassModule&#39;s list of comments at\n<code>location</code>.  This method is preferred over  …\n"],["add_constant","RDoc::Context","classes/RDoc/Context.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> if not already there. If it is, updates the\ncomment, value and/or is_alias_for of the known …\n"],["add_constant","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_constant","(constant)","<p>Records the parsing of <code>constant</code>\n"],["add_constant","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_constant","(constant)","<p>Adds <code>constant</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_converter","CSV::FieldsConverter","classes/CSV/FieldsConverter.html#method-i-add_converter","(name=nil, &converter)",""],["add_crl","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_crl","(p1)",""],["add_crl","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_crl","(p1)","<p>Adds the OpenSSL::X509::CRL <em>crl</em> to the store.\n"],["add_current_platform","Bundler::Definition","classes/Bundler/Definition.html#method-i-add_current_platform","()",""],["add_data","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_data","(p1)",""],["add_dictionary","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-add_dictionary","(p1)","<p>Provide the inflate stream with a dictionary that may be required in the\nfuture.  Multiple dictionaries …\n"],["add_edge","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-add_edge","(origin, destination, requirement)","<p>Adds a new {Edge} to the dependency graph @param [Vertex] origin @param\n[Vertex] destination @param [Object] …\n"],["add_edge_no_circular","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-add_edge_no_circular","(graph, origin, destination, requirement)","<p>@macro action\n"],["add_element","REXML::Document","classes/REXML/Document.html#method-i-add_element","(arg=nil, arg2=nil)",""],["add_element","REXML::Element","classes/REXML/Element.html#method-i-add_element","(element, attrs=nil)","<p>Adds a child to this element, optionally setting attributes in the element.\n<p>element &mdash; optional.  If Element …\n"],["add_entry","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-add_entry","(p1, p2, p3 = v3, p4 = {})","<p>Adds a new entry with the given <em>oid</em> and <em>value</em> to this\nname.  The <em>oid</em> is an object identifier defined …\n"],["add_event_to_arry","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-add_event_to_arry","( arry, evt )",""],["add_event_to_arry","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-add_event_to_arry","( arry, evt )",""],["add_extend","RDoc::Context","classes/RDoc/Context.html#method-i-add_extend","(ext)","<p>Adds extension module <code>ext</code> which should be an RDoc::Extend\n"],["add_extension","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-add_extension","(p1)",""],["add_extension","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-add_extension","(p1)",""],["add_field","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-add_field","(key, val)","<p>Ruby 1.8.3 &mdash; Adds a value to a named header field, instead of replacing its value.\nSecond argument <code>val</code> …\n"],["add_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-add_file","(destination, *args, &block)",""],["add_file","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_file","(p1)","<p>Adds the certificates in <em>file</em> to the certificate store.\n<em>file</em> is the path to the file, and the file contains …\n"],["add_file","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_file","(file)","<p>Records the parsing of <code>file</code>\n"],["add_file","RDoc::Store","classes/RDoc/Store.html#method-i-add_file","(absolute_name, relative_name: absolute_name, parser: nil)","<p>Adds the file with <code>name</code> as an RDoc::TopLevel to the store. \nReturns the created RDoc::TopLevel.\n"],["add_filter","Tracer","classes/Tracer.html#method-c-add_filter","(p = proc)","<p>Used to filter unwanted trace output\n<p>Example which only outputs lines of code executed within the Kernel …\n"],["add_generator","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-add_generator","(klass)","<p>Add <code>klass</code> that can generate output after parsing\n"],["add_git_source","Bundler::Plugin::SourceList","classes/Bundler/Plugin/SourceList.html#method-i-add_git_source","(options = {})",""],["add_git_source","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-add_git_source","(options = {})",""],["add_handler","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-add_handler","(suffix, handler)","<p>Allow custom handling of requests for files with <code>suffix</code> by\nclass <code>handler</code>\n"],["add_have_children_element","RSS::Element","classes/RSS/Element.html#method-c-add_have_children_element","(variable_name, plural_name)",""],["add_hook","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-add_hook","(event, &block)","<p>To be called via the API to register a hooks and corresponding block that\nwill be called to handle the …\n"],["add_html","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_html","(tag, name)","<p>Add to the sequences recognized as general markup.\n"],["add_include","RDoc::Context","classes/RDoc/Context.html#method-i-add_include","(include)","<p>Adds included module <code>include</code> which should be an RDoc::Include\n"],["add_include","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_include","(include)","<p>Adds <code>include</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_link","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-add_link","(destination, *args)",""],["add_listener","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-i-add_listener","( listener )",""],["add_listener","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-add_listener","( listener )",""],["add_maker","RSS::Maker","classes/RSS/Maker.html#method-c-add_maker","(version, normalized_version, maker)","<p>Adds a maker to the set of supported makers\n"],["add_method","RDoc::Context","classes/RDoc/Context.html#method-i-add_method","(method)","<p>Adds <code>method</code> if not already there. If it is (as method or\nattribute), updates the comment if it was empty. …\n"],["add_method","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_method","(method)","<p>Records the parsing of <code>method</code>\n"],["add_method","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_method","(method)","<p>Adds <code>method</code> to <code>Object</code> instead of\n<code>self</code>.\n"],["add_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_module","(class_type, name)","<p>Adds a module named <code>name</code>.  If RDoc already knows\n<code>name</code> is a class then that class is returned instead. …\n"],["add_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-add_module","(mod)","<p>Records the parsing of a module <code>mod</code>\n"],["add_module_alias","RDoc::Context","classes/RDoc/Context.html#method-i-add_module_alias","(from, from_name, to, file)","<p>Adds an alias from <code>from</code> (a class or module) to\n<code>name</code> which was defined in <code>file</code>.\n"],["add_module_by_normal_module","RDoc::Context","classes/RDoc/Context.html#method-i-add_module_by_normal_module","(mod)","<p>Adds a module by <code>RDoc::NormalModule</code> instance. See also\n#add_module.\n"],["add_namespace","REXML::Element","classes/REXML/Element.html#method-i-add_namespace","( prefix, uri=nil )","<p>Adds a namespace to this element.\n<p>prefix &mdash; the prefix string, or the namespace URI if <code>uri</code> is not supplied\n…\n"],["add_need_initialize_variable","RSS::Element","classes/RSS/Element.html#method-c-add_need_initialize_variable","(variable_name)",""],["add_need_initialize_variable","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-add_need_initialize_variable","(variable_name, init_value=nil, &init_block)",""],["add_nonce","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-add_nonce","(p1 = v1)","<p>Adds <em>nonce</em> to this response.  If no nonce was provided a random\nnonce will be added.\n"],["add_nonce","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-add_nonce","(p1 = v1)","<p>Adds a <em>nonce</em> to the OCSP request.  If no nonce is given a random\none will be generated.\n<p>The nonce is used …\n"],["add_observer","Observable","classes/Observable.html#method-i-add_observer","(observer, func=:update)","<p>Add <code>observer</code> as an observer on this object. So that it will\nreceive notifications.\n<p><code>observer</code> &mdash; the object …\n"],["add_other_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-add_other_element","(variable_name)",""],["add_path","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-add_path","(p1)","<p>Adds <em>path</em> as the hash dir to be looked up by the store.\n"],["add_path_source","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-add_path_source","(options = {})",""],["add_platform","Bundler::Definition","classes/Bundler/Definition.html#method-i-add_platform","(platform)",""],["add_plugin_source","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-add_plugin_source","(source, options = {})",""],["add_plural_form","RSS::Element","classes/RSS/Element.html#method-c-add_plural_form","(singular, plural)",""],["add_protocol","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-add_protocol","(prot)","<p>Add a new protocol to the DRbProtocol module.\n"],["add_recipient","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_recipient","(p1)",""],["add_regexp_handling","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_regexp_handling","(pattern, name)","<p>Add to other inline sequences.  For example, we could add WikiWords using\nsomething like:\n\n<pre><code>parser.add_regexp_handling(/\\b([A-Z][a-z]+[A-Z]\\w+)/, ...</code></pre>\n"],["add_require","RDoc::Context","classes/RDoc/Context.html#method-i-add_require","(require)","<p>Adds <code>require</code> to this context&#39;s top level\n"],["add_response_handler","Net::IMAP","classes/Net/IMAP.html#method-i-add_response_handler","(handler = Proc.new)","<p>Adds a response handler. For example, to detect when the server sends a new\nEXISTS response (which normally …\n"],["add_revoked","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-add_revoked","(p1)",""],["add_row","CSV","classes/CSV.html#method-i-add_row","(row)",""],["add_rubygems_remote","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-add_rubygems_remote","(uri)",""],["add_rubygems_source","Bundler::Plugin::SourceList","classes/Bundler/Plugin/SourceList.html#method-i-add_rubygems_source","(options = {})",""],["add_rubygems_source","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-add_rubygems_source","(options = {})",""],["add_runtime_options!","Bundler::Thor::Actions::ClassMethods","classes/Bundler/Thor/Actions/ClassMethods.html#method-i-add_runtime_options-21","()","<p>Add runtime options that help actions execution.\n"],["add_schedule","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-add_schedule","(command)","<p>schedule a command\n"],["add_section","RDoc::Context","classes/RDoc/Context.html#method-i-add_section","(title, comment = nil)","<p>Returns a section with <code>title</code>, creating it if it doesn&#39;t\nalready exist. <code>comment</code> will be appended to …\n"],["add_signer","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-add_signer","(p1)",""],["add_source","Bundler::Index","classes/Bundler/Index.html#method-i-add_source","(index)",""],["add_source","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-add_source","(source, cls)","<p>To be called via the API to register to handle a source plugin\n"],["add_status","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-add_status","(p1, p2, p3, p4, p5, p6, p7)","<p>Adds a certificate status for <em>certificate_id</em>. <em>status</em> is\nthe status, and must be one of these:\n<p>OpenSSL::OCSP::V_CERTSTATUS_GOOD …\n"],["add_stress_to_class","GC","classes/GC.html#method-c-add_stress_to_class","(*args)","<p>Raises NoMemoryError when allocating an instance of the given classes.\n"],["add_text","REXML::Element","classes/REXML/Element.html#method-i-add_text","( text )","<p>A helper method to add a Text child.  Actual Text instances can be added\nwith regular Parent methods, …\n"],["add_to","RDoc::Context","classes/RDoc/Context.html#method-i-add_to","(array, thing)","<p>Adds <code>thing</code> to the collection <code>array</code>\n"],["add_to_classes_or_modules","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-add_to_classes_or_modules","(mod)","<p>Adds class or module <code>mod</code>. Used in the building phase by the\nRuby parser.\n"],["add_to_element_method","RSS::Element","classes/RSS/Element.html#method-c-add_to_element_method","(method_name)",""],["add_to_load_path","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-add_to_load_path","(load_paths)",""],["add_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_token","(*tokens)",""],["add_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-add_tokens","(*tokens)","<p>Adds <code>tokens</code> to the collected tokens\n"],["add_trace_func","Thread","classes/Thread.html#method-i-add_trace_func","(p1)","<p>Adds <em>proc</em> as a handler for tracing.\n<p>See Thread#set_trace_func and Kernel#set_trace_func.\n"],["add_value","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-add_value","(section, key, value)","<p>Set the target <em>key</em> with a given <em>value</em> under a specific\n<em>section</em>.\n<p>Given the following configurating file …\n"],["add_vertex","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-add_vertex","(name, payload, root = false)","<p>Adds a vertex with the given name, or updates the existing one. @param\n[String] name @param [Object] …\n"],["add_vertex","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-add_vertex","(graph, name, payload, root)","<p>@macro action\n"],["add_word_pair","RDoc::Markup","classes/RDoc/Markup.html#method-i-add_word_pair","(start, stop, name)","<p>Add to the sequences used to add formatting to an individual word (such as\n<strong>bold</strong>).  Matching entries will …\n"],["addr","IPSocket","classes/IPSocket.html#method-i-addr","(*args)","<p>Returns the local address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["addr","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-addr","()",""],["addr","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-addr","()","<p>Returns the address of <em>ifaddr</em>. nil is returned if address is not\navailable in <em>ifaddr</em>.\n"],["addr","UNIXSocket","classes/UNIXSocket.html#method-i-addr","()","<p>Returns the local address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre><code>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["adler","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-adler","()","<p>Returns the adler-32 checksum.\n"],["adler32","Zlib","classes/Zlib.html#method-c-adler32","(*args)","<p>Calculates Adler-32 checksum for <code>string</code>, and returns updated\nvalue of <code>adler</code>. If <code>string</code> is omitted, it …\n"],["adler32_combine","Zlib","classes/Zlib.html#method-c-adler32_combine","(p1, p2, p3)","<p>Combine two Adler-32 check values in to one.  <code>alder1</code> is the\nfirst Adler-32 value, <code>adler2</code> is the second …\n"],["advise","IO","classes/IO.html#method-i-advise","(p1, p2 = v2, p3 = v3)","<p>Announce an intention to access data from the current file in a specific\npattern. On platforms that do …\n"],["afamily","Addrinfo","classes/Addrinfo.html#method-i-afamily","()","<p>returns the address family as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).afamily == Socket::AF_INET #=&gt; ...\n</code></pre>\n"],["after_resolution","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-after_resolution","()","<p>Called after resolution ends (either successfully or with an error). By\ndefault, prints a newline.\n<p>@return …\n"],["after_resolution","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-after_resolution","()",""],["ajd","Date","classes/Date.html#method-i-ajd","()","<p>Returns the astronomical Julian day number.  This is a fractional number,\nwhich is not adjusted by the …\n"],["alias","Psych::Emitter","classes/Psych/Emitter.html#method-i-alias","(p1)","<p>Emit an alias with <code>anchor</code>.\n<p>See Psych::Handler#alias\n"],["alias","Psych::Handler","classes/Psych/Handler.html#method-i-alias","(anchor)","<p>Called when an alias is found to <code>anchor</code>.  <code>anchor</code>\nwill be the name of the anchor found.\n<p>Example\n<p>Here we …\n"],["alias","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-alias","(anchor)",""],["alias?","Psych::Nodes::Alias","classes/Psych/Nodes/Alias.html#method-i-alias-3F","()",""],["alias?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-alias-3F","()",""],["alias_command","Shell","classes/Shell.html#method-c-alias_command","(ali, command, *opts, &block)","<p>Convenience method for Shell::CommandProcessor.alias_command. Defines an\ninstance method which will execute …\n"],["alias_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-alias_command","(ali, command, *opts)","<p>Creates a command alias at the given <code>alias</code> for the given\n<code>command</code>, passing any <code>options</code> along with it. …\n"],["alias_extension","RDoc::Parser","classes/RDoc/Parser.html#method-c-alias_extension","(old_ext, new_ext)","<p>Alias an extension to another extension. After this call, files ending\n“new_ext” will be parsed …\n"],["alias_map","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-alias_map","()","<p>Returns a list of aliased commands\n"],["alias_method","Module","classes/Module.html#method-i-alias_method","(p1, p2)","<p>Makes <em>new_name</em> a new copy of the method <em>old_name</em>. This\ncan be used to retain access to methods that are …\n"],["aliases","Encoding","classes/Encoding.html#method-c-aliases","()","<p>Returns the hash of available encoding alias and original encoding name.\n\n<pre><code>Encoding.aliases\n#=&gt; {&quot;BINARY&quot;=&gt;&quot;ASCII-8BIT&quot;, ...\n</code></pre>\n"],["alive?","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-alive-3F","()","<p>Is this server alive?\n"],["alive?","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-alive-3F","()",""],["alive?","Fiber","classes/Fiber.html#method-i-alive-3F","()","<p>Returns true if the fiber can still be resumed (or transferred to). After\nfinishing execution of the …\n"],["alive?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-alive-3F","()","<p>A TupleEntry is dead when it is canceled or expired.\n"],["alive?","Thread","classes/Thread.html#method-i-alive-3F","()","<p>Returns <code>true</code> if <code>thr</code> is running or sleeping.\n\n<pre><code>thr = Thread.new { }\nthr.join                #=&gt; #&lt;Thread:0x401b3fb0 ...\n</code></pre>\n"],["all","Bundler::Settings","classes/Bundler/Settings.html#method-i-all","()",""],["all","Net::POPMail","classes/Net/POPMail.html#method-i-all","( dest = +'' )",""],["all?","Array","classes/Array.html#method-i-all-3F","(*args)","<p>See also Enumerable#all?\n"],["all?","Bundler::Settings::MirrorConfig","classes/Bundler/Settings/MirrorConfig.html#method-i-all-3F","()",""],["all?","Enumerable","classes/Enumerable.html#method-i-all-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["all_classes","RDoc::Store","classes/RDoc/Store.html#method-i-all_classes","()","<p>Returns all classes discovered by RDoc\n"],["all_classes_and_modules","RDoc::Store","classes/RDoc/Store.html#method-i-all_classes_and_modules","()","<p>Returns all classes and modules discovered by RDoc\n"],["all_commands","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-all_commands","()","<p>Returns the commands for this Bundler::Thor class and all subclasses.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash …\n"],["all_dependencies","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-all_dependencies","()","<p>Represents all dependencies\n"],["all_errors","Bundler::BundlerError","classes/Bundler/BundlerError.html#method-c-all_errors","()",""],["all_files","RDoc::Store","classes/RDoc/Store.html#method-i-all_files","()","<p>All TopLevels known to RDoc\n"],["all_modules","RDoc::Store","classes/RDoc/Store.html#method-i-all_modules","()","<p>Returns all modules discovered by RDoc\n"],["all_requirements","Bundler::Molinillo::Resolver::Resolution::UnwindDetails","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-all_requirements","()","<p>@return [Array] array of all the requirements that led to the need for\n\n<pre><code>this unwind\n</code></pre>\n"],["all_sources","Bundler::Plugin::SourceList","classes/Bundler/Plugin/SourceList.html#method-i-all_sources","()",""],["all_sources","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-all_sources","()",""],["all_symbols","Symbol","classes/Symbol.html#method-c-all_symbols","()","<p>Returns an array of all the symbols currently in Ruby&#39;s symbol table.\n\n<pre><code>Symbol.all_symbols.size    #=&gt; ...\n</code></pre>\n"],["all_tasks","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-all_tasks","()",""],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-i-all_waits","()","<p>Waits until all of the specified threads are terminated.  If a block is\nsupplied for the method, it is …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["all_waits","ThreadsWait","classes/ThreadsWait.html#method-c-all_waits","(*threads)","<p>Waits until all specified threads have terminated.  If a block is provided,\nit is executed for each thread …\n"],["allbits?","Integer","classes/Integer.html#method-i-allbits-3F","(p1)","<p>Returns <code>true</code> if all bits of <code>int &amp; mask</code> are 1.\n"],["allocate","Class","classes/Class.html#method-i-allocate","()","<p>Allocates space for a new object of <em>class</em>&#39;s class and does not\ncall initialize on the new instance. …\n"],["allocation_class_path","ObjectSpace","classes/ObjectSpace.html#method-c-allocation_class_path","(p1)","<p>Returns the class for the given <code>object</code>.\n\n<pre><code>class A\n  def foo\n    ObjectSpace::trace_object_allocations do ...</code></pre>\n"],["allocation_generation","ObjectSpace","classes/ObjectSpace.html#method-c-allocation_generation","(p1)","<p>Returns garbage collector generation for the given <code>object</code>.\n\n<pre><code>class B\n  include ObjectSpace\n\n  def foo\n  ...</code></pre>\n"],["allocation_method_id","ObjectSpace","classes/ObjectSpace.html#method-c-allocation_method_id","(p1)","<p>Returns the method identifier for the given <code>object</code>.\n\n<pre><code>class A\n  include ObjectSpace\n\n  def foo\n    trace_object_allocations ...</code></pre>\n"],["allocation_sourcefile","ObjectSpace","classes/ObjectSpace.html#method-c-allocation_sourcefile","(p1)","<p>Returns the source file origin from the given <code>object</code>.\n<p>See ::trace_object_allocations for more information …\n"],["allocation_sourceline","ObjectSpace","classes/ObjectSpace.html#method-c-allocation_sourceline","(p1)","<p>Returns the original line from source for from the given\n<code>object</code>.\n<p>See ::trace_object_allocations for more …\n"],["allow_addr?","ACL","classes/ACL.html#method-i-allow_addr-3F","(addr)","<p>Allow connections from addrinfo <code>addr</code>?  It must be formatted\nlike Socket#peeraddr:\n\n<pre><code>[&quot;AF_INET&quot;, 10, &quot;lc630&quot;, ...</code></pre>\n"],["allow_git_ops?","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-allow_git_ops-3F","()",""],["allow_missing?","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>(see Bundler::Molinillo::SpecificationProvider#allow_missing?)\n"],["allow_missing?","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-allow_missing-3F","(dependency)","<p>Returns whether this dependency, which has no possible matching\nspecifications, can safely be ignored. …\n"],["allow_nan?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["allow_socket?","ACL","classes/ACL.html#method-i-allow_socket-3F","(soc)","<p>Allow connections from Socket <code>soc</code>?\n"],["allow_sudo?","Bundler::Settings","classes/Bundler/Settings.html#method-i-allow_sudo-3F","()",""],["allowed_push_host","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-allowed_push_host","()",""],["alpn_protocol","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-alpn_protocol","()","<p>Returns the ALPN protocol string that was finally selected by the server\nduring the handshake.\n"],["already_tagged?","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-already_tagged-3F","()",""],["alternate=","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-alternate-3D","(value)",""],["amjd","Date","classes/Date.html#method-i-amjd","()","<p>Returns the astronomical modified Julian day number.  This is a fractional\nnumber, which is not adjusted …\n"],["ancestor?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-ancestor-3F","(other)","<p>Is there a path from `other` to `self` following edges in the dependency\ngraph? @return true iff there …\n"],["ancestors","Module","classes/Module.html#method-i-ancestors","()","<p>Returns a list of modules included/prepended in <em>mod</em> (including\n<em>mod</em> itself).\n\n<pre><code>module Mod\n  include Math ...</code></pre>\n"],["ancestors","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-ancestors","()","<p>Ancestors list for this ClassModule: the list of included modules (classes\nwill add their superclass …\n"],["ancestors","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-ancestors","()","<p>The ancestors of this class including modules.  Unlike Module#ancestors,\nthis class is not included in …\n"],["ancestors","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-ancestors","()","<p>Adds the superclass to the included modules.\n"],["ancestors","RDoc::Store","classes/RDoc/Store.html#method-i-ancestors","()","<p>Ancestors cache accessor.  Maps a klass name to an Array of its ancestors\nin this store.  If Foo in this …\n"],["angle","Complex","classes/Complex.html#method-i-angle","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg  #=&gt; 1.5707963267948966\n</code></pre>\n"],["angle","Float","classes/Float.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["angle","Numeric","classes/Numeric.html#method-i-angle","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["any?","Array","classes/Array.html#method-i-any-3F","(*args)","<p>See also Enumerable#any?\n"],["any?","Bundler::MirrorSockets","classes/Bundler/MirrorSockets.html#method-i-any-3F","()",""],["any?","Enumerable","classes/Enumerable.html#method-i-any-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block ever returns …\n"],["any?","Hash","classes/Hash.html#method-i-any-3F","(*args)","<p>See also Enumerable#any?\n"],["any_content","RDoc::Context","classes/RDoc/Context.html#method-i-any_content","(includes = true)","<p>Is there any content?\n<p>This means any of: comment, aliases, methods, attributes, external aliases,\nrequire, …\n"],["anybits?","Integer","classes/Integer.html#method-i-anybits-3F","(p1)","<p>Returns <code>true</code> if any bits of <code>int &amp; mask</code> are 1.\n"],["api_fetcher?","Bundler::Fetcher::Base","classes/Bundler/Fetcher/Base.html#method-i-api_fetcher-3F","()",""],["api_fetcher?","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-i-api_fetcher-3F","()",""],["api_fetcher?","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-api_fetcher-3F","()",""],["apop?","Net::APOP","classes/Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::APOP","classes/Net/APOP.html#method-i-apop-3F","()","<p>Always returns true.\n"],["apop?","Net::POP3","classes/Net/POP3.html#method-i-apop-3F","()","<p>Does this instance use APOP authentication?\n"],["app_cache","Bundler","classes/Bundler.html#method-c-app_cache","(custom_path = nil)",""],["app_cache_dirname","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-app_cache_dirname","()","<p>Name of directory where plugin the is expected to cache the gems when\n#cache is called.\n<p>Also this name …\n"],["app_cache_dirname","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-app_cache_dirname","()",""],["app_cache_dirname","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-app_cache_dirname","()",""],["app_cache_path","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-app_cache_path","(custom_path = nil)","<p>The full path where the plugin should cache the gem so that it can be\ninstalled latter.\n<p>Note: Do not override …\n"],["app_cache_path","Bundler::Settings","classes/Bundler/Settings.html#method-i-app_cache_path","()",""],["app_config_path","Bundler","classes/Bundler.html#method-c-app_config_path","()",""],["append","Array","classes/Array.html#method-i-append","(*args)",""],["append","Net::IMAP","classes/Net/IMAP.html#method-i-append","(mailbox, message, flags = nil, date_time = nil)","<p>Sends a APPEND command to append the <code>message</code> to the end of the\n<code>mailbox</code>. The optional <code>flags</code> argument is …\n"],["append","OptionParser::List","classes/OptionParser/List.html#method-i-append","(*args)","<p>Appends <code>switch</code> at the tail of the list, and associates short,\nlong and negated long options. Arguments …\n"],["append","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-append","(to, filter)",""],["append_data","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-append_data","(data)","<p>Adds <code>data</code> at the end of the chain of entries\n<p>This is called by WEBrick::HTTPUtils.parse_form_data for …\n"],["append_features","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::ContentModel","classes/RSS/Atom/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::DateConstruct","classes/RSS/Atom/DateConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::PersonConstruct","classes/RSS/Atom/PersonConstruct.html#method-c-append_features","(klass)","<p>Adds attributes for name, uri, and email to the <code>klass</code>\n"],["append_features","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-c-append_features","(klass)",""],["append_features","RSS::Atom::URIContentModel","classes/RSS/Atom/URIContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::BaseDublinCoreModel","classes/RSS/BaseDublinCoreModel.html#method-i-append_features","(klass)",""],["append_features","RSS::ContentModel","classes/RSS/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ITunesChannelModel","classes/RSS/ITunesChannelModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ITunesItemModel","classes/RSS/ITunesItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ImageFaviconModel","classes/RSS/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::ImageItemModel","classes/RSS/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::AtomPersonConstructBase","classes/RSS/Maker/AtomPersonConstructBase.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::AtomTextConstructBase","classes/RSS/Maker/AtomTextConstructBase.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ContentModel","classes/RSS/Maker/ContentModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::DublinCoreModel","classes/RSS/Maker/DublinCoreModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ITunesChannelModel","classes/RSS/Maker/ITunesChannelModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ITunesItemModel","classes/RSS/Maker/ITunesItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ImageFaviconModel","classes/RSS/Maker/ImageFaviconModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::ImageItemModel","classes/RSS/Maker/ImageItemModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SlashModel","classes/RSS/Maker/SlashModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::SyndicationModel","classes/RSS/Maker/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicModel","classes/RSS/Maker/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TaxonomyTopicsModel","classes/RSS/Maker/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","RSS::Maker::TrackBackModel","classes/RSS/Maker/TrackBackModel.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS09","classes/RSS/RSS09.html#method-c-append_features","(klass)",""],["append_features","RSS::RSS10","classes/RSS/RSS10.html#method-c-append_features","(klass)",""],["append_features","RSS::SlashModel","classes/RSS/SlashModel.html#method-c-append_features","(klass)",""],["append_features","RSS::SyndicationModel","classes/RSS/SyndicationModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicModel","classes/RSS/TaxonomyTopicModel.html#method-c-append_features","(klass)",""],["append_features","RSS::TaxonomyTopicsModel","classes/RSS/TaxonomyTopicsModel.html#method-c-append_features","(klass)",""],["append_features","Sync_m","classes/Sync_m.html#method-c-append_features","(cl)",""],["append_features","Sync_m","classes/Sync_m.html#method-c-append_features","(cl)",""],["append_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-append_file","(path, *args, &block)",""],["append_to_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-append_to_file","(path, *args, &block)","<p>Append text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["appendable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-appendable-3F","()","<p>Returns <code>true</code> if the APPE command may be applied to the file.\n"],["apply","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-apply","(path, config = {})","<p>Loads an external file and execute it in the instance binding.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; The path to …\n"],["aref","RDoc::Alias","classes/RDoc/Alias.html#method-i-aref","()","<p>HTML fragment reference for this alias\n"],["aref","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-aref","()","<p>HTML fragment reference for this module or class.  See\nRDoc::NormalClass#aref and RDoc::NormalModule#aref …\n"],["aref","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref","()","<p>HTML fragment reference for this method\n"],["aref_prefix","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code> is &#39;method&#39;.\n"],["aref_prefix","RDoc::Attr","classes/RDoc/Attr.html#method-i-aref_prefix","()","<p>The #aref prefix for attributes\n"],["aref_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-aref_prefix","()","<p>Prefix for <code>aref</code>, defined by subclasses.\n"],["arg","Complex","classes/Complex.html#method-i-arg","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg  #=&gt; 1.5707963267948966\n</code></pre>\n"],["arg","Float","classes/Float.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arg","Numeric","classes/Numeric.html#method-i-arg","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["arglists","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-arglists","()","<p>The call_seq or the param_seq with method name, if there is no call_seq.\n<p>Use this for displaying a method&#39;s …\n"],["args","NoMethodError","classes/NoMethodError.html#method-i-args","()","<p>Return the arguments passed in as the third parameter to the constructor.\n"],["argument","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-argument","(name, options = {})","<p>Adds an argument to the class and creates an attr_accessor for it.\n<p>Arguments are different from options …\n"],["arguments","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-arguments","()","<p>Returns this class arguments, looking up in the ancestors chain.\n<p>Returns\n<p>Array\n"],["argv","ARGF","classes/ARGF.html#method-i-argv","()","<p>Returns the <code>ARGV</code> array, which contains the arguments passed to\nyour script, one per element.\n<p>For example: …\n"],["argv0","Process","classes/Process.html#method-c-argv0","()","<p>Returns the name of the script being executed.  The value is not affected\nby assigning a new value to …\n"],["arity","Method","classes/Method.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["arity","Proc","classes/Proc.html#method-i-arity","()","<p>Returns the number of mandatory arguments. If the block is declared to take\nno arguments, returns 0. …\n"],["arity","UnboundMethod","classes/UnboundMethod.html#method-i-arity","()","<p>Returns an indication of the number of arguments accepted by a method.\nReturns a nonnegative integer …\n"],["array","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-c-array","(p1, p2)","<p>Returns Ruby object wrapping OLE variant whose variant type is VT_ARRAY.\nThe first argument should be …\n"],["array_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl","()","<p>This string is put at the end of a line that holds a JSON array.\n"],["array_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-array_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON array.\n"],["as_json","BigDecimal","classes/BigDecimal.html#method-i-as_json","(*)","<p>Marshal the object to JSON.\n<p>method used for JSON marshalling support.\n"],["as_json","Complex","classes/Complex.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Date","classes/Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","classes/DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","classes/Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-as_json","(*)",""],["as_json","OpenStruct","classes/OpenStruct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","classes/Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","classes/Rational.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Regexp","classes/Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Struct","classes/Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","classes/Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","classes/Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_path_source","Bundler::Source::Gemspec","classes/Bundler/Source/Gemspec.html#method-i-as_path_source","()",""],["as_unicode","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-as_unicode","()",""],["ascend","Pathname","classes/Pathname.html#method-i-ascend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in ascending order. …\n"],["ascii_compatible?","Encoding","classes/Encoding.html#method-i-ascii_compatible-3F","()","<p>Returns whether ASCII-compatible or not.\n\n<pre><code>Encoding::UTF_8.ascii_compatible?     #=&gt; true\nEncoding::UTF_16BE.ascii_compatible? ...\n</code></pre>\n"],["ascii_only?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if NaN, Infinity, and -Infinity should be generated,\notherwise returns false.\n"],["ascii_only?","String","classes/String.html#method-i-ascii_only-3F","()","<p>Returns true for a string which has only ASCII characters.\n\n<pre><code>&quot;abc&quot;.force_encoding(&quot;UTF-8&quot;).ascii_only?  ...\n</code></pre>\n"],["asciicompat_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-c-asciicompat_encoding","(p1)","<p>Returns the corresponding ASCII compatible encoding.\n<p>Returns nil if the argument is an ASCII compatible …\n"],["asctime","Date","classes/Date.html#method-i-asctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["asctime","Time","classes/Time.html#method-i-asctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre><code>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...\n</code></pre>\n"],["asin","CMath","classes/CMath.html#method-c-asin","(z)","<p>Returns the arc sine of <code>z</code>\n\n<pre><code>CMath.asin(1 + 1i) #=&gt; (0.6662394324925153+1.0612750619050355i)\n</code></pre>\n"],["asin","Math","classes/Math.html#method-c-asin","(p1)","<p>Computes the arc sine of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: [-1, -1]\n<p>Codomain: [-PI/2, PI/2]\n"],["asinh","CMath","classes/CMath.html#method-c-asinh","(z)","<p>returns the inverse hyperbolic sine of <code>z</code>\n\n<pre><code>CMath.asinh(1 + 1i) #=&gt; (1.0612750619050357+0.6662394324925153i)\n</code></pre>\n"],["asinh","Math","classes/Math.html#method-c-asinh","(p1)","<p>Computes the inverse hyperbolic sine of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY …\n"],["ask","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-ask","(statement, *args)","<p>Asks something to the user and receives a response.\n<p>If asked to limit the correct responses, you can pass …\n"],["ask","Bundler::Thor::Shell::HTML","classes/Bundler/Thor/Shell/HTML.html#method-i-ask","(statement, color = nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(“What is your name?”)\n"],["ask","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-ask","(msg)",""],["ask","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-ask","(message)",""],["ask_filtered","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-ask_filtered","(statement, color, options)",""],["ask_for_spec_from","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-ask_for_spec_from","(specs)",""],["ask_simply","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-ask_simply","(statement, color, options)",""],["asn1_flag","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-asn1_flag","()","<p>Returns the flags set on the group.\n<p>See also #asn1_flag=.\n"],["asn1_flag=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-asn1_flag-3D","(p1)","<p>Sets flags on the group. The flag value is used to determine how to encode\nthe group: encode explicit …\n"],["asset","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-asset","(generator_name, req, res)","<p>Serves the asset at the path in <code>req</code> for\n<code>generator_name</code> via <code>res</code>.\n"],["assign_names","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-i-assign_names","(members)","<p>Set the names of the <code>members</code> in this C struct\n"],["assoc","Array","classes/Array.html#method-i-assoc","(p1)","<p>Searches through an array whose elements are also arrays comparing\n<code>obj</code> with the first element of each …\n"],["assoc","ENV","classes/ENV.html#method-c-assoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>name</code> or <code>nil</code> if the name cannot …\n"],["assoc","Hash","classes/Hash.html#method-i-assoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the key using\n<code>==</code>. Returns the key-value pair (two elements …\n"],["at","Array","classes/Array.html#method-i-at","(p1)","<p>Returns the element at <code>index</code>. A negative index counts from the\nend of <code>self</code>. Returns <code>nil</code> if the index …\n"],["at","Time","classes/Time.html#method-c-at","(p1, p2 = v2, p3 = v3, p4 = {})","<p>Creates a new Time object with the value given by <code>time</code>, the\ngiven number of <code>seconds_with_frac</code>, or <code>seconds</code> …\n"],["at_exit","Kernel","classes/Kernel.html#method-i-at_exit","()","<p>Converts <em>block</em> to a <code>Proc</code> object (and therefore binds\nit at the point of call) and registers it for execution …\n"],["atan","BigMath","classes/BigMath.html#method-i-atan","(x, prec)","<p>Computes the arctangent of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> …\n"],["atan","CMath","classes/CMath.html#method-c-atan","(z)","<p>Returns the arc tangent of <code>z</code>\n\n<pre><code>CMath.atan(1 + 1i) #=&gt; (1.0172219678978514+0.4023594781085251i)\n</code></pre>\n"],["atan","Math","classes/Math.html#method-c-atan","(p1)","<p>Computes the arc tangent of <code>x</code>. Returns -PI/2..PI/2.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-PI/2, PI/2 …\n"],["atan2","CMath","classes/CMath.html#method-c-atan2","(y,x)","<p>returns the arc tangent of <code>y</code> divided by <code>x</code> using\nthe signs of <code>y</code> and <code>x</code> to determine the quadrant\n\n<pre><code>CMath.atan2(1 ...</code></pre>\n"],["atan2","Math","classes/Math.html#method-c-atan2","(p1, p2)","<p>Computes the arc tangent given <code>y</code> and <code>x</code>. Returns a\nFloat in the range -PI..PI. Return value is a angle …\n"],["atanh","CMath","classes/CMath.html#method-c-atanh","(z)","<p>returns the inverse hyperbolic tangent of <code>z</code>\n\n<pre><code>CMath.atanh(1 + 1i) #=&gt; (0.4023594781085251+1.0172219678978514i)\n</code></pre>\n"],["atanh","Math","classes/Math.html#method-c-atanh","(p1)","<p>Computes the inverse hyperbolic tangent of <code>x</code>.\n<p>Domain: (-1, 1)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["atime","File","classes/File.html#method-i-atime","()","<p>Returns the last access time (a <code>Time</code> object) for\n<em>file</em>, or epoch if <em>file</em> has not been accessed.\n\n<pre><code>File.new(&quot;testfile&quot;).atime ...\n</code></pre>\n"],["atime","File","classes/File.html#method-c-atime","(p1)","<p>Returns the last access time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre><code>File.atime(&quot;testfile&quot;) ...\n</code></pre>\n"],["atime","File::Stat","classes/File/Stat.html#method-i-atime","()","<p>Returns the last access time for this file as an object of class\n<code>Time</code>.\n\n<pre><code>File.stat(&quot;testfile&quot;).atime   #=&gt; ...\n</code></pre>\n"],["atime","Pathname","classes/Pathname.html#method-i-atime","()","<p>Returns the last access time for the file.\n<p>See File.atime.\n"],["atom_validate","RSS::Atom::DateConstruct","classes/RSS/Atom/DateConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises NotAvailableValueError if element content is nil\n"],["atom_validate","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises a MissingAttributeError, NotAvailableValueError, MissingTagError or\nNotExpectedTagError if the …\n"],["atom_validate","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-atom_validate","(ignore_unknown_element, tags, uri)","<p>Raises a MissingTagError or NotExpectedTagError if the element is not\nproperly formatted.\n"],["attempt","Bundler::Retry","classes/Bundler/Retry.html#method-i-attempt","(&block)",""],["attempts","Bundler::Retry","classes/Bundler/Retry.html#method-i-attempts","(&block)",""],["attempts","Bundler::Retry","classes/Bundler/Retry.html#method-c-attempts","()",""],["attlistdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-attlistdecl","(element, pairs, contents)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-attlistdecl","(element_name, attributes, raw_content)","<p>If a doctype includes an ATTLIST declaration, it will cause this method to\nbe called.  The content is …\n"],["attlistdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-attlistdecl-3F","()","<p>Content: [ String text ]\n"],["attr","Module","classes/Module.html#method-i-attr","(*args)","<p>The first form is equivalent to <code>attr_reader</code>. The second form\nis equivalent to <code>attr_accessor(name)</code> but …\n"],["attr_accessor","Module","classes/Module.html#method-i-attr_accessor","(*args)","<p>Defines a named attribute for this module, where the name is\n<em>symbol.</em><code>id2name</code>, creating an instance variable …\n"],["attr_reader","Module","classes/Module.html#method-i-attr_reader","(*args)","<p>Creates instance variables and corresponding methods that return the value\nof each instance variable. …\n"],["attr_writer","Module","classes/Module.html#method-i-attr_writer","(*args)","<p>Creates an accessor method to allow assignment to the attribute\n<em>symbol</em><code>.id2name</code>. String arguments are …\n"],["attribute","REXML::Element","classes/REXML/Element.html#method-i-attribute","( name, namespace=nil )",""],["attribute","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-attribute","( name )",""],["attribute_of","REXML::DocType","classes/REXML/DocType.html#method-i-attribute_of","(element, attribute)",""],["attributes","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-attributes","()",""],["attributes","RDoc::Store","classes/RDoc/Store.html#method-i-attributes","()","<p>Attributes cache accessor.  Maps a class to an Array of its attributes.\n"],["attributes","URI::LDAP","classes/URI/LDAP.html#method-i-attributes","()","<p>Returns attributes.\n"],["attributes=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-attributes-3D","(p1)",""],["attributes=","URI::LDAP","classes/URI/LDAP.html#method-i-attributes-3D","(val)","<p>Setter for attributes <code>val</code>.\n"],["attributes_of","REXML::DocType","classes/REXML/DocType.html#method-i-attributes_of","(element)",""],["auth_cram_md5","Net::SMTP","classes/Net/SMTP.html#method-i-auth_cram_md5","(user, secret)",""],["auth_data=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-auth_data-3D","(p1)","<p>Sets the cipher&#39;s additional authenticated data. This field must be set\nwhen using AEAD cipher modes …\n"],["auth_login","Net::SMTP","classes/Net/SMTP.html#method-i-auth_login","(user, secret)",""],["auth_only","Net::POP3","classes/Net/POP3.html#method-c-auth_only","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Opens a POP3 session, attempts authentication, and quits.\n<p>This method raises POPAuthenticationError if …\n"],["auth_only","Net::POP3","classes/Net/POP3.html#method-i-auth_only","(account, password)","<p>Starts a pop3 session, attempts authentication, and quits. This method must\nnot be called while POP3 …\n"],["auth_plain","Net::SMTP","classes/Net/SMTP.html#method-i-auth_plain","(user, secret)",""],["auth_tag","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-auth_tag","(p1 = v1)","<p>Gets the authentication tag generated by Authenticated Encryption Cipher\nmodes (GCM for example). This …\n"],["auth_tag=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-auth_tag-3D","(p1)","<p>Sets the authentication tag to verify the integrity of the ciphertext. This\ncan be called only when the …\n"],["auth_tag_len=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-auth_tag_len-3D","(p1)","<p>Sets the length of the authentication tag to be generated or to be given\nfor AEAD ciphers that requires …\n"],["authenticate","Net::IMAP","classes/Net/IMAP.html#method-i-authenticate","(auth_type, *args)","<p>Sends an AUTHENTICATE command to authenticate the client. The\n<code>auth_type</code> parameter is a string that represents …\n"],["authenticate","Net::SMTP","classes/Net/SMTP.html#method-i-authenticate","(user, secret, authtype = DEFAULT_AUTH_TYPE)",""],["authenticate","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticate","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-i-authenticate","(req, res)","<p>Authenticates a <code>req</code> and returns a 401 Unauthorized using\n<code>res</code> if the authentication was not correct.\n"],["authenticated?","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-authenticated-3F","()","<p>Indicated whether this Cipher instance uses an Authenticated Encryption\nmode.\n"],["autoclose=","IO","classes/IO.html#method-i-autoclose-3D","(p1)","<p>Sets auto-close flag.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nIO.for_fd(f.fileno)\n# ...\nf.gets # may cause IOError\n\nf = ...</code></pre>\n"],["autoclose?","IO","classes/IO.html#method-i-autoclose-3F","()","<p>Returns <code>true</code> if the underlying file descriptor of <em>ios</em>\nwill be closed automatically at its finalization, …\n"],["autoload","Kernel","classes/Kernel.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload","Module","classes/Module.html#method-i-autoload","(p1, p2)","<p>Registers <em>filename</em> to be loaded (using\n<code>Kernel::require</code>) the first time that <em>module</em> (which\nmay be a <code>String</code> …\n"],["autoload?","Kernel","classes/Kernel.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code>.\n\n<pre><code>autoload(:B, &quot;b&quot;)\nautoload?(:B)      ...\n</code></pre>\n"],["autoload?","Module","classes/Module.html#method-i-autoload-3F","(p1)","<p>Returns <em>filename</em> to be loaded if <em>name</em> is registered as\n<code>autoload</code> in the namespace of <em>mod</em>.\n\n<pre><code>module A\nend ...\n</code></pre>\n"],["avail_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_in","()","<p>Returns bytes of data in the input buffer. Normally, returns 0.\n"],["avail_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_out","()","<p>Returns number of bytes of free spaces in output buffer.  Because the free\nspace is allocated automatically, …\n"],["avail_out=","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-avail_out-3D","(p1)","<p>Allocates <code>size</code> bytes of free space in the output buffer. If\nthere are more than <code>size</code> bytes already in …\n"],["available?","Bundler::Fetcher::Base","classes/Bundler/Fetcher/Base.html#method-i-available-3F","()",""],["available?","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-i-available-3F","()",""],["available?","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-available-3F","()",""],["available?","Bundler::Thor::LineEditor::Basic","classes/Bundler/Thor/LineEditor/Basic.html#method-c-available-3F","()",""],["available?","Bundler::Thor::LineEditor::Readline","classes/Bundler/Thor/LineEditor/Readline.html#method-c-available-3F","()",""],["available_tags","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-available_tags","(uri)","<p>return the tag_names for setters associated with uri\n"],["axe","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-axe","( elements, axe_name, rest )",""],["b","String","classes/String.html#method-i-b","()","<p>Returns a copied string whose encoding is ASCII-8BIT.\n"],["backtrace","Exception","classes/Exception.html#method-i-backtrace","()","<p>Returns any backtrace associated with the exception. The backtrace is an\narray of strings, each containing …\n"],["backtrace","Thread","classes/Thread.html#method-i-backtrace","(*args)","<p>Returns the current backtrace of the target thread.\n"],["backtrace_locations","Exception","classes/Exception.html#method-i-backtrace_locations","()","<p>Returns any backtrace associated with the exception. This method is similar\nto Exception#backtrace, but …\n"],["backtrace_locations","Thread","classes/Thread.html#method-i-backtrace_locations","(*args)","<p>Returns the execution stack for the target thread—an array containing\nbacktrace location objects.\n<p>See …\n"],["backup","Bundler::EnvironmentPreserver","classes/Bundler/EnvironmentPreserver.html#method-i-backup","()","<p>@return [Hash]\n"],["banner","Bundler::Thor","classes/Bundler/Thor.html#method-c-banner","(command, namespace = nil, subcommand = false)","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["banner","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-banner","()","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which …\n"],["banner","OptionParser","classes/OptionParser.html#method-i-banner","()","<p>Heading banner preceding summary.\n"],["base","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-base","(href = \"\")","<p>Generate a Document Base URI element as a String.\n<p><code>href</code> can either by a string, giving the base URL for …\n"],["base","OptionParser","classes/OptionParser.html#method-i-base","()","<p>Subject of #on_tail.\n"],["base64","Random::Formatter","classes/Random/Formatter.html#method-i-base64","(n=nil)","<p>SecureRandom.base64 generates a random base64 string.\n<p>The argument <em>n</em> specifies the length, in bytes, of …\n"],["base64digest","Digest::Class","classes/Digest/Class.html#method-c-base64digest","(str, *args)","<p>Returns the base64 encoded hash value of a given <em>string</em>.  The\nreturn value is properly padded with &#39;=&#39; …\n"],["base64digest","Digest::Instance","classes/Digest/Instance.html#method-i-base64digest","(str = nil)","<p>If none is given, returns the resulting hash value of the digest in a\nbase64 encoded form, keeping the …\n"],["base64digest!","Digest::Instance","classes/Digest/Instance.html#method-i-base64digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["base_label","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-base_label","()","<p>Returns the base label of this instruction sequence.\n<p>For example, using irb:\n\n<pre><code>iseq = RubyVM::InstructionSequence.compile(&#39;num ...</code></pre>\n"],["base_label","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-base_label","()","<p>Returns the base label of this frame.\n<p>Usually same as #label, without decoration.\n"],["base_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-base_name","()","<p>Base name of this file\n"],["basename","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-basename","()","<p>The basename of the program invoking the thor class.\n"],["basename","File","classes/File.html#method-c-basename","(*args)","<p>Returns the last component of the filename given in <em>file_name</em>\n(after first stripping trailing separators), …\n"],["basename","Pathname","classes/Pathname.html#method-i-basename","(p1 = v1)","<p>Returns the last component of the path.\n<p>See File.basename.\n"],["basic","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-basic","()","<p>Returns a BasicResponse for this response\n"],["basic_auth","WEBrick::HTTPAuth","classes/WEBrick/HTTPAuth.html#method-i-basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a request.  When\ncalled with a request <code>req</code>, response …\n"],["basic_quote_characters","Readline","classes/Readline.html#method-c-basic_quote_characters","()","<p>Gets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_quote_characters=","Readline","classes/Readline.html#method-c-basic_quote_characters-3D","(p1)","<p>Sets a list of quote characters which can cause a word break.\n<p>Raises NotImplementedError if the using …\n"],["basic_word_break_characters","Readline","classes/Readline.html#method-c-basic_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for the\ncompleter routine.\n<p>Raises …\n"],["basic_word_break_characters=","Readline","classes/Readline.html#method-c-basic_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for the\ncompleter routine. The default …\n"],["beep","IO","classes/IO.html#method-i-beep","()",""],["before_resolution","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-before_resolution","()","<p>Called before resolution begins.\n<p>@return [void]\n"],["before_resolution","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-before_resolution","()",""],["before_running_rdoc","RDoc::Task","classes/RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["before_running_rdoc","RDoc::Task","classes/RDoc/Task.html#method-i-before_running_rdoc","(&block)","<p>The block passed to this method will be called just before running the RDoc\ngenerator. It is allowed …\n"],["begin","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-begin","()",""],["begin","MatchData","classes/MatchData.html#method-i-begin","(p1)","<p>Returns the offset of the start of the <em>n</em>th element of the match\narray in the string. <em>n</em> can be a string …\n"],["begin","Range","classes/Range.html#method-i-begin","()","<p>Returns the object that defines the beginning of the range.\n\n<pre><code>(1..10).begin   #=&gt; 1\n</code></pre>\n"],["begin_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-begin_adding","()","<p>Call this to mark the beginning of parsing for display purposes\n"],["beginning_of_line?","StringScanner","classes/StringScanner.html#method-i-beginning_of_line-3F","()","<p>Returns <code>true</code> iff the scan pointer is at the beginning of the\nline.\n\n<pre><code>s = StringScanner.new(&quot;test\\ntest\\n&quot;) ...\n</code></pre>\n"],["benchmark","Benchmark","classes/Benchmark.html#method-c-benchmark","(caption = \"\", label_width = nil, format = nil, *labels)","<p>Invokes the block with a Benchmark::Report object, which may be used to\ncollect and report on the results …\n"],["best_available","Bundler::Thor::LineEditor","classes/Bundler/Thor/LineEditor.html#method-c-best_available","()",""],["between?","Comparable","classes/Comparable.html#method-i-between-3F","(p1, p2)","<p>Returns <code>false</code> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>min</em> is less than zero or if <em>anObject</em>\n<code>&lt;=&gt;</code> <em>max</em> is greater than zero, …\n"],["bin_path","Bundler","classes/Bundler.html#method-c-bin_path","()","<p>Returns absolute location of where binstubs are installed to.\n"],["bin_path","Gem","classes/Gem.html#method-c-bin_path","(name, exec_name = nil, *requirements)","<p>Find the full path to the executable for gem <code>name</code>.  If the\n<code>exec_name</code> is not given, an exception will …\n"],["binary=","Net::FTP","classes/Net/FTP.html#method-i-binary-3D","(newmode)","<p>A setter to toggle transfers in binary mode. <code>newmode</code> is either\n<code>true</code> or <code>false</code>\n"],["binary?","RDoc::Parser","classes/RDoc/Parser.html#method-c-binary-3F","(file)","<p>Determines if the file is a “binary” file which basically means it has\ncontent that an RDoc …\n"],["binary_mode","Gem","classes/Gem.html#method-c-binary_mode","()","<p>The mode needed to read a file as straight binary.\n"],["bind","Addrinfo","classes/Addrinfo.html#method-i-bind","()","<p>creates a socket bound to self.\n<p>If a block is given, it is called with the socket and the value of the …\n"],["bind","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-bind","(cl)",""],["bind","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-bind","(signature, *opts, &blk)","<p>Creates a global method from the given C <code>signature</code> using the\ngiven <code>opts</code> as bind parameters with the given …\n"],["bind","Socket","classes/Socket.html#method-i-bind","(p1)","<p>Binds to the given local address.\n<p>Parameter\n<p><code>local_sockaddr</code> - the <code>struct</code> sockaddr contained in\na string …\n"],["bind","UDPSocket","classes/UDPSocket.html#method-i-bind","(p1, p2)","<p>Binds <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n\n<pre><code>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, 4913)\nu1.send &quot;message-to-self&quot;, ...</code></pre>\n"],["bind","UnboundMethod","classes/UnboundMethod.html#method-i-bind","(p1)","<p>Bind <em>umeth</em> to <em>obj</em>. If <code>Klass</code> was the class\nfrom which <em>umeth</em> was obtained, <code>obj.kind_of?(Klass)</code>\nmust be …\n"],["bind_function","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-bind_function","(name, ctype, argtype, call_type = nil, &block)","<p>Returns a new closure wrapper for the <code>name</code> function.\n<p><code>ctype</code> is the return type of the function\n<p><code>argtype</code> is …\n"],["binding","Kernel","classes/Kernel.html#method-i-binding","()","<p>Returns a <code>Binding</code> object, describing the variable and method\nbindings at the point of call. This object …\n"],["binding","Proc","classes/Proc.html#method-i-binding","()","<p>Returns the binding associated with <em>prc</em>.\n\n<pre><code>def fred(param)\n  proc {}\nend\n\nb = fred(99)\neval(&quot;param&quot;, b.binding) ...\n</code></pre>\n"],["binding","TracePoint","classes/TracePoint.html#method-i-binding","()","<p>Return the generated binding object from event\n"],["bindir","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-bindir","()","<p>needed for bundle clean\n"],["bindir","Gem","classes/Gem.html#method-c-bindir","(install_dir=Gem.dir)","<p>The path where gem executables are to be installed.\n"],["binmode","ARGF","classes/ARGF.html#method-i-binmode","()","<p>Puts <code>ARGF</code> into binary mode. Once a stream is in binary mode,\nit cannot be reset to non-binary mode.  …\n"],["binmode","IO","classes/IO.html#method-i-binmode","()","<p>Puts <em>ios</em> into binary mode. Once a stream is in binary mode, it\ncannot be reset to nonbinary mode.\n<p>newline …\n"],["binmode","StringIO","classes/StringIO.html#method-i-binmode","()",""],["binmode?","ARGF","classes/ARGF.html#method-i-binmode-3F","()","<p>Returns true if <code>ARGF</code> is being read in binary mode; false\notherwise. To enable binary mode use <code>ARGF.binmode</code> …\n"],["binmode?","CSV","classes/CSV.html#method-i-binmode-3F","()",""],["binmode?","IO","classes/IO.html#method-i-binmode-3F","()","<p>Returns <code>true</code> if <em>ios</em> is binmode.\n"],["binread","IO","classes/IO.html#method-c-binread","(p1, p2 = v2, p3 = v3)","<p>Opens the file, optionally seeks to the given <em>offset</em>, then returns\n<em>length</em> bytes (defaulting to the rest …\n"],["binread","Pathname","classes/Pathname.html#method-i-binread","(p1 = v1, p2 = v2)","<p>Returns all the bytes from the file, or the first <code>N</code> if\nspecified.\n<p>See File.binread.\n"],["binstubs","Bundler::CLI","classes/Bundler/CLI.html#method-i-binstubs","(*gems)",""],["binwrite","IO","classes/IO.html#method-c-binwrite","(*args)","<p>Same as <code>IO.write</code> except opening the file in binary mode and\nASCII-8BIT encoding (“wb:ASCII-8BIT”). …\n"],["binwrite","Pathname","classes/Pathname.html#method-i-binwrite","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file, opening it in binary mode.\n<p>See File.binwrite.\n"],["birthtime","File","classes/File.html#method-i-birthtime","()","<p>Returns the birth time for <em>file</em>.\n\n<pre><code>File.new(&quot;testfile&quot;).birthtime   #=&gt; Wed Apr 09 08:53:14 CDT 2003\n</code></pre>\n<p>If the …\n"],["birthtime","File","classes/File.html#method-c-birthtime","(p1)","<p>Returns the birth time for the named file.\n<p><em>file_name</em> can be an IO object.\n\n<pre><code>File.birthtime(&quot;testfile&quot;)   ...\n</code></pre>\n"],["birthtime","File::Stat","classes/File/Stat.html#method-i-birthtime","()","<p>Returns the birth time for <em>stat</em>.\n<p>If the platform doesn&#39;t have birthtime, raises NotImplementedError …\n"],["birthtime","Pathname","classes/Pathname.html#method-i-birthtime","()","<p>Returns the birth time for the file. If the platform doesn&#39;t have\nbirthtime, raises NotImplementedError …\n"],["bit_length","Integer","classes/Integer.html#method-i-bit_length","()","<p>Returns the number of bits of the value of <code>int</code>.\n<p>“Number of bits” means the bit position of the …\n"],["bit_set?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-bit_set-3F","(p1)","<p>Tests bit <em>bit</em> in <em>bn</em> and returns <code>true</code> if set,\n<code>false</code> if not set.\n"],["blinding_off!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_off-21","()",""],["blinding_on!","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-blinding_on-21","()",""],["blksize","File::Stat","classes/File/Stat.html#method-i-blksize","()","<p>Returns the native file system&#39;s block size. Will return\n<code>nil</code> on platforms that don&#39;t support …\n"],["block_given?","Kernel","classes/Kernel.html#method-i-block_given-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["block_length","Digest::Base","classes/Digest/Base.html#method-i-block_length","()","<p>Return the block length of the digest in bytes.\n"],["block_length","Digest::Instance","classes/Digest/Instance.html#method-i-block_length","()","<p>Returns the block length of the digest.\n<p>This method is overridden by each implementation subclass.\n"],["block_length","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-block_length","()","<p>Returns the block length of the digest algorithm, i.e. the length in bytes\nof an individual block. Most …\n"],["block_output_synchronize","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-block_output_synchronize","(&b)",""],["block_params=","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-block_params-3D","(value)","<p>Attempts to sanitize the content passed by the Ruby parser: remove outer\nparentheses, etc.\n"],["block_scanf","String","classes/String.html#method-i-block_scanf","(fstr)","<p>Scans the current string until the match is exhausted yielding each match\nas it is encountered in the …\n"],["block_size","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-block_size","()","<p>Returns the size in bytes of the blocks on which this Cipher operates on.\n"],["blockdev?","File","classes/File.html#method-c-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blockdev?","File::Stat","classes/File/Stat.html#method-i-blockdev-3F","()","<p>Returns <code>true</code> if the file is a block device, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t …\n"],["blockdev?","FileTest","classes/FileTest.html#method-i-blockdev-3F","(p1)","<p>Returns <code>true</code> if the named file is a block device.\n<p><em>file_name</em> can be an IO object.\n"],["blockdev?","Pathname","classes/Pathname.html#method-i-blockdev-3F","()","<p>See FileTest.blockdev?.\n"],["blockquote","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-blockquote","(cite = {})","<p>Generate a BlockQuote element as a string.\n<p><code>cite</code> can either be a string, give the URI for the source of …\n"],["blocks","File::Stat","classes/File/Stat.html#method-i-blocks","()","<p>Returns the number of native file system blocks allocated for this file, or\n<code>nil</code> if the operating system …\n"],["bm","Benchmark","classes/Benchmark.html#method-c-bm","(label_width = 0, *labels)","<p>A simple interface to the #benchmark method, #bm generates sequential\nreports with labels. <code>label_width</code> …\n"],["bmbm","Benchmark","classes/Benchmark.html#method-c-bmbm","(width = 0)","<p>Sometimes benchmark results are skewed because code executed earlier\nencounters different garbage collection …\n"],["body","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-body","()","<p>Returns the full entity body.\n<p>Calling this method a second or subsequent time will return the string\nalready …\n"],["body","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-body","()","<p>Returns the request body.\n"],["body=","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body-3D","(str)",""],["body=","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-body-3D","(value)","<p>Because it may be necessary to modify the body, Eg, decompression this\nmethod facilitates that.\n"],["body_exist?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body_exist-3F","()",""],["body_permitted?","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-c-body_permitted-3F","()","<p>true if the response has a body.\n"],["body_reader","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-body_reader","()","<p>Prepares the HTTPRequest object for use as the source for IO.copy_stream\n"],["body_stream=","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-body_stream-3D","(input)",""],["bool","Socket::Option","classes/Socket/Option.html#method-i-bool","()","<p>Returns the data in <em>sockopt</em> as an boolean value.\n\n<pre><code>sockopt = Socket::Option.int(:INET, :SOCKET, :KEEPALIVE, ...</code></pre>\n"],["bool","Socket::Option","classes/Socket/Option.html#method-c-bool","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains boolean as data.\nActually 0 or 1 as int is used.\n\n<pre><code>require ...\n</code></pre>\n"],["boolean","REXML::Functions","classes/REXML/Functions.html#method-c-boolean","( object=nil )","<p>UNTESTED\n"],["bottom","IRB::Frame","classes/IRB/Frame.html#method-i-bottom","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the\nfirst frame initialized.\n<p>Raises FrameOverflow …\n"],["bottom","IRB::Frame","classes/IRB/Frame.html#method-c-bottom","(n = 0)","<p>Convenience method for Frame#bottom\n"],["branch","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-branch","()",""],["break_on_newline","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-break_on_newline","","<p>Converts all newlines into hard breaks\n"],["break_outmost_groups","PrettyPrint","classes/PrettyPrint.html#method-i-break_outmost_groups","()","<p>Breaks the buffer into lines that are shorter than #maxwidth\n"],["break_points","DEBUGGER__","classes/DEBUGGER__.html#method-c-break_points","()","<p>Returns the list of break points where execution will be stopped.\n<p>See DEBUGGER__ for more usage\n"],["breakable","PrettyPrint","classes/PrettyPrint.html#method-i-breakable","(sep=' ', width=sep.length)","<p>This says “you can break a line here if necessary”, and a\n<code>width</code>-column text <code>sep</code> is inserted …\n"],["breakable","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-breakable","(sep=' ', width=nil)","<p>Appends <code>sep</code> to the text to be output. By default\n<code>sep</code> is &#39; &#39;\n<p><code>width</code> argument is here for compatibility. …\n"],["broadaddr","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-broadaddr","()","<p>Returns the broadcast address of <em>ifaddr</em>. nil is returned if the\nflags doesn&#39;t have IFF_BROADCAST …\n"],["broadcast","ConditionVariable","classes/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["broadcast","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-broadcast","()","<p>Wakes up all threads waiting for this lock.\n"],["bsearch","Array","classes/Array.html#method-i-bsearch","()","<p>By using binary search, finds a value from this array which meets the given\ncondition in O(log n) where …\n"],["bsearch","Range","classes/Range.html#method-i-bsearch","()","<p>By using binary search, finds a value in range which meets the given\ncondition in O(log n) where n is …\n"],["bsearch_index","Array","classes/Array.html#method-i-bsearch_index","()","<p>By using binary search, finds an index of a value from this array which\nmeets the given condition in …\n"],["bubblebabble","Digest","classes/Digest.html#method-c-bubblebabble","(p1)","<p>Returns a BubbleBabble encoded version of a given <em>string</em>.\n"],["bubblebabble","Digest::Class","classes/Digest/Class.html#method-c-bubblebabble","(*args)","<p>Returns the BubbleBabble encoded hash value of a given <em>string</em>.\n"],["bubblebabble","Digest::Instance","classes/Digest/Instance.html#method-i-bubblebabble","()","<p>Returns the resulting hash value in a Bubblebabble encoded form.\n"],["buffer_initial_length","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-buffer_initial_length","()","<p>This integer returns the current initial length of the buffer.\n"],["buffer_initial_length=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-buffer_initial_length-3D","(p1)","<p>This sets the initial length of the buffer to <code>length</code>, if\n<code>length</code> &gt; 0, otherwise its value isn&#39;t …\n"],["build","Bundler::Definition","classes/Bundler/Definition.html#method-c-build","(gemfile, lockfile, unlock)","<p>Given a gemfile and lockfile creates a Bundler definition\n<p>@param gemfile [Pathname] Path to Gemfile @param …\n"],["build","Bundler::Index","classes/Bundler/Index.html#method-c-build","()",""],["build","Matrix","classes/Matrix.html#method-c-build","(row_count, column_count = row_count)","<p>Creates a matrix of size <code>row_count</code> x\n<code>column_count</code>. It fills the values by calling the given block,\npassing …\n"],["build","URI::FTP","classes/URI/FTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::FTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::File","classes/URI/File.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::File object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::Generic","classes/URI/Generic.html#method-c-build","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build","URI::HTTP","classes/URI/HTTP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::HTTP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::LDAP","classes/URI/LDAP.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::LDAP object from components, with syntax checking.\n<p>The components accepted …\n"],["build","URI::MailTo","classes/URI/MailTo.html#method-c-build","(args)","<p>Description\n<p>Creates a new URI::MailTo object from components, with syntax checking.\n<p>Components can be provided …\n"],["build2","URI::Generic","classes/URI/Generic.html#method-c-build2","(args)","<p>Synopsis\n<p>See ::new.\n<p>Description\n"],["build_gem","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-build_gem","()",""],["build_heading","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_heading","(level)","<p>Builds a heading from the token stream\n<p>level &mdash; The level of heading to create\n\n<p>Returns\n"],["build_paragraph","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_paragraph","(margin)","<p>Builds a paragraph from the token stream\n<p>margin &mdash; Unused\n\n<p>Returns\n"],["build_verbatim","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-build_verbatim","(margin)","<p>Builds a verbatim from the token stream.  A verbatim in the Examples\nsection will be marked as in Ruby …\n"],["built_at","Bundler::BuildMetadata","classes/Bundler/BuildMetadata.html#method-c-built_at","()","<p>A string representing the date the bundler gem was built.\n"],["built_gem_path","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-built_gem_path","()",""],["builtin_curves","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-c-builtin_curves","()","<p>Obtains a list of all predefined curves by the OpenSSL. Curve names are\nreturned as sn.\n<p>See the OpenSSL …\n"],["bundle_path","Bundler","classes/Bundler.html#method-c-bundle_path","()","<p>Returns absolute path of where gems are installed on the filesystem.\n"],["bundler_major_version","Bundler","classes/Bundler.html#method-c-bundler_major_version","()",""],["bundler_plugin_api_source?","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-bundler_plugin_api_source-3F","()","<p>@private Returns true\n"],["bundles_for_gem","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-bundles_for_gem","(spec)",""],["by_col","CSV::Table","classes/CSV/Table.html#method-i-by_col","()","<p>Returns a duplicate table object, in column mode.  This is handy for\nchaining in a single call without …\n"],["by_col!","CSV::Table","classes/CSV/Table.html#method-i-by_col-21","()","<p>Switches the mode of this table to column mode.  All calls to indexing and\niteration methods will work …\n"],["by_col_or_row","CSV::Table","classes/CSV/Table.html#method-i-by_col_or_row","()","<p>Returns a duplicate table object, in mixed mode.  This is handy for\nchaining in a single call without …\n"],["by_col_or_row!","CSV::Table","classes/CSV/Table.html#method-i-by_col_or_row-21","()","<p>Switches the mode of this table to mixed mode.  All calls to indexing and\niteration methods will use …\n"],["by_id","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-by_id","(p1)","<p>Fetches the engine as specified by the <em>id</em> String.\n\n<pre><code>OpenSSL::Engine.by_id(&quot;openssl&quot;)\n =&gt; #&lt;OpenSSL::Engine ...</code></pre>\n"],["by_row","CSV::Table","classes/CSV/Table.html#method-i-by_row","()","<p>Returns a duplicate table object, in row mode.  This is handy for chaining\nin a single call without changing …\n"],["by_row!","CSV::Table","classes/CSV/Table.html#method-i-by_row-21","()","<p>Switches the mode of this table to row mode.  All calls to indexing and\niteration methods will work with …\n"],["byte","Socket::Option","classes/Socket/Option.html#method-c-byte","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains a byte as data.\n\n<pre><code>p Socket::Option.byte(:INET, :SOCKET, ...</code></pre>\n"],["byte","Socket::Option","classes/Socket/Option.html#method-i-byte","()","<p>Returns the data in <em>sockopt</em> as an byte.\n\n<pre><code>sockopt = Socket::Option.byte(:INET, :SOCKET, :KEEPALIVE, 1)\np ...\n</code></pre>\n"],["bytes","ARGF","classes/ARGF.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytes","IO","classes/IO.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytes","REXML::Child","classes/REXML/Child.html#method-i-bytes","()","<p>This doesn&#39;t yet handle encodings\n"],["bytes","Random","classes/Random.html#method-i-bytes","(p1)","<p>Returns a random binary string containing <code>size</code> bytes.\n\n<pre><code>random_string = Random.new.bytes(10) # =&gt; &quot;\\xD7:R\\xAB?\\x83\\xCE\\xFAkO&quot; ...\n</code></pre>\n"],["bytes","Random","classes/Random.html#method-c-bytes","(p1)","<p>Returns a random binary string. The argument <code>size</code> specifies\nthe length of the returned string.\n"],["bytes","SecureRandom","classes/SecureRandom.html#method-c-bytes","(n)",""],["bytes","String","classes/String.html#method-i-bytes","()","<p>Returns an array of bytes in <em>str</em>.  This is a shorthand for\n<code>str.each_byte.to_a</code>.\n<p>If a block is given, which …\n"],["bytes","StringIO","classes/StringIO.html#method-i-bytes","()","<p>This is a deprecated alias for #each_byte.\n"],["bytes","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-bytes","()","<p>This is a deprecated alias for <code>each_byte</code>.\n"],["bytesize","String","classes/String.html#method-i-bytesize","()","<p>Returns the length of <code>str</code> in bytes.\n\n<pre><code>&quot;\\x80\\u3042&quot;.bytesize  #=&gt; 4\n&quot;hello&quot;.bytesize       #=&gt; 5\n</code></pre>\n"],["byteslice","String","classes/String.html#method-i-byteslice","(*args)","<p>Byte Reference—If passed a single <code>Integer</code>, returns a substring\nof one byte at that position. If passed …\n"],["ca_file=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ca_file-3D","(file)","<p>Sets the SSL certificate authority file.\n"],["cache","Bundler::CLI","classes/Bundler/CLI.html#method-i-cache","()",""],["cache","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-cache","()","<p>The cache directory for plugin stuffs\n"],["cache","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-cache","(spec, custom_path = nil)","<p>This method is called while caching to save copy of the gems that the\nsource can resolve to path provided …\n"],["cache","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-cache","(custom_path = nil)",""],["cache","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-cache","(spec, custom_path = nil)",""],["cache","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-cache","(spec, custom_path = nil)",""],["cache_dir","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-i-cache_dir","()","<p>The cache dir to be used by the plugins for storage\n<p>@return [Pathname] path of the cache dir\n"],["cache_path","Bundler::Plugin::Installer::Git","classes/Bundler/Plugin/Installer/Git.html#method-i-cache_path","()",""],["cache_path","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-cache_path","()","<p>This is the path which is going to contain a cache of the git repository.\nWhen using the same git repository …\n"],["cache_path","RDoc::Store","classes/RDoc/Store.html#method-i-cache_path","()","<p>Path to the cache file\n"],["cached!","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-cached-21","()","<p>Set internal representation to fetch the gems/specs from app cache.\n<p>When this is called, the source should …\n"],["cached!","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-cached-21","()",""],["cached!","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-cached-21","()",""],["cached!","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-cached-21","()",""],["cachesize=","GDBM","classes/GDBM.html#method-i-cachesize-3D","(p1)","<p>Sets the size of the internal bucket cache to <em>size</em>.\n"],["calculate","RDoc::Stats","classes/RDoc/Stats.html#method-i-calculate","()","<p>Calculates documentation totals and percentages for classes, modules,\nconstants, attributes and methods. …\n"],["call","Bundler::ParallelInstaller","classes/Bundler/ParallelInstaller.html#method-i-call","()",""],["call","Bundler::ParallelInstaller","classes/Bundler/ParallelInstaller.html#method-c-call","(*args)",""],["call","Continuation","classes/Continuation.html#method-i-call","(*args)","<p>Invokes the continuation. The program continues from the end of the\n<code>callcc</code> block. If no arguments are …\n"],["call","Fiddle::Closure::BlockCaller","classes/Fiddle/Closure/BlockCaller.html#method-i-call","(*args)","<p>Calls the constructed BlockCaller, with <code>args</code>\n<p>For an example see Fiddle::Closure::BlockCaller.new\n"],["call","Fiddle::Function","classes/Fiddle/Function.html#method-i-call","(*args)","<p>Calls the constructed Function, with <code>args</code>. Caller must ensure\nthe underlying function is called in a …\n"],["call","Logger::Formatter","classes/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call","Method","classes/Method.html#method-i-call","(*args)","<p>Invokes the <em>meth</em> with the specified arguments, returning the\nmethod&#39;s return value.\n\n<pre><code>m = 12.method(&quot;+&quot;) ...\n</code></pre>\n"],["call","Proc","classes/Proc.html#method-i-call","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["call","Syslog::Logger::Formatter","classes/Syslog/Logger/Formatter.html#method-i-call","(severity, time, progname, msg)",""],["call_seq=","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-call_seq-3D","(call_seq)","<p>Sets the different ways you can call this method.  If an empty\n<code>call_seq</code> is given nil is assumed.\n<p>See also …\n"],["callcc","Kernel","classes/Kernel.html#method-i-callcc","()","<p>Generates a Continuation object, which it passes to the associated block.\nYou need to <code>require &#39;continuation&#39;</code> …\n"],["callee_id","TracePoint","classes/TracePoint.html#method-i-callee_id","()","<p>Return the called name of the method being called\n"],["caller","Kernel","classes/Kernel.html#method-i-caller","(*args)","<p>Returns the current execution stack—an array containing strings in the form\n<code>file:line</code> or <code>file:line:</code> …\n"],["caller_locations","Kernel","classes/Kernel.html#method-i-caller_locations","(*args)","<p>Returns the current execution stack—an array containing backtrace location\nobjects.\n<p>See Thread::Backtrace::Location …\n"],["camel_case","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-camel_case","(str)","<p>Receives a string and convert it to camel case. camel_case returns\nCamelCase.\n<p>Parameters\n<p>String\n"],["can_display_colors?","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::Color","classes/Bundler/Thor/Shell/Color.html#method-i-can_display_colors-3F","()",""],["can_display_colors?","Bundler::Thor::Shell::HTML","classes/Bundler/Thor/Shell/HTML.html#method-i-can_display_colors-3F","()",""],["can_lock?","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-can_lock-3F","(spec)","<p>Note: Do not override if you don&#39;t know what you are doing.\n"],["can_lock?","Bundler::Source","classes/Bundler/Source.html#method-i-can_lock-3F","(spec)",""],["can_parse","RDoc::Parser","classes/RDoc/Parser.html#method-c-can_parse","(file_name)","<p>Return a parser that can handle a particular extension\n"],["can_parse_by_name","RDoc::Parser","classes/RDoc/Parser.html#method-c-can_parse_by_name","(file_name)","<p>Returns a parser that can handle the extension for <code>file_name</code>. \nThis does not depend upon the file being …\n"],["can_retry?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-can_retry-3F","(req, retried_on_ruby_2 = false)","<p>Is the request <code>req</code> idempotent or is retry_change_requests\nallowed.\n<p>If <code>retried_on_ruby_2</code> is true, true …\n"],["cancel","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-cancel","()","<p>Marks this TupleEntry as canceled.\n"],["cancel","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-cancel","()",""],["cancel","WEBrick","classes/WEBrick.html#method-i-cancel","(thread, id)","<p>Cancels the timeout handler <code>id</code>\n"],["cancel","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-cancel","(id)","<p>Cancels the timeout handler <code>id</code>\n"],["canceled?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-canceled-3F","()","<p>Returns the canceled status.\n"],["candidate","OptionParser","classes/OptionParser.html#method-i-candidate","(word)",""],["candidate","OptionParser::Completion","classes/OptionParser/Completion.html#method-c-candidate","(key, icase = false, pat = nil, &block)",""],["candidate","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-candidate","(key, icase = false, pat = nil)",""],["canonical","Psych::Emitter","classes/Psych/Emitter.html#method-i-canonical","()","<p>Get the output style, canonical or not.\n"],["canonical=","Psych::Emitter","classes/Psych/Emitter.html#method-i-canonical-3D","(p1)","<p>Set the output style to canonical, or not.\n"],["canonname","Addrinfo","classes/Addrinfo.html#method-i-canonname","()","<p>returns the canonical name as an string.\n<p>nil is returned if no canonical name.\n<p>The canonical name is set …\n"],["capabilities","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-capabilities","()","<p>Returns a hash of the human readable reply text in the response if it is\nmultiple lines. It does not …\n"],["capability","Net::IMAP","classes/Net/IMAP.html#method-i-capability","()","<p>Sends a CAPABILITY command, and returns an array of capabilities that the\nserver supports.  Each capability …\n"],["capable_auth_types","Net::SMTP","classes/Net/SMTP.html#method-i-capable_auth_types","()","<p>Returns supported authentication methods on this server. You cannot get\nvalid value before opening SMTP …\n"],["capable_cram_md5_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_cram_md5_auth-3F","()","<p>true if server advertises AUTH CRAM-MD5. You cannot get valid value before\nopening SMTP session.\n"],["capable_login_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_login_auth-3F","()","<p>true if server advertises AUTH LOGIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_plain_auth?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_plain_auth-3F","()","<p>true if server advertises AUTH PLAIN. You cannot get valid value before\nopening SMTP session.\n"],["capable_starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-capable_starttls-3F","()","<p>true if server advertises STARTTLS. You cannot get valid value before\nopening SMTP session.\n"],["capitalize","String","classes/String.html#method-i-capitalize","(*args)","<p>Returns a copy of <em>str</em> with the first character converted to\nuppercase and the remainder to lowercase. …\n"],["capitalize","Symbol","classes/Symbol.html#method-i-capitalize","(*args)","<p>Same as <code>sym.to_s.capitalize.intern</code>.\n"],["capitalize!","String","classes/String.html#method-i-capitalize-21","(*args)","<p>Modifies <em>str</em> by converting the first character to uppercase and\nthe remainder to lowercase. Returns  …\n"],["caption","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-caption","(align = {})","<p>Generate a Table Caption element as a string.\n<p><code>align</code> can be a string, giving the alignment of the caption …\n"],["capture2","Open3","classes/Open3.html#method-c-capture2","(*cmd)","<p>Open3.capture2 captures the standard output of a command.\n\n<pre><code>stdout_str, status = Open3.capture2([env,] cmd... ...</code></pre>\n"],["capture2e","Open3","classes/Open3.html#method-c-capture2e","(*cmd)","<p>Open3.capture2e captures the standard output and the standard error of a\ncommand.\n\n<pre><code>stdout_and_stderr_str, ...</code></pre>\n"],["capture3","Open3","classes/Open3.html#method-c-capture3","(*cmd)","<p>Open3.capture3 captures the standard output and the standard error of a\ncommand.\n\n<pre><code>stdout_str, stderr_str, ...</code></pre>\n"],["captures","MatchData","classes/MatchData.html#method-i-captures","()","<p>Returns the array of captures; equivalent to <code>mtch.to_a[1..-1]</code>.\n\n<pre><code>f1,f2,f3,f4 = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;).captures ...\n</code></pre>\n"],["captures","StringScanner","classes/StringScanner.html#method-i-captures","()","<p>Returns the subgroups in the most recent match (not including the full\nmatch). If nothing was priorly …\n"],["casecmp","String","classes/String.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>String#&lt;=&gt;</code>. Currently,\ncase-insensitivity only works on characters …\n"],["casecmp","Symbol","classes/Symbol.html#method-i-casecmp","(p1)","<p>Case-insensitive version of <code>Symbol#&lt;=&gt;</code>. Currently,\ncase-insensitivity only works on characters …\n"],["casecmp?","String","classes/String.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>str</code> and <code>other_str</code>\nare equal after Unicode case folding, <code>false</code> if they are not\nequal. …\n"],["casecmp?","Symbol","classes/Symbol.html#method-i-casecmp-3F","(p1)","<p>Returns <code>true</code> if <code>sym</code> and <code>other_symbol</code>\nare equal after Unicode case folding, <code>false</code> if they are not\nequal. …\n"],["casefold?","Regexp","classes/Regexp.html#method-i-casefold-3F","()","<p>Returns the value of the case-insensitive flag.\n\n<pre><code>/a/.casefold?           #=&gt; false\n/a/i.casefold?      ...\n</code></pre>\n"],["cat","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-cat","(*filenames)","<p>Returns a Cat object, for the given <code>filenames</code>\n"],["catch","Kernel","classes/Kernel.html#method-i-catch","(*args)","<p><code>catch</code> executes its block. If <code>throw</code> is not called,\nthe block executes normally, and <code>catch</code> returns the …\n"],["catch","Timeout::Error","classes/Timeout/Error.html#method-c-catch","(*args)",""],["catch","Timeout::Error","classes/Timeout/Error.html#method-c-catch","(*args)",""],["catch","Timeout::Error","classes/Timeout/Error.html#method-c-catch","(*args)",""],["cause","Exception","classes/Exception.html#method-i-cause","()","<p>Returns the previous exception ($!) at the time this exception was raised.\nThis is useful for wrapping …\n"],["cbrt","CMath","classes/CMath.html#method-c-cbrt","(z)","<p>Returns the principal value of the cube root of <code>z</code>\n\n<pre><code>CMath.cbrt(1 + 4i) #=&gt; (1.449461632813119+0.6858152562177092i)\n</code></pre>\n"],["cbrt","Math","classes/Math.html#method-c-cbrt","(p1)","<p>Returns the cube root of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["cd","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the current directory to the directory <code>dir</code>.\n<p>If this method is called with block, resumes to the …\n"],["cd","FileUtils","classes/FileUtils.html#method-c-cd","(dir, verbose: nil)","<p>Changes the current directory to the directory <code>dir</code>.\n<p>If this method is called with block, resumes to the …\n"],["cd","Shell","classes/Shell.html#method-i-cd","(path = nil, verbose = @verbose)",""],["cd","Shell","classes/Shell.html#method-c-cd","(path)","<p>Creates a new Shell instance with the current working directory set to\n<code>path</code>.\n"],["cdata","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-cdata","(content)","<p>Called when &lt;![CDATA[ … ]]&gt; is encountered in a document. @p content\n“…”\n"],["cdata?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-cdata-3F","()","<p>Content: [ String text ]\n"],["cdatas","REXML::Element","classes/REXML/Element.html#method-i-cdatas","()","<p>Get an array of all CData children. IMMUTABLE\n"],["ceil","BigDecimal","classes/BigDecimal.html#method-i-ceil","(p1 = v1)","<p>Return the smallest integer greater than or equal to the value, as a\nBigDecimal.\n\n<pre><code>BigDecimal(&#39;3.14159&#39;).ceil ...\n</code></pre>\n"],["ceil","Float","classes/Float.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>float</code>\nwith a precision of <code>ndigits</code> decimal digits …\n"],["ceil","Integer","classes/Integer.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>int</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Numeric","classes/Numeric.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>num</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceil","Rational","classes/Rational.html#method-i-ceil","(*args)","<p>Returns the smallest number greater than or equal to <code>rat</code> with\na precision of <code>ndigits</code> decimal digits (default: …\n"],["ceiling","REXML::Functions","classes/REXML/Functions.html#method-c-ceiling","( number )",""],["center","String","classes/String.html#method-i-center","(*args)","<p>Centers <code>str</code> in <code>width</code>.  If <code>width</code> is\ngreater than the length of <code>str</code>, returns a new String of length\n<code>width</code> …\n"],["cert","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-cert","()","<p>The X509 certificate for this socket endpoint.\n"],["cert=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-cert-3D","(certificate)","<p>For Net::HTTP parity\n"],["cert_status","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-cert_status","()","<p>Returns the status of the certificate identified by the certid. The return\nvalue may be one of these …\n"],["cert_store=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-cert_store-3D","(store)","<p>Overrides the default SSL certificate store used for verifying connections.\n"],["certid","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-certid","()","<p>Returns all certificate IDs in this request.\n"],["certid","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-certid","()","<p>Returns the CertificateId for which this SingleResponse is.\n"],["certificate=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-certificate-3D","(certificate)","<p>Sets this client&#39;s OpenSSL::X509::Certificate\n"],["certificates","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-certificates","()",""],["certificates=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-certificates-3D","(p1)",""],["certs","Net::POP3","classes/Net/POP3.html#method-c-certs","()","<p>returns the :ca_file or :ca_path from POP3.ssl_params\n"],["chain","Enumerable","classes/Enumerable.html#method-i-chain","(*args)","<p>Returns an enumerator object generated from this enumerator and given\nenumerables.\n\n<pre><code>e = (1..3).chain([4, ...</code></pre>\n"],["chain","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-chain","()",""],["challenge","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-challenge","()","<p>Returns the challenge string associated with this SPKI.\n"],["challenge","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-i-challenge","(req, res)","<p>Returns a challenge response which asks for authentication information\n"],["challenge","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-i-challenge","(req, res, stale=false)","<p>Returns a challenge response which asks for authentication information\n"],["challenge=","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-challenge-3D","(p1)","<p>Parameters\n<p><em>str</em> - the challenge string to be set for this instance\n\n<p>Sets the challenge to be associated with …\n"],["change_encoding","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-change_encoding","(text, encoding)","<p>Changes encoding based on <code>encoding</code> without converting and\nreturns new string\n"],["change_privilege","Process::GID","classes/Process/GID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective group ID to that\nspecified by <em>group</em>. Returns the …\n"],["change_privilege","Process::UID","classes/Process/UID.html#method-c-change_privilege","(p1)","<p>Change the current process&#39;s real and effective user ID to that\nspecified by <em>user</em>. Returns the new …\n"],["change_workspace","IRB::Context","classes/IRB/Context.html#method-i-change_workspace","(*_main)","<p>Changes the current workspace to given object or binding.\n<p>If the optional argument is omitted, the workspace …\n"],["changed","Observable","classes/Observable.html#method-i-changed","(state=true)","<p>Set the changed state of this object.  Notifications will be sent only if\nthe changed <code>state</code> is <code>true</code>. …\n"],["changed?","Observable","classes/Observable.html#method-i-changed-3F","()","<p>Returns true if this object&#39;s state has been changed since the last\n#notify_observers call.\n"],["character","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-character","(data)",""],["characters","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-characters","(text)",""],["chardev?","File","classes/File.html#method-c-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chardev?","File::Stat","classes/File/Stat.html#method-i-chardev-3F","()","<p>Returns <code>true</code> if the file is a character device,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["chardev?","FileTest","classes/FileTest.html#method-i-chardev-3F","(p1)","<p>Returns <code>true</code> if the named file is a character device.\n<p><em>file_name</em> can be an IO object.\n"],["chardev?","Pathname","classes/Pathname.html#method-i-chardev-3F","()","<p>See FileTest.chardev?.\n"],["charpos","StringScanner","classes/StringScanner.html#method-i-charpos","()","<p>Returns the character position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["chars","ARGF","classes/ARGF.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["chars","IO","classes/IO.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["chars","String","classes/String.html#method-i-chars","()","<p>Returns an array of characters in <em>str</em>.  This is a shorthand for\n<code>str.each_char.to_a</code>.\n<p>If a block is given, …\n"],["chars","StringIO","classes/StringIO.html#method-i-chars","()","<p>This is a deprecated alias for <code>each_char</code>.\n"],["charset","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-charset","()","<p>returns a charset parameter in Content-Type field. It is downcased for\ncanonicalization.\n<p>If charset parameter …\n"],["chdir","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["chdir","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-chdir","(dir, &blk)",""],["chdir","Dir","classes/Dir.html#method-c-chdir","(*args)","<p>Changes the current working directory of the process to the given string.\nWhen called without an argument, …\n"],["chdir","FileUtils","classes/FileUtils.html#method-c-chdir","(dir, verbose: nil)",""],["chdir","Net::FTP","classes/Net/FTP.html#method-i-chdir","(dirname)","<p>Changes the (remote) directory.\n"],["chdir","Shell","classes/Shell.html#method-i-chdir","(path = nil, verbose = @verbose)","<p>Creates a Shell object which current directory is set to <code>path</code>.\n<p>If a block is given, it restores the current …\n"],["check","Bundler::CLI","classes/Bundler/CLI.html#method-i-check","()",""],["check","Net::IMAP","classes/Net/IMAP.html#method-i-check","()","<p>Sends a CHECK command to request a checkpoint of the currently selected\nmailbox.  This performs implementation-specific …\n"],["check","PTY","classes/PTY.html#method-c-check","(p1, p2 = v2)","<p>Checks the status of the child process specified by <code>pid</code>.\nReturns <code>nil</code> if the process is still alive.\n<p>If …\n"],["check","REXML::Text","classes/REXML/Text.html#method-c-check","(string, pattern, doctype)","<p>check for illegal characters\n"],["check","StringScanner","classes/StringScanner.html#method-i-check","(p1)","<p>This returns the value that #scan would return, without advancing the scan\npointer.  The match register …\n"],["check!","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-check-21","()",""],["check_circular?","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures should be checked, otherwise\nreturns false.\n"],["check_default_type!","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-check_default_type-21","()","<p>If you want to raise an error when the default value of an option does not\nmatch the type call check_default_type …\n"],["check_files","RDoc::Options","classes/RDoc/Options.html#method-i-check_files","()","<p>Check that the files on the command line exist\n"],["check_for_corrupt_lockfile","Bundler::ParallelInstaller","classes/Bundler/ParallelInstaller.html#method-i-check_for_corrupt_lockfile","()",""],["check_generator","RDoc::Options","classes/RDoc/Options.html#method-i-check_generator","()","<p>Ensure only one generator is loaded\n"],["check_insecure_method","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-check_insecure_method","(obj, msg_id)","<p>Check that a method is callable via dRuby.\n<p><code>obj</code> is the object we want to invoke the method on.\n<code>msg_id</code> is …\n"],["check_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-check_inspect_key","(id)","<p>Check whether the object_id <code>id</code> is in the current buffer of\nobjects to be pretty printed. Used to break …\n"],["check_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-check_key","()","<p>Raises an exception if the key is invalid.\n<p>See the OpenSSL documentation for EC_KEY_check_key()\n"],["check_modeline","RDoc::Parser","classes/RDoc/Parser.html#method-c-check_modeline","(file_name)","<p>Returns the file type from the modeline in <code>file_name</code>\n"],["check_names","RDoc::Task","classes/RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["check_names","RDoc::Task","classes/RDoc/Task.html#method-i-check_names","(names)","<p>Ensures that <code>names</code> only includes names for the :rdoc,\n:clobber_rdoc and :rerdoc.  If other names are …\n"],["check_nonce","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-check_nonce","(p1)","<p>Checks the nonce validity for this request and <em>response</em>.\n<p>The return value is one of the following:\n<p>-1  … &mdash; "],["check_password","URI::File","classes/URI/File.html#method-i-check_password","(user)","<p>raise InvalidURIError\n"],["check_private_key","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-check_private_key","(p1)","<p>Returns <code>true</code> if <em>key</em> is the corresponding private key\nto the Subject Public Key Information, <code>false</code> otherwise. …\n"],["check_signedness","MakeMakefile","classes/MakeMakefile.html#method-i-check_signedness","(type, headers = nil, opts = nil, &b)","<p>Returns the signedness of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in …\n"],["check_sizeof","MakeMakefile","classes/MakeMakefile.html#method-i-check_sizeof","(type, headers = nil, opts = \"\", &b)","<p>Returns the size of the given <code>type</code>.  You may optionally\nspecify additional <code>headers</code> to search in for the …\n"],["check_unknown_options!","Bundler::Thor","classes/Bundler/Thor.html#method-c-check_unknown_options-21","(options = {})","<p>Extend check unknown options to accept a hash of conditions.\n<p>Parameters\n<p>options&lt;Hash&gt;: A hash containing …\n"],["check_unknown_options!","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-check_unknown_options-21","()","<p>If you want to raise an error for unknown options, call\ncheck_unknown_options! This is disabled by default …\n"],["check_until","StringScanner","classes/StringScanner.html#method-i-check_until","(p1)","<p>This returns the value that #scan_until would return, without advancing the\nscan pointer.  The match …\n"],["check_user","URI::File","classes/URI/File.html#method-i-check_user","(user)","<p>raise InvalidURIError\n"],["check_userinfo","URI::File","classes/URI/File.html#method-i-check_userinfo","(user)","<p>raise InvalidURIError\n"],["check_validity","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-check_validity","(p1 = v1, p2 = v2)","<p>Checks the validity of thisUpdate and nextUpdate fields of this\nSingleResponse. This checks the current …\n"],["checkbox","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-checkbox","(name = \"\", value = nil, checked = nil)","<p>Generate a Checkbox Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["checkbox_group","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-checkbox_group","(name = \"\", *values)","<p>Generate a sequence of checkbox elements, as a String.\n<p>The checkboxes will all have the same <code>name</code> attribute. …\n"],["checkout","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-checkout","()",""],["checksum_for_file","Bundler::CompactIndexClient::Updater","classes/Bundler/CompactIndexClient/Updater.html#method-i-checksum_for_file","(path)",""],["checksums","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-checksums","()",""],["child_name","RDoc::Context","classes/RDoc/Context.html#method-i-child_name","(name)","<p>Creates the full name for a child with <code>name</code>\n"],["children","Dir","classes/Dir.html#method-i-children","()","<p>Returns an array containing all of the filenames except for “.” and “..” in\nthis …\n"],["children","Dir","classes/Dir.html#method-c-children","(*args)","<p>Returns an array containing all of the filenames except for “.” and “..” in\nthe given …\n"],["children","Pathname","classes/Pathname.html#method-i-children","(with_directory=true)","<p>Returns the children of the directory (files and subdirectories, not\nrecursive) as an array of Pathname …\n"],["children","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-children","()",""],["children","REXML::Parent","classes/REXML/Parent.html#method-i-children","()",""],["children","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-children","()","<p>Returns AST nodes under this one.  Each kind of node has different\nchildren, depending on what kind of …\n"],["chmod","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n<p><code>mode</code> is the …\n"],["chmod","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-chmod","(path, mode, config = {})","<p>Changes the mode of the given file or directory.\n<p>Parameters\n<p>mode&lt;Integer&gt; &mdash; the file mode\n"],["chmod","File","classes/File.html#method-c-chmod","(*args)","<p>Changes permission bits on the named file(s) to the bit pattern represented\nby <em>mode_int</em>. Actual effects …\n"],["chmod","File","classes/File.html#method-i-chmod","(p1)","<p>Changes permission bits on <em>file</em> to the bit pattern represented by\n<em>mode_int</em>. Actual effects are platform …\n"],["chmod","FileUtils","classes/FileUtils.html#method-c-chmod","(mode, list, noop: nil, verbose: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n<p><code>mode</code> is the …\n"],["chmod","Pathname","classes/Pathname.html#method-i-chmod","(p1)","<p>Changes file permissions.\n<p>See File.chmod.\n"],["chmod_R","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n\n<pre><code>Bundler::FileUtils.chmod_R ...\n</code></pre>\n"],["chmod_R","FileUtils","classes/FileUtils.html#method-c-chmod_R","(mode, list, noop: nil, verbose: nil, force: nil)","<p>Changes permission bits on the named files (in <code>list</code>) to the\nbit pattern represented by <code>mode</code>.\n\n<pre><code>FileUtils.chmod_R ...\n</code></pre>\n"],["chomp","Kernel","classes/Kernel.html#method-i-chomp","(*args)","<p>Equivalent to <code>$_ = $_.chomp(<em>string</em>)</code>. See\n<code>String#chomp</code>. Available only when -p/-n command line option …\n"],["chomp","String","classes/String.html#method-i-chomp","(*args)","<p>Returns a new <code>String</code> with the given record separator removed\nfrom the end of <em>str</em> (if present). If <code>$/</code> …\n"],["chomp!","String","classes/String.html#method-i-chomp-21","(*args)","<p>Modifies <em>str</em> in place as described for <code>String#chomp</code>,\nreturning <em>str</em>, or <code>nil</code> if no modifications were made.\n…\n"],["chop","Kernel","classes/Kernel.html#method-i-chop","()","<p>Equivalent to <code>($_.dup).chop!</code>, except <code>nil</code> is never\nreturned. See <code>String#chop!</code>. Available only when -p/-n …\n"],["chop","String","classes/String.html#method-i-chop","()","<p>Returns a new <code>String</code> with the last character removed.  If the\nstring ends with <code>\\r\\n</code>, both characters …\n"],["chop!","String","classes/String.html#method-i-chop-21","()","<p>Processes <em>str</em> as for <code>String#chop</code>, returning\n<em>str</em>, or <code>nil</code> if <em>str</em> is the empty string.  See\nalso <code>String#chomp!</code> …\n"],["chown","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code>.  <code>user</code>\nand …\n"],["chown","File","classes/File.html#method-i-chown","(p1, p2)","<p>Changes the owner and group of <em>file</em> to the given numeric owner and\ngroup id&#39;s. Only a process with …\n"],["chown","File","classes/File.html#method-c-chown","(*args)","<p>Changes the owner and group of the named file(s) to the given numeric owner\nand group id&#39;s. Only …\n"],["chown","FileUtils","classes/FileUtils.html#method-c-chown","(user, group, list, noop: nil, verbose: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code>.  <code>user</code>\nand …\n"],["chown","Pathname","classes/Pathname.html#method-i-chown","(p1, p2)","<p>Change owner and group of the file.\n<p>See File.chown.\n"],["chown_R","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code> recursively. …\n"],["chown_R","FileUtils","classes/FileUtils.html#method-c-chown_R","(user, group, list, noop: nil, verbose: nil, force: nil)","<p>Changes owner and group on the named files (in <code>list</code>) to the\nuser <code>user</code> and the group <code>group</code> recursively. …\n"],["chr","Integer","classes/Integer.html#method-i-chr","(*args)","<p>Returns a string containing the character represented by the\n<code>int</code>&#39;s value according to <code>encoding</code>.\n\n<pre><code>65.chr ...\n</code></pre>\n"],["chr","String","classes/String.html#method-i-chr","()","<p>Returns a one-character string at the beginning of the string.\n\n<pre><code>a = &quot;abcde&quot;\na.chr    #=&gt; &quot;a&quot;\n</code></pre>\n"],["chroot","Dir","classes/Dir.html#method-c-chroot","(p1)","<p>Changes this process&#39;s idea of the file system root. Only a privileged\nprocess may make this call. …\n"],["chunk","Enumerable","classes/Enumerable.html#method-i-chunk","()","<p>Enumerates over the items, chunking them together based on the return value\nof the block.\n<p>Consecutive …\n"],["chunk","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-chunk","(*args)",""],["chunk_while","Enumerable","classes/Enumerable.html#method-i-chunk_while","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["chunk_while","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-chunk_while","(*args)",""],["chunked=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-chunked-3D","(val)","<p>Enables chunked transfer encoding.\n"],["chunked?","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-chunked-3F","()","<p>Will this response body be returned using chunked transfer-encoding?\n"],["cipher","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-cipher","(p1)","<p>Returns a new instance of OpenSSL::Cipher by <em>name</em>, if it is\navailable in this engine.\n<p>An EngineError will …\n"],["cipher","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-cipher","()","<p>Returns the cipher suite actually used in the current session, or nil if no\nsession has been established. …\n"],["cipher=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-cipher-3D","(p1)",""],["ciphers","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-c-ciphers","()","<p>Returns the names of all available ciphers in an array.\n"],["ciphers","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ciphers","()","<p>The list of cipher suites configured for this context.\n"],["ciphers=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ciphers-3D","(p1)","<p>Sets the list of available cipher suites for this context.  Note in a\nserver context some ciphers require …\n"],["civil","Date","classes/Date.html#method-c-civil","(*args)","<p>Creates a date object denoting the given calendar date.\n<p>In this class, BCE years are counted astronomically. …\n"],["civil","DateTime","classes/DateTime.html#method-c-civil","(*args)","<p>Creates a DateTime object denoting the given calendar date.\n\n<pre><code>DateTime.new(2001,2,3)    #=&gt; #&lt;DateTime: ...\n</code></pre>\n"],["clamp","Comparable","classes/Comparable.html#method-i-clamp","(p1, p2)","<p>Returns <em>min</em> if <em>obj</em> <code>&lt;=&gt;</code> <em>min</em> is\nless than zero, <em>max</em> if <em>obj</em> <code>&lt;=&gt;</code>\n<em>max</em> is greater than zero and …\n"],["class","Object","classes/Object.html#method-i-class","()","<p>Returns the class of <em>obj</em>. This method must always be called with\nan explicit receiver, as <code>class</code> is also …\n"],["class_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-class_attributes","()","<p>Class attributes\n"],["class_eval","Module","classes/Module.html#method-i-class_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["class_exec","Module","classes/Module.html#method-i-class_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["class_file","RDoc::Store","classes/RDoc/Store.html#method-i-class_file","(klass_name)","<p>Path to the ri data for <code>klass_name</code>\n"],["class_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-class_method_list","()","<p>Class methods\n"],["class_methods","RDoc::Store","classes/RDoc/Store.html#method-i-class_methods","()","<p>Class methods cache accessor.  Maps a class to an Array of its class\nmethods (not full name).\n"],["class_name","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-class_name","(uri, tag_name)","<p>retrieve class_name for the supplied uri and tag_name If it doesn&#39;t\nexist, capitalize the tag_name …\n"],["class_option","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-class_option","(name, options = {})","<p>Adds an option to the set of class options\n<p>Parameters\n<p>name&lt;Symbol&gt; &mdash; The name of the argument.\n"],["class_options","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-class_options","(options = nil)","<p>Adds a bunch of options to the set of class options.\n\n<pre><code>class_options :foo =&gt; false, :bar =&gt; :required, :baz ...</code></pre>\n"],["class_path","RDoc::Store","classes/RDoc/Store.html#method-i-class_path","(klass_name)","<p>Path where data for <code>klass_name</code> will be stored (methods or\nclass data)\n"],["class_variable_defined?","Module","classes/Module.html#method-i-class_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given class variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["class_variable_get","Module","classes/Module.html#method-i-class_variable_get","(p1)","<p>Returns the value of the given class variable (or throws a\n<code>NameError</code> exception). The <code>@@</code> part of the variable\n…\n"],["class_variable_set","Module","classes/Module.html#method-i-class_variable_set","(p1, p2)","<p>Sets the class variable named by <em>symbol</em> to the given object. If\nthe class variable name is passed as …\n"],["class_variables","Module","classes/Module.html#method-i-class_variables","(*args)","<p>Returns an array of the names of class variables in <em>mod</em>. This\nincludes the names of class variables in …\n"],["classes","RDoc::Context","classes/RDoc/Context.html#method-i-classes","()","<p>Array of classes in this context\n"],["classes_and_modules","RDoc::Context","classes/RDoc/Context.html#method-i-classes_and_modules","()","<p>All classes and modules in this namespace\n"],["classes_hash","RDoc::Context","classes/RDoc/Context.html#method-i-classes_hash","()","<p>Hash of classes keyed by class name\n"],["classes_hash","RDoc::Store","classes/RDoc/Store.html#method-i-classes_hash","()","<p>Hash of all classes known to RDoc\n"],["classify","Set","classes/Set.html#method-i-classify","()","<p>Classifies the set by the return value of the given block and returns a\nhash of {value =&gt; set of elements} …\n"],["clean","Bundler::CLI","classes/Bundler/CLI.html#method-i-clean","()",""],["clean","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-clean","(dry_run = false)",""],["clean?","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-clean-3F","()",""],["clean_after_install?","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-clean_after_install-3F","()",""],["clean_env","Bundler","classes/Bundler.html#method-c-clean_env","()","<p>@deprecated Use `original_env` instead @return [Hash] Environment with all\nbundler-related variables …\n"],["clean_exec","Bundler","classes/Bundler.html#method-c-clean_exec","(*args)",""],["clean_system","Bundler","classes/Bundler.html#method-c-clean_system","(*args)",""],["cleanpath","Pathname","classes/Pathname.html#method-i-cleanpath","(consider_symlink=false)","<p>Returns clean pathname of <code>self</code> with consecutive slashes and\nuseless dots removed.  The filesystem is …\n"],["cleanup","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-cleanup","()","<p>It is only necessary to run cleanup when engines are loaded via\nOpenSSL::Engine.load. However, running …\n"],["cleanup","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-cleanup","()",""],["clear","Array","classes/Array.html#method-i-clear","()","<p>Removes all elements from <code>self</code>.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot; ]\na.clear    #=&gt; [ ]\n</code></pre>\n"],["clear","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-clear","()",""],["clear","DBM","classes/DBM.html#method-i-clear","()","<p>Deletes all data from the database.\n"],["clear","ENV","classes/ENV.html#method-c-clear","()","<p>Removes every environment variable.\n"],["clear","GC::Profiler","classes/GC/Profiler.html#method-c-clear","()","<p>Clears the GC profiler data.\n"],["clear","GDBM","classes/GDBM.html#method-i-clear","()","<p>Removes all the key-value pairs within <em>gdbm</em>.\n"],["clear","Hash","classes/Hash.html#method-i-clear","()","<p>Removes all key-value pairs from <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }   #=&gt; {&quot;a&quot;=&gt;100, &quot;b&quot;=&gt;200}\nh.clear ...\n</code></pre>\n"],["clear","Queue","classes/Queue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","SDBM","classes/SDBM.html#method-i-clear","()","<p>Deletes all data from the database.\n"],["clear","Set","classes/Set.html#method-i-clear","()","<p>Removes all elements and returns self.\n\n<pre><code>set = Set[1, &#39;c&#39;, :s]             #=&gt; #&lt;Set: {1, &quot;c&quot;, :s}&gt;\nset.clear ...\n</code></pre>\n"],["clear","SizedQueue","classes/SizedQueue.html#method-i-clear","()","<p>Removes all objects from the queue.\n"],["clear","String","classes/String.html#method-i-clear","()","<p>Makes string empty.\n\n<pre><code>a = &quot;abcde&quot;\na.clear    #=&gt; &quot;&quot;\n</code></pre>\n"],["clear","StringScanner","classes/StringScanner.html#method-i-clear","()","<p>Equivalent to #terminate. This method is obsolete; use #terminate instead.\n"],["clear_bit!","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-clear_bit-21","(p1)",""],["clear_comment","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-clear_comment","()","<p>Clears the comment. Used by the Ruby parser.\n"],["clear_default_specs","Gem","classes/Gem.html#method-c-clear_default_specs","()","<p>Clear default gem related variables. It is for test\n"],["clear_gemspec_cache","Bundler","classes/Bundler.html#method-c-clear_gemspec_cache","()",""],["clear_paths","Gem","classes/Gem.html#method-c-clear_paths","()","<p>Reset the <code>dir</code> and <code>path</code> values.  The next time\n<code>dir</code> or <code>path</code> is requested, the values will be\ncalculated …\n"],["cli_help","Bundler::CLI","classes/Bundler/CLI.html#method-i-cli_help","()",""],["client_ca","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-client_ca","()","<p>Returns the list of client CAs. Please note that in contrast to\nSSLContext#client_ca= no array of X509::Certificate …\n"],["client_error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-client_error-3F","(code)","<p>Is <code>code</code> a client error status?\n"],["clobber_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clobber_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-clobber_task_description","()","<p>Task description for the clobber rdoc task or its renamed equivalent\n"],["clock_getres","Process","classes/Process.html#method-c-clock_getres","(*args)","<p>Returns the time resolution returned by POSIX clock_getres() function.\n<p><code>clock_id</code> specifies a kind of clock. …\n"],["clock_gettime","Process","classes/Process.html#method-c-clock_gettime","(*args)","<p>Returns a time returned by POSIX clock_gettime() function.\n\n<pre><code>p Process.clock_gettime(Process::CLOCK_MONOTONIC) ...\n</code></pre>\n"],["clone","BigDecimal","classes/BigDecimal.html#method-i-clone","()",""],["clone","Method","classes/Method.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre><code>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...\n</code></pre>\n"],["clone","Numeric","classes/Numeric.html#method-i-clone","(*args)","<p>Returns the receiver.  <code>freeze</code> cannot be <code>false</code>.\n"],["clone","Object","classes/Object.html#method-i-clone","(*args)","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["clone","REXML::Attribute","classes/REXML/Attribute.html#method-i-clone","()","<p>Returns a copy of this attribute\n"],["clone","REXML::CData","classes/REXML/CData.html#method-i-clone","()","<p>Make a copy of this object\n<p><em>Examples</em>\n\n<pre><code>c = CData.new( &quot;Some text&quot; )\nd = c.clone\nd.to_s        # -&gt; &quot;Some text&quot;\n</code></pre>\n"],["clone","REXML::Comment","classes/REXML/Comment.html#method-i-clone","()",""],["clone","REXML::DocType","classes/REXML/DocType.html#method-i-clone","()",""],["clone","REXML::Document","classes/REXML/Document.html#method-i-clone","()","<p>Should be obvious\n"],["clone","REXML::Element","classes/REXML/Element.html#method-i-clone","()","<p>Creates a shallow copy of self.\n\n<pre><code>d = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c&gt;&lt;d/&gt;&lt;/c&gt;&lt;/a&gt;&quot;\nnew_a = d.root.clone\nputs ...\n</code></pre>\n"],["clone","REXML::Instruction","classes/REXML/Instruction.html#method-i-clone","()",""],["clone","REXML::Text","classes/REXML/Text.html#method-i-clone","()",""],["clone","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-clone","()",""],["clone","Singleton","classes/Singleton.html#method-i-clone","()","<p>Raises a TypeError to prevent cloning.\n"],["clone","UnboundMethod","classes/UnboundMethod.html#method-i-clone","()","<p>Returns a clone of this method.\n\n<pre><code>class A\n  def foo\n    return &quot;bar&quot;\n  end\nend\n\nm = A.new.method(:foo)\nm.call ...\n</code></pre>\n"],["close","ARGF","classes/ARGF.html#method-i-close","()","<p>Closes the current file and skips to the next file in ARGV. If there are no\nmore files to open, just …\n"],["close","CGI::Session","classes/CGI/Session.html#method-i-close","()","<p>Store session data on the server and close the session storage. For some\nsession storage types, this …\n"],["close","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-close","()","<p>Update and close the session&#39;s FileStore file.\n"],["close","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-close","()","<p>Close session storage.\n<p>A no-op.\n"],["close","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-close","()","<p>Update and close the session&#39;s PStore file.\n"],["close","DBM","classes/DBM.html#method-i-close","()","<p>Closes the database.\n"],["close","Dir","classes/Dir.html#method-i-close","()","<p>Closes the directory stream. Calling this method on closed Dir object is\nignored since Ruby 2.3.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...\n</code></pre>\n"],["close","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-close","()","<p>Close this handle.\n<p>Calling close more than once will raise a Fiddle::DLError exception.\n"],["close","GDBM","classes/GDBM.html#method-i-close","()","<p>Closes the associated database file.\n"],["close","IO","classes/IO.html#method-i-close","()","<p>Closes <em>ios</em> and flushes any pending writes to the operating system.\nThe stream is unavailable for any …\n"],["close","Logger","classes/Logger.html#method-i-close","()","<p>Close the logging device.\n"],["close","Logger::LogDevice","classes/Logger/LogDevice.html#method-i-close","()",""],["close","Net::FTP","classes/Net/FTP.html#method-i-close","()","<p>Closes the connection.  Further operations are impossible until you open a\nnew connection with #connect …\n"],["close","Net::IMAP","classes/Net/IMAP.html#method-i-close","()","<p>Sends a CLOSE command to close the currently selected mailbox. The CLOSE\ncommand permanently removes …\n"],["close","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-close","()","<p>Closes the SSLSocket and flushes any unwritten data.\n"],["close","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-i-close","()","<p>See IO#close for details.\n"],["close","Queue","classes/Queue.html#method-i-close","()","<p>Closes the queue. A closed queue cannot be re-opened.\n<p>After the call to close completes, the following …\n"],["close","Resolv::DNS","classes/Resolv/DNS.html#method-i-close","()","<p>Closes the DNS resolver.\n"],["close","SDBM","classes/SDBM.html#method-i-close","()","<p>Closes the database file.\n<p>Raises SDBMError if the database is already closed.\n"],["close","SOCKSSocket","classes/SOCKSSocket.html#method-i-close","()","<p>Closes the SOCKS connection.\n"],["close","SizedQueue","classes/SizedQueue.html#method-i-close","()","<p>Similar to Queue#close.\n<p>The difference is behavior with waiting enqueuing threads.\n<p>If there are waiting …\n"],["close","StringIO","classes/StringIO.html#method-i-close","()","<p>Closes strio.  The <strong>strio</strong> is unavailable for any further\ndata operations; an <code>IOError</code> is raised if such …\n"],["close","Syslog","classes/Syslog.html#method-c-close","()","<p>Closes the syslog facility. Raises a runtime exception if it is not open.\n"],["close","Tempfile","classes/Tempfile.html#method-i-close","(unlink_now=false)","<p>Closes the file. If <code>unlink_now</code> is true, then the file will be\nunlinked (deleted) after closing. Of course, …\n"],["close","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-close","()","<p>Closes the logger (also closes the log device associated to the logger)\n"],["close","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-close","()","<p>Closes the GzipFile object. This method calls close method of the\nassociated IO object. Returns the associated …\n"],["close","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-close","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["close!","Tempfile","classes/Tempfile.html#method-i-close-21","()","<p>Closes and unlinks (deletes) the file. Has the same effect as called\n<code>close(true)</code>.\n"],["close_enabled?","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-close_enabled-3F","()","<p>Returns <code>true</code> if dlclose() will be called when this handle is\ngarbage collected.\n<p>See man(3) dlclose() for …\n"],["close_on_exec=","IO","classes/IO.html#method-i-close_on_exec-3D","(p1)","<p>Sets a close-on-exec flag.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nf.close_on_exec = true\nsystem(&quot;cat&quot;, &quot;/proc/self/fd/#{f.fileno}&quot;) ...\n</code></pre>\n"],["close_on_exec?","IO","classes/IO.html#method-i-close_on_exec-3F","()","<p>Returns <code>true</code> if <em>ios</em> will be closed on exec.\n\n<pre><code>f = open(&quot;/dev/null&quot;)\nf.close_on_exec?                 #=&gt; ...\n</code></pre>\n"],["close_read","BasicSocket","classes/BasicSocket.html#method-i-close_read","()","<p>Disallows further read using shutdown system call.\n\n<pre><code>s1, s2 = UNIXSocket.pair\ns1.close_read\ns2.puts #=&gt; ...\n</code></pre>\n"],["close_read","IO","classes/IO.html#method-i-close_read","()","<p>Closes the read end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, such …\n"],["close_read","StringIO","classes/StringIO.html#method-i-close_read","()","<p>Closes the read end of a StringIO.  Will raise an <code>IOError</code> if\nthe <strong>strio</strong> is not readable.\n"],["close_write","BasicSocket","classes/BasicSocket.html#method-i-close_write","()","<p>Disallows further write using shutdown system call.\n\n<pre><code>UNIXSocket.pair {|s1, s2|\n  s1.print &quot;ping&quot;\n  s1.close_write ...</code></pre>\n"],["close_write","IO","classes/IO.html#method-i-close_write","()","<p>Closes the write end of a duplex I/O stream (i.e., one that contains both a\nread and a write stream, …\n"],["close_write","StringIO","classes/StringIO.html#method-i-close_write","()","<p>Closes the write end of a StringIO.  Will raise an  <code>IOError</code> if\nthe <strong>strio</strong> is not writeable.\n"],["closed?","ARGF","classes/ARGF.html#method-i-closed-3F","()","<p>Returns <em>true</em> if the current file has been closed; <em>false</em>\notherwise. Use <code>ARGF.close</code> to actually close the …\n"],["closed?","DBM","classes/DBM.html#method-i-closed-3F","()","<p>Returns true if the database is closed, false otherwise.\n"],["closed?","GDBM","classes/GDBM.html#method-i-closed-3F","()","<p>Returns true if the associated database file has been closed.\n"],["closed?","IO","classes/IO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <em>ios</em> is completely closed (for duplex\nstreams, both reader and writer), <code>false</code> otherwise. …\n"],["closed?","Net::FTP","classes/Net/FTP.html#method-i-closed-3F","()","<p>Returns <code>true</code> iff the connection is closed.\n"],["closed?","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-closed-3F","()",""],["closed?","Queue","classes/Queue.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the queue is closed.\n"],["closed?","SDBM","classes/SDBM.html#method-i-closed-3F","()","<p>Returns <code>true</code> if the database is closed.\n"],["closed?","StringIO","classes/StringIO.html#method-i-closed-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is completely closed,\n<code>false</code> otherwise.\n"],["closed?","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-closed-3F","()","<p>Same as IO#closed?\n"],["closed?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-closed-3F","()","<p>Returns true if the stream is closed.\n"],["closed_read?","StringIO","classes/StringIO.html#method-i-closed_read-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not readable,\n<code>false</code> otherwise.\n"],["closed_write?","StringIO","classes/StringIO.html#method-i-closed_write-3F","()","<p>Returns <code>true</code> if <strong>strio</strong> is not writable,\n<code>false</code> otherwise.\n"],["cmds","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-cmds","()","<p>Returns an array of command definitions for the current engine\n"],["cmp","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-cmp","(a, b)",""],["cmp","FileUtils","classes/FileUtils.html#method-c-cmp","(a, b)",""],["cmp","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-cmp","(p1)",""],["cmp","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-cmp","(p1)","<p>Compares this certificate id with <em>other</em> and returns\n<code>true</code> if they are the same.\n"],["cmp","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-cmp","(p1)","<p>Compares this Name with <em>other</em> and returns <code>0</code> if they\nare the same and <code>-1</code> or +<code>1</code> if they are greater or\n…\n"],["cmp_issuer","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-cmp_issuer","(p1)","<p>Compares this certificate id&#39;s issuer with <em>other</em> and returns\n<code>true</code> if they are the same.\n"],["cmsg_is?","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-cmsg_is-3F","(p1, p2)","<p>tests the level and type of <em>ancillarydata</em>.\n\n<pre><code>ancdata = Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, ...</code></pre>\n"],["code","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-code","()","<p>Returns the HTTP status code\n"],["code_around_binding","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-code_around_binding","()",""],["codepage","WIN32OLE","classes/WIN32OLE.html#method-c-codepage","()","<p>Returns current codepage.\n\n<pre><code>WIN32OLE.codepage # =&gt; WIN32OLE::CP_ACP\n</code></pre>\n"],["codepage=","WIN32OLE","classes/WIN32OLE.html#method-c-codepage-3D","(p1)","<p>Sets current codepage. The WIN32OLE.codepage is initialized according to\nEncoding.default_internal.  …\n"],["codepoints","ARGF","classes/ARGF.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["codepoints","IO","classes/IO.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["codepoints","String","classes/String.html#method-i-codepoints","()","<p>Returns an array of the <code>Integer</code> ordinals of the characters in\n<em>str</em>.  This is a shorthand for <code>str.each_codepoint.to_a</code>\n…\n"],["codepoints","StringIO","classes/StringIO.html#method-i-codepoints","()","<p>This is a deprecated alias for <code>each_codepoint</code>.\n"],["coerce","BigDecimal","classes/BigDecimal.html#method-i-coerce","(p1)","<p>The coerce method provides support for Ruby type coercion. It is not\nenabled by default.\n<p>This means that …\n"],["coerce","Float","classes/Float.html#method-i-coerce","(p1)","<p>Returns an array with both <code>numeric</code> and <code>float</code>\nrepresented as Float objects.\n<p>This is achieved by converting …\n"],["coerce","Integer","classes/Integer.html#method-i-coerce","(p1)","<p>Returns an array with both a <code>numeric</code> and a <code>big</code>\nrepresented as Bignum objects.\n<p>This is achieved by converting …\n"],["coerce","Numeric","classes/Numeric.html#method-i-coerce","(p1)","<p>If <code>numeric</code> is the same type as <code>num</code>, returns an\narray <code>[numeric, num]</code>. Otherwise, returns an array with …\n"],["coerce","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-coerce","(p1)",""],["coerce","URI::Generic","classes/URI/Generic.html#method-i-coerce","(oth)","<p>Args\n<p><code>v</code> &mdash; URI or String\n\n<p>Description\n"],["cofactor","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-cofactor","()","<p>Returns the cofactor of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_cofactor()\n"],["col_sep","CSV","classes/CSV.html#method-i-col_sep","()","<p>The encoded <code>:col_sep</code> used in parsing and writing.  See\nCSV::new for details.\n"],["collect","Array","classes/Array.html#method-i-collect","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["collect","Enumerable","classes/Enumerable.html#method-i-collect","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["collect","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-collect","()",""],["collect","REXML::Elements","classes/REXML/Elements.html#method-i-collect","( xpath=nil )",""],["collect!","Array","classes/Array.html#method-i-collect-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["collect!","Set","classes/Set.html#method-i-collect-21","()","<p>Replaces the elements with ones returned by collect(). Returns an\nenumerator if no block is given.\n"],["collect_concat","Enumerable","classes/Enumerable.html#method-i-collect_concat","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["collect_concat","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-collect_concat","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<em>block</em> once for every element in …\n"],["collect_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-collect_tokens","()","<p>Starts collecting tokens\n"],["column","Ripper","classes/Ripper.html#method-i-column","()","<p>Return column number of current parsing line. This number starts from 0.\n"],["column","Ripper::Filter","classes/Ripper/Filter.html#method-i-column","()","<p>The column number of the current token. This value starts from 0. This\nmethod is valid only in event …\n"],["column_separator","CSV::Parser","classes/CSV/Parser.html#method-i-column_separator","()",""],["column_vector","Matrix","classes/Matrix.html#method-c-column_vector","(column)","<p>Creates a single-column matrix where the values of that column are as given\nin <code>column</code>.\n\n<pre><code>Matrix.column_vector([4,5,6]) ...\n</code></pre>\n"],["columns","Matrix","classes/Matrix.html#method-c-columns","(columns)","<p>Creates a matrix using <code>columns</code> as an array of column vectors.\n\n<pre><code>Matrix.columns([[25, 93], [-1, 66]])\n   ...</code></pre>\n"],["combination","Array","classes/Array.html#method-i-combination","(p1)","<p>When invoked with a block, yields all combinations of length <code>n</code>\nof elements from the array and then returns …\n"],["combine","Matrix","classes/Matrix.html#method-i-combine","(*matrices, &block)",""],["combine","Matrix","classes/Matrix.html#method-c-combine","(*matrices)","<p>Create a matrix by combining matrices entrywise, using the given block\n\n<pre><code>x = Matrix[[6, 6], [4, 4]]\ny = ...</code></pre>\n"],["comma_breakable","PP::PPMethods","classes/PP/PPMethods.html#method-i-comma_breakable","()","<p>A convenience method which is same as follows:\n\n<pre><code>text &#39;,&#39;\nbreakable\n</code></pre>\n"],["command","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-c-command","(command, cls = self)","<p>The plugins should declare that they handle a command through this helper.\n<p>@param [String] command being …\n"],["command","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-command","()",""],["command=","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-command-3D","(cmd)",""],["command?","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-command-3F","(command)","<p>Checks if any plugin handles the command\n"],["command_help","Bundler::Thor","classes/Bundler/Thor.html#method-c-command_help","(shell, command_name)","<p>Prints help information for the given command.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt; command_name …\n"],["command_plugin","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-command_plugin","(command)","<p>Fetch the name of plugin handling the command\n"],["commands","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-commands","()","<p>Returns the commands for this Bundler::Thor class.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with commands names …\n"],["comment","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-comment","(comment)","<p>Called when a comment is encountered. @p comment The content of the comment\n"],["comment","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-comment","()","<p>Returns comments recorded in the gzip file header, or nil if the comments\nis not present.\n"],["comment=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-comment-3D","(comment)","<p>Replaces our comment with <code>comment</code>, unless it is empty.\n"],["comment=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-comment-3D","(p1)","<p>Specify the comment (<code>str</code>) in the gzip header.\n"],["comment?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-comment-3F","()","<p>Content: [ String text ]\n"],["comment_lines","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-comment_lines","(path, flag, *args)","<p>Comment all lines matching a given regex.  It will leave the space which\nexisted before the beginning …\n"],["comments","REXML::Element","classes/REXML/Element.html#method-i-comments","()","<p>Get an array of all Comment children. IMMUTABLE\n"],["commercial","Date","classes/Date.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a date object denoting the given week date.\n<p>The week and the day of week should be a negative …\n"],["commercial","DateTime","classes/DateTime.html#method-c-commercial","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8)","<p>Creates a DateTime object denoting the given week date.\n\n<pre><code>DateTime.commercial(2001) #=&gt; #&lt;DateTime: 2001-01-01T00:00:00+00:00 ...\n</code></pre>\n"],["commit","PStore","classes/PStore.html#method-i-commit","()","<p>Ends the current PStore#transaction, committing any changes to the data\nstore immediately.\n<p>Example:\n\n<pre><code>require ...\n</code></pre>\n"],["committed?","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-committed-3F","()",""],["compact","Array","classes/Array.html#method-i-compact","()","<p>Returns a copy of <code>self</code> with all <code>nil</code> elements\nremoved.\n\n<pre><code>[ &quot;a&quot;, nil, &quot;b&quot;, nil, &quot;c&quot;, nil ].compact\n       ...</code></pre>\n"],["compact","Hash","classes/Hash.html#method-i-compact","()","<p>Returns a new hash with the nil values/key pairs removed\n\n<pre><code>h = { a: 1, b: false, c: nil }\nh.compact     ...\n</code></pre>\n"],["compact!","Array","classes/Array.html#method-i-compact-21","()","<p>Removes <code>nil</code> elements from the array.\n<p>Returns <code>nil</code> if no changes were made, otherwise returns the\narray. …\n"],["compact!","Hash","classes/Hash.html#method-i-compact-21","()","<p>Removes all nil values from the hash. Returns nil if no changes were made,\notherwise returns the hash. …\n"],["compact_index_request","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-c-compact_index_request","(method_name)",""],["compare_by_identity","Hash","classes/Hash.html#method-i-compare_by_identity","()","<p>Makes <em>hsh</em> compare its keys by their identity, i.e. it will\nconsider exact same objects as same keys. …\n"],["compare_by_identity","Set","classes/Set.html#method-i-compare_by_identity","()","<p>Makes the set compare its elements by their identity and returns self. \nThis method may not be supported …\n"],["compare_by_identity?","Hash","classes/Hash.html#method-i-compare_by_identity-3F","()","<p>Returns <code>true</code> if <em>hsh</em> will compare its keys by their\nidentity.  Also see <code>Hash#compare_by_identity</code>.\n"],["compare_by_identity?","Set","classes/Set.html#method-i-compare_by_identity-3F","()","<p>Returns true if the set will compare its elements by their identity.  Also\nsee Set#compare_by_identity …\n"],["compare_file","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-compare_file","(a, b)","<p>Returns true if the contents of a file <code>a</code> and a file\n<code>b</code> are identical.\n\n<pre><code>Bundler::FileUtils.compare_file(&#39;somefile&#39;, ...</code></pre>\n"],["compare_file","FileUtils","classes/FileUtils.html#method-c-compare_file","(a, b)","<p>Returns true if the contents of a file <code>a</code> and a file\n<code>b</code> are identical.\n\n<pre><code>FileUtils.compare_file(&#39;somefile&#39;, ...</code></pre>\n"],["compare_language","REXML::Functions","classes/REXML/Functions.html#method-c-compare_language","(lang1, lang2)",""],["compare_stream","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns true if the contents of a stream <code>a</code> and <code>b</code>\nare identical.\n"],["compare_stream","FileUtils","classes/FileUtils.html#method-c-compare_stream","(a, b)","<p>Returns true if the contents of a stream <code>a</code> and <code>b</code>\nare identical.\n"],["compatible?","Encoding","classes/Encoding.html#method-c-compatible-3F","(p1, p2)","<p>Checks the compatibility of two objects.\n<p>If the objects are both strings they are compatible when they …\n"],["compile","Regexp","classes/Regexp.html#method-c-compile","(*args)","<p>Alias for <code>Regexp.new</code>\n"],["compile","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["compile_file","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_file","(p1, *args, p3 = {})","<p>Takes <code>file</code>, a String with the location of a Ruby source file,\nreads, parses and compiles the file, and …\n"],["compile_option","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_option","()","<p>Returns a hash of default options used by the Ruby iseq compiler.\n<p>For details, see InstructionSequence.compile_option= …\n"],["compile_option=","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-compile_option-3D","(p1)","<p>Sets the default values for various optimizations in the Ruby iseq\ncompiler.\n<p>Possible values for <code>options</code> …\n"],["complete","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-complete","(key, icase = false, pat = nil)",""],["complete","OptionParser::List","classes/OptionParser/List.html#method-i-complete","(id, opt, icase = false, *pat, &block)","<p>Searches list <code>id</code> for <code>opt</code> and the optional\npatterns for completion <code>pat</code>. If <code>icase</code> is true,\nthe search is …\n"],["complete","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-complete","(min_visibility)","<p>Prepares this ClassModule for use by a generator.\n<p>See RDoc::Store#complete\n"],["complete","RDoc::Store","classes/RDoc/Store.html#method-i-complete","(min_visibility)","<p>Prepares the RDoc code object tree for use by a generator.\n<p>It finds unique classes/modules defined, and …\n"],["completer_quote_characters","Readline","classes/Readline.html#method-c-completer_quote_characters","()","<p>Gets a list of characters which can be used to quote a substring of the\nline.\n<p>Raises NotImplementedError …\n"],["completer_quote_characters=","Readline","classes/Readline.html#method-c-completer_quote_characters-3D","(p1)","<p>Sets a list of characters which can be used to quote a substring of the\nline. Completion occurs on the …\n"],["completer_word_break_characters","Readline","classes/Readline.html#method-c-completer_word_break_characters","()","<p>Gets the basic list of characters that signal a break between words for\nrl_complete_internal().\n<p>Raises …\n"],["completer_word_break_characters=","Readline","classes/Readline.html#method-c-completer_word_break_characters-3D","(p1)","<p>Sets the basic list of characters that signal a break between words for\nrl_complete_internal(). The default …\n"],["completion_append_character","Readline","classes/Readline.html#method-c-completion_append_character","()","<p>Returns a string containing a character to be appended on completion. The\ndefault is a space (“ …\n"],["completion_append_character=","Readline","classes/Readline.html#method-c-completion_append_character-3D","(p1)","<p>Specifies a character to be appended on completion. Nothing will be\nappended if an empty string (“”) …\n"],["completion_case_fold","Readline","classes/Readline.html#method-c-completion_case_fold","()","<p>Returns true if completion ignores case. If no, returns false.\n<p>NOTE: Returns the same object that is specified …\n"],["completion_case_fold=","Readline","classes/Readline.html#method-c-completion_case_fold-3D","(p1)","<p>Sets whether or not to ignore case on completion.\n"],["completion_proc","Readline","classes/Readline.html#method-c-completion_proc","()","<p>Returns the completion Proc object.\n"],["completion_proc=","Readline","classes/Readline.html#method-c-completion_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine completion behavior.\nIt should take input string and return …\n"],["completion_quote_character","Readline","classes/Readline.html#method-c-completion_quote_character","()","<p>When called during a completion (e.g. from within your completion_proc), it\nwill return a string containing …\n"],["component","Object","classes/Object.html#method-i-component","(i, j)",""],["component","URI::Generic","classes/URI/Generic.html#method-i-component","()","<p>Components of the URI in the order.\n"],["component","URI::Generic","classes/URI/Generic.html#method-c-component","()","<p>Components of the URI in the order.\n"],["component_ary","URI::Generic","classes/URI/Generic.html#method-i-component_ary","()","<p>Returns an Array of the components defined from the COMPONENT Array.\n"],["compute_key","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-compute_key","(p1)","<p>Returns a String containing a shared secret computed from the other\nparty&#39;s public value. See DH_compute_key …\n"],["concat","Array","classes/Array.html#method-i-concat","(*args)","<p>Appends the elements of <code>other_ary</code>s to <code>self</code>.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot; ].concat( [&quot;c&quot;, &quot;d&quot;])   #=&gt; [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ...\n</code></pre>\n"],["concat","REXML::Functions","classes/REXML/Functions.html#method-c-concat","( *objects )",""],["concat","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-concat","(*jobs)","<p>Returns a Concat object, for the given <code>jobs</code>\n"],["concat","String","classes/String.html#method-i-concat","(*args)","<p>Concatenates the given object(s) to <em>str</em>. If an object is an\n<code>Integer</code>, it is considered a codepoint and …\n"],["concat","StringScanner","classes/StringScanner.html#method-i-concat","(p1)","<p>Appends <code>str</code> to the string being scanned. This method does not\naffect scan pointer.\n\n<pre><code>s = StringScanner.new(&quot;Fri ...</code></pre>\n"],["conf","IRB","classes/IRB.html#method-c-conf","()","<p>Displays current configuration.\n<p>Modifying the configuration is achieved by sending a message to IRB.conf …\n"],["config","Bundler::CLI","classes/Bundler/CLI.html#method-i-config","(*args)",""],["config","DRb","classes/DRb.html#method-c-config","()","<p>Get the configuration of the current server.\n<p>If there is no current server, this returns the default configuration. …\n"],["config_file","Gem","classes/Gem.html#method-c-config_file","()","<p>The path to standard location of the user&#39;s .gemrc file.\n"],["configuration","Gem","classes/Gem.html#method-c-configuration","()","<p>The standard configuration object for gems.\n"],["configuration=","Gem","classes/Gem.html#method-c-configuration-3D","(config)","<p>Use the given configuration object (which implements the ConfigFile\nprotocol) as the standard configuration …\n"],["configure","Bundler","classes/Bundler.html#method-c-configure","()",""],["configure","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-configure","(p1)","<p>Configure this State instance with the Hash <em>opts</em>, and return\nitself.\n"],["configure_gem_version_promoter","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-configure_gem_version_promoter","(definition, options)",""],["configured_bundle_path","Bundler","classes/Bundler.html#method-c-configured_bundle_path","()",""],["confirm","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-confirm","(msg, newline = nil)",""],["confirm","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-confirm","(message, newline = nil)",""],["conflicts","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-conflicts","()","<p>(see Bundler::Molinillo::ResolutionState#conflicts)\n"],["confstr","Etc","classes/Etc.html#method-c-confstr","(p1)","<p>Returns system configuration variable using confstr().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["conj","Complex","classes/Complex.html#method-i-conj","()","<p>Returns the complex conjugate.\n\n<pre><code>Complex(1, 2).conjugate  #=&gt; (1-2i)\n</code></pre>\n"],["conj","Numeric","classes/Numeric.html#method-i-conj","()","<p>Returns self.\n"],["conjugate","Complex","classes/Complex.html#method-i-conjugate","()","<p>Returns the complex conjugate.\n\n<pre><code>Complex(1, 2).conjugate  #=&gt; (1-2i)\n</code></pre>\n"],["conjugate","Numeric","classes/Numeric.html#method-i-conjugate","()","<p>Returns self.\n"],["connect","Addrinfo","classes/Addrinfo.html#method-i-connect","(timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>The optional argument <em>opts</em> is options represented by …\n"],["connect","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-connect","(tcp)","<p>Connect to IO <code>tcp</code>, with context of the current certificate\nconfiguration\n"],["connect","Net::FTP","classes/Net/FTP.html#method-i-connect","(host, port = FTP_PORT)","<p>Establishes an FTP connection to host, optionally overriding the default\nport. If the environment variable …\n"],["connect","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-connect","()","<p>Initiates an SSL/TLS handshake with a server.  The handshake may be started\nafter unencrypted data has …\n"],["connect","Socket","classes/Socket.html#method-i-connect","(p1)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>.\nReturns 0 if successful, otherwise an …\n"],["connect","UDPSocket","classes/UDPSocket.html#method-i-connect","(p1, p2)","<p>Connects <em>udpsocket</em> to <em>host</em>:<em>port</em>.\n<p>This makes possible to send without destination address.\n\n<pre><code>u1 = UDPSocket.new ...\n</code></pre>\n"],["connect","WIN32OLE","classes/WIN32OLE.html#method-c-connect","(p1, *args)","<p>Returns running OLE Automation object or WIN32OLE object from moniker. 1st\nargument should be OLE program …\n"],["connect_address","BasicSocket","classes/BasicSocket.html#method-i-connect_address","()","<p>Returns an address of the socket suitable for connect in the local machine.\n<p>This method returns <em>self</em>.local_address, …\n"],["connect_from","Addrinfo","classes/Addrinfo.html#method-i-connect_from","(*args, timeout: nil, &block)","<p>creates a socket connected to the address of self.\n<p>If one or more arguments given as <em>local_addr_args</em>, …\n"],["connect_internal","Addrinfo","classes/Addrinfo.html#method-i-connect_internal","(local_addrinfo, timeout=nil)","<p>creates a new Socket connected to the address of\n<code>local_addrinfo</code>.\n<p>If <em>local_addrinfo</em> is nil, the address …\n"],["connect_nonblock","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-connect_nonblock","(p1 = {})","<p>Initiates the SSL/TLS handshake as a client in non-blocking manner.\n\n<pre><code># emulates blocking connect\nbegin ...</code></pre>\n"],["connect_nonblock","Socket","classes/Socket.html#method-i-connect_nonblock","(addr, exception: true)","<p>Requests a connection to be made on the given <code>remote_sockaddr</code>\nafter O_NONBLOCK is set for the underlying …\n"],["connect_to","Addrinfo","classes/Addrinfo.html#method-i-connect_to","(*args, timeout: nil, &block)","<p>creates a socket connected to <em>remote_addr_args</em> and bound to self.\n<p>The optional last argument <em>opts</em> is options …\n"],["connection_close?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-connection_close-3F","(header)","<p>Workaround for missing Net::HTTPHeader#connection_close? on Ruby 1.8\n"],["connection_for","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-connection_for","(uri)","<p>Creates a new connection for <code>uri</code>\n"],["connection_for","Bundler::PersistentHTTP","classes/Bundler/PersistentHTTP.html#method-i-connection_for","(uri)",""],["connection_keep_alive?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-connection_keep_alive-3F","(header)","<p>Workaround for missing Net::HTTPHeader#connection_keep_alive? on Ruby 1.8\n"],["console","Bundler::CLI","classes/Bundler/CLI.html#method-i-console","(group = nil)",""],["console","IO","classes/IO.html#method-c-console","(*args)","<p>Returns an File instance opened console.\n<p>If <code>sym</code> is given, it will be sent to the opened console with  …\n"],["const_defined?","Module","classes/Module.html#method-i-const_defined-3F","(*args)","<p>Says whether <em>mod</em> or its ancestors have a constant with the given\nname:\n\n<pre><code>Float.const_defined?(:EPSILON) ...\n</code></pre>\n"],["const_get","Module","classes/Module.html#method-i-const_get","(*args)","<p>Checks for a constant with the given name in <em>mod</em>. If\n<code>inherit</code> is set, the lookup will also search the …\n"],["const_get_safely","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-const_get_safely","(constant_name, namespace)",""],["const_load","WIN32OLE","classes/WIN32OLE.html#method-c-const_load","(p1, p2 = v2)","<p>Defines the constants of OLE Automation server as mod&#39;s constants. The\nfirst argument is WIN32OLE …\n"],["const_missing","Module","classes/Module.html#method-i-const_missing","(p1)","<p>Invoked when a reference is made to an undefined constant in <em>mod</em>.\nIt is passed a symbol for the undefined …\n"],["const_set","Module","classes/Module.html#method-i-const_set","(p1, p2)","<p>Sets the named constant to the given object, returning that object. Creates\na new constant if no constant …\n"],["constants","Module","classes/Module.html#method-c-constants","(*args)","<p>In the first form, returns an array of the names of all constants\naccessible from the point of call. …\n"],["constants","Module","classes/Module.html#method-i-constants","(*args)","<p>Returns an array of the names of the constants accessible in <em>mod</em>.\nThis includes the names of constants …\n"],["construct","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-construct","(hour, minute, second)",""],["consume","REXML::IOSource","classes/REXML/IOSource.html#method-i-consume","( pattern )",""],["consume","REXML::Source","classes/REXML/Source.html#method-i-consume","( pattern )",""],["contains","REXML::Functions","classes/REXML/Functions.html#method-c-contains","( string, test )","<p>Fixed by Mike Stok\n"],["contains?","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-contains-3F","(commit)",""],["content=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-content-3D","(value)",""],["content=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-content-3D","(content)",""],["content_encoding","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-content_encoding","()","<p>Returns a list of encodings in Content-Encoding field as an array of\nstrings.\n<p>The encodings are downcased …\n"],["content_length","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-content_length","()","<p>The content-length header\n"],["content_length","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_length","()","<p>The content-length header\n"],["content_length=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_length-3D","(len)","<p>Sets the content-length header to <code>len</code>\n"],["content_setup","RSS::Element","classes/RSS/Element.html#method-c-content_setup","(type=nil, disp_name=nil)",""],["content_type","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-content_type","()","<p>returns “type/subtype” which is MIME Content-Type. It is downcased for\ncanonicalization. Content-Type …\n"],["content_type","RSS::Atom::ContentModel::ClassMethods","classes/RSS/Atom/ContentModel/ClassMethods.html#method-i-content_type","()",""],["content_type","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-content_type","()","<p>The content-type header\n"],["content_type","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_type","()","<p>The content-type header\n"],["content_type=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-content_type-3D","(type)","<p>Sets the content-type header to <code>type</code>\n"],["contents","Bundler::Dsl::DSLError","classes/Bundler/Dsl/DSLError.html#method-i-contents","()","<p>@return [String] the contents of the DSL that cause the exception to\n\n<pre><code>be raised.</code></pre>\n"],["context","DEBUGGER__","classes/DEBUGGER__.html#method-c-context","(thread=Thread.current)",""],["context","REXML::DocType","classes/REXML/DocType.html#method-i-context","()",""],["context","REXML::ParseException","classes/REXML/ParseException.html#method-i-context","()",""],["context=","REXML::Functions","classes/REXML/Functions.html#method-c-context-3D","(value)",""],["continue?","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-continue-3F","()","<p>Determines whether the response received was a Positive Intermediate reply\n(3xx reply code)\n"],["continue_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-continue_timeout-3D","(sec)","<p>Setter for the continue_timeout attribute.\n"],["convert","CSV","classes/CSV.html#method-i-convert","(name = nil, &converter)","<p>You can use this method to install a CSV::Converters built-in, or provide a\nblock that handles a custom …\n"],["convert","CSV::FieldsConverter","classes/CSV/FieldsConverter.html#method-i-convert","(fields, headers, lineno)",""],["convert","Encoding::Converter","classes/Encoding/Converter.html#method-i-convert","(p1)","<p>Convert source_string and return destination_string.\n<p>source_string is assumed as a part of source. i.e. …\n"],["convert","OptionParser::Completion","classes/OptionParser/Completion.html#method-i-convert","(opt = nil, val = nil, *)",""],["convert","RDoc::Markup","classes/RDoc/Markup.html#method-i-convert","(input, formatter)","<p>We take <code>input</code>, parse it if necessary, then invoke the output\n<code>formatter</code> using a Visitor to render the …\n"],["convert","RSS::Converter","classes/RSS/Converter.html#method-i-convert","(value)",""],["convert","RSS::Element","classes/RSS/Element.html#method-i-convert","(value)",""],["convert","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-c-convert","(version)","<p>Converts <code>version</code> into an HTTPVersion\n"],["convert_to_backward_compatible_key","Bundler::YAMLSerializer","classes/Bundler/YAMLSerializer.html#method-i-convert_to_backward_compatible_key","(key)","<p>for settings&#39; keys\n"],["converter=","RSS::Element","classes/RSS/Element.html#method-i-converter-3D","(converter)",""],["converters","CSV","classes/CSV.html#method-i-converters","()","<p>Returns the current list of converters in effect.  See CSV::new for\ndetails. Built-in converters will …\n"],["convertible_int","MakeMakefile","classes/MakeMakefile.html#method-i-convertible_int","(type, headers = nil, opts = nil, &b)","<p>Returns the convertible integer type of the given <code>type</code>.  You\nmay optionally specify additional <code>headers</code> …\n"],["convpath","Encoding::Converter","classes/Encoding/Converter.html#method-i-convpath","()","<p>Returns the conversion path of ec.\n<p>The result is an array of conversions.\n\n<pre><code>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</code></pre>\n"],["cooked","IO","classes/IO.html#method-i-cooked","()","<p>Yields <code>self</code> within cooked mode.\n\n<pre><code>STDIN.cooked(&amp;:gets)\n</code></pre>\n<p>will read and return a line with echo back and line …\n"],["cooked!","IO","classes/IO.html#method-i-cooked-21","()","<p>Enables cooked mode.\n<p>If the terminal mode needs to be back, use io.cooked { … }.\n<p>You must require &#39;io/console&#39; …\n"],["copy","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","FileUtils","classes/FileUtils.html#method-c-copy","(src, dest, preserve: nil, noop: nil, verbose: nil)",""],["copy","Net::HTTP","classes/Net/HTTP.html#method-i-copy","(path, initheader = nil)","<p>Sends a COPY request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["copy","Net::IMAP","classes/Net/IMAP.html#method-i-copy","(set, mailbox)","<p>Sends a COPY command to copy the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["copy","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-copy","(p1)",""],["copy_entry","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Copies a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method copies its contents\nrecursively. …\n"],["copy_entry","FileUtils","classes/FileUtils.html#method-c-copy_entry","(src, dest, preserve = false, dereference_root = false, remove_destination = false)","<p>Copies a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method copies its contents\nrecursively. …\n"],["copy_file","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file contents of <code>src</code> to <code>dest</code>. Both of\n<code>src</code> and <code>dest</code> must be a path name.\n"],["copy_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-copy_file","(source, *args, &block)","<p>Examples\n\n<pre><code>copy_file &quot;README&quot;, &quot;doc/README&quot;\n\ncopy_file &quot;doc/README&quot;\n</code></pre>\n"],["copy_file","FileUtils","classes/FileUtils.html#method-c-copy_file","(src, dest, preserve = false, dereference = true)","<p>Copies file contents of <code>src</code> to <code>dest</code>. Both of\n<code>src</code> and <code>dest</code> must be a path name.\n"],["copy_nonce","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-copy_nonce","(p1)","<p>Copies the nonce from <em>request</em> into this response.  Returns 1 on\nsuccess and 0 on failure.\n"],["copy_stream","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies stream <code>src</code> to <code>dest</code>. <code>src</code> must\nrespond to #read(n) and <code>dest</code> must respond to #write(str).\n"],["copy_stream","FileUtils","classes/FileUtils.html#method-c-copy_stream","(src, dest)","<p>Copies stream <code>src</code> to <code>dest</code>. <code>src</code> must\nrespond to #read(n) and <code>dest</code> must respond to #write(str).\n"],["copy_stream","IO","classes/IO.html#method-c-copy_stream","(p1, p2, p3 = v3, p4 = v4)","<p>IO.copy_stream copies <em>src</em> to <em>dst</em>. <em>src</em> and\n<em>dst</em> is either a filename or an IO-like object. IO-like object …\n"],["copy_to","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-copy_to","(destination, submodules = false)",""],["coredump?","Process::Status","classes/Process/Status.html#method-i-coredump-3F","()","<p>Returns <code>true</code> if <em>stat</em> generated a coredump when it\nterminated. Not available on all platforms.\n"],["cos","BigMath","classes/BigMath.html#method-i-cos","(x, prec)","<p>Computes the cosine of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n<p>If <code>decimal</code> is …\n"],["cos","CMath","classes/CMath.html#method-c-cos","(z)","<p>Returns the cosine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre><code>CMath.cos(1 + 1i) #=&gt; (0.8337300251311491-0.9888977057628651i)\n</code></pre>\n"],["cos","Math","classes/Math.html#method-c-cos","(p1)","<p>Computes the cosine of <code>x</code> (expressed in radians). Returns a\nFloat in the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["cosh","CMath","classes/CMath.html#method-c-cosh","(z)","<p>Returns the hyperbolic cosine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre><code>CMath.cosh(1 + 1i) #=&gt; (0.8337300251311491+0.9888977057628651i)\n</code></pre>\n"],["cosh","Math","classes/Math.html#method-c-cosh","(p1)","<p>Computes the hyperbolic cosine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: [1, …\n"],["count","Array","classes/Array.html#method-i-count","(*args)","<p>Returns the number of elements.\n<p>If an argument is given, counts the number of elements which equal\n<code>obj</code> …\n"],["count","Enumerable","classes/Enumerable.html#method-i-count","(p1)","<p>Returns the number of items in <code>enum</code> through enumeration. If an\nargument is given, the number of items …\n"],["count","GC","classes/GC.html#method-c-count","()","<p>The number of times GC occurred.\n<p>It returns the number of times GC occurred since the process started. …\n"],["count","REXML::Functions","classes/REXML/Functions.html#method-c-count","( node_set )","<p>Returns the size of the given list of nodes.\n"],["count","String","classes/String.html#method-i-count","(*args)","<p>Each <code>other_str</code> parameter defines a set of characters to count.\nThe intersection of these sets defines …\n"],["count_imemo_objects","ObjectSpace","classes/ObjectSpace.html#method-c-count_imemo_objects","(*args)","<p>Counts objects for each <code>T_IMEMO</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_nodes","ObjectSpace","classes/ObjectSpace.html#method-c-count_nodes","(*args)","<p>Counts nodes for each node type.\n<p>This method is only for MRI developers interested in performance and …\n"],["count_objects","ObjectSpace","classes/ObjectSpace.html#method-c-count_objects","(*args)","<p>Counts all objects grouped by type.\n<p>It returns a hash, such as:\n\n<pre><code>{\n  :TOTAL=&gt;10000,\n  :FREE=&gt;3011,\n  :T_OBJECT=&gt;6, ...</code></pre>\n"],["count_objects_size","ObjectSpace","classes/ObjectSpace.html#method-c-count_objects_size","(*args)","<p>Counts objects size (in bytes) for each type.\n<p>Note that this information is incomplete.  You need to deal …\n"],["count_observers","Observable","classes/Observable.html#method-i-count_observers","()","<p>Return the number of observers associated with this object.\n"],["count_symbols","ObjectSpace","classes/ObjectSpace.html#method-c-count_symbols","(*args)","<p>Counts symbols for each Symbol type.\n<p>This method is only for MRI developers interested in performance …\n"],["count_tdata_objects","ObjectSpace","classes/ObjectSpace.html#method-c-count_tdata_objects","(*args)","<p>Counts objects for each <code>T_DATA</code> type.\n<p>This method is only for MRI developers interested in performance …\n"],["cover?","Bundler::VersionRanges::ReqR","classes/Bundler/VersionRanges/ReqR.html#method-i-cover-3F","(v)",""],["cover?","Range","classes/Range.html#method-i-cover-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is between the begin and end\nof the range.\n<p>This tests <code>begin &lt;= obj &lt;= end</code> when …\n"],["coverage_level=","RDoc::Stats","classes/RDoc/Stats.html#method-i-coverage_level-3D","(level)","<p>Sets coverage report level.  Accepted values are:\n<p>false or nil &mdash; No report\n<p>0 &mdash; Classes, modules, constants, …\n"],["cp","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file content <code>src</code> to <code>dest</code>.  If\n<code>dest</code> is a directory, copies <code>src</code> to\n<code>dest/src</code>.\n<p>If <code>src</code> is a list of …\n"],["cp","FileUtils","classes/FileUtils.html#method-c-cp","(src, dest, preserve: nil, noop: nil, verbose: nil)","<p>Copies a file content <code>src</code> to <code>dest</code>.  If\n<code>dest</code> is a directory, copies <code>src</code> to\n<code>dest/src</code>.\n<p>If <code>src</code> is a list of …\n"],["cp_lr","FileUtils","classes/FileUtils.html#method-c-cp_lr","(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)","<p>Hard link <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, this method links all its contents recursively. If\n<code>dest</code> …\n"],["cp_r","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Copies <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, this method copies all its contents recursively. If\n<code>dest</code> is …\n"],["cp_r","FileUtils","classes/FileUtils.html#method-c-cp_r","(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)","<p>Copies <code>src</code> to <code>dest</code>. If <code>src</code> is a\ndirectory, this method copies all its contents recursively. If\n<code>dest</code> is …\n"],["cpu_match","Bundler::GemHelpers::PlatformMatch","classes/Bundler/GemHelpers/PlatformMatch.html#method-c-cpu_match","(spec_platform, user_platform)",""],["cram_md5_challenge","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-cram_md5_challenge","()","<p>Creates a CRAM-MD5 challenge. You can view more information on CRAM-MD5 on\nWikipedia: en.wikipedia.org/wiki/CRAM-MD5 …\n"],["crc","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-crc","()","<p>Returns CRC value of the uncompressed data.\n"],["crc32","Zlib","classes/Zlib.html#method-c-crc32","(*args)","<p>Calculates CRC checksum for <code>string</code>, and returns updated value\nof <code>crc</code>. If <code>string</code> is omitted, it returns …\n"],["crc32_combine","Zlib","classes/Zlib.html#method-c-crc32_combine","(p1, p2, p3)","<p>Combine two CRC-32 check values in to one.  <code>crc1</code> is the first\nCRC-32 value, <code>crc2</code> is the second CRC-32 …\n"],["crc_table","Zlib","classes/Zlib.html#method-c-crc_table","()","<p>Returns the table for calculating CRC checksum as an array.\n"],["creatable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-creatable-3F","()","<p>Returns <code>true</code> if files may be created in the directory by STOU,\nSTOR, APPE, and RNTO.\n"],["create","Fiddle::CStructBuilder","classes/Fiddle/CStructBuilder.html#method-c-create","(klass, types, members)","<p>Construct a new class given a C:\n<p>class <code>klass</code> (CUnion, CStruct, or other that provide an\n#entity_class …\n"],["create","Net::IMAP","classes/Net/IMAP.html#method-i-create","(mailbox)","<p>Sends a CREATE command to create a new <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["create","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-c-create","(p1, p2)","<p>Creates an OpenSSL::OCSP::Response from <em>status</em> and\n<em>basic_response</em>.\n"],["create","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-c-create","(p1, p2, p3, p4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9, p10 = v10)","<p>Parameters\n<p><em>pass</em> - string\n<p><em>name</em> - A string describing the key.\n"],["create","Psych::Visitors::JSONTree","classes/Psych/Visitors/JSONTree.html#method-c-create","(options = {})",""],["create","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-c-create","()",""],["create","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-c-create","(options = {})",""],["create","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-c-create","(arg)","<p>Creates a new DNS name from <code>arg</code>.  <code>arg</code> can be:\n<p>Name &mdash; returns <code>arg</code>.\n<p>String &mdash; Creates a new Name.\n"],["create","Resolv::IPv4","classes/Resolv/IPv4.html#method-c-create","(arg)",""],["create","Resolv::IPv6","classes/Resolv/IPv6.html#method-c-create","(arg)","<p>Creates a new IPv6 address from <code>arg</code> which may be:\n<p>IPv6 &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match one of the IPv6::Regex* …\n"],["create","Resolv::LOC::Alt","classes/Resolv/LOC/Alt.html#method-c-create","(arg)","<p>Creates a new LOC::Alt from <code>arg</code> which may be:\n<p>LOC::Alt &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Alt::Regex …\n"],["create","Resolv::LOC::Coord","classes/Resolv/LOC/Coord.html#method-c-create","(arg)","<p>Creates a new LOC::Coord from <code>arg</code> which may be:\n<p>LOC::Coord &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Coord::Regex …\n"],["create","Resolv::LOC::Size","classes/Resolv/LOC/Size.html#method-c-create","(arg)","<p>Creates a new LOC::Size from <code>arg</code> which may be:\n<p>LOC::Size &mdash; returns <code>arg</code>.\n<p>String &mdash; <code>arg</code> must match the LOC::Size::Regex …\n"],["create","Tempfile","classes/Tempfile.html#method-c-create","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a temporary file as usual File object (not Tempfile). It\ndoesn&#39;t use finalizer and delegation. …\n"],["create_ext","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext","(p1, p2, p3 = v3)","<p>Creates a new X509::Extension with passed values. See also\nx509v3_config(5).\n"],["create_ext_from_array","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_array","(ary)",""],["create_ext_from_hash","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_hash","(hash)",""],["create_ext_from_string","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_ext_from_string","(str)",""],["create_extension","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-create_extension","(*arg)",""],["create_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-create_file","(destination, *args, &block)","<p>Create a new file relative to the destination root with the given data,\nwhich is the return value of …\n"],["create_from","REXML::SourceFactory","classes/REXML/SourceFactory.html#method-c-create_from","(arg)","<p>Generates a Source object @param arg Either a String, or an IO @return a\nSource, or nil if a bad argument …\n"],["create_guid","WIN32OLE","classes/WIN32OLE.html#method-c-create_guid","()","<p>Creates GUID.\n\n<pre><code>WIN32OLE.create_guid # =&gt; {1CB530F1-F6B1-404D-BCE6-1959BF91F4A8}\n</code></pre>\n"],["create_header","MakeMakefile","classes/MakeMakefile.html#method-i-create_header","(header = \"extconf.h\")","<p>Generates a header file consisting of the various macro definitions\ngenerated by other methods such as …\n"],["create_link","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-create_link","(destination, *args)","<p>Create a new file relative to the destination root from the given source.\n<p>Parameters\n<p>destination&lt;String&gt; … &mdash; "],["create_listeners","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-create_listeners","(address, port)","<p>Creates TCP server sockets bound to <code>address</code>:<code>port</code>\nand returns them.\n<p>It will create IPV4 and IPV6 sockets …\n"],["create_makefile","MakeMakefile","classes/MakeMakefile.html#method-i-create_makefile","(target, srcprefix = nil)","<p>Generates the Makefile for your extension, passing along any options and\npreprocessor constants that …\n"],["create_request","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-create_request","(with_webrick_config)","<p>Creates the HTTPRequest used when handling the HTTP request. Can be\noverridden by subclasses.\n"],["create_response","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-create_response","(with_webrick_config)","<p>Creates the HTTPResponse used when handling the HTTP request. Can be\noverridden by subclasses.\n"],["create_self_signed_cert","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-create_self_signed_cert","(bits, cn, comment)","<p>Creates a self-signed certificate with the given number of\n<code>bits</code>, the issuer <code>cn</code> and a <code>comment</code> to\nbe stored …\n"],["create_ssl_params","Net::POP3","classes/Net/POP3.html#method-c-create_ssl_params","(verify_or_params = {}, certs = nil)","<p>Constructs proper parameters from arguments\n"],["create_value","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-create_value","(ty, val=nil)","<p>Creates a class to wrap the C struct with the value <code>ty</code>\n<p>See also Fiddle::Importer.struct\n"],["credential_filtered_string","Bundler::URICredentialsFilter","classes/Bundler/URICredentialsFilter.html#method-i-credential_filtered_string","(str_to_filter, uri)",""],["credential_filtered_uri","Bundler::URICredentialsFilter","classes/Bundler/URICredentialsFilter.html#method-i-credential_filtered_uri","(uri_to_anonymize)",""],["credentials_for","Bundler::Settings","classes/Bundler/Settings.html#method-i-credentials_for","(uri)",""],["critical=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-critical-3D","(p1)",""],["critical?","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-critical-3F","()",""],["crl=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-crl-3D","(p1)",""],["crls","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-crls","()",""],["crls=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-crls-3D","(p1)",""],["crypt","String","classes/String.html#method-i-crypt","(p1)","<p>Returns the string generated by calling <code>crypt(3)</code> standard\nlibrary function with <code>str</code> and <code>salt_str</code>, in …\n"],["css","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-css","","<p>Allow style blocks\n"],["ctime","Date","classes/Date.html#method-i-ctime","()","<p>Returns a string in asctime(3) format (but without “n0” at the end).  This\nmethod is equivalent …\n"],["ctime","File","classes/File.html#method-c-ctime","(p1)","<p>Returns the change time for the named file (the time at which directory\ninformation about the file was …\n"],["ctime","File","classes/File.html#method-i-ctime","()","<p>Returns the change time for <em>file</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","File::Stat","classes/File/Stat.html#method-i-ctime","()","<p>Returns the change time for <em>stat</em> (that is, the time directory\ninformation about the file was changed, …\n"],["ctime","Pathname","classes/Pathname.html#method-i-ctime","()","<p>Returns the last change time, using directory information, not the file\nitself.\n<p>See File.ctime.\n"],["ctime","Time","classes/Time.html#method-i-ctime","()","<p>Returns a canonical string representation of <em>time</em>.\n\n<pre><code>Time.now.asctime   #=&gt; &quot;Wed Apr  9 08:56:03 2003&quot;\nTime.now.ctime ...\n</code></pre>\n"],["ctrl_cmd","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-ctrl_cmd","(p1, p2 = v2)","<p>Sends the given <em>command</em> to this engine.\n<p>Raises an EngineError if the command fails.\n"],["current","Fiber","classes/Fiber.html#method-c-current","()","<p>Returns the current fiber. You need to <code>require &#39;fiber&#39;</code>\nbefore using this method. If you are not …\n"],["current","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current","()","<p>Active RDoc::RDoc instance\n"],["current","Thread","classes/Thread.html#method-c-current","()","<p>Returns the currently executing thread.\n\n<pre><code>Thread.current   #=&gt; #&lt;Thread:0x401bdf4c run&gt;\n</code></pre>\n"],["current=","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-current-3D","(rdoc)","<p>Sets the active RDoc::RDoc instance\n"],["current_cert","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-current_cert","()",""],["current_command_chain","Bundler::Thor::Invocation","classes/Bundler/Thor/Invocation.html#method-i-current_command_chain","()","<p>Make the current command chain accessible with in a\nBundler::Thor-(sub)command\n"],["current_crl","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-current_crl","()",""],["current_dependencies","Bundler::Definition","classes/Bundler/Definition.html#method-i-current_dependencies","()",""],["current_dependencies","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-i-current_dependencies","()",""],["current_env?","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-current_env-3F","()",""],["current_group","PrettyPrint","classes/PrettyPrint.html#method-i-current_group","()","<p>Returns the group most recently added to the stack.\n<p>Contrived example:\n\n<pre><code>out = &quot;&quot;\n=&gt; &quot;&quot;\nq = PrettyPrint.new(out) ...</code></pre>\n"],["current_line","REXML::IOSource","classes/REXML/IOSource.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_line","REXML::Source","classes/REXML/Source.html#method-i-current_line","()","<p>@return the current line in the source\n"],["current_platform?","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-current_platform-3F","()",""],["current_ruby","Bundler","classes/Bundler.html#method-c-current_ruby","()","<p>Returns current version of Ruby\n<p>@return [CurrentRuby] Current version of Ruby\n"],["current_section","RDoc::Context","classes/RDoc/Context.html#method-i-current_section","()","<p>The current documentation section that new items will be added to.  If\ntemporary_section is available …\n"],["current_server","DRb","classes/DRb.html#method-c-current_server","()","<p>Get the &#39;current&#39; server.\n<p>In the context of execution taking place within the main thread of a …\n"],["curry","Method","classes/Method.html#method-i-curry","(*args)","<p>Returns a curried proc based on the method. When the proc is called with a\nnumber of arguments that is …\n"],["curry","Proc","classes/Proc.html#method-i-curry","(*args)","<p>Returns a curried proc. If the optional <em>arity</em> argument is given,\nit determines the number of arguments. …\n"],["cursor","IO","classes/IO.html#method-i-cursor","()",""],["cursor=","IO","classes/IO.html#method-i-cursor-3D","(p1)",""],["curve_name","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-curve_name","()","<p>Returns the curve name (sn).\n<p>See the OpenSSL documentation for EC_GROUP_get_curve_name()\n"],["cwday","Date","classes/Date.html#method-i-cwday","()","<p>Returns the day of calendar week (1-7, Monday is 1).\n\n<pre><code>Date.new(2001,2,3).cwday          #=&gt; 6\n</code></pre>\n"],["cweek","Date","classes/Date.html#method-i-cweek","()","<p>Returns the calendar week number (1-53).\n\n<pre><code>Date.new(2001,2,3).cweek          #=&gt; 5\n</code></pre>\n"],["cwyear","Date","classes/Date.html#method-i-cwyear","()","<p>Returns the calendar week based year.\n\n<pre><code>Date.new(2001,2,3).cwyear         #=&gt; 2001\nDate.new(2000,1,1).cwyear ...\n</code></pre>\n"],["cycle","Array","classes/Array.html#method-i-cycle","(*args)","<p>Calls the given block for each element <code>n</code> times or forever if\n<code>nil</code> is given.\n<p>Does nothing if a non-positive …\n"],["cycle","Enumerable","classes/Enumerable.html#method-i-cycle","(*args)","<p>Calls <em>block</em> for each element of <em>enum</em> repeatedly\n<em>n</em> times or forever if none or <code>nil</code> is given.  If a\nnon-positive …\n"],["d","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-d","()",""],["daemon","Process","classes/Process.html#method-c-daemon","(*args)","<p>Detach the process from controlling terminal and run in the background as\nsystem daemon.  Unless the …\n"],["data","Net::SMTP","classes/Net/SMTP.html#method-i-data","(msgstr = nil)","<p>This method sends a message. If <code>msgstr</code> is given, sends it as a\nmessage. If block is given, yield a message …\n"],["data","Resolv::DNS::Resource::TXT","classes/Resolv/DNS/Resource/TXT.html#method-i-data","()","<p>Returns the concatenated string from <code>strings</code>.\n"],["data","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-data","()","<p>returns the cmsg data as a string.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).data\n#=&gt; &quot;&quot;\n</code></pre>\n"],["data","Socket::Option","classes/Socket/Option.html#method-i-data","()","<p>returns the socket option data as a string.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...\n</code></pre>\n"],["data=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-data-3D","(p1)",""],["data_type","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-data_type","()","<p>Guesses the type of the data which have been inputed into the stream. The\nreturned value is either <code>BINARY</code> …\n"],["datadir","Gem","classes/Gem.html#method-c-datadir","(gem_name)","<p>The path to the data directory specified by the gem name.  If the package\nis not available as a gem, …\n"],["date=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-date-3D","(_date)",""],["date=","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-date-3D","(_date)",""],["date=","RSS::Maker::ItemsBase::ItemBase::SourceBase","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-date-3D","(_date)",""],["datetime_format","Logger","classes/Logger.html#method-i-datetime_format","()","<p>Returns the date format being used.  See #datetime_format=\n"],["datetime_format=","Logger","classes/Logger.html#method-i-datetime_format-3D","(datetime_format)","<p>Set date-time format.\n<p><code>datetime_format</code> &mdash; A string suitable for passing to <code>strftime</code>.\n\n"],["day","Date","classes/Date.html#method-i-day","()","<p>Returns the day of the month (1-31).\n\n<pre><code>Date.new(2001,2,3).mday           #=&gt; 3\n</code></pre>\n"],["day","Time","classes/Time.html#method-i-day","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...\n</code></pre>\n"],["day_fraction","Date","classes/Date.html#method-i-day_fraction","()","<p>Returns the fractional part of the day.\n\n<pre><code>DateTime.new(2001,2,3,12).day_fraction    #=&gt; (1/2)\n</code></pre>\n"],["dclone","Array","classes/Array.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object+ types\n"],["dclone","Float","classes/Float.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Integer","classes/Integer.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Object","classes/Object.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["dclone","Symbol","classes/Symbol.html#method-i-dclone","()","<p>provides a unified <code>clone</code> operation, for REXML::XPathParser to\nuse across multiple Object types\n"],["deafen","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-deafen","( listener=nil, &blok )",""],["debug","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-c-debug","()",""],["debug","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-debug","(depth = 0)","<p>Conveys debug information to the user.\n<p>@param [Integer] depth the current depth of the resolution process. …\n"],["debug","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-debug","(msg, newline = nil)",""],["debug","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-debug","(message, newline = nil)",""],["debug","Logger","classes/Logger.html#method-i-debug","(progname = nil, &block)","<p>Log a <code>DEBUG</code> message.\n<p>See #info for more information.\n"],["debug","Net::IMAP","classes/Net/IMAP.html#method-c-debug","()","<p>Returns the debug mode.\n"],["debug","OpenSSL","classes/OpenSSL.html#method-c-debug","()",""],["debug","Syslog::Logger","classes/Syslog/Logger.html#method-i-debug","","<p>Logs a <code>message</code> at the debug (syslog debug) log level, or logs\nthe message returned from the block.\n"],["debug","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-debug","(msg)","<p>Shortcut for logging a DEBUG message\n"],["debug=","Net::IMAP","classes/Net/IMAP.html#method-c-debug-3D","(val)","<p>Sets the debug mode.\n"],["debug=","OpenSSL","classes/OpenSSL.html#method-c-debug-3D","(p1)","<p>Turns on or off debug mode. With debug mode, all erros added to the OpenSSL\nerror queue will be printed …\n"],["debug=","Shell","classes/Shell.html#method-i-debug-3D","(val)",""],["debug=","Shell","classes/Shell.html#method-c-debug-3D","(val)",""],["debug?","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-debug-3F","()","<p>Whether or not debug messages should be printed. By default, whether or not\nthe `MOLINILLO_DEBUG` environment …\n"],["debug?","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-debug-3F","()",""],["debug?","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-debug-3F","()",""],["debug?","IRB::Context","classes/IRB/Context.html#method-i-debug-3F","()","<p>Whether or not debug mode is enabled, see #debug_level=.\n"],["debug?","Logger","classes/Logger.html#method-i-debug-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>DEBUG</code> messages.\n"],["debug?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-debug-3F","()","<p>Will the logger output DEBUG messages?\n"],["debug_level=","IRB::Context","classes/IRB/Context.html#method-i-debug_level-3D","(value)","<p>Sets the debug level of irb\n<p>Can also be set using the <code>--irb_debug</code> command line option.\n<p>See IRB@Command+line+options …\n"],["debug_output=","Net::SMTP","classes/Net/SMTP.html#method-i-debug_output-3D","(arg)","<p>WARNING: This method causes serious security holes. Use this method for\nonly debugging.\n<p>Set an output …\n"],["debug_thread_info","DEBUGGER__","classes/DEBUGGER__.html#method-c-debug_thread_info","(input, binding)",""],["decode","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-decode","(p1)","<p>Decodes a BER- or DER-encoded value and creates an ASN1Data instance.\n<em>der</em> may be a String or any object …\n"],["decode","REXML::Encoding","classes/REXML/Encoding.html#method-i-decode","(string)",""],["decode","URI::Escape","classes/URI/Escape.html#method-i-decode","(*arg)",""],["decode64","Base64","classes/Base64.html#method-i-decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 2045. Characters outside the …\n"],["decode_all","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-decode_all","(p1)","<p>Similar to #decode with the difference that #decode expects one distinct\nvalue represented in <em>der</em>. #decode_all …\n"],["decode_utf7","Net::IMAP","classes/Net/IMAP.html#method-c-decode_utf7","(s)","<p>Decode a string from modified UTF-7 format to UTF-8.\n<p>UTF-7 is a 7-bit encoding of Unicode [UTF7].  IMAP …\n"],["decode_www_form","URI","classes/URI.html#method-c-decode_www_form","(str, enc=Encoding::UTF_8, separator: '&', use__charset_: false, isindex: false)","<p>Decodes URL-encoded form data from given <code>str</code>.\n<p>This decodes application/x-www-form-urlencoded data and …\n"],["decode_www_form_component","URI","classes/URI.html#method-c-decode_www_form_component","(str, enc=Encoding::UTF_8)","<p>Decodes given <code>str</code> of URL-encoded form data.\n<p>This decodes + to SP.\n<p>See URI.encode_www_form_component, URI.decode_www_form …\n"],["decrypt","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-decrypt","(*args)","<p>Initializes the Cipher for decryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["decrypt","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-decrypt","(p1, p2 = v2, p3 = v3)",""],["dedent_string","Ripper","classes/Ripper.html#method-c-dedent_string","(p1, p2)","<p>USE OF RIPPER LIBRARY ONLY.\n<p>Strips up to <code>width</code> leading whitespaces from\n<code>input</code>, and returns the stripped …\n"],["deep_clone","REXML::Parent","classes/REXML/Parent.html#method-i-deep_clone","()","<p>Deeply clones this object.  This creates a complete duplicate of this\nParent, including all descendants. …\n"],["def_array_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_array_element","(name, plural=nil, klass_name=nil)",""],["def_atom_persons","RSS::Maker::AtomPersons","classes/RSS/Maker/AtomPersons.html#method-i-def_atom_persons","(klass, name, maker_name, plural=nil)",""],["def_atom_text_construct","RSS::Maker::AtomTextConstruct","classes/RSS/Maker/AtomTextConstruct.html#method-c-def_atom_text_construct","(klass, name, maker_name, klass_name=nil, atom_klass_name=nil)",""],["def_class","ERB","classes/ERB.html#method-i-def_class","(superklass=Object, methodname='result')","<p>Define unnamed class which has <em>methodname</em> as instance method, and\nreturn it.\n<p>example:\n\n<pre><code>class MyClass_\n  ...</code></pre>\n"],["def_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_class_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_class_accessor","(klass, name, type, *args)",""],["def_classed_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_classed_element","(name, class_name=nil, attribute_name=nil)",""],["def_classed_element_without_accessor","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_classed_element_without_accessor","(name, class_name=nil)",""],["def_classed_elements","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_classed_elements","(name, attribute, plural_class_name=nil, plural_name=nil, new_name=nil)",""],["def_convert","RSS::Converter","classes/RSS/Converter.html#method-i-def_convert","(depth=0)",""],["def_corresponded_attr_reader","RSS::Element","classes/RSS/Element.html#method-c-def_corresponded_attr_reader","(name, type=nil)",""],["def_corresponded_attr_writer","RSS::Element","classes/RSS/Element.html#method-c-def_corresponded_attr_writer","(name, type=nil, disp_name=nil)",""],["def_csv_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_csv_accessor","(klass, full_name)",""],["def_csv_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_csv_element","(name, type=nil)",""],["def_delegator","Forwardable","classes/Forwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegator","SingleForwardable","classes/SingleForwardable.html#method-i-def_delegator","(accessor, method, ali = method)",""],["def_delegators","Forwardable","classes/Forwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_delegators","SingleForwardable","classes/SingleForwardable.html#method-i-def_delegators","(accessor, *methods)",""],["def_e2message","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_e2message","(c, m)","<p>def_e2message(c, m)\n\n<pre><code>    c:  exception\n    m:  message_form\ndefine exception c with message m.</code></pre>\n"],["def_element_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_element_class_accessor","(klass, name, full_name, klass_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::ITunesModelUtils","classes/RSS/ITunesModelUtils.html#method-i-def_elements_class_accessor","(klass, name, full_name, klass_name, plural_name, recommended_attribute_name=nil)",""],["def_elements_class_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_elements_class_accessor","(klass, name, full_name, full_plural_name, klass_name, plural_klass_name, recommended_attribute_name=nil)",""],["def_else_enc","RSS::Converter","classes/RSS/Converter.html#method-i-def_else_enc","(to_enc, from_enc)",""],["def_erb_method","ERB::DefMethod","classes/ERB/DefMethod.html#method-c-def_erb_method","(methodname, erb_or_fname)","<p>define <em>methodname</em> as instance method of current module, using ERB\nobject or eRuby file\n"],["def_exception","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-def_exception","(n, m, s = StandardError)","<p>def_exception(n, m, s)\n\n<pre><code>    n:  exception_name\n    m:  message_form\n    s:  superclass(default: StandardError) ...</code></pre>\n"],["def_explicit_clean_other_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_explicit_clean_other_accessor","(klass, full_name)",""],["def_extend_command","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-def_extend_command","(cmd_name, load_file, *aliases)","<p>Evaluate the given <code>command</code> from the given\n<code>load_file</code> on the Context module.\n<p>Will also define any given …\n"],["def_extend_command","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-def_extend_command","(cmd_name, cmd_class, load_file = nil, *aliases)","<p>Evaluate the given <code>cmd_name</code> on the given\n<code>cmd_class</code> Class.\n<p>Will also define any given <code>aliases</code> for the method. …\n"],["def_head_option","OptionParser","classes/OptionParser.html#method-i-def_head_option","(*opts, &block)",""],["def_iconv_convert","RSS::Converter","classes/RSS/Converter.html#method-i-def_iconv_convert","(to_enc, from_enc, depth=0)",""],["def_inspector","IRB::Inspector","classes/IRB/Inspector.html#method-c-def_inspector","(key, arg=nil, &block)","<p>Example\n\n<pre><code>Inspector.def_inspector(key, init_p=nil){|v| v.inspect}\nInspector.def_inspector([key1,..], init_p=nil){|v| ...</code></pre>\n"],["def_instance_delegator","Forwardable","classes/Forwardable.html#method-i-def_instance_delegator","(accessor, method, ali = method)","<p>Define <code>method</code> as delegator instance method with an optional\nalias name <code>ali</code>. Method calls to <code>ali</code> will …\n"],["def_instance_delegators","Forwardable","classes/Forwardable.html#method-i-def_instance_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_method","ERB","classes/ERB.html#method-i-def_method","(mod, methodname, fname='(ERB)')","<p>Define <em>methodname</em> as instance method of <em>mod</em> from compiled\nRuby source.\n<p>example:\n\n<pre><code>filename = &#39;example.rhtml&#39; ...\n</code></pre>\n"],["def_module","ERB","classes/ERB.html#method-i-def_module","(methodname='erb')","<p>Create unnamed module, define <em>methodname</em> as instance method of it,\nand return it.\n<p>example:\n\n<pre><code>filename = &#39;example.rhtml&#39; ...\n</code></pre>\n"],["def_notifier","IRB::Notifier","classes/IRB/Notifier.html#method-c-def_notifier","(prefix = \"\", output_method = StdioOutputMethod.new)","<p>Define a new Notifier output source, returning a new CompositeNotifier with\nthe given <code>prefix</code> and <code>output_method</code> …\n"],["def_notifier","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-def_notifier","(level, prefix = \"\")","<p>Creates a new LeveledNotifier in the composite #notifiers group.\n<p>The given <code>prefix</code> will be assigned to …\n"],["def_option","OptionParser","classes/OptionParser.html#method-i-def_option","(*opts, &block)",""],["def_other_element","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_other_element","(name)",""],["def_other_element_without_accessor","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-def_other_element_without_accessor","(name)",""],["def_post_proc","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-def_post_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a postfix call to the given\n<code>extend_method</code>.\n"],["def_pre_proc","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-def_pre_proc","(base_method, extend_method)","<p>Extends the given <code>base_method</code> with a prefix call to the given\n<code>extend_method</code>.\n"],["def_same_enc","RSS::Converter","classes/RSS/Converter.html#method-i-def_same_enc","()",""],["def_single_delegator","SingleForwardable","classes/SingleForwardable.html#method-i-def_single_delegator","(accessor, method, ali = method)","<p>Defines a method <em>method</em> which delegates to <em>accessor</em> (i.e.\nit calls the method of the same name in <em>accessor</em> …\n"],["def_single_delegators","SingleForwardable","classes/SingleForwardable.html#method-i-def_single_delegators","(accessor, *methods)","<p>Shortcut for defining multiple delegator methods, but with no provision for\nusing a different name.  …\n"],["def_system_command","Shell","classes/Shell.html#method-c-def_system_command","(command, path = command)","<p>Convenience method for Shell::CommandProcessor.def_system_command. Defines\nan instance method which will …\n"],["def_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-def_system_command","(command, path = command)","<p>Defines a command, registering <code>path</code> as a Shell method for the\ngiven <code>command</code>.\n\n<pre><code>Shell::CommandProcessor.def_system_command ...\n</code></pre>\n"],["def_tail_option","OptionParser","classes/OptionParser.html#method-i-def_tail_option","(*opts, &block)",""],["def_to_euc_jp_from_iso_2022_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_iso_2022_jp","()",""],["def_to_euc_jp_from_shift_jis","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_shift_jis","()",""],["def_to_euc_jp_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_euc_jp_from_utf_8","()",""],["def_to_iso_2022_jp_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_iso_2022_jp_from_euc_jp","()",""],["def_to_iso_8859_1_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_iso_8859_1_from_utf_8","()",""],["def_to_shift_jis_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_shift_jis_from_euc_jp","()",""],["def_to_shift_jis_from_utf_8","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_shift_jis_from_utf_8","()",""],["def_to_utf_8_from_euc_jp","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_euc_jp","()",""],["def_to_utf_8_from_iso_8859_1","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_iso_8859_1","()",""],["def_to_utf_8_from_shift_jis","RSS::Converter","classes/RSS/Converter.html#method-i-def_to_utf_8_from_shift_jis","()",""],["def_uconv_convert_if_can","RSS::Converter","classes/RSS/Converter.html#method-i-def_uconv_convert_if_can","(meth, to_enc, from_enc, nkf_arg)",""],["def_yes_other_accessor","RSS::Maker::ITunesBaseModel","classes/RSS/Maker/ITunesBaseModel.html#method-i-def_yes_other_accessor","(klass, full_name)",""],["default","Hash","classes/Hash.html#method-i-default","(*args)","<p>Returns the default value, the value that would be returned by <em>hsh</em>\nif <em>key</em> did not exist in <em>hsh</em>. See also …\n"],["default","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-c-default","()","<p>Only use this if you do not want the XML declaration to be written; this\nobject is ignored by the XML …\n"],["default","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-default","()","<p>Returns default value. If the default value does not exist, this method\nreturns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["default=","Hash","classes/Hash.html#method-i-default-3D","(p1)","<p>Sets the default value, the value returned for a key that does not exist in\nthe hash. It is not possible …\n"],["default_acl","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_acl","(acl)","<p>Set the default access control list to <code>acl</code>.  The default ACL\nis <code>nil</code>.\n<p>See also DRb::ACL and #new()\n"],["default_argc_limit","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_argc_limit","(argc)","<p>Set the default value for the :argc_limit option.\n<p>See #new().  The initial default value is 256.\n"],["default_attempts","Bundler::Retry","classes/Bundler/Retry.html#method-c-default_attempts","()",""],["default_bundle_dir","Bundler","classes/Bundler.html#method-c-default_bundle_dir","()",""],["default_bundle_dir","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-default_bundle_dir","()",""],["default_command","Bundler::Thor","classes/Bundler/Thor.html#method-c-default_command","(meth = nil)","<p>Sets the default command when thor is executed without an explicit command\nto be called.\n<p>Parameters\n<p>meth&lt;Symbol&gt; … &mdash; "],["default_event_sources","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-default_event_sources","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_external","Encoding","classes/Encoding.html#method-c-default_external","()","<p>Returns default external encoding.\n<p>The default external encoding is used by default for strings created …\n"],["default_external=","Encoding","classes/Encoding.html#method-c-default_external-3D","(p1)","<p>Sets default external encoding.  You should not set\nEncoding::default_external in ruby code as strings …\n"],["default_gem","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-default_gem","()",""],["default_gemfile","Bundler","classes/Bundler.html#method-c-default_gemfile","()",""],["default_gemfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-default_gemfile","()",""],["default_id_conv","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_id_conv","(idconv)","<p>Set the default value for the :id_conv option.\n<p>See #new().  The initial default value is a DRbIdConv instance. …\n"],["default_imap_port","Net::IMAP","classes/Net/IMAP.html#method-c-default_imap_port","()",""],["default_imaps_port","Net::IMAP","classes/Net/IMAP.html#method-c-default_imaps_port","()",""],["default_internal","Encoding","classes/Encoding.html#method-c-default_internal","()","<p>Returns default internal encoding.  Strings will be transcoded to the\ndefault internal encoding in the …\n"],["default_internal=","Encoding","classes/Encoding.html#method-c-default_internal-3D","(p1)","<p>Sets default internal encoding or removes default internal encoding when\npassed nil.  You should not …\n"],["default_load_limit","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_load_limit","(sz)","<p>Set the default value for the :load_limit option.\n<p>See #new().  The initial default value is 25 MB.\n"],["default_lockfile","Bundler","classes/Bundler.html#method-c-default_lockfile","()",""],["default_lockfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-default_lockfile","()",""],["default_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-default_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["default_parser","RSS::Parser","classes/RSS/Parser.html#method-c-default_parser","()",""],["default_parser=","RSS::Parser","classes/RSS/Parser.html#method-c-default_parser-3D","(new_value)","<p>Set @@default_parser to new_value if it is one of the available parsers.\nElse raise NotValidXMLParser …\n"],["default_passive","Net::FTP","classes/Net/FTP.html#method-c-default_passive","()","<p>When <code>true</code>, connections are in passive mode per default.\nDefault: <code>true</code>.\n"],["default_passive=","Net::FTP","classes/Net/FTP.html#method-c-default_passive-3D","(value)","<p>When <code>true</code>, connections are in passive mode per default.\nDefault: <code>true</code>.\n"],["default_pop3_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3_port","()","<p>The default port for POP3 connections, port 110\n"],["default_pop3s_port","Net::POP3","classes/Net/POP3.html#method-c-default_pop3s_port","()","<p>The default port for POP3S connections, port 995\n"],["default_port","Net::HTTP","classes/Net/HTTP.html#method-c-default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["default_port","Net::IMAP","classes/Net/IMAP.html#method-c-default_port","()","<p>The default port for IMAP connections, port 143\n"],["default_port","Net::POP3","classes/Net/POP3.html#method-c-default_port","()","<p>returns the port for POP3\n"],["default_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_port","()","<p>The default SMTP port number, 25.\n"],["default_port","URI::Generic","classes/URI/Generic.html#method-c-default_port","()","<p>Returns default port.\n"],["default_port","URI::Generic","classes/URI/Generic.html#method-i-default_port","()","<p>Returns default port.\n"],["default_proc","Hash","classes/Hash.html#method-i-default_proc","()","<p>If <code>Hash::new</code> was invoked with a block, return that block,\notherwise return <code>nil</code>.\n\n<pre><code>h = Hash.new {|h,k| h[k] ...</code></pre>\n"],["default_proc=","Hash","classes/Hash.html#method-i-default_proc-3D","(p1)","<p>Sets the default proc to be executed on each failed key lookup.\n\n<pre><code>h.default_proc = proc do |hash, key|\n ...</code></pre>\n"],["default_record_separator","Shell","classes/Shell.html#method-c-default_record_separator","()",""],["default_record_separator=","Shell","classes/Shell.html#method-c-default_record_separator-3D","(rs)",""],["default_retries","Bundler::Retry","classes/Bundler/Retry.html#method-c-default_retries","()",""],["default_safe_level","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-default_safe_level","(level)","<p>Set the default safe level to <code>level</code>.  The default safe level\nis 0\n<p>See #new for more information.\n"],["default_source","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-default_source","()",""],["default_src_encoding","IRB","classes/IRB.html#method-c-default_src_encoding","()",""],["default_ssl_context","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_context","()",""],["default_ssl_port","Net::IMAP","classes/Net/IMAP.html#method-c-default_ssl_port","()",""],["default_ssl_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_ssl_port","()",""],["default_submission_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_submission_port","()","<p>The default mail submission port number, 587.\n"],["default_system_path","Shell","classes/Shell.html#method-c-default_system_path","()","<p>Returns the directories in the current shell&#39;s PATH environment\nvariable as an array of directory …\n"],["default_system_path=","Shell","classes/Shell.html#method-c-default_system_path-3D","(path)","<p>Sets the system_path that new instances of Shell should have as their\ninitial system_path.\n<p><code>path</code> should …\n"],["default_task","Bundler::Thor","classes/Bundler/Thor.html#method-c-default_task","(meth = nil)",""],["default_title=","RDoc::Options","classes/RDoc/Options.html#method-i-default_title-3D","(string)","<p>Set the title, but only if not already set. Used to set the title from a\nsource file, so that a title …\n"],["default_tls_port","Net::IMAP","classes/Net/IMAP.html#method-c-default_tls_port","()","<p>The default port for IMAPS connections, port 993\n"],["default_tls_port","Net::SMTP","classes/Net/SMTP.html#method-c-default_tls_port","()","<p>The default SMTPS port number, 465.\n"],["defaults","RDoc::Task","classes/RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["defaults","RDoc::Task","classes/RDoc/Task.html#method-i-defaults","()","<p>Sets default task values\n"],["define","OptionParser","classes/OptionParser.html#method-i-define","(*opts, &block)",""],["define","RDoc::Task","classes/RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define","RDoc::Task","classes/RDoc/Task.html#method-i-define","()","<p>Create the tasks defined by this task lib.\n"],["define_aliases","Sync_m","classes/Sync_m.html#method-c-define_aliases","(cl)",""],["define_aliases","Sync_m","classes/Sync_m.html#method-c-define_aliases","(cl)",""],["define_by_keywords","OptionParser","classes/OptionParser.html#method-i-define_by_keywords","(options, meth, **opts)",""],["define_finalizer","ObjectSpace","classes/ObjectSpace.html#method-c-define_finalizer","(p1, p2 = v2)","<p>Adds <em>aProc</em> as a finalizer, to be called after <em>obj</em> was\ndestroyed. The object ID of the <em>obj</em> will be passed …\n"],["define_head","OptionParser","classes/OptionParser.html#method-i-define_head","(*opts, &block)",""],["define_method","Module","classes/Module.html#method-i-define_method","(*args)","<p>Defines an instance method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_singleton_method","Object","classes/Object.html#method-i-define_singleton_method","(*args)","<p>Defines a singleton method in the receiver. The <em>method</em> parameter\ncan be a <code>Proc</code>, a <code>Method</code> or an\n<code>UnboundMethod</code> …\n"],["define_tail","OptionParser","classes/OptionParser.html#method-i-define_tail","(*opts, &block)",""],["define_task","Bundler::Deployment","classes/Bundler/Deployment.html#method-c-define_task","(context, task_method = :task, opts = {})",""],["defined_class","TracePoint","classes/TracePoint.html#method-i-defined_class","()","<p>Return class or module of the method being called.\n\n<pre><code>class C; def foo; end; end\ntrace = TracePoint.new(:call) ...\n</code></pre>\n"],["defined_event?","Bundler::Plugin::Events","classes/Bundler/Plugin/Events.html#method-c-defined_event-3F","(event)","<p>Check if an event has been defined @param event [String] An event to check\n@return [Boolean] A boolean …\n"],["defined_in?","RDoc::Context","classes/RDoc/Context.html#method-i-defined_in-3F","(file)","<p>Is part of this thing was defined in <code>file</code>?\n"],["definition","Bundler","classes/Bundler.html#method-c-definition","(unlock = nil)","<p>Returns an instance of Bundler::Definition for given Gemfile and lockfile\n<p>@param unlock [Hash, Boolean …\n"],["definition","RDoc::Attr","classes/RDoc/Attr.html#method-i-definition","()","<p>Returns attr_reader, attr_writer or attr_accessor as appropriate.\n"],["definition","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-definition","()","<p>The definition of this class, <code>class MyClassName</code>\n"],["definition","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-definition","()","<p>The definition of this module, <code>module MyModuleName</code>\n"],["definition","RDoc::SingleClass","classes/RDoc/SingleClass.html#method-i-definition","()","<p>The definition of this singleton class, <code>class &lt;&lt;\nMyClassName</code>\n"],["definition_lists","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-definition_lists","","<p>Allow PHP Markdown Extras style definition lists\n"],["deflate","Gem","classes/Gem.html#method-c-deflate","(data)","<p>A Zlib::Deflate.deflate wrapper\n"],["deflate","Zlib","classes/Zlib.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","classes/Zlib/Deflate.html#method-c-deflate","(p1, p2 = v2)","<p>Compresses the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["deflate","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-deflate","(p1, p2 = v2)","<p>Inputs <code>string</code> into the deflate stream and returns the output\nfrom the stream.  On calling this method, …\n"],["degree","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-degree","()","<p>See the OpenSSL documentation for EC_GROUP_get_degree()\n"],["delegate","Forwardable","classes/Forwardable.html#method-i-delegate","(hash)",""],["delegate","SingleForwardable","classes/SingleForwardable.html#method-i-delegate","(hash)",""],["deletable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-deletable-3F","()","<p>Returns <code>true</code> if the file or directory may be deleted by\nDELE/RMD.\n"],["delete","Array","classes/Array.html#method-i-delete","(p1)","<p>Deletes all items from <code>self</code> that are equal to\n<code>obj</code>.\n<p>Returns the last deleted item, or <code>nil</code> if no matching …\n"],["delete","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-delete","(key)",""],["delete","CGI::Session","classes/CGI/Session.html#method-i-delete","()","<p>Delete the session from storage.  Also closes the storage.\n<p>Note that the session&#39;s data is <em>not</em> automatically …\n"],["delete","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-delete","()","<p>Close and delete the session&#39;s FileStore file.\n"],["delete","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-delete","()","<p>Delete the session state.\n"],["delete","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-delete","()","<p>Delete the session state.\n<p>A no-op.\n"],["delete","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-delete","()","<p>Close and delete the session&#39;s PStore file.\n"],["delete","CSV::Row","classes/CSV/Row.html#method-i-delete","(header_or_index, minimum_index = 0)","<p>Used to remove a pair from the row by <code>header</code> or\n<code>index</code>.  The pair is located as described in CSV::Row.field() …\n"],["delete","CSV::Table","classes/CSV/Table.html#method-i-delete","(*indexes_or_headers)","<p>Removes and returns the indicated columns or rows.  In the default mixed\nmode indices refer to rows and …\n"],["delete","DBM","classes/DBM.html#method-i-delete","(p1)","<p>Deletes an entry from the database.\n"],["delete","Dir","classes/Dir.html#method-c-delete","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["delete","ENV","classes/ENV.html#method-c-delete","(p1)","<p>Deletes the environment variable with <code>name</code> and returns the\nvalue of the variable.  If a block is given …\n"],["delete","File","classes/File.html#method-c-delete","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["delete","GDBM","classes/GDBM.html#method-i-delete","(p1)","<p>Removes the key-value-pair with the specified <em>key</em> from this\ndatabase and returns the corresponding <em>value</em> …\n"],["delete","Hash","classes/Hash.html#method-i-delete","(p1)","<p>Deletes the key-value pair and returns the value from <em>hsh</em> whose\nkey is equal to <em>key</em>. If the key is not …\n"],["delete","IRB::JobManager","classes/IRB/JobManager.html#method-i-delete","(key)","<p>Deletes the job at the given <code>key</code>.\n"],["delete","Net::FTP","classes/Net/FTP.html#method-i-delete","(filename)","<p>Deletes a file on the server.\n"],["delete","Net::HTTP","classes/Net/HTTP.html#method-i-delete","(path, initheader = {'Depth' => 'Infinity'})","<p>Sends a DELETE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["delete","Net::IMAP","classes/Net/IMAP.html#method-i-delete","(mailbox)","<p>Sends a DELETE command to remove the <code>mailbox</code>.\n<p>A Net::IMAP::NoResponseError is raised if a mailbox with …\n"],["delete","Net::POPMail","classes/Net/POPMail.html#method-i-delete","()","<p>Marks a message for deletion on the server.  Deletion does not actually\noccur until the end of the session; …\n"],["delete","PStore","classes/PStore.html#method-i-delete","(name)","<p>Removes an object hierarchy from the data store, by <em>name</em>.\n<p><strong>WARNING</strong>:  This method is only valid in a\nPStore#transaction …\n"],["delete","Pathname","classes/Pathname.html#method-i-delete","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a\nfile, or Dir.unlink as necessary.\n"],["delete","REXML::Attributes","classes/REXML/Attributes.html#method-i-delete","( attribute )","<p>Removes an attribute\n<p>attribute &mdash; either a String, which is the name of the attribute to remove – namespaces\n…\n"],["delete","REXML::Elements","classes/REXML/Elements.html#method-i-delete","(element)","<p>Deletes a child Element\n<p>element &mdash; Either an Element, which is removed directly; an xpath, where the first …\n"],["delete","REXML::Parent","classes/REXML/Parent.html#method-i-delete","( object )",""],["delete","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-delete","(tuple)","<p>Removes <code>tuple</code> from the TupleBag.\n"],["delete","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-delete","(tuple)",""],["delete","SDBM","classes/SDBM.html#method-i-delete","(p1)","<p>Deletes the key-value pair corresponding to the given <code>key</code>. If\nthe <code>key</code> exists, the deleted value will …\n"],["delete","Set","classes/Set.html#method-i-delete","(o)","<p>Deletes the given object from the set and returns self.  Use\n<code>subtract</code> to delete many items at once.\n"],["delete","String","classes/String.html#method-i-delete","(*args)","<p>Returns a copy of <em>str</em> with all characters in the intersection of\nits arguments deleted. Uses the same …\n"],["delete","Tempfile","classes/Tempfile.html#method-i-delete","()",""],["delete","YAML::DBM","classes/YAML/DBM.html#method-i-delete","( key )","<p>Deletes value from database associated with <code>key</code>.\n<p>Returns value or <code>nil</code>.\n"],["delete!","Net::POPMail","classes/Net/POPMail.html#method-i-delete-21","()",""],["delete!","String","classes/String.html#method-i-delete-21","(*args)","<p>Performs a <code>delete</code> operation in place, returning <em>str</em>,\nor <code>nil</code> if <em>str</em> was not modified.\n"],["delete?","Set","classes/Set.html#method-i-delete-3F","(o)","<p>Deletes the given object from the set and returns self.  If the object is\nnot in the set, returns nil. …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-i-delete_all","()","<p>Deletes all messages on the server.\n<p>If called with a block, yields each message in turn before deleting …\n"],["delete_all","Net::POP3","classes/Net/POP3.html#method-c-delete_all","(address, port = nil, account = nil, password = nil, isapop = false, &block)","<p>Starts a POP3 session and deletes all messages on the server. If a block is\ngiven, each POPMail object …\n"],["delete_all","REXML::Attributes","classes/REXML/Attributes.html#method-i-delete_all","( name )","<p>Deletes all attributes matching a name.  Namespaces are significant.\n<p>name &mdash; A String; all attributes that …\n"],["delete_all","REXML::Elements","classes/REXML/Elements.html#method-i-delete_all","( xpath )","<p>Removes multiple elements.  Filters for Element children, regardless of\nXPath matching.\n<p>xpath &mdash; all elements …\n"],["delete_at","Array","classes/Array.html#method-i-delete_at","(p1)","<p>Deletes the element at the specified <code>index</code>, returning that\nelement, or <code>nil</code> if the <code>index</code> is out of range. …\n"],["delete_at","REXML::Parent","classes/REXML/Parent.html#method-i-delete_at","( index )",""],["delete_attribute","REXML::Element","classes/REXML/Element.html#method-i-delete_attribute","(key)","<p>Removes an attribute\n<p>key &mdash; either an Attribute or a String.  In either case, the attribute is found by\nmatching …\n"],["delete_edge","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-delete_edge","(edge)","<p>Deletes an {Edge} from the dependency graph @param [Edge] edge @return\n[Void]\n"],["delete_edge","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-delete_edge","(graph, origin_name, destination_name, requirement)","<p>{include:DependencyGraph#delete_edge} @param [Graph] graph the graph to\nperform the action on @param …\n"],["delete_element","REXML::Element","classes/REXML/Element.html#method-i-delete_element","(element)","<p>Deletes a child element.\n<p>element &mdash; Must be an <code>Element</code>, <code>String</code>, or\n<code>Integer</code>.  If Element, the element is removed. …\n"],["delete_field","OpenStruct","classes/OpenStruct.html#method-i-delete_field","(name)","<p>Removes the named field from the object. Returns the value that the field\ncontained if it was defined. …\n"],["delete_if","Array","classes/Array.html#method-i-delete_if","()","<p>Deletes every element of <code>self</code> for which block evaluates to\n<code>true</code>.\n<p>The array is changed instantly every …\n"],["delete_if","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-delete_if","()",""],["delete_if","CSV::Row","classes/CSV/Row.html#method-i-delete_if","(&block)","<p>The provided <code>block</code> is passed a header and field for each pair\nin the row and expected to return <code>true</code> …\n"],["delete_if","CSV::Table","classes/CSV/Table.html#method-i-delete_if","(&block)","<p>Removes any column or row for which the block returns <code>true</code>. \nIn the default mixed mode or row mode, iteration …\n"],["delete_if","DBM","classes/DBM.html#method-i-delete_if","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["delete_if","ENV","classes/ENV.html#method-c-delete_if","()","<p>Deletes every environment variable for which the block evaluates to\n<code>true</code>.\n<p>If no block is given an enumerator …\n"],["delete_if","GDBM","classes/GDBM.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["delete_if","Hash","classes/Hash.html#method-i-delete_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>true</code>.\n<p>If no block is given, an enumerator …\n"],["delete_if","REXML::Parent","classes/REXML/Parent.html#method-i-delete_if","( &block )",""],["delete_if","SDBM","classes/SDBM.html#method-i-delete_if","()","<p>Iterates over the key-value pairs in the database, deleting those for which\nthe block returns <code>true</code>.\n"],["delete_if","Set","classes/Set.html#method-i-delete_if","()","<p>Deletes every element of the set for which block evaluates to true, and\nreturns self. Returns an enumerator …\n"],["delete_if","YAML::DBM","classes/YAML/DBM.html#method-i-delete_if","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database. Deletes all entries for which the …\n"],["delete_legacy_args","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-delete_legacy_args","(args)","<p>Removes legacy rdoc arguments from <code>args</code>\n"],["delete_namespace","REXML::Element","classes/REXML/Element.html#method-i-delete_namespace","(namespace=\"xmlns\")","<p>Removes a namespace from this node.  This only works if the namespace is\nactually declared in this node. …\n"],["delete_observer","Observable","classes/Observable.html#method-i-delete_observer","(observer)","<p>Remove <code>observer</code> as an observer on this object so that it will\nno longer receive notifications.\n<p><code>observer</code> … &mdash; "],["delete_observers","Observable","classes/Observable.html#method-i-delete_observers","()","<p>Remove all observers associated with this object.\n"],["delete_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-delete_passwd","(realm, user)","<p>Removes a password from the database for <code>user</code> in\n<code>realm</code>.\n"],["delete_prefix","String","classes/String.html#method-i-delete_prefix","(p1)","<p>Returns a copy of <em>str</em> with leading <code>prefix</code> deleted.\n\n<pre><code>&quot;hello&quot;.delete_prefix(&quot;hel&quot;) #=&gt; &quot;lo&quot;\n&quot;hello&quot;.delete_prefix(&quot;llo&quot;) ...\n</code></pre>\n"],["delete_prefix!","String","classes/String.html#method-i-delete_prefix-21","(p1)","<p>Deletes leading <code>prefix</code> from <em>str</em>, returning\n<code>nil</code> if no change was made.\n\n<pre><code>&quot;hello&quot;.delete_prefix!(&quot;hel&quot;) #=&gt; ...\n</code></pre>\n"],["delete_suffix","CSV::DeleteSuffix","classes/CSV/DeleteSuffix.html#method-i-delete_suffix","(suffix)",""],["delete_suffix","String","classes/String.html#method-i-delete_suffix","(p1)","<p>Returns a copy of <em>str</em> with trailing <code>suffix</code> deleted.\n\n<pre><code>&quot;hello&quot;.delete_suffix(&quot;llo&quot;) #=&gt; &quot;he&quot;\n&quot;hello&quot;.delete_suffix(&quot;hel&quot;) ...\n</code></pre>\n"],["delete_suffix!","String","classes/String.html#method-i-delete_suffix-21","(p1)","<p>Deletes trailing <code>suffix</code> from <em>str</em>, returning\n<code>nil</code> if no change was made.\n\n<pre><code>&quot;hello&quot;.delete_suffix!(&quot;llo&quot;) #=&gt; ...\n</code></pre>\n"],["delete_text","Readline","classes/Readline.html#method-c-delete_text","(*args)","<p>Delete text between start and end in the current line.\n<p>See GNU Readline&#39;s rl_delete_text function. …\n"],["delete_unless_alive","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-delete_unless_alive","()","<p>Delete tuples which dead tuples from the TupleBag, returning the deleted\ntuples.\n"],["deleted?","Net::POPMail","classes/Net/POPMail.html#method-i-deleted-3F","()","<p>True if the mail has been deleted.\n"],["denominator","Complex","classes/Complex.html#method-i-denominator","()","<p>Returns the denominator (lcm of both denominator - real and imag).\n<p>See numerator.\n"],["denominator","Float","classes/Float.html#method-i-denominator","()","<p>Returns the denominator (always positive).  The result is machine\ndependent.\n<p>See also Float#numerator …\n"],["denominator","Integer","classes/Integer.html#method-i-denominator","()","<p>Returns 1.\n"],["denominator","Numeric","classes/Numeric.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n"],["denominator","Rational","classes/Rational.html#method-i-denominator","()","<p>Returns the denominator (always positive).\n\n<pre><code>Rational(7).denominator             #=&gt; 1\nRational(7, 1).denominator ...\n</code></pre>\n"],["depend_rules","MakeMakefile","classes/MakeMakefile.html#method-i-depend_rules","(depend)","<p>Processes the data contents of the “depend” file.  Each line of this file\nis expected to be …\n"],["dependencies","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-i-dependencies","(names)",""],["dependencies","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-dependencies","(name)",""],["dependencies","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-i-dependencies","()",""],["dependencies","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-dependencies","()","<p>Represents only the non-development dependencies, the ones that are itself\nand are in the total list. …\n"],["dependencies","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-dependencies","()",""],["dependencies_eql?","Bundler::Index","classes/Bundler/Index.html#method-i-dependencies_eql-3F","(spec, other_spec)",""],["dependencies_for","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>(see Bundler::Molinillo::SpecificationProvider#dependencies_for)\n"],["dependencies_for","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-dependencies_for","(specification)","<p>Returns the dependencies of `specification`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["dependencies_for","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-dependencies_for","(specification)",""],["dependencies_for_activated_platforms","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-dependencies_for_activated_platforms","()",""],["dependencies_installed?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-dependencies_installed-3F","(all_specs)","<p>Checks installed dependencies against spec&#39;s dependencies to make sure\nneeded dependencies have been …\n"],["dependency_api_uri","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-dependency_api_uri","(gem_names = [])",""],["dependency_names","Bundler::Index","classes/Bundler/Index.html#method-i-dependency_names","()",""],["dependency_names_to_double_check","Bundler::Source","classes/Bundler/Source.html#method-i-dependency_names_to_double_check","()",""],["dependency_specs","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-dependency_specs","(gem_names)",""],["deprecate_constant","Module","classes/Module.html#method-i-deprecate_constant","(*args)","<p>Makes a list of existing constants deprecated.\n"],["deprecated_option","Bundler::CLI","classes/Bundler/CLI.html#method-c-deprecated_option","(*args, &blk)",""],["depth","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-depth","()","<p>(see Bundler::Molinillo::ResolutionState#depth)\n"],["depth","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-depth","()","<p>This integer returns the current depth of data structure nesting.\n"],["depth=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-depth-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["deq","Bundler::Worker","classes/Bundler/Worker.html#method-i-deq","()","<p>Retrieves results of job function being executed in worker pool\n"],["deq","Queue","classes/Queue.html#method-i-deq","(*args)",""],["deq","SizedQueue","classes/SizedQueue.html#method-i-deq","(*args)",""],["dequote","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-dequote","(str)","<p>Removes quotes and escapes from <code>str</code>\n"],["desc","Bundler::Thor","classes/Bundler/Thor.html#method-c-desc","(usage, description, options = {})","<p>Defines the usage and the description of the next command.\n<p>Parameters\n<p>usage&lt;String&gt; description&lt;String&gt; …\n"],["desc","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-desc","(description = nil)","<p>The description for this Bundler::Thor::Group. If none is provided, but a\nsource root exists, tries to …\n"],["descend","Pathname","classes/Pathname.html#method-i-descend","()","<p>Iterates over and yields a new Pathname object for each element in the\ngiven path in descending order. …\n"],["descendent?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-descendent-3F","(other)",""],["destination_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an Encoding object.\n"],["destination_encoding","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-destination_encoding","()","<p>Returns the destination encoding as an encoding object.\n"],["destination_encoding_name","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_encoding_name","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-destination_encoding_name","()","<p>Returns the destination encoding name as a string.\n"],["destination_root","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-destination_root","()","<p>Returns the root for this thor class (also aliased as destination root).\n"],["destination_root=","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-destination_root-3D","(root)","<p>Sets the root for this thor class. Relatives path are added to the\ndirectory where the script was invoked …\n"],["det","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-det","()","<p>Returns the determinant of <code>A</code>, calculated efficiently from the\nfactorization.\n"],["detach","Process","classes/Process.html#method-c-detach","(p1)","<p>Some operating systems retain the status of terminated child processes\nuntil the parent collects that …\n"],["detach_vertex_named","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-detach_vertex_named","(name)","<p>Detaches the {#vertex_named} `name` {Vertex} from the graph, recursively\nremoving any non-root vertices …\n"],["detach_vertex_named","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-detach_vertex_named","(graph, name)","<p>@macro action\n"],["detached","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached","()",""],["detached=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached-3D","(p1)",""],["detached?","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-detached-3F","()",""],["detect","Enumerable","classes/Enumerable.html#method-i-detect","(*args)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["detect_encoding","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-detect_encoding","(string)","<p>Detects the encoding of <code>string</code> based on the magic comment\n"],["detect_gemdeps","Gem","classes/Gem.html#method-c-detect_gemdeps","(path = nil)","<p>TODO remove with RubyGems 4.0\n"],["detect_idle_timeout","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-c-detect_idle_timeout","(uri, max = 10)","<p>Use this method to detect the idle timeout of the host at <code>uri</code>.\nThe value returned can be used to configure …\n"],["determinant","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-determinant","()",""],["dev","File::Stat","classes/File/Stat.html#method-i-dev","()","<p>Returns an integer representing the device on which <em>stat</em> resides.\n\n<pre><code>File.stat(&quot;testfile&quot;).dev   #=&gt; 774\n</code></pre>\n"],["dev_major","File::Stat","classes/File/Stat.html#method-i-dev_major","()","<p>Returns the major part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).dev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).dev_major ...\n</code></pre>\n"],["dev_minor","File::Stat","classes/File/Stat.html#method-i-dev_minor","()","<p>Returns the minor part of <code>File_Stat#dev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).dev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).dev_minor ...\n</code></pre>\n"],["dfdxi","Jacobian","classes/Jacobian.html#method-i-dfdxi","(f,fx,x,i)","<p>Computes the derivative of f at x. fx is the value of f at x.\n"],["dh_compute_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dh_compute_key","(p1)","<p>See the OpenSSL documentation for ECDH_compute_key()\n"],["diagonal","Matrix","classes/Matrix.html#method-c-diagonal","(*values)","<p>Creates a matrix where the diagonal elements are composed of\n<code>values</code>.\n\n<pre><code>Matrix.diagonal(9, 5, -3)\n  =&gt;  9 ...</code></pre>\n"],["diff","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-diff","(other)","<p>Returns a tuple of these things:\n\n<pre><code>[diff, this, other]\nThe priority of attributes are\n1. engine\n2. ruby_version ...\n</code></pre>\n"],["difference","Array","classes/Array.html#method-i-difference","(*args)","<p>Array Difference\n<p>Returns a new array that is a copy of the receiver, removing any items that\nalso appear …\n"],["difference","Set","classes/Set.html#method-i-difference","(enum)",""],["dig","Array","classes/Array.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>idx</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","CSV::Row","classes/CSV/Row.html#method-i-dig","(index_or_header, *indexes)","<p>Extracts the nested value specified by the sequence of <code>index</code>\nor <code>header</code> objects by calling dig at each …\n"],["dig","CSV::Table","classes/CSV/Table.html#method-i-dig","(index_or_header, *index_or_headers)","<p>Extracts the nested value specified by the sequence of <code>index</code>\nor <code>header</code> objects by calling dig at each …\n"],["dig","Hash","classes/Hash.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <em>key</em> objects\nby calling <code>dig</code> at each step, returning …\n"],["dig","OpenStruct","classes/OpenStruct.html#method-i-dig","(name, *names)","<p>Extracts the nested value specified by the sequence of <code>name</code>\nobjects by calling <code>dig</code> at each step, returning …\n"],["dig","Struct","classes/Struct.html#method-i-dig","(*args)","<p>Extracts the nested value specified by the sequence of <code>key</code>\nobjects by calling <code>dig</code> at each step, returning …\n"],["digest","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-digest","(name)",""],["digest","Digest::Class","classes/Digest/Class.html#method-c-digest","(*args)","<p>Returns the hash value of a given <em>string</em>.  This is equivalent to\nDigest::Class.new(*parameters).digest(string), …\n"],["digest","Digest::Instance","classes/Digest/Instance.html#method-i-digest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest, keeping\nthe digest&#39;s state.\n<p>If a …\n"],["digest","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-c-digest","(name, data)","<p>Return the hash value computed with <em>name</em> Digest. <em>name</em> is\neither the long name or short name of a supported …\n"],["digest","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-digest","(p1)","<p>Returns a new instance of OpenSSL::Digest by <em>name</em>.\n<p>Will raise an EngineError if the digest is unavailable. …\n"],["digest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-digest","(p1, p2, p3)","<p>Returns the authentication code as a binary string. The <em>digest</em>\nparameter specifies the digest algorithm …\n"],["digest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-digest","()","<p>Returns the authentication code an instance represents as a binary string.\n<p>Example\n\n<pre><code>instance = OpenSSL::HMAC.new(&#39;key&#39;, ...</code></pre>\n"],["digest!","Digest::Instance","classes/Digest/Instance.html#method-i-digest-21","()","<p>Returns the resulting hash value and resets the digest to the initial\nstate.\n"],["digest_length","Digest::Base","classes/Digest/Base.html#method-i-digest_length","()","<p>Return the length of the hash value in bytes.\n"],["digest_length","Digest::Instance","classes/Digest/Instance.html#method-i-digest_length","()","<p>Returns the length of the hash value of the digest.\n<p>This method should be overridden by each implementation …\n"],["digest_length","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-digest_length","()","<p>Returns the output size of the digest, i.e. the length in bytes of the\nfinal message digest result.\n<p>Example …\n"],["digits","Integer","classes/Integer.html#method-i-digits","(*args)","<p>Returns the digits of <code>int</code>&#39;s place-value representation\nwith radix <code>base</code> (default: 10). The digits …\n"],["dir","Gem","classes/Gem.html#method-c-dir","()","<p>The path where gems are to be installed.\n"],["dir","Net::FTP","classes/Net/FTP.html#method-i-dir","(*args)",""],["dir_config","MakeMakefile","classes/MakeMakefile.html#method-i-dir_config","(target, idefault=nil, ldefault=nil)","<p>Sets a <code>target</code> name that the user can then use to configure\nvarious “with” options with on the …\n"],["direct_ancestors","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-direct_ancestors","()","<p>Ancestors of this class or module only\n"],["direct_ancestors","RDoc::NormalClass","classes/RDoc/NormalClass.html#method-i-direct_ancestors","()",""],["directory","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-directory","(source, *args, &block)","<p>Copies recursively the files from source directory to root directory. If\nany of the files finishes with …\n"],["directory?","File","classes/File.html#method-c-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","File::Stat","classes/File/Stat.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","FileTest","classes/FileTest.html#method-i-directory-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory, or a symlink\nthat points at a directory, and <code>false</code> otherwise. …\n"],["directory?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the entry is a directory (i.e., the value of\nthe type fact is dir, cdir, or pdir).\n"],["directory?","Pathname","classes/Pathname.html#method-i-directory-3F","()","<p>See FileTest.directory?.\n"],["directory_makable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-directory_makable-3F","()","<p>Returns <code>true</code> if the MKD command may be used to create a new\ndirectory within the directory.\n"],["dirname","File","classes/File.html#method-c-dirname","(p1)","<p>Returns all components of the filename given in <em>file_name</em> except\nthe last one (after first stripping …\n"],["dirname","Pathname","classes/Pathname.html#method-i-dirname","()","<p>Returns all but the last component of the path.\n<p>See File.dirname.\n"],["disable","GC","classes/GC.html#method-c-disable","()","<p>Disables garbage collection, returning <code>true</code> if garbage\ncollection was already disabled.\n\n<pre><code>GC.disable   #=&gt; ...\n</code></pre>\n"],["disable","GC::Profiler","classes/GC/Profiler.html#method-c-disable","()","<p>Stops the GC profiler.\n"],["disable","TracePoint","classes/TracePoint.html#method-i-disable","()","<p>Deactivates the trace\n<p>Return true if trace was enabled. Return false if trace was disabled.\n\n<pre><code>trace.enabled? ...\n</code></pre>\n"],["disable_close","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-disable_close","()","<p>Disable a call to dlclose() when this handle is garbage collected.\n"],["disable_required_check!","Bundler::Thor","classes/Bundler/Thor.html#method-c-disable_required_check-21","(*command_names)","<p>Disable the check for required options for the given commands. This is\nuseful if you have a command that …\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-i-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::POP3","classes/Net/POP3.html#method-c-disable_ssl","()","<p>Disable SSL for all new instances.\n"],["disable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-disable_ssl","()",""],["disable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_starttls","()","<p>Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the\nconnection is established to …\n"],["disable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-disable_tls","()","<p>Disables SMTP/TLS for this object.  Must be called before the connection is\nestablished to have any effect. …\n"],["disasm","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-disasm","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre><code>puts RubyVM::InstructionSequence.compile(&#39;1 ...</code></pre>\n"],["disasm","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-disasm","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["disassemble","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-disassemble","(p1)","<p>Takes <code>body</code>, a Method or Proc object, and returns a String with\nthe human readable instructions for <code>body</code> …\n"],["disassemble","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-disassemble","()","<p>Returns the instruction sequence as a <code>String</code> in human readable\nform.\n\n<pre><code>puts RubyVM::InstructionSequence.compile(&#39;1 ...</code></pre>\n"],["disconnect","Net::IMAP","classes/Net/IMAP.html#method-i-disconnect","()","<p>Disconnects from the server.\n"],["disconnected?","Net::IMAP","classes/Net/IMAP.html#method-i-disconnected-3F","()","<p>Returns true if disconnected from the server.\n"],["disjoint?","Set","classes/Set.html#method-i-disjoint-3F","(set)","<p>Returns true if the set and the given set have no element in common.  This\nmethod is the opposite of …\n"],["dispatch","Bundler::CLI","classes/Bundler/CLI.html#method-c-dispatch","(*)",""],["dispid","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-dispid","()","<p>Returns dispatch ID.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...\n</code></pre>\n"],["display","DEBUGGER__","classes/DEBUGGER__.html#method-c-display","()","<p>Returns the display expression list\n<p>See DEBUGGER__ for more usage\n"],["display","Object","classes/Object.html#method-i-display","(*args)","<p>Prints <em>obj</em> on the given port (default <code>$&gt;</code>).\nEquivalent to:\n\n<pre><code>def display(port=$&gt;)\n  port.write self\n  ...</code></pre>\n"],["display?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-display-3F","()","<p>Should this CodeObject be displayed in output?\n<p>A code object should be displayed if:\n<p>The item didn&#39;t …\n"],["display?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-display-3F","()","<p>Only a TopLevel that contains text file) will be displayed.  See also\nRDoc::CodeObject#display?\n"],["div","BigDecimal","classes/BigDecimal.html#method-i-div","(p1, p2 = v2)","<p>Divide by the specified value.\n<p>digits &mdash; If specified and less than the number of significant digits of the …\n"],["div","Integer","classes/Integer.html#method-i-div","(p1)","<p>Performs integer division: returns the integer result of dividing\n<code>int</code> by <code>numeric</code>.\n"],["div","Numeric","classes/Numeric.html#method-i-div","(p1)","<p>Uses <code>/</code> to perform division, then converts the result to an\ninteger. Numeric does not define the <code>/</code> operator; …\n"],["divide","Set","classes/Set.html#method-i-divide","(&func)","<p>Divides the set into a set of subsets according to the commonality defined\nby the given block.\n<p>If the …\n"],["divmod","BigDecimal","classes/BigDecimal.html#method-i-divmod","(p1)","<p>Divides by the specified value, and returns the quotient and modulus as\nBigDecimal numbers. The quotient …\n"],["divmod","Float","classes/Float.html#method-i-divmod","(p1)","<p>See Numeric#divmod.\n\n<pre><code>42.0.divmod(6)   #=&gt; [7, 0.0]\n42.0.divmod(5)   #=&gt; [8, 2.0]\n</code></pre>\n"],["divmod","Integer","classes/Integer.html#method-i-divmod","(p1)","<p>See Numeric#divmod.\n"],["divmod","Numeric","classes/Numeric.html#method-i-divmod","(p1)","<p>Returns an array containing the quotient and modulus obtained by dividing\n<code>num</code> by <code>numeric</code>.\n<p>If <code>q, r = x.divmod</code> …\n"],["dlload","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-dlload","(*libs)","<p>Creates an array of handlers for the given <code>libs</code>, can be an\ninstance of Fiddle::Handle, Fiddle::Importer …\n"],["dlopen","Fiddle","classes/Fiddle.html#method-c-dlopen","(library)","<p>Creates a new handler that opens <code>library</code>, and returns an\ninstance of Fiddle::Handle.\n<p>If <code>nil</code> is given for …\n"],["dlunwrap","Fiddle","classes/Fiddle.html#method-c-dlunwrap","(p1)","<p>Returns the hexadecimal representation of a memory pointer address\n<code>addr</code>\n<p>Example:\n\n<pre><code>lib = Fiddle.dlopen(&#39;/lib64/libc-2.15.so&#39;) ...\n</code></pre>\n"],["dlwrap","Fiddle","classes/Fiddle.html#method-c-dlwrap","(p1)","<p>Returns a memory pointer of a function&#39;s hexadecimal address location\n<code>val</code>\n<p>Example:\n\n<pre><code>lib = Fiddle.dlopen(&#39;/lib64/libc-2.15.so&#39;) ...\n</code></pre>\n"],["dn","URI::LDAP","classes/URI/LDAP.html#method-i-dn","()","<p>Returns dn.\n"],["dn=","URI::LDAP","classes/URI/LDAP.html#method-i-dn-3D","(val)","<p>Setter for dn <code>val</code>.\n"],["do_GET","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-do_GET","(req, res)","<p>GET request entry point.  Fills in <code>res</code> for the path, etc. in\n<code>req</code>.\n"],["do_GET","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_GET","(req, res)","<p>Raises a NotFound exception\n"],["do_GET","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-i-do_GET","(req, res)","<p>Handles GET requests\n"],["do_HEAD","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_HEAD","(req, res)","<p>Dispatches to do_GET\n"],["do_OPTIONS","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-do_OPTIONS","(req, res)","<p>The default OPTIONS request handler says GET, HEAD, POST and OPTIONS\nrequests are allowed.\n"],["do_OPTIONS","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-do_OPTIONS","(req, res)","<p>Returns the allowed HTTP request methods\n"],["do_POST","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-i-do_POST","(req, res)","<p>Handles POST requests\n"],["do_not_reverse_lookup","BasicSocket","classes/BasicSocket.html#method-c-do_not_reverse_lookup","()","<p>Gets the global do_not_reverse_lookup flag.\n\n<pre><code>BasicSocket.do_not_reverse_lookup  #=&gt; false\n</code></pre>\n"],["do_not_reverse_lookup","BasicSocket","classes/BasicSocket.html#method-i-do_not_reverse_lookup","()","<p>Gets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre><code>require &#39;socket&#39;\n\nBasicSocket.do_not_reverse_lookup ...\n</code></pre>\n"],["do_not_reverse_lookup=","BasicSocket","classes/BasicSocket.html#method-i-do_not_reverse_lookup-3D","(p1)","<p>Sets the do_not_reverse_lookup flag of <em>basicsocket</em>.\n\n<pre><code>TCPSocket.open(&quot;www.ruby-lang.org&quot;, 80) {|sock|\n  ...</code></pre>\n"],["do_not_reverse_lookup=","BasicSocket","classes/BasicSocket.html#method-c-do_not_reverse_lookup-3D","(p1)","<p>Sets the global do_not_reverse_lookup flag.\n<p>The flag is used for initial value of do_not_reverse_lookup …\n"],["do_not_reverse_lookup=","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-do_not_reverse_lookup-3D","(flag)",""],["do_parse","Racc::Parser","classes/Racc/Parser.html#method-i-do_parse","()","<p>The entry point of the parser. This method is used with #next_token. If\nRacc wants to get token (and …\n"],["do_reply","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-do_reply","()","<p>Pulls lookup tuples out of the TupleSpace and sends their DRb object the\naddress of the local TupleSpace …\n"],["do_validate","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-do_validate","()",""],["do_validate=","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-do_validate-3D","(new_value)",""],["do_write","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-do_write","(msg)","<p>Extracts the response URI from <code>msg</code> and adds it to TupleSpace\nwhere it will be picked up by <code>reply_service</code> …\n"],["doc_stats","RDoc::Stats","classes/RDoc/Stats.html#method-i-doc_stats","(collection)","<p>Returns the length and number of undocumented items in\n<code>collection</code>.\n"],["doctor","Bundler::CLI","classes/Bundler/CLI.html#method-i-doctor","()",""],["doctor","Bundler::CLI::Issue","classes/Bundler/CLI/Issue.html#method-i-doctor","()",""],["doctype","REXML::Attribute","classes/REXML/Attribute.html#method-i-doctype","()",""],["doctype","REXML::Document","classes/REXML/Document.html#method-i-doctype","()","<p>@return the DocType child of the document, if one exists, and nil\notherwise.\n"],["doctype","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-doctype","(name, pub_sys, long_name, uri)","<p>Handles a doctype declaration. Any attributes of the doctype which are not\nsupplied will be nil.  #  …\n"],["doctype","REXML::Text","classes/REXML/Text.html#method-i-doctype","()",""],["doctype?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-doctype-3F","()","<p>Content: [ String name, String pub_sys, String long_name, String uri ]\n"],["doctype_end","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-doctype_end","()","<p>Called when the doctype is done\n"],["document","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-document","(options)","<p>Generates documentation or a coverage report depending upon the settings in\n<code>options</code>.\n<p><code>options</code> can be either …\n"],["document","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-document","(generator, options, destination)","<p>Generates documentation using the named <code>generator</code> (“darkfish”\nor “ri”) and following …\n"],["document","REXML::Child","classes/REXML/Child.html#method-i-document","()","<p>Returns &mdash; the document this child belongs to, or nil if this child\n\n<p>belongs to no document\n"],["document","REXML::Document","classes/REXML/Document.html#method-i-document","()",""],["document","REXML::Element","classes/REXML/Element.html#method-i-document","()","<p>Evaluates to the document to which this element belongs, or nil if this\nelement doesn&#39;t belong to …\n"],["document?","Psych::Nodes::Document","classes/Psych/Nodes/Document.html#method-i-document-3F","()",""],["document?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-document-3F","()",""],["document_children=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_children-3D","(document_children)","<p>Enables or disables documentation of this CodeObject&#39;s children unless\nit has been turned off by …\n"],["document_self=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-document_self-3D","(document_self)","<p>Enables or disables documentation of this CodeObject unless it has been\nturned off by :enddoc:.  If the …\n"],["document_self_or_methods","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-document_self_or_methods","()","<p>Does this ClassModule or any of its methods have document_self set?\n"],["documentation_page","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_page","(store, generator, path, req, res)","<p>Fills in <code>res</code> with the class, module or page for\n<code>req</code> from <code>store</code>.\n<p><code>path</code> is relative to the mount_path and …\n"],["documentation_search","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_search","(store, generator, req, res)","<p>Creates the JSON search index on <code>res</code> for the given\n<code>store</code>.  <code>generator</code> must respond to #json_index to\nbuild. …\n"],["documentation_source","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-documentation_source","(path)","<p>Returns the RDoc::Store and path relative to <code>mount_path</code> for\ndocumentation at <code>path</code>.\n"],["documented?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-documented-3F","()","<p>Does this class or module have a comment with content or is #received_nodoc\ntrue?\n"],["documented?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-documented-3F","()","<p>Does this object have a comment with content or is #received_nodoc true?\n"],["documented?","RDoc::Constant","classes/RDoc/Constant.html#method-i-documented-3F","()","<p>A constant is documented if it has a comment, or is an alias for a\ndocumented class or module.\n"],["documented?","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-documented-3F","()","<p>A method/attribute is documented if any of the following is true:\n<p>it was marked with :nodoc:;\n<p>it has a …\n"],["done?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-done-3F","()",""],["done_adding","RDoc::Stats","classes/RDoc/Stats.html#method-i-done_adding","()","<p>Call this to mark the end of parsing for display purposes\n"],["done_documenting=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-done_documenting-3D","(value)","<p>Turns documentation on/off, and turns on/off #document_self and\n#document_children.\n<p>Once documentation …\n"],["done_installing","Gem","classes/Gem.html#method-c-done_installing","(&hook)","<p>Adds a post-installs hook that will be passed a Gem::DependencyInstaller\nand a list of installed specifications …\n"],["double_check_for","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-double_check_for","(*)","<p>@private This API on source might not be stable, and for now we expect\nplugins to download all specs …\n"],["double_check_for","Bundler::Source","classes/Bundler/Source.html#method-i-double_check_for","(*)","<p>it&#39;s possible that gems from one source depend on gems from some other\nsource, so now we download …\n"],["double_fig","BigDecimal","classes/BigDecimal.html#method-c-double_fig","()","<p>The BigDecimal.double_fig class method returns the number of digits a Float\nnumber is allowed to have. …\n"],["down","Bundler::Molinillo::DependencyGraph::Action","classes/Bundler/Molinillo/DependencyGraph/Action.html#method-i-down","(graph)","<p>Reverses the action on the given graph. @param  [DependencyGraph] graph the\ngraph to reverse the action …\n"],["down","Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Bundler::Molinillo::DependencyGraph::DeleteEdge","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Bundler::Molinillo::DependencyGraph::DetachVertexNamed","classes/Bundler/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-down","(graph)","<p>(see Action#down)\n"],["down","Bundler::Molinillo::DependencyGraph::Tag","classes/Bundler/Molinillo/DependencyGraph/Tag.html#method-i-down","(_graph)","<p>(see Action#down)\n"],["downcase","String","classes/String.html#method-i-downcase","(*args)","<p>Returns a copy of <em>str</em> with all uppercase letters replaced with\ntheir lowercase counterparts. Which letters …\n"],["downcase","Symbol","classes/Symbol.html#method-i-downcase","(*args)","<p>Same as <code>sym.to_s.downcase.intern</code>.\n"],["downcase!","String","classes/String.html#method-i-downcase-21","(*args)","<p>Downcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning …\n"],["downto","Date","classes/Date.html#method-i-downto","(p1)","<p>This method is equivalent to step(min, -1){|date| …}.\n"],["downto","Integer","classes/Integer.html#method-i-downto","(p1)","<p>Iterates the given block, passing in decreasing values from\n<code>int</code> down to and including <code>limit</code>.\n<p>If no block …\n"],["dowrite","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-dowrite","()",""],["drop","Array","classes/Array.html#method-i-drop","(p1)","<p>Drops first <code>n</code> elements from <code>ary</code> and returns the\nrest of the elements in an array.\n<p>If a negative number …\n"],["drop","Enumerable","classes/Enumerable.html#method-i-drop","(p1)","<p>Drops first n elements from <em>enum</em>, and returns rest elements in an\narray.\n\n<pre><code>a = [1, 2, 3, 4, 5, 0]\na.drop(3) ...\n</code></pre>\n"],["drop","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-drop","(p1)",""],["drop_while","Array","classes/Array.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerable","classes/Enumerable.html#method-i-drop_while","()","<p>Drops elements up to, but not including, the first element for which the\nblock returns <code>nil</code> or <code>false</code> and …\n"],["drop_while","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-drop_while","()",""],["dsa_sign_asn1","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dsa_sign_asn1","(p1)","<p>See the OpenSSL documentation for ECDSA_sign()\n"],["dsa_verify_asn1","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-dsa_verify_asn1","(p1, p2)","<p>See the OpenSSL documentation for ECDSA_verify()\n"],["dst?","Time","classes/Time.html#method-i-dst-3F","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre><code># CST6CDT:\n  Time.local(2000, ...</code></pre>\n"],["dstaddr","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-dstaddr","()","<p>Returns the destination address of <em>ifaddr</em>. nil is returned if the\nflags doesn&#39;t have IFF_POINTOPOINT …\n"],["dummy?","Encoding","classes/Encoding.html#method-i-dummy-3F","()","<p>Returns true for dummy encodings. A dummy encoding is an encoding for which\ncharacter handling is not …\n"],["dummy_makefile","MakeMakefile","classes/MakeMakefile.html#method-i-dummy_makefile","(srcdir)","<p>creates a stub Makefile.\n"],["dump","Bundler::YAMLSerializer","classes/Bundler/YAMLSerializer.html#method-i-dump","(hash)",""],["dump","JSON","classes/JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like …\n"],["dump","JSON::GenericObject","classes/JSON/GenericObject.html#method-c-dump","(obj, *args)",""],["dump","Marshal","classes/Marshal.html#method-c-dump","(p1, p2 = v2, p3 = v3)","<p>Serializes obj and all descendant objects. If anIO is specified, the\nserialized data will be written …\n"],["dump","ObjectSpace","classes/ObjectSpace.html#method-c-dump","(p1, p2 = {})","<p>Dump the contents of a ruby object as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump","Psych","classes/Psych.html#method-c-dump","(o, io = nil, options = {})","<p>Dump Ruby object <code>o</code> to a YAML string.  Optional\n<code>options</code> may be passed in to control the output format. …\n"],["dump","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-dump","()",""],["dump","String","classes/String.html#method-i-dump","()","<p>Produces a version of <code>str</code> with all non-printing characters\nreplaced by <code>\\nnn</code> notation and all special …\n"],["dump_all","ObjectSpace","classes/ObjectSpace.html#method-c-dump_all","(p1 = {})","<p>Dump the contents of the ruby heap as JSON.\n<p>This method is only expected to work with C Ruby. This is …\n"],["dump_hash","Bundler::YAMLSerializer","classes/Bundler/YAMLSerializer.html#method-i-dump_hash","(hash)",""],["dump_stream","Psych","classes/Psych.html#method-c-dump_stream","(*objects)","<p>Dump a list of objects as separate documents to a document stream.\n<p>Example:\n\n<pre><code>Psych.dump_stream(&quot;foo\\n  &quot;, ...</code></pre>\n"],["dup","BigDecimal","classes/BigDecimal.html#method-i-dup","()",""],["dup","Numeric","classes/Numeric.html#method-i-dup","()","<p>Returns the receiver.\n"],["dup","Object","classes/Object.html#method-i-dup","()","<p>Produces a shallow copy of <em>obj</em>—the instance variables of\n<em>obj</em> are copied, but not the objects they reference. …\n"],["dup","Singleton","classes/Singleton.html#method-i-dup","()","<p>Raises a TypeError to prevent duping.\n"],["dylibs","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-dylibs","(path)",""],["dylibs_darwin","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-dylibs_darwin","(path)",""],["dylibs_ldd","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-dylibs_ldd","(path)",""],["dynamic_width","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-dynamic_width","()","<p>Calculate the dynamic width of the terminal\n"],["dynamic_width_stty","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_stty","()",""],["dynamic_width_tput","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-dynamic_width_tput","()",""],["e2mm_message","Exception2MessageMapper::E2MM","classes/Exception2MessageMapper/E2MM.html#method-c-e2mm_message","(klass, exp)",""],["each","ARGF","classes/ARGF.html#method-i-each","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each","Array","classes/Array.html#method-i-each","()","<p>Calls the given block once for each element in <code>self</code>, passing\nthat element as a parameter.  Returns the …\n"],["each","Bundler::Index","classes/Bundler/Index.html#method-i-each","(&blk)",""],["each","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-each","()","<p>Enumerates through the vertices of the graph. @return [Array&lt;Vertex&gt;]\nThe graph&#39;s vertices. …\n"],["each","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-each","()","<p>@!visibility private Enumerates each action in the log @yield [Action]\n"],["each","Bundler::Settings::Mirrors","classes/Bundler/Settings/Mirrors.html#method-i-each","()",""],["each","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-each","()",""],["each","CSV","classes/CSV.html#method-i-each","(&block)","<p>Yields each row of the data source in turn.\n<p>Support for Enumerable.\n<p>The data source must be open for reading. …\n"],["each","CSV::FieldsConverter","classes/CSV/FieldsConverter.html#method-i-each","(&block)",""],["each","CSV::Row","classes/CSV/Row.html#method-i-each","(&block)","<p>Yields each pair of the row as header and field tuples (much like iterating\nover a Hash). This method …\n"],["each","CSV::Table","classes/CSV/Table.html#method-i-each","(&block)","<p>In the default mixed mode or row mode, iteration is the standard row major\nwalking of rows.  In column …\n"],["each","DBM","classes/DBM.html#method-i-each","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each","Dir","classes/Dir.html#method-i-each","()","<p>Calls the block once for each entry in this directory, passing the filename\nof each entry as a parameter …\n"],["each","ENV","classes/ENV.html#method-c-each","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each","Enumerator","classes/Enumerator.html#method-i-each","(*args)","<p>Iterates over the block according to how this Enumerator was constructed.\nIf no block and no arguments …\n"],["each","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-each","()",""],["each","Enumerator::Chain","classes/Enumerator/Chain.html#method-i-each","(*args)","<p>Iterates over the elements of the first enumerable by calling the “each”\nmethod on it with …\n"],["each","GDBM","classes/GDBM.html#method-i-each","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the corresponding <em>value</em> as a parameter. …\n"],["each","GetoptLong","classes/GetoptLong.html#method-i-each","()","<p>Iterator version of `get&#39;.\n<p>The block is called repeatedly with two arguments: The first is the option\n…\n"],["each","Hash","classes/Hash.html#method-i-each","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each","IO","classes/IO.html#method-i-each","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each","Net::POP3","classes/Net/POP3.html#method-i-each","()",""],["each","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-each","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-i-each","()","<p>Calls the given block once for each element in self, passing that element\nas parameter <em>asn1</em>. If no block …\n"],["each","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each","(eol=$/)","<p>Executes the block for every line in the stream where lines are separated\nby <em>eol</em>.\n<p>See also #gets\n"],["each","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-each","()","<p>For a block.\n<p>Receive the section and its pairs for the current configuration.\n\n<pre><code>config.each do |section, ...</code></pre>\n"],["each","Prime","classes/Prime.html#method-i-each","(ubound = nil, generator = EratosthenesGenerator.new, &block)","<p>Iterates the given block over all prime numbers.\n<p>Parameters\n<p><code>ubound</code> &mdash; Optional. An arbitrary positive number. …\n"],["each","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-each","()","<p>Iterates the given block for each prime number.\n"],["each","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-each","(&block)","<p>Iterate over each node in the tree. Yields each node to <code>block</code>\ndepth first.\n"],["each","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-each","(&block)","<p>Iterate over the key/value pairs:\n\n<pre><code>attlist_decl.each { |attribute_name, attribute_value| ... }</code></pre>\n"],["each","REXML::Attributes","classes/REXML/Attributes.html#method-i-each","()","<p>Iterates over each attribute of an Element, yielding the expanded name and\nvalue as a pair of Strings …\n"],["each","REXML::Elements","classes/REXML/Elements.html#method-i-each","( xpath=nil )","<p>Iterates through all of the child Elements, optionally filtering them by a\ngiven XPath\n<p>xpath &mdash; optional. …\n\n"],["each","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-each","()",""],["each","REXML::Parent","classes/REXML/Parent.html#method-i-each","(&block)",""],["each","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-each","()",""],["each","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-each","(element, path, namespaces=EMPTY_HASH, &block)",""],["each","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-each","()","<p>Enumerates rows of the Enumerable objects.\n"],["each","REXML::XPath","classes/REXML/XPath.html#method-c-each","(element, path=nil, namespaces=nil, variables={}, options={}, &block)","<p>Iterates over nodes that match the given path, calling the supplied block\nwith the match.\n<p>element &mdash; The …\n"],["each","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-each","(&block)",""],["each","Range","classes/Range.html#method-i-each","()","<p>Iterates over the elements of range, passing each in turn to the block.\n<p>The <code>each</code> method can only be used …\n"],["each","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-each","()","<p>Yields event/tuple pairs until this NotifyTemplateEntry expires.\n"],["each","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-each","()","<p>Iterates over all discovered TupleSpaces starting with the primary.\n"],["each","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-each","()","<p>Iterate through the tuple, yielding the index or key, and the value, thus\nensuring arrays are iterated …\n"],["each","SDBM","classes/SDBM.html#method-i-each","()","<p>Iterates over each key-value pair in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each","Set","classes/Set.html#method-i-each","(&block)","<p>Calls the given block once for each element in the set, passing the element\nas parameter.  Returns an …\n"],["each","Shell::Cat","classes/Shell/Cat.html#method-i-each","(rs = nil)",""],["each","Shell::Concat","classes/Shell/Concat.html#method-i-each","(rs = nil)",""],["each","Shell::Echo","classes/Shell/Echo.html#method-i-each","(rs = nil)",""],["each","Shell::Filter","classes/Shell/Filter.html#method-i-each","(rs = nil)","<p>Iterates a block for each line.\n"],["each","Shell::Glob","classes/Shell/Glob.html#method-i-each","(rs = nil)",""],["each","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-each","(rs = nil)",""],["each","Shell::Tee","classes/Shell/Tee.html#method-i-each","(rs = nil)",""],["each","Shell::Void","classes/Shell/Void.html#method-i-each","(rs = nil)",""],["each","StringIO","classes/StringIO.html#method-i-each","(*args)","<p>See IO#each.\n"],["each","Struct","classes/Struct.html#method-i-each","()","<p>Yields the value of each struct member in order.  If no block is given an\nenumerator is returned.\n\n<pre><code>Customer ...\n</code></pre>\n"],["each","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-each","()","<p>Iterate passwords in the database.\n"],["each","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-each","()","<p>Iterates over the request headers\n"],["each","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-each","()","<p>Iterates over each header in the response\n"],["each","WIN32OLE","classes/WIN32OLE.html#method-i-each","()","<p>Iterates over each item of OLE collection which has IEnumVARIANT interface.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...\n</code></pre>\n"],["each","YAML::DBM","classes/YAML/DBM.html#method-i-each","()",""],["each","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_active_object","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-each_active_object","()",""],["each_address","Resolv","classes/Resolv.html#method-c-each_address","(name, &block)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv","classes/Resolv.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code>.\n"],["each_address","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the DNS\nresolver.\n<p><code>name</code> can be a Resolv::DNS::Name …\n"],["each_address","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-each_address","(name, &proc)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the\nhosts file.\n"],["each_address","Resolv::MDNS","classes/Resolv/MDNS.html#method-i-each_address","(name)","<p>Iterates over all IP addresses for <code>name</code> retrieved from the\nmDNS resolver, provided name ends with “local”. …\n"],["each_ancestor","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-each_ancestor","()","<p>Iterates the ancestors of this class or module for which an\nRDoc::ClassModule exists.\n"],["each_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-each_attribute","()","<p>Iterator for attributes\n"],["each_attribute","REXML::Attributes","classes/REXML/Attributes.html#method-i-each_attribute","()","<p>Iterates over the attributes of an Element.  Yields actual Attribute nodes,\nnot String values.\n\n<pre><code>doc = Document.new ...\n</code></pre>\n"],["each_byte","ARGF","classes/ARGF.html#method-i-each_byte","()","<p>Iterates over each byte of each file in <code>ARGV</code>. A byte is\nreturned as an <code>Integer</code> in the range 0..255.\n<p>This …\n"],["each_byte","IO","classes/IO.html#method-i-each_byte","()","<p>Calls the given block once for each byte (0..255) in <em>ios</em>, passing\nthe byte as an argument. The stream …\n"],["each_byte","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each_byte","()","<p>Calls the given block once for each byte in the stream.\n"],["each_byte","String","classes/String.html#method-i-each_byte","()","<p>Passes each byte in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_byte ...\n</code></pre>\n"],["each_byte","StringIO","classes/StringIO.html#method-i-each_byte","()","<p>See IO#each_byte.\n"],["each_byte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_byte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_char","ARGF","classes/ARGF.html#method-i-each_char","()","<p>Iterates over each character of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_char","IO","classes/IO.html#method-i-each_char","()","<p>Calls the given block once for each character in <em>ios</em>, passing the\ncharacter as an argument. The stream …\n"],["each_char","String","classes/String.html#method-i-each_char","()","<p>Passes each character in <em>str</em> to the given block, or returns an\nenumerator if no block is given.\n\n<pre><code>&quot;hello&quot;.each_char ...\n</code></pre>\n"],["each_char","StringIO","classes/StringIO.html#method-i-each_char","()","<p>See IO#each_char.\n"],["each_char","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_char","()","<p>See Zlib::GzipReader documentation for a description.\n"],["each_child","Dir","classes/Dir.html#method-c-each_child","(*args)","<p>Calls the block once for each entry except for “.” and “..” in the named\ndirectory, …\n"],["each_child","Dir","classes/Dir.html#method-i-each_child","()","<p>Calls the block once for each entry except for “.” and “..” in this\ndirectory, passing …\n"],["each_child","Pathname","classes/Pathname.html#method-i-each_child","(with_directory=true, &b)","<p>Iterates over the children of the directory (files and subdirectories, not\nrecursive).\n<p>It yields Pathname …\n"],["each_child","REXML::Parent","classes/REXML/Parent.html#method-i-each_child","(&block)",""],["each_child","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-each_child","()","<p>Iterate all direct child instruction sequences. Iteration order is\nimplementation/version defined so …\n"],["each_classmodule","RDoc::Context","classes/RDoc/Context.html#method-i-each_classmodule","()","<p>Iterator for classes and modules\n"],["each_codepoint","ARGF","classes/ARGF.html#method-i-each_codepoint","()","<p>Iterates over each codepoint of each file in <code>ARGF</code>.\n<p>This method allows you to treat the files supplied …\n"],["each_codepoint","IO","classes/IO.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>ios</em>,\npassing the codepoint as an argument. The stream …\n"],["each_codepoint","String","classes/String.html#method-i-each_codepoint","()","<p>Passes the <code>Integer</code> ordinal of each character in <em>str</em>,\nalso known as a <em>codepoint</em> when applied to Unicode …\n"],["each_codepoint","StringIO","classes/StringIO.html#method-i-each_codepoint","()","<p>See IO#each_codepoint.\n"],["each_cons","Enumerable","classes/Enumerable.html#method-i-each_cons","(p1)","<p>Iterates the given block for each array of consecutive &lt;n&gt; elements. \nIf no block is given, returns …\n"],["each_const","OptionParser","classes/OptionParser.html#method-c-each_const","(path, base = ::Object)",""],["each_constant","RDoc::Context","classes/RDoc/Context.html#method-i-each_constant","()","<p>Iterator for constants\n"],["each_data","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-each_data","()","<p>Yields each entry in this FormData\n"],["each_element","REXML::Element","classes/REXML/Element.html#method-i-each_element","( xpath=nil )","<p>Synonym for Element.elements.each\n"],["each_element_with_attribute","REXML::Element","classes/REXML/Element.html#method-i-each_element_with_attribute","( key, value=nil, max=0, name=nil )","<p>Iterates through the child elements, yielding for each Element that has a\nparticular attribute set.\n<p>key … &mdash; "],["each_element_with_text","REXML::Element","classes/REXML/Element.html#method-i-each_element_with_text","( text=nil, max=0, name=nil )","<p>Iterates through the children, yielding for each Element that has a\nparticular text set.\n<p>text &mdash; the text …\n"],["each_entry","Enumerable","classes/Enumerable.html#method-i-each_entry","(*args)","<p>Calls <em>block</em> once for each element in <code>self</code>, passing\nthat element as a parameter, converting multiple values …\n"],["each_entry","Pathname","classes/Pathname.html#method-i-each_entry","()","<p>Iterates over the entries (files and subdirectories) in the directory,\nyielding a Pathname object for …\n"],["each_extend","RDoc::Context","classes/RDoc/Context.html#method-i-each_extend","()","<p>Iterator for extension modules\n"],["each_filename","Pathname","classes/Pathname.html#method-i-each_filename","()","<p>Iterates over each component of the path.\n\n<pre><code>Pathname.new(&quot;/usr/bin/ruby&quot;).each_filename {|filename| ... ...</code></pre>\n"],["each_grapheme_cluster","String","classes/String.html#method-i-each_grapheme_cluster","()","<p>Passes each grapheme cluster in <em>str</em> to the given block, or returns\nan enumerator if no block is given. …\n"],["each_include","RDoc::Context","classes/RDoc/Context.html#method-i-each_include","()","<p>Iterator for included modules\n"],["each_index","Array","classes/Array.html#method-i-each_index","()","<p>Same as Array#each, but passes the <code>index</code> of the element\ninstead of the element itself.\n<p>An Enumerator is …\n"],["each_index","REXML::Parent","classes/REXML/Parent.html#method-i-each_index","( &block )",""],["each_key","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-each_key","()",""],["each_key","DBM","classes/DBM.html#method-i-each_key","()","<p>Calls the block once for each key string in the database. Returns self.\n"],["each_key","ENV","classes/ENV.html#method-c-each_key","()","<p>Yields each environment variable name.\n<p>An Enumerator is returned if no block is given.\n"],["each_key","GDBM","classes/GDBM.html#method-i-each_key","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> as a parameter.\n"],["each_key","Hash","classes/Hash.html#method-i-each_key","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the key as\na parameter.\n<p>If no block is given, an enumerator …\n"],["each_key","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-each_key","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_key","SDBM","classes/SDBM.html#method-i-each_key","()","<p>Iterates over each <code>key</code> in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_line","ARGF","classes/ARGF.html#method-i-each_line","(*args)","<p>Returns an enumerator which iterates over each line (separated by\n<em>sep</em>, which defaults to your platform&#39;s …\n"],["each_line","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-each_line","(row_separator)",""],["each_line","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-i-each_line","(row_separator)",""],["each_line","CSV::Parser::UnoptimizedStringIO","classes/CSV/Parser/UnoptimizedStringIO.html#method-i-each_line","(*args, &block)",""],["each_line","IO","classes/IO.html#method-i-each_line","(*args)","<p>Executes the block for every line in <em>ios</em>, where lines are\nseparated by <em>sep</em>. <em>ios</em> must be opened for reading …\n"],["each_line","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-each_line","(eol=$/)",""],["each_line","Pathname","classes/Pathname.html#method-i-each_line","(p1 = v1, p2 = v2, p3 = v3)","<p>Iterates over each line in the file and yields a String object for each.\n"],["each_line","String","classes/String.html#method-i-each_line","(*args)","<p>Splits <em>str</em> using the supplied parameter as the record separator\n(<code>$/</code> by default), passing each substring …\n"],["each_line","StringIO","classes/StringIO.html#method-i-each_line","(*args)","<p>See IO#each.\n"],["each_line","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-each_line","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["each_mail","Net::POP3","classes/Net/POP3.html#method-i-each_mail","()","<p>Yields each message to the passed-in block in turn. Equivalent to:\n\n<pre><code>pop3.mails.each do |popmail|\n  .... ...</code></pre>\n"],["each_method","RDoc::Context","classes/RDoc/Context.html#method-i-each_method","()","<p>Iterator for methods\n"],["each_name","Resolv","classes/Resolv.html#method-c-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv","classes/Resolv.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code>.\n"],["each_name","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_name","(address)","<p>Iterates over all hostnames for <code>address</code> retrieved from the DNS\nresolver.\n<p><code>address</code> must be a Resolv::IPv4 …\n"],["each_name","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-each_name","(address, &proc)","<p>Iterates over all hostnames for <code>address</code> retrieved from the\nhosts file.\n"],["each_object","ObjectSpace","classes/ObjectSpace.html#method-c-each_object","(*args)","<p>Calls the block once for each living, nonimmediate object in this Ruby\nprocess. If <em>module</em> is specified, …\n"],["each_option","GetoptLong","classes/GetoptLong.html#method-i-each_option","()","<p>`each_option&#39; is an alias of `each&#39;.\n"],["each_option","OptionParser::List","classes/OptionParser/List.html#method-i-each_option","(&block)","<p>Iterates over each option, passing the option to the <code>block</code>.\n"],["each_pair","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-each_pair","()",""],["each_pair","CSV::Row","classes/CSV/Row.html#method-i-each_pair","(&block)",""],["each_pair","DBM","classes/DBM.html#method-i-each_pair","()","<p>Calls the block once for each [key, value] pair in the database. Returns\nself.\n"],["each_pair","ENV","classes/ENV.html#method-c-each_pair","()","<p>Yields each environment variable <code>name</code> and <code>value</code>.\n<p>If no block is given an Enumerator is returned.\n"],["each_pair","GDBM","classes/GDBM.html#method-i-each_pair","()","<p>Executes <em>block</em> for each key in the database, passing the\n<em>key</em> and the corresponding <em>value</em> as a parameter. …\n"],["each_pair","Hash","classes/Hash.html#method-i-each_pair","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the\nkey-value pair as parameters.\n<p>If no block is given, …\n"],["each_pair","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-each_pair","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_pair","OpenStruct","classes/OpenStruct.html#method-i-each_pair","()","<p>Yields all attributes (as symbols) along with the corresponding values or\nreturns an enumerator if no …\n"],["each_pair","SDBM","classes/SDBM.html#method-i-each_pair","()","<p>Iterates over each key-value pair in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_pair","Struct","classes/Struct.html#method-i-each_pair","()","<p>Yields the name and value of each struct member in order.  If no block is\ngiven an enumerator is returned. …\n"],["each_pair","YAML::DBM","classes/YAML/DBM.html#method-i-each_pair","()","<p>Calls the given block once for each <code>key</code>, <code>value</code>\npair in the database.\n<p>Returns <code>self</code>.\n"],["each_parent","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-each_parent","()","<p>Yields each parent of this CodeObject.  See also\nRDoc::ClassModule#each_ancestor\n"],["each_prime","Integer","classes/Integer.html#method-c-each_prime","(ubound)","<p>Iterates the given block over all prime numbers.\n<p>See <code>Prime</code>#each for more details.\n"],["each_recursive","REXML::Node","classes/REXML/Node.html#method-i-each_recursive","()","<p>Visit all subnodes of <code>self</code> recursively\n"],["each_resource","Resolv::DNS","classes/Resolv/DNS.html#method-i-each_resource","(name, typeclass, &proc)","<p>Iterates over all <code>typeclass</code> DNS resources for\n<code>name</code>.  See #getresource for argument details.\n"],["each_section","RDoc::Context","classes/RDoc/Context.html#method-i-each_section","()","<p>Iterator for each section&#39;s contents sorted by title.  The\n<code>section</code>, the section&#39;s <code>constants</code> and …\n"],["each_slice","Enumerable","classes/Enumerable.html#method-i-each_slice","(p1)","<p>Iterates the given block for each slice of &lt;n&gt; elements.  If no block\nis given, returns an enumerator. …\n"],["each_strongly_connected_component","TSort","classes/TSort.html#method-c-each_strongly_connected_component","(each_node, each_child)","<p>The iterator version of the TSort.strongly_connected_components method.\n<p>The graph is represented by <em>each_node</em> …\n"],["each_strongly_connected_component","TSort","classes/TSort.html#method-i-each_strongly_connected_component","()","<p>The iterator version of the #strongly_connected_components method.\n<code><em>obj</em>.each_strongly_connected_component</code> …\n"],["each_strongly_connected_component_from","TSort","classes/TSort.html#method-c-each_strongly_connected_component_from","(node, each_child, id_map={}, stack=[])","<p>Iterates over strongly connected components in a graph. The graph is\nrepresented by <em>node</em> and <em>each_child</em> …\n"],["each_strongly_connected_component_from","TSort","classes/TSort.html#method-i-each_strongly_connected_component_from","(node, id_map={}, stack=[])","<p>Iterates over strongly connected component in the subgraph reachable from\n<em>node</em>.\n<p>Return value is unspecified. …\n"],["each_value","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-each_value","()",""],["each_value","DBM","classes/DBM.html#method-i-each_value","()","<p>Calls the block once for each value string in the database. Returns self.\n"],["each_value","ENV","classes/ENV.html#method-c-each_value","()","<p>Yields each environment variable <code>value</code>.\n<p>An Enumerator is returned if no block was given.\n"],["each_value","GDBM","classes/GDBM.html#method-i-each_value","()","<p>Executes <em>block</em> for each key in the database, passing the\ncorresponding <em>value</em> as a parameter.\n"],["each_value","Hash","classes/Hash.html#method-i-each_value","()","<p>Calls <em>block</em> once for each key in <em>hsh</em>, passing the value\nas a parameter.\n<p>If no block is given, an enumerator …\n"],["each_value","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-each_value","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["each_value","SDBM","classes/SDBM.html#method-i-each_value","()","<p>Iterates over each <code>value</code> in the database.\n<p>If no block is given, returns an Enumerator.\n"],["each_value","YAML::DBM","classes/YAML/DBM.html#method-i-each_value","()","<p>Calls the given block for each value in database.\n<p>Returns <code>self</code>.\n"],["each_with_index","Enumerable","classes/Enumerable.html#method-i-each_with_index","(*args)","<p>Calls <em>block</em> with two arguments, the item and its index, for each\nitem in <em>enum</em>.  Given arguments are passed …\n"],["each_with_index","Enumerator","classes/Enumerator.html#method-i-each_with_index","()","<p>Same as Enumerator#with_index(0), i.e. there is no starting offset.\n<p>If no block is given, a new Enumerator …\n"],["each_with_object","Enumerable","classes/Enumerable.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object given,\nand returns the initially given …\n"],["each_with_object","Enumerator","classes/Enumerator.html#method-i-each_with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["ecdh_curves=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ecdh_curves-3D","(p1)","<p>Sets the list of “supported elliptic curves” for this context.\n<p>For a TLS client, the list is …\n"],["echo","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-echo","(*strings)","<p>Returns a Echo object, for the given <code>strings</code>\n"],["echo=","IO","classes/IO.html#method-i-echo-3D","(p1)","<p>Enables/disables echo back. On some platforms, all combinations of this\nflags and raw/cooked mode may …\n"],["echo?","IO","classes/IO.html#method-i-echo-3F","()","<p>Returns <code>true</code> if echo back is enabled.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["egd","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-egd","(p1)","<p>Same as ::egd_bytes but queries 255 bytes by default.\n"],["egd_bytes","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-egd_bytes","(p1, p2)","<p>Queries the entropy gathering daemon EGD on socket path given by\n<em>filename</em>.\n<p>Fetches <em>length</em> number of bytes …\n"],["egid","Process","classes/Process.html#method-c-egid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["egid=","Process","classes/Process.html#method-c-egid-3D","(p1)","<p>Sets the effective group ID for this process. Not available on all\nplatforms.\n"],["ehlo","Net::SMTP","classes/Net/SMTP.html#method-i-ehlo","(domain)",""],["eid","Process::GID","classes/Process/GID.html#method-c-eid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["eid","Process::UID","classes/Process/UID.html#method-c-eid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["eigenvalue_matrix","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvalue_matrix","()","<p>Returns the block diagonal eigenvalue matrix <code>D</code>\n"],["eigenvalues","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvalues","()","<p>Returns the eigenvalues in an array\n"],["eigenvector_matrix","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix","()","<p>Returns the eigenvector matrix <code>V</code>\n"],["eigenvector_matrix_inv","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvector_matrix_inv","()","<p>Returns the inverse of the eigenvector matrix <code>V</code>\n"],["eigenvectors","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-eigenvectors","()","<p>Returns an array of the eigenvectors\n"],["element","Object","classes/Object.html#method-i-element","(i, j)",""],["element=","REXML::Attribute","classes/REXML/Attribute.html#method-i-element-3D","( element )","<p>Sets the element of which this object is an attribute.  Normally, this is\nnot directly called.\n<p>Returns …\n"],["element_initialize_arguments?","RSS::Utils","classes/RSS/Utils.html#method-i-element_initialize_arguments-3F","(args)","<p>This method is used inside of several different objects to determine if\nspecial behavior is needed in …\n"],["elementdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-elementdecl","(content)","<p>&lt;!ELEMENT …&gt;\n"],["elementdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-elementdecl-3F","()","<p>Content: [ String text ]\n"],["emacs_editing_mode","Readline","classes/Readline.html#method-c-emacs_editing_mode","()","<p>Specifies Emacs editing mode. The default is this mode. See the manual of\nGNU Readline for details of …\n"],["emacs_editing_mode?","Readline","classes/Readline.html#method-c-emacs_editing_mode-3F","()","<p>Returns true if emacs mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["emphasis","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-emphasis","(text)","<p>Wraps <code>text</code> in emphasis for rdoc inline formatting\n"],["empty","Bundler::Molinillo::ResolutionState","classes/Bundler/Molinillo/ResolutionState.html#method-c-empty","()","<p>Returns an empty resolution state @return [ResolutionState] an empty state\n"],["empty","Matrix","classes/Matrix.html#method-c-empty","(row_count = 0, column_count = 0)","<p>Creates a empty matrix of <code>row_count</code> x\n<code>column_count</code>. At least one of <code>row_count</code> or\n<code>column_count</code> must be …\n"],["empty","Psych::Handler","classes/Psych/Handler.html#method-i-empty","()","<p>Called when an empty event happens. (Which, as far as I can tell, is\nnever).\n"],["empty?","Array","classes/Array.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <code>self</code> contains no elements.\n\n<pre><code>[].empty?   #=&gt; true\n</code></pre>\n"],["empty?","Bundler::Index","classes/Bundler/Index.html#method-i-empty-3F","()",""],["empty?","Bundler::VersionRanges","classes/Bundler/VersionRanges.html#method-c-empty-3F","(ranges, neqs)",""],["empty?","Bundler::VersionRanges::ReqR","classes/Bundler/VersionRanges/ReqR.html#method-i-empty-3F","()",""],["empty?","CSV::FieldsConverter","classes/CSV/FieldsConverter.html#method-i-empty-3F","()",""],["empty?","DBM","classes/DBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty, false otherwise.\n"],["empty?","Dir","classes/Dir.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file is an empty directory,\n<code>false</code> if it is not a directory or non-empty.\n"],["empty?","ENV","classes/ENV.html#method-c-empty-3F","()","<p>Returns true when there are no environment variables\n"],["empty?","File","classes/File.html#method-c-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","FileTest","classes/FileTest.html#method-i-empty-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["empty?","GDBM","classes/GDBM.html#method-i-empty-3F","()","<p>Returns true if the database is empty.\n"],["empty?","Hash","classes/Hash.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>hsh</em> contains no key-value pairs.\n\n<pre><code>{}.empty?   #=&gt; true\n</code></pre>\n"],["empty?","Pathname","classes/Pathname.html#method-i-empty-3F","()","<p>Tests the file is empty.\n<p>See Dir#empty? and FileTest.empty?.\n"],["empty?","Queue","classes/Queue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","RDoc::Comment","classes/RDoc/Comment.html#method-i-empty-3F","()","<p>A comment is empty if its text String is empty.\n"],["empty?","REXML::Elements","classes/REXML/Elements.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no <code>Element</code> children,\n<code>false</code> otherwise\n"],["empty?","REXML::IOSource","classes/REXML/IOSource.html#method-i-empty-3F","()",""],["empty?","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-empty-3F","()","<p>Returns true if there are no more events\n"],["empty?","REXML::Source","classes/REXML/Source.html#method-i-empty-3F","()","<p>@return true if the Source is exhausted\n"],["empty?","REXML::Text","classes/REXML/Text.html#method-i-empty-3F","()",""],["empty?","SDBM","classes/SDBM.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the database is empty.\n"],["empty?","Set","classes/Set.html#method-i-empty-3F","()","<p>Returns true if the set contains no elements.\n"],["empty?","SizedQueue","classes/SizedQueue.html#method-i-empty-3F","()","<p>Returns <code>true</code> if the queue is empty.\n"],["empty?","String","classes/String.html#method-i-empty-3F","()","<p>Returns <code>true</code> if <em>str</em> has a length of zero.\n\n<pre><code>&quot;hello&quot;.empty?   #=&gt; false\n&quot; &quot;.empty?       #=&gt; false\n&quot;&quot;.empty? ...\n</code></pre>\n"],["empty?","StringScanner","classes/StringScanner.html#method-i-empty-3F","()","<p>Equivalent to #eos?. This method is obsolete, use #eos? instead.\n"],["empty?","Symbol","classes/Symbol.html#method-i-empty-3F","()","<p>Returns whether <em>sym</em> is :“” or not.\n"],["empty?","ThreadsWait","classes/ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty?","ThreadsWait","classes/ThreadsWait.html#method-i-empty-3F","()","<p>Returns <code>true</code> if there are no threads in the pool still\nrunning.\n"],["empty_directory","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-empty_directory","(destination, config = {})","<p>Creates an empty directory.\n<p>Parameters\n<p>destination&lt;String&gt; &mdash; the relative path to the destination root. …\n"],["enable","GC","classes/GC.html#method-c-enable","()","<p>Enables garbage collection, returning <code>true</code> if garbage\ncollection was previously disabled.\n\n<pre><code>GC.disable  ...\n</code></pre>\n"],["enable","GC::Profiler","classes/GC/Profiler.html#method-c-enable","()","<p>Starts the GC profiler.\n"],["enable","TracePoint","classes/TracePoint.html#method-i-enable","(target: nil, target_line: nil, &blk)",""],["enable_close","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-enable_close","()","<p>Enable a call to dlclose() when this handle is garbage collected.\n"],["enable_config","MakeMakefile","classes/MakeMakefile.html#method-i-enable_config","(config, default=nil)","<p>Tests for the presence of an <code>--enable-</code><em>config</em> or\n<code>--disable-</code><em>config</em> option. Returns <code>true</code> if\nthe enable option …\n"],["enable_fallback_scsv","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-enable_fallback_scsv","()","<p>Activate TLS_FALLBACK_SCSV for this context. See RFC 7507.\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-i-enable_ssl","(verify_or_params = {}, certs = nil, port = nil)","<p>Enables SSL for this instance.  Must be called before the connection is\nestablished to have any effect. …\n"],["enable_ssl","Net::POP3","classes/Net/POP3.html#method-c-enable_ssl","(*args)","<p>Enable SSL for all new instances. <code>params</code> is passed to\nOpenSSL::SSLContext#set_params.\n"],["enable_ssl","Net::SMTP","classes/Net/SMTP.html#method-i-enable_ssl","(context = SMTP.default_ssl_context)",""],["enable_starttls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object. <code>context</code> is a\nOpenSSL::SSL::SSLContext object.\n"],["enable_starttls_auto","Net::SMTP","classes/Net/SMTP.html#method-i-enable_starttls_auto","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (STARTTLS) for this object if server accepts.\n<code>context</code> is a OpenSSL::SSL::SSLContext …\n"],["enable_tls","Net::SMTP","classes/Net/SMTP.html#method-i-enable_tls","(context = SMTP.default_ssl_context)","<p>Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object. \nMust be called before the …\n"],["enabled?","GC::Profiler","classes/GC/Profiler.html#method-c-enabled-3F","()","<p>The current status of GC profile mode.\n"],["enabled?","RubyVM::MJIT","classes/RubyVM/MJIT.html#method-c-enabled-3F","()","<p>Returns true if JIT is enabled\n"],["enabled?","TracePoint","classes/TracePoint.html#method-i-enabled-3F","()","<p>The current status of the trace\n"],["enc_key","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-enc_key","()",""],["enclose","ThreadGroup","classes/ThreadGroup.html#method-i-enclose","()","<p>Prevents threads from being added to or removed from the receiving\nThreadGroup.\n<p>New threads can still …\n"],["enclosed?","ThreadGroup","classes/ThreadGroup.html#method-i-enclosed-3F","()","<p>Returns <code>true</code> if the <code>thgrp</code> is enclosed. See also\nThreadGroup#enclose.\n"],["encode","REXML::Encoding","classes/REXML/Encoding.html#method-i-encode","(string)",""],["encode","String","classes/String.html#method-i-encode","(*args)","<p>The first form returns a copy of <code>str</code> transcoded to encoding\n<code>encoding</code>. The second form returns a copy …\n"],["encode","URI::Escape","classes/URI/Escape.html#method-i-encode","(*arg)",""],["encode!","RDoc::Comment","classes/RDoc/Comment.html#method-i-encode-21","(encoding)","<p>HACK dubious\n"],["encode!","String","classes/String.html#method-i-encode-21","(*args)","<p>The first form transcodes the contents of <em>str</em> from str.encoding to\n<code>encoding</code>. The second form transcodes …\n"],["encode64","Base64","classes/Base64.html#method-i-encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 2045. Line feeds are added to …\n"],["encode_fallback","RDoc::Text","classes/RDoc/Text.html#method-c-encode_fallback","(character, encoding, fallback)","<p>Transcodes <code>character</code> to <code>encoding</code> with a\n<code>fallback</code> character.\n"],["encode_utf7","Net::IMAP","classes/Net/IMAP.html#method-c-encode_utf7","(s)","<p>Encode a string from UTF-8 format to modified UTF-7.\n"],["encode_www_form","URI","classes/URI.html#method-c-encode_www_form","(enum, enc=nil)","<p>Generates URL-encoded form data from given <code>enum</code>.\n<p>This generates application/x-www-form-urlencoded data …\n"],["encode_www_form_component","URI","classes/URI.html#method-c-encode_www_form_component","(str, enc=nil)","<p>Encodes given <code>str</code> to URL-encoded form data.\n<p>This method doesn&#39;t convert *, -, ., 0-9, A-Z, _, a-z, …\n"],["encoding","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-encoding","()","<p>The external encoding for standard input.\n"],["encoding","REXML::Document","classes/REXML/Document.html#method-i-encoding","()","<p>@return the XMLDecl encoding of this document as an Encoding object. If no\nXMLDecl has been set, returns …\n"],["encoding","Regexp","classes/Regexp.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Ripper","classes/Ripper.html#method-i-encoding","()","<p>Return encoding of the source.\n"],["encoding","String","classes/String.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of obj.\n"],["encoding","Symbol","classes/Symbol.html#method-i-encoding","()","<p>Returns the Encoding object that represents the encoding of <em>sym</em>.\n"],["encoding=","REXML::Encoding","classes/REXML/Encoding.html#method-i-encoding-3D","(encoding)",""],["encoding=","REXML::Source","classes/REXML/Source.html#method-i-encoding-3D","(enc)","<p>Inherited from Encoding Overridden to support optimized en/decoding\n"],["encoding=","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-encoding-3D","( enc )",""],["encrypt","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-encrypt","(*args)","<p>Initializes the Cipher for encryption.\n<p>Make sure to call Cipher#encrypt or Cipher#decrypt before using …\n"],["encrypt","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-encrypt","(p1, p2, p3 = v3, p4 = v4)",""],["end","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-end","()",""],["end","MatchData","classes/MatchData.html#method-i-end","(p1)","<p>Returns the offset of the character immediately following the end of the\n<em>n</em>th element of the match array …\n"],["end","Range","classes/Range.html#method-i-end","()","<p>Returns the object that defines the end of the range.\n\n<pre><code>(1..10).end    #=&gt; 10\n(1...10).end   #=&gt; 10\n</code></pre>\n"],["end","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-end","()","<p>Closes the stream. All operations on the closed stream will raise an\nexception.\n"],["endElement","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-endElement","(name)",""],["end_document","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_document","(p1)","<p>End a document emission with an <code>implicit</code> ending.\n<p>See Psych::Handler#end_document\n"],["end_document","Psych::Handler","classes/Psych/Handler.html#method-i-end_document","(implicit)","<p>Called with the document ends.  <code>implicit</code> is a boolean value\nindicating whether or not the document has …\n"],["end_document","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-end_document","(implicit_end = !streaming?)","<p>Handles end_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["end_document","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_document","()",""],["end_element","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_element","(uri, localname, qname)",""],["end_element?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-end_element-3F","()","<p>Content: [ String tag_name ]\n"],["end_mapping","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_mapping","()","<p>Emit the end of a mapping.\n<p>See Psych::Handler#end_mapping\n"],["end_mapping","Psych::Handler","classes/Psych/Handler.html#method-i-end_mapping","()","<p>Called when a map ends\n"],["end_prefix_mapping","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-end_prefix_mapping","(prefix)",""],["end_seen?","Ripper","classes/Ripper.html#method-i-end_seen-3F","()","<p>Return true if parsed source ended by +_<em>END</em>_+.\n"],["end_sequence","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_sequence","()","<p>End sequence emission.\n<p>See Psych::Handler#end_sequence\n"],["end_sequence","Psych::Handler","classes/Psych/Handler.html#method-i-end_sequence","()","<p>Called when a sequence ends.\n"],["end_stream","Psych::Emitter","classes/Psych/Emitter.html#method-i-end_stream","()","<p>End a stream emission\n<p>See Psych::Handler#end_stream\n"],["end_stream","Psych::Handler","classes/Psych/Handler.html#method-i-end_stream","()","<p>Called when the YAML stream ends\n"],["end_stream","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-end_stream","()",""],["end_with?","String","classes/String.html#method-i-end_with-3F","(*args)","<p>Returns true if <code>str</code> ends with one of the <code>suffixes</code>\ngiven.\n\n<pre><code>&quot;hello&quot;.end_with?(&quot;ello&quot;)               #=&gt; true ...\n</code></pre>\n"],["ended?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-ended-3F","()","<p>Returns true if the stream is closed.\n"],["endgrent","Etc","classes/Etc.html#method-c-endgrent","()","<p>Ends the process of scanning through the /etc/group file begun by\n::getgrent, and closes the file.\n"],["endpwent","Etc","classes/Etc.html#method-c-endpwent","()","<p>Ends the process of scanning through the /etc/passwd file begun with\n::getpwent, and closes the file. …\n"],["engines","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-engines","()","<p>Returns an array of currently loaded engines.\n"],["england","Date","classes/Date.html#method-i-england","()","<p>This method is equivalent to new_start(Date::ENGLAND).\n"],["enq","Bundler::Worker","classes/Bundler/Worker.html#method-i-enq","(obj)","<p>Enqueue a request to be executed in the worker pool\n<p>@param obj [String] mostly it is name of spec that …\n"],["enq","Queue","classes/Queue.html#method-i-enq","(p1)",""],["enq","SizedQueue","classes/SizedQueue.html#method-i-enq","(*args)",""],["enqueued?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-enqueued-3F","()",""],["ensure_all_gems_in_lockfile!","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-ensure_all_gems_in_lockfile-21","(names, locked_gems = Bundler.locked_gems)",""],["ensure_default_gem_subdirectories","Gem","classes/Gem.html#method-c-ensure_default_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories for handling default gems. …\n"],["ensure_equivalent_gemfile_and_lockfile","Bundler::Definition","classes/Bundler/Definition.html#method-i-ensure_equivalent_gemfile_and_lockfile","(explicit_flag = false)",""],["ensure_gem_subdirectories","Gem","classes/Gem.html#method-c-ensure_gem_subdirectories","(dir = Gem.dir, mode = nil)","<p>Quietly ensure the Gem directory <code>dir</code> contains all the proper\nsubdirectories.  If we can&#39;t create …\n"],["ensure_mod_sequence_value","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-ensure_mod_sequence_value","(num)","<p>Ensure argument is &#39;mod_sequence_value&#39; or raise DataFormatError\n"],["ensure_number","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-ensure_number","(num)","<p>Ensure argument is &#39;number&#39; or raise DataFormatError\n"],["ensure_nz_number","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-ensure_nz_number","(num)","<p>Ensure argument is &#39;nz_number&#39; or raise DataFormatError\n"],["ensure_same_dependencies","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-ensure_same_dependencies","(spec, old_deps, new_deps)",""],["ensure_xml_content","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-ensure_xml_content","(content)",""],["enterable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-enterable-3F","()","<p>Returns <code>true</code> if the directory may be entered by CWD/CDUP.\n"],["entity","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-entity","()",""],["entity","REXML::DocType","classes/REXML/DocType.html#method-i-entity","( name )",""],["entity","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-entity","( reference, entities )",""],["entity","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-entity","(content)","<p>Called when %foo; is encountered in a doctype declaration. @p content “foo”\n"],["entity?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-entity-3F","()","<p>Content: [ String text ]\n"],["entity_class","Fiddle::CStruct","classes/Fiddle/CStruct.html#method-c-entity_class","()","<p>accessor to Fiddle::CStructEntity\n"],["entity_class","Fiddle::CUnion","classes/Fiddle/CUnion.html#method-c-entity_class","()","<p>accessor to Fiddle::CUnionEntity\n"],["entity_expansion_limit","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10000.\n<p>Deprecated. Use REXML::Security.entity_expansion_limit= …\n"],["entity_expansion_limit","REXML::Security","classes/REXML/Security.html#method-c-entity_expansion_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_limit=","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10000.\n<p>Deprecated. Use REXML::Security.entity_expansion_limit= …\n"],["entity_expansion_limit=","REXML::Security","classes/REXML/Security.html#method-c-entity_expansion_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10000.\n"],["entity_expansion_text_limit","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML::Security.entity_expansion_text_limit …\n"],["entity_expansion_text_limit","REXML::Security","classes/REXML/Security.html#method-c-entity_expansion_text_limit","()","<p>Get the entity expansion limit. By default the limit is set to 10240.\n"],["entity_expansion_text_limit=","REXML::Document","classes/REXML/Document.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n<p>Deprecated. Use REXML::Security.entity_expansion_text_limit= …\n"],["entity_expansion_text_limit=","REXML::Security","classes/REXML/Security.html#method-c-entity_expansion_text_limit-3D","( val )","<p>Set the entity expansion limit. By default the limit is set to 10240.\n"],["entitydecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-entitydecl","(declaration)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-entitydecl","(content)","<p>&lt;!ENTITY …&gt; The argument passed to this method is an array of the\nentity declaration.  It can …\n"],["entitydecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-entitydecl-3F","()","<p>Due to the wonders of DTDs, an entity declaration can be just about\nanything.  There&#39;s no way to …\n"],["entries","Dir","classes/Dir.html#method-c-entries","(*args)","<p>Returns an array containing all of the filenames in the given directory.\nWill raise a <code>SystemCallError</code> …\n"],["entries","Enumerable","classes/Enumerable.html#method-i-entries","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre><code>(1..7).to_a                       #=&gt; [1, 2, 3, 4, 5, 6, ...\n</code></pre>\n"],["entries","Pathname","classes/Pathname.html#method-i-entries","()","<p>Return the entries (files and subdirectories) in the directory, each as a\nPathname object.\n<p>The results …\n"],["entries","Range","classes/Range.html#method-i-entries","()","<p>Returns an array containing the items in the range.\n\n<pre><code>(1..7).to_a  #=&gt; [1, 2, 3, 4, 5, 6, 7]\n(1..).to_a ...\n</code></pre>\n"],["enum_for","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-enum_for","(*args)","<p>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["enum_for","Object","classes/Object.html#method-i-enum_for","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\n<p>If a block …\n"],["env","Bundler::CLI","classes/Bundler/CLI.html#method-i-env","()",""],["env","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-env","(name)",""],["env_requirement","Gem","classes/Gem.html#method-c-env_requirement","(gem_name)",""],["environment","Bundler","classes/Bundler.html#method-c-environment","()",""],["environment","Bundler::Env","classes/Bundler/Env.html#method-c-environment","()",""],["environment","OptionParser","classes/OptionParser.html#method-i-environment","(env = File.basename($0, '.*'))","<p>Parses environment variable <code>env</code> or its uppercase with\nsplitting like a shell.\n<p><code>env</code> defaults to the basename …\n"],["eof","ARGF","classes/ARGF.html#method-i-eof","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof","CSV","classes/CSV.html#method-i-eof","()",""],["eof","IO","classes/IO.html#method-i-eof","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-eof","()",""],["eof","StringIO","classes/StringIO.html#method-i-eof","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-eof","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eof?","ARGF","classes/ARGF.html#method-i-eof-3F","()","<p>Returns true if the current file in <code>ARGF</code> is at end of file,\ni.e. it has no data to read. The stream must …\n"],["eof?","CSV","classes/CSV.html#method-i-eof-3F","()",""],["eof?","CSV::Parser::UnoptimizedStringIO","classes/CSV/Parser/UnoptimizedStringIO.html#method-i-eof-3F","()",""],["eof?","IO","classes/IO.html#method-i-eof-3F","()","<p>Returns true if <em>ios</em> is at end of file that means there are no more\ndata to read. The stream must be opened …\n"],["eof?","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-eof-3F","()","<p>Whether the end of this input method has been reached, returns\n<code>true</code> if there is no more data to read. …\n"],["eof?","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-eof-3F","()","<p>Returns true if the stream is at file which means there is no more data to\nbe read.\n"],["eof?","StringIO","classes/StringIO.html#method-i-eof-3F","()","<p>Returns true if <strong>strio</strong> is at end of file. The stringio must\nbe opened for reading or an <code>IOError</code> will be …\n"],["eof?","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-eof-3F","()","<p>Whether there are any expressions left in this printer.\n"],["eof?","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-eof-3F","()","<p>Returns <code>true</code> or <code>false</code> whether the stream has\nreached the end.\n"],["eos?","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-eos-3F","()",""],["eos?","StringScanner","classes/StringScanner.html#method-i-eos-3F","()","<p>Returns <code>true</code> if the scan pointer is at the end of the string.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\np s.eos? ...\n</code></pre>\n"],["eql?","Array","classes/Array.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>self</code> and <code>other</code> are\nthe same object, or are both arrays with the same content (according …\n"],["eql?","BigDecimal","classes/BigDecimal.html#method-i-eql-3F","(p1)","<p>Tests for value equality; returns true if the values are equal.\n<p>The == and === operators and the eql? …\n"],["eql?","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-eql-3F","(other)","<p>When overriding `eql?` please preserve the behaviour as mentioned in\ndocstring for `==` method.\n"],["eql?","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-eql-3F","(other)",""],["eql?","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-eql-3F","(other)",""],["eql?","Delegator","classes/Delegator.html#method-i-eql-3F","(obj)","<p>Returns true if two objects are considered of equal value.\n"],["eql?","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is an\nEnumerator::ArithmeticSequence, has equivalent begin, end, step, and  …\n"],["eql?","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-eql-3F","(p1)","<p>Returns true if <code>other</code> wraps the same pointer, otherwise\nreturns false.\n"],["eql?","Float","classes/Float.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Float with the same\nvalue as <code>float</code>. Contrast this with Float#==, which …\n"],["eql?","Hash","classes/Hash.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>hash</em> and <em>other</em> are both\nhashes with the same content. The orders of each hashes are not …\n"],["eql?","IPAddr","classes/IPAddr.html#method-i-eql-3F","(other)","<p>Checks equality used by Hash.\n"],["eql?","MatchData","classes/MatchData.html#method-i-eql-3F","(p1)","<p>Equality—Two matchdata are equal if their target strings, patterns, and\nmatched positions are identical. …\n"],["eql?","Method","classes/Method.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["eql?","Numeric","classes/Numeric.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <code>num</code> and <code>numeric</code> are\nthe same type and have equal values.  Contrast this with Numeric#==, …\n"],["eql?","Object","classes/Object.html#method-i-eql-3F","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["eql?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <em>obj</em> is a\n<code>OpenSSL::BN</code> with the same value as <em>bn</em>. Contrast this\nwith OpenSSL::BN#==, …\n"],["eql?","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if the two groups use the same curve and have the\nsame parameters, <code>false</code> otherwise.\n"],["eql?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-eql-3F","(p1)",""],["eql?","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-eql-3F","(p1)","<p>Returns true if <em>name</em> and <em>other</em> refer to the same hash\nkey.\n"],["eql?","OpenStruct","classes/OpenStruct.html#method-i-eql-3F","(other)","<p>Compares this object and <code>other</code> for equality.  An OpenStruct is\neql? to <code>other</code> when <code>other</code> is an OpenStruct …\n"],["eql?","Pathname","classes/Pathname.html#method-i-eql-3F","(p1)","<p>Compare this pathname with <code>other</code>.  The comparison is\nstring-based. Be aware that two different paths …\n"],["eql?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-eql-3F","(other)",""],["eql?","Range","classes/Range.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> only if <code>obj</code> is a Range, has\nequivalent begin and end items (by comparing them with <code>eql?</code> …\n"],["eql?","Regexp","classes/Regexp.html#method-i-eql-3F","(p1)","<p>Equality—Two regexps are equal if their patterns are identical, they have\nthe same character set code, …\n"],["eql?","String","classes/String.html#method-i-eql-3F","(p1)","<p>Two strings are equal if they have the same length and content.\n"],["eql?","Struct","classes/Struct.html#method-i-eql-3F","(p1)","<p>Hash equality—<code>other</code> and <code>struct</code> refer to the same\nhash key if they have the same struct subclass and …\n"],["eql?","Time","classes/Time.html#method-i-eql-3F","(p1)","<p>Returns <code>true</code> if <em>time</em> and <code>other_time</code> are\nboth Time objects with the same seconds and fractional seconds. …\n"],["eql?","URI::Generic","classes/URI/Generic.html#method-i-eql-3F","(oth)",""],["eql?","UnboundMethod","classes/UnboundMethod.html#method-i-eql-3F","(p1)","<p>Two method objects are equal if they are bound to the same object and refer\nto the same method definition …\n"],["equal?","BasicObject","classes/BasicObject.html#method-i-equal-3F","(p1)","<p>Equality — At the <code>Object</code> level, <code>==</code> returns\n<code>true</code> only if <code>obj</code> and <code>other</code> are the\nsame object. Typically …\n"],["erf","Math","classes/Math.html#method-c-erf","(p1)","<p>Calculates the error function of <code>x</code>.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, 1)\n"],["erfc","Math","classes/Math.html#method-c-erfc","(p1)","<p>Calculates the complementary error function of x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, 2)\n"],["errno","SystemCallError","classes/SystemCallError.html#method-i-errno","()","<p>Return this SystemCallError&#39;s error number.\n"],["error","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-error","(statement)","<p>Called if something goes wrong during the execution. This is used by\nBundler::Thor internally and should …\n"],["error","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-error","(msg, newline = nil)",""],["error","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-error","(message, newline = nil)",""],["error","Logger","classes/Logger.html#method-i-error","(progname = nil, &block)","<p>Log an <code>ERROR</code> message.\n<p>See #info for more information.\n"],["error","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-error","()",""],["error","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-error","(msg)","<p>Report an error message and exit\n"],["error","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-error","(exception, req, res)","<p>Generates an error page for the <code>exception</code> while handling\n<code>req</code> on <code>res</code>.\n"],["error","Syslog::Logger","classes/Syslog/Logger.html#method-i-error","","<p>Logs a <code>message</code> at the error (syslog warning) log level, or\nlogs the message returned from the block. …\n"],["error","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-error","(msg)","<p>Shortcut for logging an ERROR message\n"],["error=","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-error-3D","(p1)",""],["error?","Logger","classes/Logger.html#method-i-error-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>ERROR</code> messages.\n"],["error?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-error-3F","()",""],["error?","Ripper","classes/Ripper.html#method-i-error-3F","()","<p>Return true if parsed source has errors.\n"],["error?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-error-3F","()","<p>Will the logger output ERROR messages?\n"],["error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-error-3F","(code)","<p>Is <code>code</code> an error status?\n"],["error_bytes","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-error_bytes","()","<p>Returns the discarded bytes when Encoding::InvalidByteSequenceError occurs.\n\n<pre><code>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</code></pre>\n"],["error_char","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-error_char","()","<p>Returns the one-character string which cause\nEncoding::UndefinedConversionError.\n\n<pre><code>ec = Encoding::Converter.new(&quot;ISO-8859-1&quot;, ...</code></pre>\n"],["error_depth","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-error_depth","()",""],["error_message","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-error_message","(connection)","<p>Returns an error message containing the number of requests performed on\nthis connection\n"],["error_message","GetoptLong","classes/GetoptLong.html#method-i-error_message","()","<p>Return the appropriate error message in POSIX-defined format. If no error\nhas occurred, returns nil. …\n"],["error_string","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-error_string","()","<p>Returns the error string corresponding to the error code retrieved by\n#error.\n"],["errors","OpenSSL","classes/OpenSSL.html#method-c-errors","()","<p>See any remaining errors held in queue.\n<p>Any errors you see here are probably due to a bug in Ruby&#39;s …\n"],["escape","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-escape","(str)","<p>URI::escape wrapper\n"],["escape","CGI::Util","classes/CGI/Util.html#method-i-escape","(string)","<p>URL-encode a string.\n\n<pre><code>url_encoded_string = CGI::escape(&quot;&#39;Stop!&#39; said Fred&quot;)\n   # =&gt; &quot;%27Stop%21%27+said+Fred&quot;\n</code></pre>\n"],["escape","Regexp","classes/Regexp.html#method-c-escape","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["escape","Shellwords","classes/Shellwords.html#method-c-escape","(str)",""],["escape","URI::Escape","classes/URI/Escape.html#method-i-escape","(*arg)","<p>Synopsis\n\n<pre><code>URI.escape(str [, unsafe])</code></pre>\n<p>Args\n"],["escape","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-escape","(str, unsafe = @regexp[:UNSAFE])","<p>Args\n<p><code>str</code> &mdash; String to make safe\n<p><code>unsafe</code> &mdash; Regexp to apply. Defaults to self.regexp\n"],["escape","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-escape","(data)","<p>Escapes control characters in <code>data</code>\n"],["escape","WEBrick::HTMLUtils","classes/WEBrick/HTMLUtils.html#method-c-escape","(string)","<p>Escapes &amp;, “, &gt; and &lt; in <code>string</code>\n"],["escape","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-escape","(str)","<p>Escapes HTTP reserved and unwise characters in <code>str</code>\n"],["escape8bit","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-escape8bit","(str)","<p>Escapes 8 bit characters in <code>str</code>\n"],["escapeElement","CGI::Util","classes/CGI/Util.html#method-i-escapeElement","(string, *elements)","<p>Escape only the tags of certain HTML elements in <code>string</code>.\n<p>Takes an element or elements or array of elements. …\n"],["escapeHTML","CGI::Util","classes/CGI/Util.html#method-i-escapeHTML","(string)","<p>Escape special characters in HTML, namely &#39;&amp;&quot;&lt;&gt;\n\n<pre><code>CGI::escapeHTML(&#39;Usage: foo &quot;bar&quot; ...</code></pre>\n"],["escape_element","CGI::Util","classes/CGI/Util.html#method-i-escape_element","(string, *elements)","<p>Synonym for CGI::escapeElement(str)\n"],["escape_form","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-escape_form","(str)","<p>Escapes form reserved characters in <code>str</code>\n"],["escape_globs","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-escape_globs","(path)","<p>Returns a string that has had any glob characters escaped. The glob\ncharacters are `* ? { } [ ]`.\n<p>Examples …\n"],["escape_html","CGI::Util","classes/CGI/Util.html#method-i-escape_html","(string)","<p>Synonym for CGI::escapeHTML(str)\n"],["escape_path","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-escape_path","(str)","<p>Escapes path <code>str</code>\n"],["etag_for","Bundler::CompactIndexClient::Updater","classes/Bundler/CompactIndexClient/Updater.html#method-i-etag_for","(path)",""],["euid","Process","classes/Process.html#method-c-euid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["euid=","Process","classes/Process.html#method-c-euid-3D","(p1)","<p>Sets the effective user ID for this process. Not available on all\nplatforms.\n"],["eval","Binding","classes/Binding.html#method-i-eval","(p1, p2 = v2, p3 = v3)","<p>Evaluates the Ruby expression(s) in <em>string</em>, in the\n<em>binding</em>&#39;s context.  If the optional <em>filename</em> and …\n"],["eval","Kernel","classes/Kernel.html#method-i-eval","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Evaluates the Ruby expression(s) in <em>string</em>. If <em>binding</em> is\ngiven, which must be a <code>Binding</code> object, the …\n"],["eval","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-eval","()","<p>Evaluates the instruction sequence and returns the result.\n\n<pre><code>RubyVM::InstructionSequence.compile(&quot;1 + 2&quot;).eval ...\n</code></pre>\n"],["eval_gemfile","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-eval_gemfile","(gemfile, contents = nil)",""],["eval_history=","IRB::Context","classes/IRB/Context.html#method-i-eval_history-3D","(no)","<p>Sets command result history limit.\n<p><code>no</code> is an Integer or <code>nil</code>.\n<p>Returns <code>no</code> of history items if greater than …\n"],["eval_input","IRB::Irb","classes/IRB/Irb.html#method-i-eval_input","()","<p>Evaluates input for this session.\n"],["eval_script","TracePoint","classes/TracePoint.html#method-i-eval_script","()","<p>Compiled source code (String) on *eval methods on the\n<code>:script_compiled</code> event. If loaded from a file, …\n"],["evaluate","Bundler::Dsl","classes/Bundler/Dsl.html#method-c-evaluate","(gemfile, lockfile, unlock)",""],["evaluate","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-evaluate","(context, statements, file = nil, line = nil)","<p>Evaluate the context of this workspace and use the Tracer library to output\nthe exact lines of code are …\n"],["even?","Integer","classes/Integer.html#method-i-even-3F","()","<p>Returns <code>true</code> if <code>int</code> is an even number.\n"],["event","TracePoint","classes/TracePoint.html#method-i-event","()","<p>Type of event\n<p>See TracePoint@Events for more information.\n"],["event?","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-event-3F","()","<p>Returns true if the method is event.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...\n</code></pre>\n"],["event_interface","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-event_interface","()","<p>Returns event interface name if the method is event.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["event_location","Psych::Handler","classes/Psych/Handler.html#method-i-event_location","(start_line, start_column, end_line, end_column)","<p>Called before each event with line/column information.\n"],["event_location","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-event_location","(start_line, start_column, end_line, end_column)",""],["event_type","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-event_type","()",""],["exact?","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-exact-3F","()",""],["examine","Net::IMAP","classes/Net/IMAP.html#method-i-examine","(mailbox)","<p>Sends a EXAMINE command to select a <code>mailbox</code> so that messages\nin the <code>mailbox</code> can be accessed.  Behaves …\n"],["exception","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-i-exception","()","<p>Create a DRbUnknownError exception containing this object.\n"],["exception","Exception","classes/Exception.html#method-c-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Exception","classes/Exception.html#method-i-exception","(*args)","<p>With no argument, or if the argument is the same as the receiver, return\nthe receiver. Otherwise, create …\n"],["exception","Timeout::Error","classes/Timeout/Error.html#method-i-exception","(*)",""],["exception","Timeout::Error","classes/Timeout/Error.html#method-i-exception","(*)",""],["exception","Timeout::Error","classes/Timeout/Error.html#method-i-exception","(*)",""],["exception_class","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-exception_class","()","<p>Determines whether there was an error and raises the appropriate error\nbased on the reply code of the …\n"],["exclude","RDoc::Options","classes/RDoc/Options.html#method-i-exclude","()","<p>Create a regexp for #exclude\n"],["exclude_end?","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-exclude_end-3F","()",""],["exclude_end?","Range","classes/Range.html#method-i-exclude_end-3F","()","<p>Returns <code>true</code> if the range excludes its end value.\n\n<pre><code>(1..5).exclude_end?     #=&gt; false\n(1...5).exclude_end? ...\n</code></pre>\n"],["exclusive","Thread","classes/Thread.html#method-c-exclusive","(&block)","<p>Wraps the block in a single, VM-global Mutex.synchronize, returning the\nvalue of the block. A thread …\n"],["exec","Bundler::CLI","classes/Bundler/CLI.html#method-i-exec","(*args)",""],["exec","Kernel","classes/Kernel.html#method-i-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["exec","Process","classes/Process.html#method-c-exec","(*args)","<p>Replaces the current process by running the given external\n<em>command</em>, which can take one of the following …\n"],["exec_command","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-exec_command","(command, args)","<p>To be called from Cli class to pass the command and argument to approriate\nplugin class\n"],["exec_if","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-exec_if","()","<p>Execute the given block if notifications are enabled.\n"],["executable?","File","classes/File.html#method-c-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable?","File::Stat","classes/File/Stat.html#method-i-executable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is executable or if the\noperating system doesn&#39;t distinguish executable files …\n"],["executable?","FileTest","classes/FileTest.html#method-i-executable-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the effective\nuser and group id of this process. See …\n"],["executable?","Pathname","classes/Pathname.html#method-i-executable-3F","()","<p>See FileTest.executable?.\n"],["executable_real?","File","classes/File.html#method-c-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["executable_real?","File::Stat","classes/File/Stat.html#method-i-executable_real-3F","()","<p>Same as <code>executable?</code>, but tests using the real owner of the\nprocess.\n"],["executable_real?","FileTest","classes/FileTest.html#method-i-executable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is executable by the real user\nand group id of this process. See access(3). …\n"],["executable_real?","Pathname","classes/Pathname.html#method-i-executable_real-3F","()","<p>See FileTest.executable_real?.\n"],["executables","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-executables","()","<p>needed for binstubs\n"],["exist?","Dir","classes/Dir.html#method-c-exist-3F","(p1)","<p>Returns <code>true</code> if the named file is a directory,\n<code>false</code> otherwise.\n"],["exist?","File","classes/File.html#method-c-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","FileTest","classes/FileTest.html#method-i-exist-3F","(p1)","<p>Return <code>true</code> if the named file exists.\n<p><em>file_name</em> can be an IO object.\n<p>“file exists” means that …\n"],["exist?","Pathname","classes/Pathname.html#method-i-exist-3F","()","<p>See FileTest.exist?.\n"],["exist?","StringScanner","classes/StringScanner.html#method-i-exist-3F","(p1)","<p>Looks <em>ahead</em> to see if the <code>pattern</code> exists\n<em>anywhere</em> in the string, without advancing the scan pointer. …\n"],["exists?","Dir","classes/Dir.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","File","classes/File.html#method-c-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exists?","FileTest","classes/FileTest.html#method-i-exists-3F","(p1)","<p>Deprecated method. Don&#39;t use.\n"],["exit","IRB::Context","classes/IRB/Context.html#method-i-exit","(ret = 0)","<p>Exits the current session, see IRB.irb_exit\n"],["exit","Kernel","classes/Kernel.html#method-i-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Process","classes/Process.html#method-c-exit","(*args)","<p>Initiates the termination of the Ruby script by raising the\n<code>SystemExit</code> exception. This exception may …\n"],["exit","Thread","classes/Thread.html#method-i-exit","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["exit","Thread","classes/Thread.html#method-c-exit","()","<p>Terminates the currently running thread and schedules another thread to be\nrun.\n<p>If this thread is already …\n"],["exit!","Kernel","classes/Kernel.html#method-i-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit!","Process","classes/Process.html#method-c-exit-21","(*args)","<p>Exits the process immediately. No exit handlers are run. <em>status</em> is\nreturned to the underlying system …\n"],["exit_on_failure?","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-exit_on_failure-3F","()","<p>A flag that makes the process exit with status 1 if any error happens.\n"],["exit_status","Bundler::FriendlyErrors","classes/Bundler/FriendlyErrors.html#method-i-exit_status","(error)",""],["exit_value","LocalJumpError","classes/LocalJumpError.html#method-i-exit_value","()","<p>Returns the exit value associated with this <code>LocalJumpError</code>.\n"],["exited?","Process::Status","classes/Process/Status.html#method-i-exited-3F","()","<p>Returns <code>true</code> if <em>stat</em> exited normally (for example\nusing an <code>exit()</code> call or finishing the program).\n"],["exitstatus","Process::Status","classes/Process/Status.html#method-i-exitstatus","()","<p>Returns the least significant eight bits of the return code of\n<em>stat</em>. Only available if <code>exited?</code> is <code>true</code>\n…\n"],["exp","BigMath","classes/BigMath.html#method-c-exp","(p1, p2)","<p>Computes the value of e (the base of natural logarithms) raised to the\npower of <code>decimal</code>, to the specified …\n"],["exp","CMath","classes/CMath.html#method-c-exp","(z)","<p>Math::E raised to the <code>z</code> power\n\n<pre><code>CMath.exp(1.i * Math::PI) #=&gt; (-1.0+1.2246467991473532e-16i)\n</code></pre>\n"],["exp","Math","classes/Math.html#method-c-exp","(p1)","<p>Returns e**x.\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (0, INFINITY)\n"],["expand","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-expand","( path )",""],["expand_hexstring","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_hexstring","(str)",""],["expand_pair","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_pair","(str)",""],["expand_path","File","classes/File.html#method-c-expand_path","(*args)","<p>Converts a pathname to an absolute pathname. Relative paths are referenced\nfrom the current working directory …\n"],["expand_path","Pathname","classes/Pathname.html#method-i-expand_path","(p1 = v1)","<p>Returns the absolute path for the file.\n<p>See File.expand_path.\n"],["expand_path","Shell","classes/Shell.html#method-i-expand_path","(path)",""],["expand_path","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-expand_path","(path)","<p>CommandProcessor#expand_path(path)\n\n<pre><code>  path:   String\n  return: String\nreturns the absolute path for &lt;path&gt;</code></pre>\n"],["expand_ref_in","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-expand_ref_in","( arry, ind )",""],["expand_tabs","RDoc::Text","classes/RDoc/Text.html#method-i-expand_tabs","(text)","<p>Expands tab characters in <code>text</code> to eight spaces\n"],["expand_value","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-expand_value","(str1, str2, str3)",""],["expanded_name","REXML::Document","classes/REXML/Document.html#method-i-expanded_name","()","<p>According to the XML spec, a root node has no expanded name\n"],["expanded_original_path","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-expanded_original_path","()",""],["expect","IO","classes/IO.html#method-i-expect","(pat,timeout=9999999)","<p>Reads from the IO until the given <code>pattern</code> matches or the\n<code>timeout</code> is over.\n<p>It returns an array with the …\n"],["expected","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-expected","()",""],["expected","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-expected","()",""],["expected","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-expected","()",""],["expected","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-expected","()",""],["expected","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-expected","()",""],["expected","REXML::Validation::ZeroOrMore","classes/REXML/Validation/ZeroOrMore.html#method-i-expected","()",""],["expired?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-expired-3F","(connection)","<p>Returns true if the connection should be reset due to an idle timeout, or\nmaximum request count, false …\n"],["expired?","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-expired-3F","()","<p>Has this tuple expired? (true/false).\n<p>A tuple has expired when its expiry timer based on the <code>sec</code>\nargument …\n"],["expires","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-expires","()","<p>Retrieves the expiration time as a Time\n"],["expires=","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-expires-3D","(t)","<p>Sets the cookie expiration to the time <code>t</code>.  The expiration time\nmay be a false value to disable expiration …\n"],["exponent","BigDecimal","classes/BigDecimal.html#method-i-exponent","()","<p>Returns the exponent of the BigDecimal number, as an Integer.\n<p>If the number can be represented as 0.xxxxxx …\n"],["export","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-export","()","<p>Encodes this DH to its PEM encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["export","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Encodes this DSA to its PEM encoding.\n<p>Parameters\n<p><em>cipher</em> is an OpenSSL::Cipher.\n"],["export","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs the EC key in PEM encoding.  If <em>cipher</em> and\n<em>pass_phrase</em> are given they will be used to encrypt …\n"],["export","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-export","(p1 = v1, p2 = v2)","<p>Outputs this keypair in PEM encoding.  If <em>cipher</em> and\n<em>pass_phrase</em> are given they will be used to encrypt …\n"],["expunge","Net::IMAP","classes/Net/IMAP.html#method-i-expunge","()","<p>Sends a EXPUNGE command to permanently remove from the currently selected\nmailbox all messages that have …\n"],["extend","Object","classes/Object.html#method-i-extend","(*args)","<p>Adds to <em>obj</em> the instance methods from each module given as a\nparameter.\n\n<pre><code>module Mod\n  def hello\n    &quot;Hello ...</code></pre>\n"],["extend_object","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-extend_object","(obj)","<p>Installs alias methods for the default irb commands on the given object\nusing #install_alias_method. …\n"],["extend_object","MonitorMixin","classes/MonitorMixin.html#method-c-extend_object","(obj)",""],["extend_object","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-c-extend_object","(obj)","<p>Initializes instance variable.\n"],["extend_object","Sync_m","classes/Sync_m.html#method-c-extend_object","(obj)",""],["extend_object","Sync_m","classes/Sync_m.html#method-c-extend_object","(obj)",""],["extension","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-extension","(name, enable)","<p>Enables or disables the extension with <code>name</code>\n"],["extension","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-extension","(name)","<p>Creates extension methods for the <code>name</code> extension to enable and\ndisable\nthe extension and to query if ...\n"],["extension?","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-extension-3F","(name)","<p>Is the extension <code>name</code> enabled?\n"],["extension_cache_path","Bundler::Source","classes/Bundler/Source.html#method-i-extension_cache_path","(spec)",""],["extension_dir_name","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-extension_dir_name","()",""],["extensions","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-extensions","()","<p>needed for “with native extensions” during install\n"],["extensions","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-extensions","()",""],["extensions","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-extensions","()","<p>Gets X509v3 extensions as array of X509Ext objects\n"],["extensions","URI::LDAP","classes/URI/LDAP.html#method-i-extensions","()","<p>Returns extensions.\n"],["extensions=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-extensions-3D","(p1)",""],["extensions=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-extensions-3D","(p1)","<p>Sets X509_EXTENSIONs\n"],["extensions=","URI::LDAP","classes/URI/LDAP.html#method-i-extensions-3D","(val)","<p>Setter for extensions <code>val</code>.\n"],["extern","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-extern","(signature, *opts)","<p>Creates a global method from the given C <code>signature</code>.\n"],["external_encoding","ARGF","classes/ARGF.html#method-i-external_encoding","()","<p>Returns the external encoding for files read from <code>ARGF</code> as an\n<code>Encoding</code> object. The external encoding is …\n"],["external_encoding","IO","classes/IO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\n<em>io</em> is in write mode and no encoding …\n"],["external_encoding","StringIO","classes/StringIO.html#method-i-external_encoding","()","<p>Returns the Encoding object that represents the encoding of the file. If\nstrio is write mode and no encoding …\n"],["external_encoding","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-external_encoding","()","<p>See Zlib::GzipReader documentation for a description.\n"],["extname","File","classes/File.html#method-c-extname","(p1)","<p>Returns the extension (the portion of file name in <code>path</code>\nstarting from the last period).\n<p>If <code>path</code> is a dotfile, …\n"],["extname","Pathname","classes/Pathname.html#method-i-extname","()","<p>Returns the file&#39;s extension.\n<p>See File.extname.\n"],["extract","URI","classes/URI.html#method-c-extract","(str, schemes = nil, &block)","<p>Synopsis\n\n<pre><code>URI::extract(str[, schemes][,&amp;blk])</code></pre>\n<p>Args\n"],["extract","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-extract","(str, schemes = nil)","<p>Args\n<p><code>str</code> &mdash; String to search\n<p><code>schemes</code> &mdash; Patterns to apply to <code>str</code>\n"],["extract_call_seq","RDoc::Comment","classes/RDoc/Comment.html#method-i-extract_call_seq","(method)","<p>Look for a &#39;call-seq&#39; in the comment to override the normal\nparameter handling.  The :call-seq: …\n"],["facility","Syslog","classes/Syslog.html#method-c-facility","()","<p>Returns the facility number used in the last call to open()\n"],["fail","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-i-fail","(err = nil, *rest)",""],["fail","Kernel","classes/Kernel.html#method-i-fail","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["fail!","Bundler::Settings::Validator::Rule","classes/Bundler/Settings/Validator/Rule.html#method-i-fail-21","(key, value, *reasons)",""],["failed?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-failed-3F","()",""],["fallback_timeout=","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-i-fallback_timeout-3D","(timeout)",""],["false","REXML::Functions","classes/REXML/Functions.html#method-c-false","( )","<p>UNTESTED\n"],["family","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).family ...\n</code></pre>\n"],["family","Socket::Option","classes/Socket/Option.html#method-i-family","()","<p>returns the socket family as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).family ...\n</code></pre>\n"],["family_addrinfo","Addrinfo","classes/Addrinfo.html#method-i-family_addrinfo","(*args)","<p>creates an Addrinfo object from the arguments.\n<p>The arguments are interpreted as similar to self.\n\n<pre><code>Addrinfo.tcp(&quot;0.0.0.0&quot;, ...</code></pre>\n"],["fast_generate","JSON","classes/JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks …\n"],["fastmode=","GDBM","classes/GDBM.html#method-i-fastmode-3D","(p1)","<p>Turns the database&#39;s fast mode on or off. If fast mode is turned on,\ngdbm does not wait for writes …\n"],["fatal","Logger","classes/Logger.html#method-i-fatal","(progname = nil, &block)","<p>Log a <code>FATAL</code> message.\n<p>See #info for more information.\n"],["fatal","Syslog::Logger","classes/Syslog/Logger.html#method-i-fatal","","<p>Logs a <code>message</code> at the fatal (syslog err) log level, or logs\nthe message returned from the block.\n"],["fatal","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-fatal","(msg)","<p>Shortcut for logging a FATAL message\n"],["fatal?","Logger","classes/Logger.html#method-i-fatal-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>FATAL</code> messages.\n"],["fatal?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-fatal-3F","()","<p>Will the logger output FATAL messages?\n"],["fcntl","IO","classes/IO.html#method-i-fcntl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query\nfile-oriented I/O streams. Arguments …\n"],["fcntl","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-fcntl","(*args)",""],["fcntl","StringIO","classes/StringIO.html#method-i-fcntl","(*args)","<p>Raises NotImplementedError.\n"],["fdatasync","IO","classes/IO.html#method-i-fdatasync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk.\n<p>If the underlying operating system does not support …\n"],["fdiv","Complex","classes/Complex.html#method-i-fdiv","(p1)","<p>Performs division as each part is a float, never returns a float.\n\n<pre><code>Complex(11, 22).fdiv(3)  #=&gt; (3.6666666666666665+7.333333333333333i)\n</code></pre>\n"],["fdiv","Float","classes/Float.html#method-i-fdiv","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["fdiv","Integer","classes/Integer.html#method-i-fdiv","(p1)","<p>Returns the floating point result of dividing <code>int</code> by\n<code>numeric</code>.\n\n<pre><code>654321.fdiv(13731)      #=&gt; 47.652829364212366 ...\n</code></pre>\n"],["fdiv","Numeric","classes/Numeric.html#method-i-fdiv","(p1)","<p>Returns float division.\n"],["fdiv","Rational","classes/Rational.html#method-i-fdiv","(p1)","<p>Performs division and returns the value as a Float.\n\n<pre><code>Rational(2, 3).fdiv(1)       #=&gt; 0.6666666666666666 ...\n</code></pre>\n"],["feature_flag","Bundler","classes/Bundler.html#method-c-feature_flag","()",""],["feed","Enumerator","classes/Enumerator.html#method-i-feed","(p1)","<p>Sets the value to be returned by the next yield inside <code>e</code>.\n<p>If the value is not set, the yield returns nil. …\n"],["feed_info","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-feed_info","()",""],["fetch","Array","classes/Array.html#method-i-fetch","(p1, p2 = v2)","<p>Tries to return the element at position <code>index</code>, but throws an\nIndexError exception if the referenced  …\n"],["fetch","Bundler::Fetcher::Downloader","classes/Bundler/Fetcher/Downloader.html#method-i-fetch","(uri, headers = {}, counter = 0)",""],["fetch","CSV::Row","classes/CSV/Row.html#method-i-fetch","(header, *varargs)","<p>This method will fetch the field value by <code>header</code>. It has the\nsame behavior as Hash#fetch: if there is …\n"],["fetch","DBM","classes/DBM.html#method-i-fetch","(p1, p2 = v2)","<p>Return a value from the database by locating the key string provided.  If\nthe key is not found, returns …\n"],["fetch","ENV","classes/ENV.html#method-c-fetch","(*args)","<p>Retrieves the environment variable <code>name</code>.\n<p>If the given name does not exist and neither <code>default</code> nor a\nblock …\n"],["fetch","GDBM","classes/GDBM.html#method-i-fetch","(p1, p2 = v2)","<p>Retrieves the <em>value</em> corresponding to <em>key</em>. If there is no\nvalue associated with <em>key</em>, <em>default</em> will be returned …\n"],["fetch","Hash","classes/Hash.html#method-i-fetch","(*args)","<p>Returns a value from the hash for the given key. If the key can&#39;t be\nfound, there are several options: …\n"],["fetch","Net::IMAP","classes/Net/IMAP.html#method-i-fetch","(set, attr, mod = nil)","<p>Sends a FETCH command to retrieve data associated with a message in the\nmailbox.\n<p>The <code>set</code> parameter is …\n"],["fetch","PStore","classes/PStore.html#method-i-fetch","(name, default=PStore::Error)","<p>This method is just like PStore#[], save that you may also provide a\n<em>default</em> value for the object.   …\n"],["fetch","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-fetch","(k)","<p>Fetches item <code>k</code> from the tuple.\n"],["fetch","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-fetch","(key)","<p>Fetches <code>key</code> from the tuple.\n"],["fetch","SDBM","classes/SDBM.html#method-i-fetch","(p1, p2 = v2)","<p>Returns the <code>value</code> in the database associated with the given\n<code>key</code> string.\n<p>If a block is provided, the block …\n"],["fetch","Thread","classes/Thread.html#method-i-fetch","(*args)","<p>Returns a fiber-local for the given key. If the key can&#39;t be found,\nthere are several options: With …\n"],["fetch","YAML::DBM","classes/YAML/DBM.html#method-i-fetch","( keystr, ifnone = nil )","<p>Return value associated with <code>key</code>.\n<p>If there is no value for <code>key</code> and no block is given, returns\n<code>ifnone</code>. …\n"],["fetch_gemspec_files","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-fetch_gemspec_files","()","<p>This is used by the default `spec` method to constructs the Specification\nobjects for the gems and versions …\n"],["fetch_http","Bundler::GemRemoteFetcher","classes/Bundler/GemRemoteFetcher.html#method-i-fetch_http","(uri, last_modified = nil, head = false, depth = 0)","<p>Extracted from RubyGems 2.4.\n"],["fetch_platform","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-fetch_platform","()",""],["fetch_platform","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-fetch_platform","()","<p>Needed before installs, since the arch matters then and quick specs\ndon&#39;t bother to include the arch …\n"],["fetch_resource","Resolv::DNS","classes/Resolv/DNS.html#method-i-fetch_resource","(name, typeclass)",""],["fetch_server","DRb","classes/DRb.html#method-c-fetch_server","(uri)","<p>Retrieves the server with the given <code>uri</code>.\n<p>See also regist_server and remove_server.\n"],["fetch_spec","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-fetch_spec","(spec)","<p>fetch a gem specification\n"],["fetch_spec","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-i-fetch_spec","(spec)",""],["fetch_spec","Bundler::Fetcher::Index","classes/Bundler/Fetcher/Index.html#method-i-fetch_spec","(spec)",""],["fetch_uri","Bundler::Fetcher::Base","classes/Bundler/Fetcher/Base.html#method-i-fetch_uri","()",""],["fetch_values","Hash","classes/Hash.html#method-i-fetch_values","(*args)","<p>Returns an array containing the values associated with the given keys but\nalso raises <code>KeyError</code> when one …\n"],["fetchers","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-fetchers","()",""],["field","CSV::Row","classes/CSV/Row.html#method-i-field","(header_or_index, minimum_index = 0)","<p>This method will return the field value by <code>header</code> or\n<code>index</code>.  If a field is not found, <code>nil</code> is returned.\n…\n"],["field?","CSV::Row","classes/CSV/Row.html#method-i-field-3F","(data)","<p>Returns <code>true</code> if <code>data</code> matches a field in this row,\nand <code>false</code> otherwise.\n"],["field_row?","CSV::Row","classes/CSV/Row.html#method-i-field_row-3F","()","<p>Returns <code>true</code> if this is a field row.\n"],["field_size_limit","CSV","classes/CSV.html#method-i-field_size_limit","()","<p>The limit for field size, if any.  See CSV::new for details.\n"],["field_size_limit","CSV::Parser","classes/CSV/Parser.html#method-i-field_size_limit","()",""],["fields","CSV::Row","classes/CSV/Row.html#method-i-fields","(*headers_and_or_indices)","<p>This method accepts any number of arguments which can be headers, indices,\nRanges of either, or two-element …\n"],["file","ARGF","classes/ARGF.html#method-i-file","()","<p>Returns the current file as an <code>IO</code> or <code>File</code> object.\n<code>$stdin</code> is returned when the current file is STDIN. …\n"],["file","Digest::Class","classes/Digest/Class.html#method-c-file","(name, *args)","<p>Creates a digest object and reads a given file, <em>name</em>. Optional\narguments are passed to the constructor …\n"],["file","Digest::Instance","classes/Digest/Instance.html#method-i-file","(name)","<p>Updates the digest with the contents of a given file <em>name</em> and\nreturns self.\n"],["file?","File","classes/File.html#method-c-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","File::Stat","classes/File/Stat.html#method-i-file-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a regular file (not a device\nfile, pipe, socket, etc.).\n\n<pre><code>File.stat(&quot;testfile&quot;).file? ...\n</code></pre>\n"],["file?","FileTest","classes/FileTest.html#method-i-file-3F","(p1)","<p>Returns <code>true</code> if the named <code>file</code> exists and is a\nregular file.\n<p><code>file</code> can be an IO object.\n<p>If the <code>file</code> argument …\n"],["file?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-file-3F","()","<p>Returns <code>true</code> if the entry is a file (i.e., the value of the\ntype fact is file).\n"],["file?","Pathname","classes/Pathname.html#method-i-file-3F","()","<p>See FileTest.file?.\n"],["file_collision","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-file_collision","(destination)","<p>Deals with file collision and returns true if the file should be\noverwritten and false otherwise. If …\n"],["file_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-file_field","(name = \"\", size = 20, maxlength = nil)","<p>Generate an File Upload Input element as a string.\n<p>The attributes of the element can be specified as three …\n"],["file_input?","IRB::Context","classes/IRB/Context.html#method-i-file_input-3F","()","<p>Whether #io uses a File for the <code>input_method</code> passed when\ncreating the current context, see ::new\n"],["file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-file_name","()","<p>File name where this CodeObject was found.\n<p>See also RDoc::Context#in_files\n"],["filename","ARGF","classes/ARGF.html#method-i-filename","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre><code>$ ...</code></pre>\n"],["filename","Ripper","classes/Ripper.html#method-i-filename","()","<p>Return current parsing filename.\n"],["filename","Ripper::Filter","classes/Ripper/Filter.html#method-i-filename","()","<p>The file name of the input.\n"],["filename_quote_characters","Readline","classes/Readline.html#method-c-filename_quote_characters","()","<p>Gets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["filename_quote_characters=","Readline","classes/Readline.html#method-c-filename_quote_characters-3D","(p1)","<p>Sets a list of characters that cause a filename to be quoted by the\ncompleter when they appear in a completed …\n"],["fileno","ARGF","classes/ARGF.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["fileno","Dir","classes/Dir.html#method-i-fileno","()","<p>Returns the file descriptor used in <em>dir</em>.\n\n<pre><code>d = Dir.new(&quot;..&quot;)\nd.fileno   #=&gt; 8\n</code></pre>\n<p>This method uses dirfd() function …\n"],["fileno","IO","classes/IO.html#method-i-fileno","()","<p>Returns an integer representing the numeric file descriptor for\n<em>ios</em>.\n\n<pre><code>$stdin.fileno    #=&gt; 0\n$stdout.fileno ...\n</code></pre>\n"],["fileno","StringIO","classes/StringIO.html#method-i-fileno","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["files_hash","RDoc::Store","classes/RDoc/Store.html#method-i-files_hash","()","<p>Hash of all files known to RDoc\n"],["filesystem_access","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-filesystem_access","(path, action = :write, &block)","<p>Rescues permissions errors raised by file system operations (ie.\nErrno:EACCESS, Errno::EAGAIN) and raises …\n"],["fill","Array","classes/Array.html#method-i-fill","(p1 = v1, p2 = v2)","<p>The first three forms set the selected elements of <code>self</code> (which\nmay be the entire array) to <code>obj</code>.\n<p>A <code>start</code> …\n"],["fill","Date","classes/Date.html#method-i-fill","()",""],["fill_breakable","PrettyPrint","classes/PrettyPrint.html#method-i-fill_breakable","(sep=' ', width=sep.length)","<p>This is similar to #breakable except the decision to break or not is\ndetermined individually.\n<p>Two #fill_breakable …\n"],["filter","Array","classes/Array.html#method-i-filter","()","<p>Returns a new array containing all elements of <code>ary</code> for which\nthe given <code>block</code> returns a true value.\n<p>If …\n"],["filter","CSV","classes/CSV.html#method-c-filter","(input=nil, output=nil, **options)","<p>This method is a convenience for building Unix-like filters for CSV data.\nEach row is yielded to the …\n"],["filter","ENV","classes/ENV.html#method-c-filter","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["filter","Enumerable","classes/Enumerable.html#method-i-filter","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>If no …\n"],["filter","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-filter","()",""],["filter","Hash","classes/Hash.html#method-i-filter","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["filter","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-filter","(elements, path)","<p>Given an array of nodes it filters the array based on the path. The result\nis that when this method returns, …\n"],["filter","Struct","classes/Struct.html#method-i-filter","(*args)","<p>Yields each member value from the struct to the block and returns an Array\ncontaining the member values …\n"],["filter","URI::LDAP","classes/URI/LDAP.html#method-i-filter","()","<p>Returns filter.\n"],["filter!","Array","classes/Array.html#method-i-filter-21","()","<p>Invokes the given block passing in successive elements from\n<code>self</code>, deleting elements for which the block …\n"],["filter!","ENV","classes/ENV.html#method-c-filter-21","()","<p>Equivalent to ENV.keep_if but returns <code>nil</code> if no changes were\nmade.\n<p>ENV.filter! is an alias for ENV.select! …\n"],["filter!","Hash","classes/Hash.html#method-i-filter-21","()","<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were\nmade.\n<p>Hash#filter! is an alias for Hash#select! …\n"],["filter!","Set","classes/Set.html#method-i-filter-21","(&block)","<p>Equivalent to Set#select!\n"],["filter=","URI::LDAP","classes/URI/LDAP.html#method-i-filter-3D","(val)","<p>Setter for filter <code>val</code>.\n"],["filter_backtrace","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-filter_backtrace","(bt)","<p>error message manipulator\n"],["filter_backtrace","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-c-filter_backtrace","(array)",""],["filter_uri","Bundler::HTTPError","classes/Bundler/HTTPError.html#method-i-filter_uri","(uri)",""],["final","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-final","()","<p>Returns the remaining data held in the cipher object. Further calls to\nCipher#update or Cipher#final …\n"],["find","Encoding","classes/Encoding.html#method-c-find","(p1)","<p>Search the encoding with specified <em>name</em>. <em>name</em> should be a\nstring.\n\n<pre><code>Encoding.find(&quot;US-ASCII&quot;)  #=&gt; #&lt;Encoding:US-ASCII&gt;\n</code></pre>\n"],["find","Enumerable","classes/Enumerable.html#method-i-find","(*args)","<p>Passes each entry in <em>enum</em> to <em>block</em>. Returns the first for\nwhich <em>block</em> is not false.  If no object matches, …\n"],["find","Find","classes/Find.html#method-c-find","(*paths, ignore_error: true)","<p>Calls the associated block with the name of every file and directory listed\nas arguments, then recursively …\n"],["find","IRB::Locale","classes/IRB/Locale.html#method-i-find","(file , paths = $:)",""],["find","Pathname","classes/Pathname.html#method-i-find","(ignore_error: true)","<p>Iterates over the directory tree in a depth first manner, yielding a\nPathname for each file under “this” …\n"],["find","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find","(template)","<p>Finds a live tuple that matches <code>template</code>.\n"],["find","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-i-find","()",""],["find_all","Enumerable","classes/Enumerable.html#method-i-find_all","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>If no …\n"],["find_all","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-find_all","()",""],["find_all","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find_all","(template)","<p>Finds all live tuples that match <code>template</code>.\n"],["find_all_template","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-find_all_template","(tuple)","<p>Finds all tuples in the TupleBag which when treated as templates, match\n<code>tuple</code> and are alive.\n"],["find_ancestor_local_symbol","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_ancestor_local_symbol","(symbol)","<p>Looks for a symbol in the #ancestors. See Context#find_local_symbol.\n"],["find_attribute","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute","(name, singleton)","<p>Finds an attribute <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_attribute_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_attribute_named","(name)","<p>Finds an attribute with <code>name</code> in this context\n"],["find_by_name_and_platform","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-find_by_name_and_platform","(name, platform)",""],["find_by_namespace","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-find_by_namespace","(namespace)","<p>Receives a namespace and search for it in the Bundler::Thor::Base\nsubclasses.\n<p>Parameters\n<p>namespace&lt;String&gt; … &mdash; "],["find_c_enclosure","RDoc::Store","classes/RDoc/Store.html#method-i-find_c_enclosure","(variable)","<p>Finds the enclosure (namespace) for the given C <code>variable</code>.\n"],["find_class_and_command_by_namespace","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-find_class_and_command_by_namespace","(namespace, fallback = true)","<p>Receives a namespace and tries to retrieve a Bundler::Thor or\nBundler::Thor::Group class from it. It …\n"],["find_class_and_task_by_namespace","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-find_class_and_task_by_namespace","(namespace, fallback = true)",""],["find_class_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_class_method_named","(name)","<p>Finds a class method with <code>name</code> in this context\n"],["find_class_named","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-find_class_named","(name)","<p>Finds a class or module with <code>name</code> in this namespace or its\ndescendants\n"],["find_class_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_named","(name)","<p>Finds the class with <code>name</code> in all discovered classes\n"],["find_class_named_from","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_named_from","(name, from)","<p>Finds the class with <code>name</code> starting in namespace\n<code>from</code>\n"],["find_class_or_module","RDoc::Store","classes/RDoc/Store.html#method-i-find_class_or_module","(name)","<p>Finds the class or module with <code>name</code>\n"],["find_class_or_module","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_class_or_module","(name)","<p>See RDoc::TopLevel::find_class_or_module\n"],["find_command_possibilities","Bundler::Thor","classes/Bundler/Thor.html#method-c-find_command_possibilities","(meth)","<p>this is the logic that takes the command name passed in by the user and\ndetermines whether it is an unambiguous …\n"],["find_constant_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_constant_named","(name)","<p>Finds a constant with <code>name</code> in this context\n"],["find_enclosing_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_enclosing_module_named","(name)","<p>Find a module at a higher scope\n"],["find_executable","MakeMakefile","classes/MakeMakefile.html#method-i-find_executable","(bin, path = nil)","<p>Searches for the executable <code>bin</code> on <code>path</code>.  The\ndefault path is your <code>PATH</code> environment variable. If that …\n"],["find_external_alias","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias","(name, singleton)","<p>Finds an external alias <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_external_alias_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_external_alias_named","(name)","<p>Finds an external alias with <code>name</code> in this context\n"],["find_file_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_file_named","(name)","<p>Finds a file with <code>name</code> in this context\n"],["find_file_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_file_named","(name)","<p>Finds the file with <code>name</code> in all discovered files\n"],["find_files","Gem","classes/Gem.html#method-c-find_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> that can be used by a\ngem to pick up features from other gems. …\n"],["find_first_recursive","REXML::Node","classes/REXML/Node.html#method-i-find_first_recursive","()","<p>Find (and return) first subnode (recursively) for which the block evaluates\nto true. Returns <code>nil</code> if none …\n"],["find_header","MakeMakefile","classes/MakeMakefile.html#method-i-find_header","(header, *paths)","<p>Instructs mkmf to search for the given <code>header</code> in any of the\n<code>paths</code> provided, and returns whether or not …\n"],["find_in_source_paths","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-find_in_source_paths","(file)","<p>Receives a file or directory and search for it in the source paths.\n"],["find_index","Array","classes/Array.html#method-i-find_index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["find_index","Enumerable","classes/Enumerable.html#method-i-find_index","(p1)","<p>Compares each entry in <em>enum</em> with <em>value</em> or passes to\n<em>block</em>.  Returns the index for the first for which …\n"],["find_indexed_specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-find_indexed_specs","(current_spec)",""],["find_instance_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_instance_method_named","(name)","<p>Finds an instance method with <code>name</code> in this context\n"],["find_latest_files","Gem","classes/Gem.html#method-c-find_latest_files","(glob, check_load_path=true)","<p>Returns a list of paths matching <code>glob</code> from the latest gems\nthat can be used by a gem to pick up features …\n"],["find_library","MakeMakefile","classes/MakeMakefile.html#method-i-find_library","(lib, func, *paths, &b)","<p>Returns whether or not the entry point <code>func</code> can be found\nwithin the library <code>lib</code> in one of the <code>paths</code>\nspecified, …\n"],["find_local_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_local_symbol","(symbol)","<p>Finds a method, constant, attribute, external alias, module or file named\n<code>symbol</code> in this context.\n"],["find_local_symbol","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_local_symbol","(symbol)","<p>Finds a class or module named <code>symbol</code>\n"],["find_method","RDoc::Context","classes/RDoc/Context.html#method-i-find_method","(name, singleton)","<p>Finds a method named <code>name</code> with singleton value\n<code>singleton</code>.\n"],["find_method_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_method_named","(name)","<p>Finds a instance or module method with <code>name</code> in this context\n"],["find_module_named","RDoc::Context","classes/RDoc/Context.html#method-i-find_module_named","(name)","<p>Find a module with <code>name</code> using ruby&#39;s scoping rules\n"],["find_module_named","RDoc::Store","classes/RDoc/Store.html#method-i-find_module_named","(name)","<p>Finds the module with <code>name</code> in all discovered modules\n"],["find_module_named","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-find_module_named","(name)","<p>Finds a module or class with <code>name</code>\n"],["find_proxy","URI::Generic","classes/URI/Generic.html#method-i-find_proxy","(env=ENV)","<p>Returns a proxy URI. The proxy URI is obtained from environment variables\nsuch as http_proxy, ftp_proxy …\n"],["find_resolved_spec","Bundler::Definition","classes/Bundler/Definition.html#method-i-find_resolved_spec","(current_spec)",""],["find_response","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-find_response","(p1)","<p>Returns a SingleResponse whose CertId matches with <em>certificate_id</em>,\nor <code>nil</code> if this BasicResponse does …\n"],["find_symbol","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol","(symbol)","<p>Look up <code>symbol</code>, first as a module, then as a local symbol.\n"],["find_symbol_module","RDoc::Context","classes/RDoc/Context.html#method-i-find_symbol_module","(symbol)","<p>Look up a module named <code>symbol</code>.\n"],["find_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-find_system_command","(command)","<p>private functions\n"],["find_task_possibilities","Bundler::Thor","classes/Bundler/Thor.html#method-c-find_task_possibilities","(meth)",""],["find_text_page","RDoc::Store","classes/RDoc/Store.html#method-i-find_text_page","(file_name)","<p>Returns the RDoc::TopLevel that is a text file and has the given\n<code>file_name</code>\n"],["find_type","MakeMakefile","classes/MakeMakefile.html#method-i-find_type","(type, opt, *headers, &b)","<p>Returns where the static type <code>type</code> is defined.\n<p>You may also pass additional flags to <code>opt</code> which are then …\n"],["find_unique","RDoc::Store","classes/RDoc/Store.html#method-i-find_unique","(all_hash)","<p>Finds unique classes/modules defined in <code>all_hash</code>, and returns\nthem as an array. Performs the alias updates …\n"],["find_unresolved_default_spec","Gem","classes/Gem.html#method-c-find_unresolved_default_spec","(path)","<p>Find a Gem::Specification of default gem from <code>path</code>\n"],["finger","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-finger","()","<p>Creates a singleton RingFinger and looks for a RingServer.  Returns the\ncreated RingFinger.\n"],["finish","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-finish","(connection, thread = Thread.current)","<p>Finishes the Net::HTTP <code>connection</code>\n"],["finish","Encoding::Converter","classes/Encoding/Converter.html#method-i-finish","()","<p>Finishes the converter. It returns the last part of the converted string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;utf-8&quot;, ...</code></pre>\n"],["finish","Net::HTTP","classes/Net/HTTP.html#method-i-finish","()","<p>Finishes the HTTP session and closes the TCP connection. Raises IOError if\nthe session has not been started. …\n"],["finish","Net::POP3","classes/Net/POP3.html#method-i-finish","()","<p>Finishes a POP3 session and closes TCP connection.\n"],["finish","Net::SMTP","classes/Net/SMTP.html#method-i-finish","()","<p>Finishes the SMTP session and closes TCP connection. Raises IOError if not\nstarted.\n"],["finish","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-finish","()","<p>Releases all internal structural references for this engine.\n<p>May raise an EngineError if the engine is …\n"],["finish","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-finish","()",""],["finish","RDoc::Options","classes/RDoc/Options.html#method-i-finish","()","<p>Completes any unfinished option setup business such as filtering for\nexistent files, creating a regexp …\n"],["finish","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-finish","()","<p>Closes the GzipFile object. Unlike Zlib::GzipFile#close, this method never\ncalls the close method of …\n"],["finish","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-finish","()","<p>Finishes the stream and flushes output buffer.  If a block is given each\nchunk is yielded to the block …\n"],["finish_page_dir","RDoc::Options","classes/RDoc/Options.html#method-i-finish_page_dir","()","<p>Fixes the page_dir to be relative to the root_dir and adds the page_dir to\nthe files list.\n"],["finish_resolve","Gem","classes/Gem.html#method-c-finish_resolve","(request_set=Gem::RequestSet.new)",""],["finished?","ThreadsWait","classes/ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","ThreadsWait","classes/ThreadsWait.html#method-i-finished-3F","()","<p>Returns <code>true</code> if any thread has terminated and is ready to be\ncollected.\n"],["finished?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-finished-3F","()","<p>Returns true if the stream is finished.\n"],["finite?","BigDecimal","classes/BigDecimal.html#method-i-finite-3F","()","<p>Returns True if the value is finite (not NaN or infinite).\n"],["finite?","Complex","classes/Complex.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>cmp</code>&#39;s real and imaginary\nparts are both finite numbers, otherwise returns <code>false</code>. …\n"],["finite?","Float","classes/Float.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>float</code> is a valid IEEE floating\npoint number, i.e. it is not infinite and Float#nan? is …\n"],["finite?","Numeric","classes/Numeric.html#method-i-finite-3F","()","<p>Returns <code>true</code> if <code>num</code> is a finite number, otherwise\nreturns <code>false</code>.\n"],["fips_mode","OpenSSL","classes/OpenSSL.html#method-c-fips_mode","()",""],["fips_mode=","OpenSSL","classes/OpenSSL.html#method-c-fips_mode-3D","(p1)","<p>Turns FIPS mode on or off. Turning on FIPS mode will obviously only have an\neffect for FIPS-capable installations …\n"],["first","Array","classes/Array.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\narray. If the array is empty, the first form …\n"],["first","Enumerable","classes/Enumerable.html#method-i-first","(*args)","<p>Returns the first element, or the first <code>n</code> elements, of the\nenumerable. If the enumerable is empty, the …\n"],["first","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-first","(*args)","<p>Returns the first number in this arithmetic sequence, or an array of the\nfirst <code>n</code> elements.\n"],["first","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-first","(element, path, namespaces=EMPTY_HASH)",""],["first","REXML::XPath","classes/REXML/XPath.html#method-c-first","(element, path=nil, namespaces=nil, variables={}, options={})","<p>Finds and returns the first node that matches the supplied xpath.\n<p>element &mdash; The context element\n<p>path &mdash; The …\n"],["first","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-first","( path_stack, node )","<p>Performs a depth-first (document order) XPath search, and returns the first\nmatch.  This is the fastest, …\n"],["first","Range","classes/Range.html#method-i-first","(p1)","<p>Returns the first object in the range, or an array of the first\n<code>n</code> elements.\n\n<pre><code>(10..20).first     #=&gt; 10 ...\n</code></pre>\n"],["first?","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-first-3F","()","<p>This is used as a predicate, and ought to be called first.\n"],["first_column","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-first_column","()","<p>The column number in the source code where this AST&#39;s text began.\n"],["first_lineno","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-first_lineno","()","<p>The line number in the source code where this AST&#39;s text began.\n"],["first_lineno","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-first_lineno","()","<p>Returns the number of the first source line where the instruction sequence\nwas loaded from.\n<p>For example, …\n"],["fix","BigDecimal","classes/BigDecimal.html#method-i-fix","()","<p>Return the integer part of the number, as a BigDecimal.\n"],["fix_basic_object_inheritance","RDoc::Store","classes/RDoc/Store.html#method-i-fix_basic_object_inheritance","()","<p>Fixes the erroneous <code>BasicObject &lt; Object</code> in 1.9.\n<p>Because we assumed all classes without a stated superclass …\n"],["fixed_encoding?","Regexp","classes/Regexp.html#method-i-fixed_encoding-3F","()","<p>Returns false if rxp is applicable to a string with any ASCII compatible\nencoding. Returns true otherwise. …\n"],["flags","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-flags","()","<p>Returns the flags of <em>ifaddr</em>.\n"],["flags=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-flags-3D","(p1)","<p>Sets <em>flags</em> to the Store. <em>flags</em> consists of zero or more\nof the constants defined in with name V_FLAG_ …\n"],["flags=","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-flags-3D","(p1)","<p>Sets the verification flags to the context. See Store#flags=.\n"],["flat_map","Bundler::Molinillo::Compatibility","classes/Bundler/Molinillo/Compatibility.html#method-i-flat_map","(enum, &blk)","<p>Flat map @param [Enumerable] enum an enumerable object @block the block to\nflat-map with @return The …\n"],["flat_map","Enumerable","classes/Enumerable.html#method-i-flat_map","()","<p>Returns a new array with the concatenated results of running <em>block</em>\nonce for every element in <em>enum</em>.\n<p>If …\n"],["flat_map","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-flat_map","()","<p>Returns a new lazy enumerator with the concatenated results of running\n<em>block</em> once for every element in …\n"],["flatten","Array","classes/Array.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of\n<code>self</code> (recursively).\n<p>That is, for every element …\n"],["flatten","Hash","classes/Hash.html#method-i-flatten","(*args)","<p>Returns a new array that is a one-dimensional flattening of this hash. That\nis, for every key or value …\n"],["flatten","Set","classes/Set.html#method-i-flatten","()","<p>Returns a new set that is a copy of the set, flattening each containing set\nrecursively.\n"],["flatten!","Array","classes/Array.html#method-i-flatten-21","(*args)","<p>Flattens <code>self</code> in place.\n<p>Returns <code>nil</code> if no modifications were made (i.e., the array\ncontains no subarrays.) …\n"],["flatten!","Set","classes/Set.html#method-i-flatten-21","()","<p>Equivalent to Set#flatten, but replaces the receiver with the result in\nplace.  Returns nil if no modifications …\n"],["flock","CSV","classes/CSV.html#method-i-flock","(*args)",""],["flock","File","classes/File.html#method-i-flock","(p1)","<p>Locks or unlocks a file according to <em>locking_constant</em> (a logical\n<em>or</em> of the values in the table below). …\n"],["floor","BigDecimal","classes/BigDecimal.html#method-i-floor","(p1 = v1)","<p>Return the largest integer less than or equal to the value, as a\nBigDecimal.\n\n<pre><code>BigDecimal(&#39;3.14159&#39;).floor ...\n</code></pre>\n"],["floor","Float","classes/Float.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>float</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Integer","classes/Integer.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>int</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","Numeric","classes/Numeric.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>num</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["floor","REXML::Functions","classes/REXML/Functions.html#method-c-floor","( number )",""],["floor","Rational","classes/Rational.html#method-i-floor","(*args)","<p>Returns the largest number less than or equal to <code>rat</code> with a\nprecision of <code>ndigits</code> decimal digits (default: …\n"],["flush","IO","classes/IO.html#method-i-flush","()","<p>Flushes any buffered data within <em>ios</em> to the underlying operating\nsystem (note that this is Ruby internal …\n"],["flush","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-flush","()","<p>Flushes buffered data to the SSLSocket.\n"],["flush","PrettyPrint","classes/PrettyPrint.html#method-i-flush","()","<p>outputs buffered data.\n"],["flush","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-flush","()",""],["flush","StringIO","classes/StringIO.html#method-i-flush","()","<p>Returns <strong>strio</strong> itself.  Just for compatibility to IO.\n"],["flush","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-flush","(output=nil)","<p>Flush the group database.  If <code>output</code> is given the database\nwill be written there instead of to the original …\n"],["flush","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-flush","(output=nil)","<p>Flush the password database.  If <code>output</code> is given the database\nwill be written there instead of to the …\n"],["flush","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-flush","(p1 = v1)","<p>This method is equivalent to <code>deflate(&#39;&#39;, flush)</code>. This\nmethod is just provided to improve the …\n"],["flush","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-flush","(p1 = v1)","<p>Flushes all the internal buffers of the GzipWriter object.  The meaning of\n<code>flush</code> is same as in Zlib::Deflate#deflate …\n"],["flush_left","RDoc::Text","classes/RDoc/Text.html#method-i-flush_left","(text)","<p>Flush <code>text</code> left based on the shortest line\n"],["flush_next_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-flush_next_in","()",""],["flush_next_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-flush_next_out","()","<p>Flushes output buffer and returns all data in that buffer.  If a block is\ngiven each chunk is yielded …\n"],["flush_sessions","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-flush_sessions","(p1 = v1)","<p>Removes sessions in the internal cache that have expired at <em>time</em>.\n"],["fnmatch","File","classes/File.html#method-c-fnmatch","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["fnmatch","Pathname","classes/Pathname.html#method-i-fnmatch","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["fnmatch?","File","classes/File.html#method-c-fnmatch-3F","(p1, p2, p3 = v3)","<p>Returns true if <code>path</code> matches against <code>pattern</code>. \nThe pattern is not a regular expression; instead it follows …\n"],["fnmatch?","Pathname","classes/Pathname.html#method-i-fnmatch-3F","(p1, p2 = v2)","<p>Return <code>true</code> if the receiver matches the given pattern.\n<p>See File.fnmatch.\n"],["for","Bundler::Settings::Mirrors","classes/Bundler/Settings/Mirrors.html#method-i-for","(uri)","<p>Returns a mirror for the given uri.\n<p>Depending on the uri having a valid mirror or not, it may be a\n\n<pre><code>mirror ...\n</code></pre>\n"],["for","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-for","(dependencies, skip = [], check = false, match_current_platform = false, raise_on_missing = true)",""],["for","Bundler::VersionRanges","classes/Bundler/VersionRanges.html#method-c-for","(requirement)",""],["for","RDoc::Parser","classes/RDoc/Parser.html#method-c-for","(top_level, file_name, content, options, stats)","<p>Finds and instantiates the correct parser for the given\n<code>file_name</code> and <code>content</code>.\n"],["for?","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-for-3F","(platform)",""],["for_fd","BasicSocket","classes/BasicSocket.html#method-c-for_fd","(p1)","<p>Returns a socket object which contains the file descriptor, <em>fd</em>.\n\n<pre><code># If invoked by inetd, STDIN/STDOUT/STDERR ...\n</code></pre>\n"],["for_fd","IO","classes/IO.html#method-c-for_fd","(*args)","<p>Synonym for <code>IO.new</code>.\n"],["for_many","Bundler::VersionRanges","classes/Bundler/VersionRanges.html#method-c-for_many","(requirements)",""],["force","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-force","()",""],["force_documentation=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-force_documentation-3D","(value)","<p>Force the documentation of this object unless documentation has been turned\noff by :enddoc:\n"],["force_encoding","String","classes/String.html#method-i-force_encoding","(p1)","<p>Changes the encoding to <code>encoding</code> and returns self.\n"],["force_quotes?","CSV","classes/CSV.html#method-i-force_quotes-3F","()","<p>Returns <code>true</code> if all output fields are quoted. See CSV::new for\ndetails.\n"],["foreach","Addrinfo","classes/Addrinfo.html#method-c-foreach","(nodename, service, family=nil, socktype=nil, protocol=nil, flags=nil, &block)","<p>iterates over the list of Addrinfo objects obtained by\nAddrinfo.getaddrinfo.\n\n<pre><code>Addrinfo.foreach(nil, 80) ...\n</code></pre>\n"],["foreach","CSV","classes/CSV.html#method-c-foreach","(path, mode=\"r\", **options, &block)","<p>This method is intended as the primary interface for reading CSV files. \nYou pass a <code>path</code> and any <code>options</code> …\n"],["foreach","Dir","classes/Dir.html#method-c-foreach","(*args)","<p>Calls the block once for each entry in the named directory, passing the\nfilename of each entry as a parameter …\n"],["foreach","IO","classes/IO.html#method-c-foreach","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Executes the block for every line in the named I/O port, where lines are\nseparated by <em>sep</em>.\n<p>If no block …\n"],["foreach","Net::POP3","classes/Net/POP3.html#method-c-foreach","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Starts a POP3 session and iterates over each POPMail object, yielding it to\nthe <code>block</code>. This method is …\n"],["foreach","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-foreach","(path = nil, *rs)","<p>See IO.foreach when <code>path</code> is a file.\n<p>See Dir.foreach when <code>path</code> is a directory.\n"],["fork","Kernel","classes/Kernel.html#method-i-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Process","classes/Process.html#method-c-fork","()","<p>Creates a subprocess. If a block is specified, that block is run in the\nsubprocess, and the subprocess …\n"],["fork","Thread","classes/Thread.html#method-c-fork","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["form","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-form","(method = \"post\", action = script_name, enctype = \"application/x-www-form-urlencoded\")","<p>Generate a Form element as a string.\n<p><code>method</code> should be either “get” or “post”, and …\n"],["format","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-format","(format = nil, *args)","<p>Returns the contents of this Tms object as a formatted string, according to\na <code>format</code> string like that …\n"],["format","IRB::Locale","classes/IRB/Locale.html#method-i-format","(*opts)",""],["format","Kernel","classes/Kernel.html#method-i-format","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["format","PrettyPrint","classes/PrettyPrint.html#method-c-format","(output=''.dup, maxwidth=79, newline=\"\\n\", genspace=lambda {|n| ' ' * n})","<p>This is a convenience method which is same as follows:\n\n<pre><code>begin\n  q = PrettyPrint.new(output, maxwidth, newline, ...</code></pre>\n"],["format","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-format","(format_string, params)","<p>Formats <code>params</code> according to <code>format_string</code> which\nis described in setup_params.\n"],["format=","RDoc::Comment","classes/RDoc/Comment.html#method-i-format-3D","(format)","<p>Sets the format of this comment and resets any parsed document\n"],["format_date","Net::IMAP","classes/Net/IMAP.html#method-c-format_date","(time)","<p>Formats <code>time</code> as an IMAP-style date.\n"],["format_datetime","Net::IMAP","classes/Net/IMAP.html#method-c-format_datetime","(time)","<p>Formats <code>time</code> as an IMAP-style date-time.\n"],["formatted_usage","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given …\n"],["formatted_usage","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given …\n"],["frac","BigDecimal","classes/BigDecimal.html#method-i-frac","()","<p>Return the fractional part of the number, as a BigDecimal.\n"],["fragment=","URI::Generic","classes/URI/Generic.html#method-i-fragment-3D","(v)","<p>Checks the fragment <code>v</code> component against the URI::Parser Regexp\nfor :FRAGMENT.\n<p>Args\n<p><code>v</code> &mdash; String\n"],["free","Fiddle","classes/Fiddle.html#method-c-free","(p1)","<p>Free the memory at address <code>addr</code>\n"],["free","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-free","()","<p>Get the free function for this pointer.\n<p>Returns a new instance of Fiddle::Function.\n<p>See Fiddle::Function.new …\n"],["free=","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-free-3D","(p1)","<p>Set the free function for this pointer to <code>function</code> in the\ngiven Fiddle::Function.\n"],["freeze","Delegator","classes/Delegator.html#method-i-freeze","","<p>Freeze both the object returned by _<em>getobj</em>_ and self.\n"],["freeze","Module","classes/Module.html#method-i-freeze","()","<p>Prevents further modifications to <em>mod</em>.\n<p>This method returns self.\n"],["freeze","Object","classes/Object.html#method-i-freeze","()","<p>Prevents further modifications to <em>obj</em>. A <code>RuntimeError</code>\nwill be raised if modification is attempted. There …\n"],["freeze","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-freeze","()",""],["freeze","OpenStruct","classes/OpenStruct.html#method-i-freeze","()",""],["freeze","Pathname","classes/Pathname.html#method-i-freeze","()","<p>Freezes this Pathname.\n<p>See Object.freeze.\n"],["freeze","String","classes/String.html#method-i-freeze","()",""],["frexp","Math","classes/Math.html#method-c-frexp","(p1)","<p>Returns a two-element array containing the normalized fraction (a Float)\nand exponent (an Integer) of …\n"],["friday?","Date","classes/Date.html#method-i-friday-3F","()","<p>Returns true if the date is Friday.\n"],["friday?","Time","classes/Time.html#method-i-friday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Friday.\n\n<pre><code>t = Time.local(1987, 12, 18)     #=&gt; 1987-12-18 00:00:00 -0600 ...\n</code></pre>\n"],["friendly_path","RDoc::Store","classes/RDoc/Store.html#method-i-friendly_path","()","<p>Friendly rendition of #path\n"],["from_hash","JSON::GenericObject","classes/JSON/GenericObject.html#method-c-from_hash","(object)",""],["from_lock","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-c-from_lock","(options)",""],["from_module","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-from_module","(class_type, mod)","<p>Return a RDoc::ClassModule of class <code>class_type</code> that is a copy\nof module <code>module</code>. Used to promote modules …\n"],["from_name","Process::GID","classes/Process/GID.html#method-c-from_name","(p1)","<p>Get the group ID by the <em>name</em>. If the group is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre><code>Process::GID.from_name(&quot;wheel&quot;) ...\n</code></pre>\n"],["from_name","Process::UID","classes/Process/UID.html#method-c-from_name","(p1)","<p>Get the user ID by the <em>name</em>. If the user is not found,\n<code>ArgumentError</code> will be raised.\n\n<pre><code>Process::UID.from_name(&quot;root&quot;) ...\n</code></pre>\n"],["from_prime_division","Integer","classes/Integer.html#method-c-from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>See Prime#int_from_prime_division for more …\n"],["from_state","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-from_state","(p1)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by …\n"],["from_string","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-c-from_string","(string)","<p>Returns a RubyVersion from the given string. @param [String] the version\nstring to match. @return [RubyVersion,Nil] …\n"],["from_stub","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-c-from_stub","(stub)",""],["from_superclass","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-from_superclass","(method, default = nil)","<p>Retrieves a value from superclass. If it reaches the baseclass, returns\ndefault.\n"],["front","DRb","classes/DRb.html#method-c-front","()","<p>Get the front object of the current server.\n<p>This raises a DRbServerNotFound error if there is no current …\n"],["front","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-front","()",""],["frozen?","Object","classes/Object.html#method-i-frozen-3F","()","<p>Returns the freeze status of <em>obj</em>.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.freeze    #=&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]\na.frozen?   #=&gt; ...\n</code></pre>\n"],["frozen_bundle?","Bundler","classes/Bundler.html#method-c-frozen_bundle-3F","()",""],["fsync","IO","classes/IO.html#method-i-fsync","()","<p>Immediately writes all buffered data in <em>ios</em> to disk. Note that\n<code>fsync</code> differs from using <code>IO#sync=</code>. The …\n"],["fsync","StringIO","classes/StringIO.html#method-i-fsync","()","<p>Returns 0.  Just for compatibility to IO.\n"],["ftype","File","classes/File.html#method-c-ftype","(p1)","<p>Identifies the type of the named file; the return string is one of\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, …\n"],["ftype","File::Stat","classes/File/Stat.html#method-i-ftype","()","<p>Identifies the type of <em>stat</em>. The return string is one of:\n“<code>file</code>&#39;&#39;, “<code>directory</code>&#39;&#39;, “ …\n"],["ftype","Pathname","classes/Pathname.html#method-i-ftype","()","<p>Returns “type” of file (“file”, “directory”, etc).\n<p>See File.ftype.\n"],["full_gem_path","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-full_gem_path","()",""],["full_message","Exception","classes/Exception.html#method-i-full_message","(p1 = {})","<p>Returns formatted string of <em>exception</em>. The returned string is\nformatted using the same format that Ruby …\n"],["full_name","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-full_name","()",""],["full_name","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-full_name","()",""],["full_name","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-full_name","()","<p>Return the fully qualified name of this class or module\n"],["full_name","RDoc::Constant","classes/RDoc/Constant.html#method-i-full_name","()","<p>Full constant name including namespace\n"],["full_name","RDoc::Context","classes/RDoc/Context.html#method-i-full_name","()","<p>The full name for this context.  This method is overridden by subclasses.\n"],["full_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-full_name","()","<p>Full method/attribute name including namespace\n"],["full_name","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-full_name","()","<p>Full name based on #module\n"],["full_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-full_name","()","<p>Returns the relative name of this file\n"],["full_name","RSS::Element","classes/RSS/Element.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-i-full_name","()",""],["full_name","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-i-full_name","()",""],["full_name","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-full_name","()",""],["full_name","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-full_name","()",""],["full_name","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-i-full_name","()",""],["full_name","RSS::RDF","classes/RSS/RDF.html#method-i-full_name","()",""],["full_name","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-i-full_name","()",""],["full_name","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-full_name","()",""],["full_name","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-full_name","()",""],["full_name","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-full_name","()",""],["full_name=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-full_name-3D","(full_name)","<p>Sets the full_name overriding any computed full name.\n<p>Set to <code>nil</code> to clear RDoc&#39;s cached value\n"],["full_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-full_old_name","()","<p>Full old name including namespace\n"],["full_require_paths","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-full_require_paths","()",""],["full_version","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-full_version","()",""],["fully_documented?","RDoc::Context","classes/RDoc/Context.html#method-i-fully_documented-3F","()","<p>Does this context and its methods and constants all have documentation?\n<p>(Yes, fully documented doesn&#39;t …\n"],["fully_documented?","RDoc::Stats","classes/RDoc/Stats.html#method-i-fully_documented-3F","()","<p>The documentation status of this project.  <code>true</code> when 100%,\n<code>false</code> when less than 100% and <code>nil</code> when unknown. …\n"],["fully_expanded_name","REXML::Namespace","classes/REXML/Namespace.html#method-i-fully_expanded_name","()","<p>Fully expand the name, even if the prefix wasn&#39;t specified in the\nsource file.\n"],["function","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-function","( elements, fname, rest )",""],["g","Bundler::Graph::GraphVizClient","classes/Bundler/Graph/GraphVizClient.html#method-i-g","()",""],["gamma","Math","classes/Math.html#method-c-gamma","(p1)","<p>Calculates the gamma function of x.\n<p>Note that gamma(n) is same as fact(n-1) for integer n &gt; 0. However …\n"],["garbage_collect","GC","classes/GC.html#method-i-garbage_collect","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["garbage_collect","ObjectSpace","classes/ObjectSpace.html#method-c-garbage_collect","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["gather_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-gather_files","(files)","<p>Gathers a set of parseable files from the files and directories listed in\n<code>files</code>.\n"],["gcd","Integer","classes/Integer.html#method-i-gcd","(p1)","<p>Returns the greatest common divisor of the two integers. The result is\nalways positive. 0.gcd(x) and …\n"],["gcd","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-gcd","(p1)",""],["gcdlcm","Integer","classes/Integer.html#method-i-gcdlcm","(p1)","<p>Returns an array with the greatest common divisor and the least common\nmultiple of the two integers, …\n"],["gem","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-gem","(name, *args)",""],["gem_install_dir","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-gem_install_dir","()","<p>Note: Do not override if you don&#39;t know what you are doing.\n"],["gem_key","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-gem_key","()",""],["gem_mirrors","Bundler::Settings","classes/Bundler/Settings.html#method-i-gem_mirrors","()",""],["gem_not_found_message","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-gem_not_found_message","(missing_gem_name, alternatives)",""],["gem_platforms","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-gem_platforms","(valid_platforms)","<p>Returns the platforms this dependency is valid for, in the same order as\npassed in the `valid_platforms` …\n"],["gem_push?","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-gem_push-3F","()",""],["gem_push_host","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-gem_push_host","()",""],["gem_version_promoter","Bundler::Definition","classes/Bundler/Definition.html#method-i-gem_version_promoter","()",""],["gemfile","Object","classes/Object.html#method-i-gemfile","(install = false, options = {}, &gemfile)","<p>Allows for declaring a Gemfile inline in a ruby script, optionally\ninstalling any gems that aren&#39;t …\n"],["gemfile_install","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-gemfile_install","(gemfile = nil, &inline)","<p>Evaluates the Gemfile with a limited DSL and installs the plugins specified\nby plugin method\n<p>@param [Pathname] …\n"],["gemspec","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-gemspec","(opts = nil)",""],["gemspec","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-c-gemspec","(&block)",""],["gen_random","SecureRandom","classes/SecureRandom.html#method-c-gen_random","(n)",""],["generate","Bundler::LockfileGenerator","classes/Bundler/LockfileGenerator.html#method-c-generate","(definition)",""],["generate","Bundler::Standalone","classes/Bundler/Standalone.html#method-i-generate","()",""],["generate","CSV","classes/CSV.html#method-c-generate","(str=nil, **options)","<p>This method wraps a String you provide, or an empty default String, in a\nCSV object which is passed to …\n"],["generate","JSON","classes/JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>state</em> is * a JSON::State object, …\n"],["generate","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-generate","(p1)","<p>Generates a valid JSON document from object <code>obj</code> and returns\nthe result. If no valid JSON document can …\n"],["generate","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-c-generate","(p1, p2 = v2)","<p>Creates a new DH instance from scratch by generating the private and public\ncomponents alike.\n<p>Parameters …\n"],["generate","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-c-generate","(p1)","<p>Creates a new DSA instance by generating a private/public key pair from\nscratch.\n<p>Parameters\n<p><em>size</em> is an …\n"],["generate","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-c-generate","(p1)","<p>Creates a new EC instance with a new random private and public key.\n"],["generate","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-generate","(p1, p2 = v2)","<p>Generates an RSA keypair.  <em>size</em> is an integer representing the\ndesired key size.  Keys smaller than 1024 …\n"],["generate","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-generate","()","<p>Generates documentation for <code>file_info</code> (from #parse_files) into\nthe output dir using the generator selected …\n"],["generate","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-generate","()","<p>Generates RDoc and ri data\n"],["generate!","Bundler::LockfileGenerator","classes/Bundler/LockfileGenerator.html#method-i-generate-21","()",""],["generate_bin","Bundler::Plugin::Installer::Git","classes/Bundler/Plugin/Installer/Git.html#method-i-generate_bin","(spec, disable_extensions = false)",""],["generate_bundler_executable_stubs","Bundler::Installer","classes/Bundler/Installer.html#method-i-generate_bundler_executable_stubs","(spec, options = {})",""],["generate_event","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-generate_event","( event )",""],["generate_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-generate_key","()",""],["generate_key!","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-generate_key-21","()","<p>Generates a private and public key unless a private key already exists. If\nthis DH instance was generated …\n"],["generate_key!","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-generate_key-21","()","<p>Generates a new random private and public key.\n<p>See also the OpenSSL documentation for EC_KEY_generate_key …\n"],["generate_line","CSV","classes/CSV.html#method-c-generate_line","(row, **options)","<p>This method is a shortcut for converting a single row (Array) into a CSV\nString.\n<p>The <code>options</code> parameter …\n"],["generate_prime","OpenSSL::BN","classes/OpenSSL/BN.html#method-c-generate_prime","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates a random prime number of bit length <em>bits</em>. If\n<em>safe</em> is set to <code>true</code>, generates a safe prime.  …\n"],["generate_standalone_bundler_executable_stubs","Bundler::Installer","classes/Bundler/Installer.html#method-i-generate_standalone_bundler_executable_stubs","(spec)",""],["generation_hook","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-generation_hook","(installer, specs)","<p>Post installs hook that generates documentation for each specification in\n<code>specs</code>\n"],["generator","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-generator","()","<p>Returns the generator of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get0_generator()\n"],["generator_descriptions","RDoc::Options","classes/RDoc/Options.html#method-i-generator_descriptions","()","<p>Returns a properly-space list of generators and their descriptions.\n"],["generator_for","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-generator_for","(store)","<p>Instantiates a Darkfish generator for <code>store</code>\n"],["generic","Bundler::GemHelpers","classes/Bundler/GemHelpers.html#method-c-generic","(p)",""],["generic_local_platform","Bundler::GemHelpers","classes/Bundler/GemHelpers.html#method-c-generic_local_platform","()",""],["get","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-get","(source)",""],["get","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-get","(source, *args, &block)","<p>Gets the content at the given address and places it at the given relative\ndestination. If a block is …\n"],["get","GetoptLong","classes/GetoptLong.html#method-i-get","()","<p>Get next option name and its argument, as an Array of two elements.\n<p>The option name is always converted …\n"],["get","Net::FTP","classes/Net/FTP.html#method-i-get","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in whatever mode the session is set (text\nor binary).  See #gettextfile and #getbinaryfile …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-i-get","(path, initheader = nil, dest = nil)","<p>Retrieves data from <code>path</code> on the connected-to host which may be\nan absolute path String or a URI to extract …\n"],["get","Net::HTTP","classes/Net/HTTP.html#method-c-get","(uri_or_host, path = nil, port = nil)","<p>Sends a GET request to the target and returns the HTTP response as a\nstring.  The target can either be …\n"],["get2","Net::HTTP","classes/Net/HTTP.html#method-i-get2","(path, initheader = nil)",""],["get_attribute","REXML::Attributes","classes/REXML/Attributes.html#method-i-get_attribute","( name )","<p>Fetches an attribute\n<p>name &mdash; the name by which to search for the attribute.  Can be a\n<code>prefix:name</code> namespace …\n"],["get_attribute_ns","REXML::Attributes","classes/REXML/Attributes.html#method-i-get_attribute_ns","(namespace, name)","<p>The <code>get_attribute_ns</code> method retrieves a method by its\nnamespace and name. Thus it is possible to reliably …\n"],["get_attributes","RSS::Element","classes/RSS/Element.html#method-c-get_attributes","()",""],["get_byte","StringScanner","classes/StringScanner.html#method-i-get_byte","()","<p>Scans one byte and returns it. This method is not multibyte character\nsensitive. See also: #getch.\n\n<pre><code>s = ...</code></pre>\n"],["get_console","Bundler::CLI::Console","classes/Bundler/CLI/Console.html#method-i-get_console","(name)",""],["get_constant","Bundler::CLI::Console","classes/Bundler/CLI/Console.html#method-i-get_constant","(name)",""],["get_elements","REXML::Element","classes/REXML/Element.html#method-i-get_elements","( xpath )","<p>Synonym for Element.to_a This is a little slower than calling elements.each\ndirectly.\n<p>xpath &mdash; any XPath …\n"],["get_file_and_line_from_caller","RSS::Utils","classes/RSS/Utils.html#method-i-get_file_and_line_from_caller","(i=0)","<p>Returns an array of two elements: the filename where the calling method is\nlocated, and the line number …\n"],["get_first","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-get_first","(path, nodeset)",""],["get_formatted_specs_and_deps","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-get_formatted_specs_and_deps","(gem_list)",""],["get_instance","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-c-get_instance","(server, *options)","<p>Factory for servlet instances that will handle a request from\n<code>server</code> using <code>options</code> from the mount point. …\n"],["get_namespace","REXML::Functions","classes/REXML/Functions.html#method-c-get_namespace","( node_set = nil )","<p>Helper method.\n"],["get_nth_prime","Prime::EratosthenesSieve","classes/Prime/EratosthenesSieve.html#method-i-get_nth_prime","(n)",""],["get_option","GetoptLong","classes/GetoptLong.html#method-i-get_option","()","<p>`get_option&#39; is an alias of `get&#39;.\n"],["get_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-get_passwd","(realm, user, reload_db)","<p>Retrieves a password from the database for <code>user</code> in\n<code>realm</code>.  If <code>reload_db</code> is true the database will be\n…\n"],["get_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-get_passwd","(realm, user, reload_db=false)","<p>Retrieves a password in <code>realm</code> for <code>user</code> for the\nauth_type of this database.  <code>reload_db</code> is a dummy value. …\n"],["get_print","Net::HTTP","classes/Net/HTTP.html#method-c-get_print","(uri_or_host, path = nil, port = nil)","<p>Gets the body text from the target and outputs it to $stdout.  The target\ncan either be specified as …\n"],["get_response","Net::HTTP","classes/Net/HTTP.html#method-c-get_response","(uri_or_host, path = nil, port = nil, &block)","<p>Sends a GET request to the target and returns the HTTP response as a\nNet::HTTPResponse object.  The target …\n"],["get_screen_size","Readline","classes/Readline.html#method-c-get_screen_size","()","<p>Returns the terminal&#39;s rows and columns.\n<p>See GNU Readline&#39;s rl_get_screen_size function.\n<p>Raises …\n"],["get_text","REXML::Element","classes/REXML/Element.html#method-i-get_text","(path = nil)","<p>Returns the first child Text node, if any, or <code>nil</code> otherwise.\nThis method returns the actual <code>Text</code> node, …\n"],["get_thread","DEBUGGER__","classes/DEBUGGER__.html#method-c-get_thread","(num)",""],["get_value","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-get_value","(section, key)","<p>Gets the value of <em>key</em> from the given <em>section</em>\n<p>Given the following configurating file being loaded:\n\n<pre><code>config ...\n</code></pre>\n"],["getacl","Net::IMAP","classes/Net/IMAP.html#method-i-getacl","(mailbox)","<p>Send the GETACL command along with a specified <code>mailbox</code>. If\nthis mailbox exists, an array containing objects …\n"],["getaddress","IPSocket","classes/IPSocket.html#method-c-getaddress","(p1)","<p>Lookups the IP address of <em>host</em>.\n\n<pre><code>require &#39;socket&#39;\n\nIPSocket.getaddress(&quot;localhost&quot;)     #=&gt; &quot;127.0.0.1&quot; ...\n</code></pre>\n"],["getaddress","Resolv","classes/Resolv.html#method-c-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv","classes/Resolv.html#method-i-getaddress","(name)","<p>Looks up the first IP address for <code>name</code>.\n"],["getaddress","Resolv::DNS","classes/Resolv/DNS.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddress","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getaddress","(name)","<p>Gets the IP address of <code>name</code> from the hosts file.\n"],["getaddresses","Resolv","classes/Resolv.html#method-c-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv","classes/Resolv.html#method-i-getaddresses","(name)","<p>Looks up all IP address for <code>name</code>.\n"],["getaddresses","Resolv::DNS","classes/Resolv/DNS.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the DNS resolver.\n<p><code>name</code> can be a Resolv::DNS::Name or a String.  Retrieved …\n"],["getaddresses","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getaddresses","(name)","<p>Gets all IP addresses for <code>name</code> from the hosts file.\n"],["getaddrinfo","Addrinfo","classes/Addrinfo.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>returns a list of addrinfo objects as an array.\n<p>This method converts nodename (hostname) and service (port) …\n"],["getaddrinfo","Socket","classes/Socket.html#method-c-getaddrinfo","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Obtains address information for <em>nodename</em>:<em>servname</em>.\n<p>Note that Addrinfo.getaddrinfo provides the same functionality …\n"],["getbinaryfile","Net::FTP","classes/Net/FTP.html#method-i-getbinaryfile","(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)","<p>Retrieves <code>remotefile</code> in binary mode, storing the result in\n<code>localfile</code>. If <code>localfile</code> is nil, returns retrieved\n…\n"],["getbyte","ARGF","classes/ARGF.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <code>ARGF</code>. Returns\n<code>nil</code> if called at the end of the stream.\n<p>For example: …\n"],["getbyte","IO","classes/IO.html#method-i-getbyte","()","<p>Gets the next 8-bit byte (0..255) from <em>ios</em>. Returns\n<code>nil</code> if called at end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...\n</code></pre>\n"],["getbyte","String","classes/String.html#method-i-getbyte","(p1)","<p>returns the <em>index</em>th byte as an integer.\n"],["getbyte","StringIO","classes/StringIO.html#method-i-getbyte","()","<p>See IO#getbyte.\n"],["getbyte","StringScanner","classes/StringScanner.html#method-i-getbyte","()","<p>Equivalent to #get_byte. This method is obsolete; use #get_byte instead.\n"],["getbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-getbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getc","ARGF","classes/ARGF.html#method-i-getc","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Returns <code>nil</code> at the end of the stream. …\n"],["getc","IO","classes/IO.html#method-i-getc","()","<p>Reads a one-character string from <em>ios</em>. Returns <code>nil</code> if\ncalled at end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...\n</code></pre>\n"],["getc","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-getc","()","<p>Reads one character from the stream.  Returns nil if called at end of file.\n"],["getc","StringIO","classes/StringIO.html#method-i-getc","()","<p>See IO#getc.\n"],["getc","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-getc","()","<p>See Zlib::GzipReader documentation for a description.\n"],["getch","IO","classes/IO.html#method-i-getch","(*args)","<p>Reads and returns a character in raw mode.\n<p>See IO#raw for details on the parameters.\n<p>You must require &#39;io/console&#39; …\n"],["getch","IO::generic_readable","classes/IO/generic_readable.html#method-i-getch","(*args)","<p>See IO#getch.\n"],["getch","StringScanner","classes/StringScanner.html#method-i-getch","()","<p>Scans one character and returns it. This method is multibyte character\nsensitive.\n\n<pre><code>s = StringScanner.new(&quot;ab&quot;) ...\n</code></pre>\n"],["getdir","Net::FTP","classes/Net/FTP.html#method-i-getdir","()",""],["getegid","Process::Sys","classes/Process/Sys.html#method-c-getegid","()","<p>Returns the effective group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.egid   #=&gt; 500\n</code></pre>\n"],["geteuid","Process::Sys","classes/Process/Sys.html#method-c-geteuid","()","<p>Returns the effective user ID for this process.\n\n<pre><code>Process.euid   #=&gt; 501\n</code></pre>\n"],["getgid","Process::Sys","classes/Process/Sys.html#method-c-getgid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["getgm","Time","classes/Time.html#method-i-getgm","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre><code>t = Time.local(2000,1,1,20,15,1)   #=&gt; 2000-01-01 ...\n</code></pre>\n"],["getgrent","Etc","classes/Etc.html#method-c-getgrent","()","<p>Returns an entry from the /etc/group file.\n<p>The first time it is called it opens the file and returns the …\n"],["getgrgid","Etc","classes/Etc.html#method-c-getgrgid","(p1 = v1)","<p>Returns information about the group with specified integer\n<code>group_id</code>, as found in /etc/group.\n<p>The information …\n"],["getgrnam","Etc","classes/Etc.html#method-c-getgrnam","(p1)","<p>Returns information about the group with specified <code>name</code>, as\nfound in /etc/group.\n<p>The information is returned …\n"],["gethostbyaddr","Socket","classes/Socket.html#method-c-gethostbyaddr","(p1, p2 = v2)","<p>Use Addrinfo#getnameinfo instead. This method is deprecated for the\nfollowing reasons:\n<p>Uncommon address …\n"],["gethostbyname","Socket","classes/Socket.html#method-c-gethostbyname","(p1)","<p>Use Addrinfo.getaddrinfo instead. This method is deprecated for the\nfollowing reasons:\n<p>The 3rd element …\n"],["gethostbyname","TCPSocket","classes/TCPSocket.html#method-c-gethostbyname","(p1)","<p>Use Addrinfo.getaddrinfo instead. This method is deprecated for the\nfollowing reasons:\n<p>The 3rd element …\n"],["gethostname","Socket","classes/Socket.html#method-c-gethostname","()","<p>Returns the hostname.\n\n<pre><code>p Socket.gethostname #=&gt; &quot;hal&quot;\n</code></pre>\n<p>Note that it is not guaranteed to be able to convert …\n"],["getifaddrs","Socket","classes/Socket.html#method-c-getifaddrs","()","<p>Returns an array of interface addresses. An element of the array is an\ninstance of Socket::Ifaddr.\n<p>This …\n"],["getlocal","Time","classes/Time.html#method-i-getlocal","(*args)","<p>Returns a new Time object representing <em>time</em> in local time (using\nthe local time zone in effect for this …\n"],["getlogin","Etc","classes/Etc.html#method-c-getlogin","()","<p>Returns the short user name of the currently logged in user. Unfortunately,\nit is often rather easy to …\n"],["getname","Resolv","classes/Resolv.html#method-i-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv","classes/Resolv.html#method-c-getname","(address)","<p>Looks up the hostname of <code>address</code>.\n"],["getname","Resolv::DNS","classes/Resolv/DNS.html#method-i-getname","(address)","<p>Gets the hostname for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or a …\n"],["getname","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getname","(address)","<p>Gets the hostname of <code>address</code> from the hosts file.\n"],["getnameinfo","Addrinfo","classes/Addrinfo.html#method-i-getnameinfo","(p1 = v1)","<p>returns nodename and service as a pair of strings. This converts struct\nsockaddr in addrinfo to textual …\n"],["getnameinfo","Socket","classes/Socket.html#method-c-getnameinfo","(p1, p2 = v2)","<p>Obtains name information for <em>sockaddr</em>.\n<p><em>sockaddr</em> should be one of follows.\n<p>packed sockaddr string such as …\n"],["getnames","Resolv","classes/Resolv.html#method-i-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv","classes/Resolv.html#method-c-getnames","(address)","<p>Looks up all hostnames for <code>address</code>.\n"],["getnames","Resolv::DNS","classes/Resolv/DNS.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the DNS resolver.\n<p><code>address</code> must be a Resolv::IPv4, Resolv::IPv6 or …\n"],["getnames","Resolv::Hosts","classes/Resolv/Hosts.html#method-i-getnames","(address)","<p>Gets all hostnames for <code>address</code> from the hosts file.\n"],["getopts","OptionParser","classes/OptionParser.html#method-c-getopts","(*args)","<p>See #getopts.\n"],["getopts","OptionParser","classes/OptionParser.html#method-i-getopts","(*args)","<p>Wrapper method for getopts.rb.\n\n<pre><code>params = ARGV.getopts(&quot;ab:&quot;, &quot;foo&quot;, &quot;bar:&quot;, &quot;zot:Z;zot option&quot;)\n# params[&quot;a&quot;] ...\n</code></pre>\n"],["getopts","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-getopts","(*args)","<p>Substitution of getopts is possible as follows. Also see\nOptionParser#getopts.\n\n<pre><code>def getopts(*args)\n  ($OPT ...</code></pre>\n"],["getpass","IO","classes/IO.html#method-i-getpass","(*args)","<p>Reads and returns a line without echo back. Prints <code>prompt</code>\nunless it is <code>nil</code>.\n<p>You must require &#39;io/console&#39; …\n"],["getpass","IO::generic_readable","classes/IO/generic_readable.html#method-i-getpass","(*args)","<p>See IO#getpass.\n"],["getpeereid","BasicSocket","classes/BasicSocket.html#method-i-getpeereid","()","<p>Returns the user and group on the peer of the UNIX socket. The result is a\ntwo element array which contains …\n"],["getpeername","BasicSocket","classes/BasicSocket.html#method-i-getpeername","()","<p>Returns the remote address of the socket as a sockaddr string.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 1440) {|serv| ...</code></pre>\n"],["getpgid","Process","classes/Process.html#method-c-getpgid","(p1)","<p>Returns the process group ID for the given process id. Not available on all\nplatforms.\n\n<pre><code>Process.getpgid(Process.ppid()) ...\n</code></pre>\n"],["getpgrp","Process","classes/Process.html#method-c-getpgrp","()","<p>Returns the process group ID for this process. Not available on all\nplatforms.\n\n<pre><code>Process.getpgid(0)   #=&gt; ...\n</code></pre>\n"],["getpriority","Process","classes/Process.html#method-c-getpriority","(p1, p2)","<p>Gets the scheduling priority for specified process, process group, or user.\n<em>kind</em> indicates the kind of …\n"],["getpty","PTY","classes/PTY.html#method-c-getpty","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command&#39;s …\n"],["getpwent","Etc","classes/Etc.html#method-c-getpwent","()","<p>Returns an entry from the /etc/passwd file.\n<p>The first time it is called it opens the file and returns …\n"],["getpwnam","Etc","classes/Etc.html#method-c-getpwnam","(p1)","<p>Returns the /etc/passwd information for the user with specified login\n<code>name</code>.\n<p>The information is returned …\n"],["getpwuid","Etc","classes/Etc.html#method-c-getpwuid","(p1 = v1)","<p>Returns the /etc/passwd information for the user with the given integer\n<code>uid</code>.\n<p>The information is returned …\n"],["getquota","Net::IMAP","classes/Net/IMAP.html#method-i-getquota","(mailbox)","<p>Sends the GETQUOTA command along with specified <code>mailbox</code>. If\nthis mailbox exists, then an array containing …\n"],["getquotaroot","Net::IMAP","classes/Net/IMAP.html#method-i-getquotaroot","(mailbox)","<p>Sends the GETQUOTAROOT command along with the specified\n<code>mailbox</code>. This command is generally available …\n"],["getresource","Resolv::DNS","classes/Resolv/DNS.html#method-i-getresource","(name, typeclass)","<p>Look up the <code>typeclass</code> DNS resource of <code>name</code>.\n<p><code>name</code> must be a Resolv::DNS::Name or a String.\n<p><code>typeclass</code> should …\n"],["getresources","Resolv::DNS","classes/Resolv/DNS.html#method-i-getresources","(name, typeclass)","<p>Looks up all <code>typeclass</code> DNS resources for <code>name</code>. \nSee #getresource for argument details.\n"],["getrlimit","Process","classes/Process.html#method-c-getrlimit","(p1)","<p>Gets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["gets","ARGF","classes/ARGF.html#method-i-gets","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["gets","CSV","classes/CSV.html#method-i-gets","()",""],["gets","CSV::Parser::UnoptimizedStringIO","classes/CSV/Parser/UnoptimizedStringIO.html#method-i-gets","(*args)",""],["gets","IO","classes/IO.html#method-i-gets","(*args)","<p>Reads the next “line&#39;&#39; from the I/O stream; lines are separated by\n<em>sep</em>. A separator of <code>nil</code> reads …\n"],["gets","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::InputMethod","classes/IRB/InputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::Locale","classes/IRB/Locale.html#method-i-gets","(*rs)",""],["gets","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-gets","()","<p>Reads the next line from this input method.\n<p>See IO#gets for more information.\n"],["gets","Kernel","classes/Kernel.html#method-i-gets","(*args)","<p>Returns (and assigns to <code>$_</code>) the next line from the list of\nfiles in <code>ARGV</code> (or <code>$*</code>), or from standard input …\n"],["gets","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-gets","(eol=$/, limit=nil)","<p>Reads the next “line” from the stream.  Lines are separated by\n<em>eol</em>.  If <em>limit</em> is provided the …\n"],["gets","StringIO","classes/StringIO.html#method-i-gets","(*args)","<p>See IO#gets.\n"],["gets","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-gets","()","<p>Reads the next expression from this printer.\n<p>See IO#gets for more information.\n"],["gets","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-gets","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["getservbyname","Socket","classes/Socket.html#method-c-getservbyname","(p1, p2 = v2)","<p>Obtains the port number for <em>service_name</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre><code>Socket.getservbyname(&quot;smtp&quot;) ...\n</code></pre>\n"],["getservbyport","Socket","classes/Socket.html#method-c-getservbyport","(p1, p2 = v2)","<p>Obtains the port number for <em>port</em>.\n<p>If <em>protocol_name</em> is not given, “tcp” is assumed.\n\n<pre><code>Socket.getservbyport(80) ...\n</code></pre>\n"],["getservername","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-getservername","()","<p>The server hostname\n"],["getsid","Process","classes/Process.html#method-c-getsid","(*args)","<p>Returns the session ID for the given process id. If not given, return\ncurrent process sid. Not available …\n"],["getsockname","BasicSocket","classes/BasicSocket.html#method-i-getsockname","()","<p>Returns the local address of the socket as a sockaddr string.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 15120) {|serv| ...</code></pre>\n"],["getsockopt","BasicSocket","classes/BasicSocket.html#method-i-getsockopt","(p1, p2)","<p>Gets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["getsockopt","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-getsockopt","(level, optname)",""],["getter","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-getter","(uri, tag_name)",""],["gettextfile","Net::FTP","classes/Net/FTP.html#method-i-gettextfile","(remotefile, localfile = File.basename(remotefile))","<p>Retrieves <code>remotefile</code> in ASCII (text) mode, storing the result\nin <code>localfile</code>. If <code>localfile</code> is nil, returns …\n"],["getuid","Process::Sys","classes/Process/Sys.html#method-c-getuid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["getutc","Time","classes/Time.html#method-i-getutc","()","<p>Returns a new Time object representing <em>time</em> in UTC.\n\n<pre><code>t = Time.local(2000,1,1,20,15,1)   #=&gt; 2000-01-01 ...\n</code></pre>\n"],["getwd","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-getwd","()",""],["getwd","Dir","classes/Dir.html#method-c-getwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre><code>Dir.chdir(&quot;/tmp&quot;)   #=&gt; ...\n</code></pre>\n"],["getwd","FileUtils","classes/FileUtils.html#method-c-getwd","()",""],["getwd","Pathname","classes/Pathname.html#method-c-getwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre><code>Pathname.getwd\n    #=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;\n</code></pre>\n"],["gid","File::Stat","classes/File/Stat.html#method-i-gid","()","<p>Returns the numeric group id of the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).gid   #=&gt; 500\n</code></pre>\n"],["gid","Process","classes/Process.html#method-c-gid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["gid=","Process","classes/Process.html#method-c-gid-3D","(p1)","<p>Sets the group ID for this process.\n"],["git","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-git","(uri, options = {}, &blk)",""],["git_commit_sha","Bundler::BuildMetadata","classes/Bundler/BuildMetadata.html#method-c-git_commit_sha","()","<p>The SHA for the git commit the bundler gem was built from.\n"],["git_present?","Bundler","classes/Bundler.html#method-c-git_present-3F","()",""],["git_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-git_push","(remote = \"\")",""],["git_source","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-git_source","(name, &block)",""],["git_version","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-git_version","()",""],["git_version","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-git_version","()",""],["github","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-github","(repo, options = {})",""],["github","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-github","","<p>Allow Github Flavored Markdown\n"],["glob","Dir","classes/Dir.html#method-c-glob","(p1, p2 = v2, p3 = {})","<p>Expands <code>pattern</code>, which is a pattern string or an Array of\npattern strings, and returns an array containing …\n"],["glob","Pathname","classes/Pathname.html#method-c-glob","(p1, p2 = v2)","<p>Returns or yields Pathname objects.\n\n<pre><code>Pathname.glob(&quot;lib/i*.rb&quot;)\n    #=&gt; [#&lt;Pathname:lib/ipaddr.rb&gt;, #&lt;Pathname:lib/irb.rb&gt;]\n</code></pre>\n"],["glob","Pathname","classes/Pathname.html#method-i-glob","(p1, p2 = v2)","<p>Returns or yields Pathname objects.\n\n<pre><code>Pathname(&quot;ruby-2.4.2&quot;).glob(&quot;R*.md&quot;)\n#=&gt; [#&lt;Pathname:ruby-2.4.2/README.md&gt;, ...\n</code></pre>\n"],["glob","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-glob","(pattern)","\n<pre><code>def sort(*filenames)\n  Sort.new(self, *filenames)\nend\n</code></pre>\n<p>Returns a Glob filter object, with the given <code>pattern</code> …\n"],["global_index_file","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-global_index_file","()","<p>Path where the global index file is stored\n"],["global_root","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-global_root","()","<p>The global directory root for all plugin related data\n"],["global_rubygems_source=","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-global_rubygems_source-3D","(uri)",""],["global_variables","Kernel","classes/Kernel.html#method-i-global_variables","()","<p>Returns an array of the names of global variables.\n\n<pre><code>global_variables.grep /std/   #=&gt; [:$stdin, :$stdout, ...\n</code></pre>\n"],["globs_for","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-globs_for","(path)","<p>Where to look for Bundler::Thor files.\n"],["gm","Time","classes/Time.html#method-c-gm","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["gmt?","Time","classes/Time.html#method-i-gmt-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre><code>t = Time.now                        #=&gt; 2007-11-19 ...\n</code></pre>\n"],["gmt_offset","Time","classes/Time.html#method-i-gmt_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["gmtime","Time","classes/Time.html#method-i-gmtime","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...\n</code></pre>\n"],["gmtoff","Time","classes/Time.html#method-i-gmtoff","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["goto","IO","classes/IO.html#method-i-goto","(p1, p2)",""],["grant_privilege","Process::GID","classes/Process/GID.html#method-c-grant_privilege","(p1)","<p>Set the effective group ID, and if possible, the saved group ID of the\nprocess to the given <em>group</em>. Returns …\n"],["grant_privilege","Process::UID","classes/Process/UID.html#method-c-grant_privilege","(p1)","<p>Set the effective user ID, and if possible, the saved user ID of the\nprocess to the given <em>user</em>. Returns …\n"],["grapheme_clusters","String","classes/String.html#method-i-grapheme_clusters","()","<p>Returns an array of grapheme clusters in <em>str</em>.  This is a shorthand\nfor <code>str.each_grapheme_cluster.to_a</code> …\n"],["great_job","RDoc::Stats","classes/RDoc/Stats.html#method-i-great_job","()","<p>A report that says you did a great job!\n"],["gregorian","Date","classes/Date.html#method-i-gregorian","()","<p>This method is equivalent to new_start(Date::GREGORIAN).\n"],["gregorian?","Date","classes/Date.html#method-i-gregorian-3F","()","<p>Returns true if the date is on or after the day of calendar reform.\n\n<pre><code>Date.new(1582,10,15).gregorian?   ...\n</code></pre>\n"],["gregorian_leap?","Date","classes/Date.html#method-c-gregorian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n\n<pre><code>Date.gregorian_leap?(1900) ...\n</code></pre>\n"],["grep","Enumerable","classes/Enumerable.html#method-i-grep","(p1)","<p>Returns an array of every element in <em>enum</em> for which <code>Pattern\n=== element</code>. If the optional <em>block</em> is supplied, …\n"],["grep","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-grep","(p1)",""],["grep_v","Enumerable","classes/Enumerable.html#method-i-grep_v","(p1)","<p>Inverted version of Enumerable#grep. Returns an array of every element in\n<em>enum</em> for which not <code>Pattern</code> …\n"],["grep_v","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-grep_v","(p1)",""],["group","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-group","(*args, &blk)",""],["group","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-group","(name = nil)","<p>Defines the group. This is used when thor list is invoked so you can\nspecify that only commands from …\n"],["group","Etc","classes/Etc.html#method-c-group","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/group file.\n<p>The …\n"],["group","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-group","()","<p>Returns the EC::Group that the key is associated with. Modifying the\nreturned group does not affect  …\n"],["group","PrettyPrint","classes/PrettyPrint.html#method-i-group","(indent=0, open_obj='', close_obj='', open_width=open_obj.length, close_width=close_obj.length)","<p>Groups line break hints added in the block. The line break hints are all to\nbe used or not.\n<p>If <code>indent</code> …\n"],["group","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-group","(indent=nil, open_obj='', close_obj='', open_width=nil, close_width=nil)","<p>Opens a block for grouping objects to be pretty printed.\n<p>Arguments:\n<p><code>indent</code> - noop argument. Present for …\n"],["group","Thread","classes/Thread.html#method-i-group","()","<p>Returns the ThreadGroup which contains the given thread, or returns\n<code>nil</code> if <code>thr</code> is not a member of any …\n"],["group=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-group-3D","(p1)","<p>Sets the EC::Group for the key. The group structure is internally copied so\nmodification to <em>group</em> after …\n"],["group_by","Enumerable","classes/Enumerable.html#method-i-group_by","()","<p>Groups the collection by result of the block.  Returns a hash where the\nkeys are the evaluated result …\n"],["group_sub","PrettyPrint","classes/PrettyPrint.html#method-i-group_sub","()","<p>Takes a block and queues a new group that is indented 1 level further.\n"],["groups","Bundler::Definition","classes/Bundler/Definition.html#method-i-groups","()",""],["groups","Process","classes/Process.html#method-c-groups","()","<p>Get an <code>Array</code> of the group IDs in the supplemental group access\nlist for this process.\n\n<pre><code>Process.groups  ...\n</code></pre>\n"],["groups=","Process","classes/Process.html#method-c-groups-3D","(p1)","<p>Set the supplemental group access list to the given <code>Array</code> of\ngroup IDs.\n\n<pre><code>Process.groups   #=&gt; [0, 1, 2, ...\n</code></pre>\n"],["grpowned?","File","classes/File.html#method-c-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","File::Stat","classes/File/Stat.html#method-i-grpowned-3F","()","<p>Returns true if the effective group id of the process is the same as the\ngroup id of <em>stat</em>. On Windows …\n"],["grpowned?","FileTest","classes/FileTest.html#method-i-grpowned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective group\nid of the calling process is the owner …\n"],["grpowned?","Pathname","classes/Pathname.html#method-i-grpowned-3F","()","<p>See FileTest.grpowned?.\n"],["gsub","Kernel","classes/Kernel.html#method-i-gsub","(*args)","<p>Equivalent to <code>$_.gsub...</code>, except that <code>$_</code> will be\nupdated if substitution occurs. Available only when …\n"],["gsub","String","classes/String.html#method-i-gsub","(*args)","<p>Returns a copy of <em>str</em> with <em>all</em> occurrences of\n<em>pattern</em> substituted for the second argument. The <em>pattern</em>\n…\n"],["gsub!","String","classes/String.html#method-i-gsub-21","(*args)","<p>Performs the substitutions of <code>String#gsub</code> in place, returning\n<em>str</em>, or <code>nil</code> if no substitutions were performed. …\n"],["gsub_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-gsub_file","(path, flag, *args, &block)","<p>Run a regular expression replacement on a file.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed …\n"],["guard_clean","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-guard_clean","()",""],["guard_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-guard_inspect_key","()","<p>Yields to a block and preserves the previous set of objects being printed.\n"],["guess","Kconv","classes/Kconv.html#method-c-guess","(str)","<p>Guess input encoding by NKF.guess\n"],["guess","NKF","classes/NKF.html#method-c-guess","(p1)","<p>Returns guessed encoding of <em>str</em> by nkf routine.\n"],["guess","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-guess","(arg)","<p>Guesses argument style from <code>arg</code>.  Returns corresponding\nOptionParser::Switch class (OptionalArgument, …\n"],["guid","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-guid","()","<p>Returns GUID.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs tobj.guid ...\n</code></pre>\n"],["guid","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-guid","()","<p>Returns guid string which specifies type library.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["gunzip","Gem","classes/Gem.html#method-c-gunzip","(data)","<p>Zlib::GzipReader wrapper that unzips <code>data</code>.\n"],["gunzip","Zlib","classes/Zlib.html#method-c-gunzip","(p1)","<p>Decode the given gzipped <code>string</code>.\n<p>This method is almost equivalent to the following code:\n\n<pre><code>def gunzip(string) ...</code></pre>\n"],["gzip","Gem","classes/Gem.html#method-c-gzip","(data)","<p>Zlib::GzipWriter wrapper that zips <code>data</code>.\n"],["gzip","Zlib","classes/Zlib.html#method-c-gzip","(p1)","<p>Gzip the given <code>string</code>. Valid values of level are\nZlib::NO_COMPRESSION, Zlib::BEST_SPEED, Zlib::BEST_COMPRESSION …\n"],["h","CGI::Util","classes/CGI/Util.html#method-i-h","(string)",""],["h","ERB::Util","classes/ERB/Util.html#method-c-h","(s)",""],["h","RSS::Utils","classes/RSS/Utils.html#method-i-h","(s)",""],["handle_argument_error?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_argument_error?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_exception","IRB::Irb","classes/IRB/Irb.html#method-i-handle_exception","(exc)",""],["handle_interrupt","Thread","classes/Thread.html#method-c-handle_interrupt","(p1)","<p>Changes asynchronous interrupt timing.\n<p><em>interrupt</em> means asynchronous event and corresponding procedure …\n"],["handle_no_command_error","Bundler::CLI","classes/Bundler/CLI.html#method-c-handle_no_command_error","(command, has_namespace = $thor_runner)",""],["handle_no_method_error?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["handle_no_method_error?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["handle_pipe","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-handle_pipe","()","<p>Turns RDoc from stdin into HTML\n"],["handler","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-handler","()","<p>The Fiddle::CompositeHandler instance\n<p>Will raise an error if no handlers are open.\n"],["handler","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-handler","()","<p>returns handler object.\n"],["handler=","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-handler-3D","(p1)","<p>sets event handler object. If handler object has onXXX method according to\nXXX event, then onXXX method …\n"],["handlers","Fiddle::CompositeHandler","classes/Fiddle/CompositeHandler.html#method-i-handlers","()","<p>Array of the currently loaded libraries.\n"],["has_attributes?","REXML::Element","classes/REXML/Element.html#method-i-has_attributes-3F","()","<p>Evaluates to <code>true</code> if this element has any attributes set,\nfalse otherwise.\n"],["has_elements?","REXML::Element","classes/REXML/Element.html#method-i-has_elements-3F","()","<p>Evaluates to <code>true</code> if this element has at least one child\nElement\n\n<pre><code>doc = Document.new &quot;&lt;a&gt;&lt;b/&gt;&lt;c&gt;Text&lt;/c&gt;&lt;/a&gt;&quot; ...\n</code></pre>\n"],["has_expires?","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-has_expires-3F","()","<p><code>true</code> if the TupleBag to see if it has any expired entries.\n"],["has_key?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-has_key-3F","(*args)","<p>Returns true if a given query string parameter exists.\n"],["has_key?","CSV::Row","classes/CSV/Row.html#method-i-has_key-3F","(header)","<p>Returns <code>true</code> if there is a field with the given\n<code>header</code>.\n"],["has_key?","DBM","classes/DBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["has_key?","ENV","classes/ENV.html#method-c-has_key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["has_key?","GDBM","classes/GDBM.html#method-i-has_key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["has_key?","Hash","classes/Hash.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["has_key?","SDBM","classes/SDBM.html#method-i-has_key-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["has_local_dependencies?","Bundler::Definition","classes/Bundler/Definition.html#method-i-has_local_dependencies-3F","()",""],["has_name?","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-has_name-3F","( name, namespace = '' )",""],["has_name?","REXML::Namespace","classes/REXML/Namespace.html#method-i-has_name-3F","( other, ns=nil )","<p>Compares names optionally WITH namespaces\n"],["has_next?","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-has_next-3F","()","<p>Returns true if there are more events.  Synonymous with !empty?\n"],["has_post_install_message?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-has_post_install_message-3F","()",""],["has_rubygems_remotes?","Bundler::Definition","classes/Bundler/Definition.html#method-i-has_rubygems_remotes-3F","()",""],["has_text?","REXML::Element","classes/REXML/Element.html#method-i-has_text-3F","()","<p>Evaluates to <code>true</code> if this element has at least one Text child\n"],["has_value?","DBM","classes/DBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["has_value?","ENV","classes/ENV.html#method-c-has_value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["has_value?","GDBM","classes/GDBM.html#method-i-has_value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["has_value?","Hash","classes/Hash.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...\n</code></pre>\n"],["has_value?","SDBM","classes/SDBM.html#method-i-has_value-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>value</code>.\n"],["has_value?","YAML::DBM","classes/YAML/DBM.html#method-i-has_value-3F","( val )","<p>Returns true if specified <code>value</code> is found in the database.\n"],["hash","Array","classes/Array.html#method-i-hash","()","<p>Compute a hash-code for this array.\n<p>Two arrays with the same content will have the same hash code (and …\n"],["hash","BigDecimal","classes/BigDecimal.html#method-i-hash","()","<p>Creates a hash for this BigDecimal.\n<p>Two BigDecimals with equal sign, fractional part and exponent have …\n"],["hash","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-hash","()",""],["hash","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-hash","()","<p>@return [Fixnum] a hash for the vertex based upon its {#name}\n"],["hash","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-hash","()","<p>When overriding `hash` please preserve the behaviour as mentioned in\ndocstring for `==` method, i.e. …\n"],["hash","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-hash","()",""],["hash","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-hash","()",""],["hash","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-hash","()",""],["hash","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-hash","()",""],["hash","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-hash","()","<p>Compute a hash-value for this arithmetic sequence. Two arithmetic sequences\nwith same begin, end, step, …\n"],["hash","Float","classes/Float.html#method-i-hash","()","<p>Returns a hash code for this float.\n<p>See also Object#hash.\n"],["hash","Hash","classes/Hash.html#method-i-hash","()","<p>Compute a hash-code for this hash. Two hashes with the same content will\nhave the same hash code (and …\n"],["hash","IPAddr","classes/IPAddr.html#method-i-hash","()","<p>Returns a hash value used by Hash, Set, and Array classes\n"],["hash","MatchData","classes/MatchData.html#method-i-hash","()","<p>Produce a hash based on the target string, regexp and matched positions of\nthis matchdata.\n<p>See also Object#hash …\n"],["hash","Method","classes/Method.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-hash","()","<p>Returns a hash code for this object.\n<p>See also Object#hash.\n"],["hash","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-hash","()","<p>The hash value returned is suitable for use as a certificate&#39;s filename\nin a CA path.\n"],["hash","OpenStruct","classes/OpenStruct.html#method-i-hash","()","<p>Computes a hash code for this OpenStruct. Two OpenStruct objects with the\nsame content will have the …\n"],["hash","Proc","classes/Proc.html#method-i-hash","()","<p>Returns a hash value corresponding to proc body.\n<p>See also Object#hash.\n"],["hash","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-hash","()","<p>An RDoc::TopLevel has the same hash as another with the same relative_name\n"],["hash","REXML::Attribute","classes/REXML/Attribute.html#method-i-hash","()","<p>Creates (and returns) a hash from both the name and value\n"],["hash","Range","classes/Range.html#method-i-hash","()","<p>Compute a hash-code for this range. Two ranges with equal begin and end\npoints (using <code>eql?</code>), and the …\n"],["hash","Regexp","classes/Regexp.html#method-i-hash","()","<p>Produce a hash based on the text and options of this regular expression.\n<p>See also Object#hash.\n"],["hash","String","classes/String.html#method-i-hash","()","<p>Returns a hash based on the string&#39;s length, content and encoding.\n<p>See also Object#hash.\n"],["hash","Struct","classes/Struct.html#method-i-hash","()","<p>Returns a hash value based on this struct&#39;s contents.\n<p>See also Object#hash.\n"],["hash","Time","classes/Time.html#method-i-hash","()","<p>Returns a hash code for this Time object.\n<p>See also Object#hash.\n"],["hash","URI::Generic","classes/URI/Generic.html#method-i-hash","()",""],["hash","UnboundMethod","classes/UnboundMethod.html#method-i-hash","()","<p>Returns a hash value corresponding to the method object.\n<p>See also Object#hash.\n"],["hash_algorithm","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-hash_algorithm","()","<p>Returns the ln (long name) of the hash algorithm used to generate the\nissuerNameHash and the issuerKeyHash …\n"],["hash_old","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-hash_old","()","<p>Returns an MD5 based hash used in OpenSSL 0.9.X.\n"],["have_author?","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-have_author-3F","()","<p>Returns where there are any authors present or there is a source with an\nauthor.\n"],["have_author?","RSS::Atom::Feed","classes/RSS/Atom/Feed.html#method-i-have_author-3F","()","<p>Returns true if there are any authors for the feed or any of the Entry\nchild elements have an author …\n"],["have_author?","RSS::Atom::Feed::Entry","classes/RSS/Atom/Feed/Entry.html#method-i-have_author-3F","(check_parent=true)","<p>Returns whether any of the following are true:\n<p>There are any authors in the feed\n<p>If the parent element …\n"],["have_author?","RSS::Atom::Feed::Entry::Source","classes/RSS/Atom/Feed/Entry/Source.html#method-i-have_author-3F","()","<p>Returns true if the Source element has an author.\n"],["have_children_elements","RSS::Element","classes/RSS/Element.html#method-c-have_children_elements","()",""],["have_const","MakeMakefile","classes/MakeMakefile.html#method-i-have_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.  You may\noptionally pass the <code>type</code> of <code>const</code> as  …\n"],["have_content?","RSS::Element","classes/RSS/Element.html#method-c-have_content-3F","()",""],["have_framework","MakeMakefile","classes/MakeMakefile.html#method-i-have_framework","(fw, &b)","<p>Returns whether or not the given <code>framework</code> can be found on\nyour system. If found, a macro is passed as …\n"],["have_func","MakeMakefile","classes/MakeMakefile.html#method-i-have_func","(func, headers = nil, opt = \"\", &b)","<p>Returns whether or not the function <code>func</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["have_header","MakeMakefile","classes/MakeMakefile.html#method-i-have_header","(header, preheaders = nil, opt = \"\", &b)","<p>Returns whether or not the given <code>header</code> file can be found on\nyour system. If found, a macro is passed …\n"],["have_library","MakeMakefile","classes/MakeMakefile.html#method-i-have_library","(lib, func = nil, headers = nil, opt = \"\", &b)","<p>Returns whether or not the given entry point <code>func</code> can be found\nwithin <code>lib</code>.  If <code>func</code> is <code>nil</code>, the\n<code>main()</code> …\n"],["have_macro","MakeMakefile","classes/MakeMakefile.html#method-i-have_macro","(macro, headers = nil, opt = \"\", &b)","<p>Returns whether or not <code>macro</code> is defined either in the common\nheader files or within any <code>headers</code> you provide. …\n"],["have_required_elements?","RSS::Element","classes/RSS/Element.html#method-i-have_required_elements-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Channel","classes/RSS/Maker/Atom/Feed/Channel.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Atom::Feed::Items::Item","classes/RSS/Maker/Atom/Feed/Items/Item.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageFaviconModel::ImageFaviconBase","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::ImageItemModel::ImageItemBase","classes/RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Image","classes/RSS/Maker/RSS10/Image.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::RSS10::Textinput","classes/RSS/Maker/RSS10/Textinput.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TaxonomyTopicModel::TaxonomyTopicsBase::TaxonomyTopicBase","classes/RSS/Maker/TaxonomyTopicModel/TaxonomyTopicsBase/TaxonomyTopicBase.html#method-i-have_required_values-3F","()",""],["have_required_values?","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-have_required_values-3F","()",""],["have_struct_member","MakeMakefile","classes/MakeMakefile.html#method-i-have_struct_member","(type, member, headers = nil, opt = \"\", &b)","<p>Returns whether or not the struct of type <code>type</code> contains\n<code>member</code>.  If it does not, or the struct type can&#39;t …\n"],["have_type","MakeMakefile","classes/MakeMakefile.html#method-i-have_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.  You\nmay optionally pass additional <code>headers</code> to …\n"],["have_var","MakeMakefile","classes/MakeMakefile.html#method-i-have_var","(var, headers = nil, opt = \"\", &b)","<p>Returns whether or not the variable <code>var</code> can be found in the\ncommon header files, or within any <code>headers</code> …\n"],["have_xml_content?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-have_xml_content-3F","()","<p>Returns true if the element has inline XML content.\n"],["have_xml_content?","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-have_xml_content-3F","()","<p>Returns true if type is “xhtml”.\n"],["have_xml_content?","RSS::Element","classes/RSS/Element.html#method-i-have_xml_content-3F","()",""],["head","Net::HTTP","classes/Net/HTTP.html#method-i-head","(path, initheader = nil)","<p>Gets only the header from <code>path</code> on the connected-to host.\n<code>header</code> is a Hash like { &#39;Accept&#39; =&gt; …\n"],["head2","Net::HTTP","classes/Net/HTTP.html#method-i-head2","(path, initheader = nil, &block)",""],["header","CGI","classes/CGI.html#method-i-header","(options='text/html')","<p>This method is an alias for #http_header, when HTML5 tag maker is inactive.\n<p>NOTE: use #http_header to …\n"],["header","Net::POPMail","classes/Net/POPMail.html#method-i-header","(dest = +'')","<p>Fetches the message header.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method raises a POPError if an …\n"],["header?","CSV::Row","classes/CSV/Row.html#method-i-header-3F","(header)",""],["header_convert","CSV","classes/CSV.html#method-i-header_convert","(name = nil, &converter)","<p>Identical to CSV#convert(), but for header rows.\n<p>Note that this method must be called before header rows …\n"],["header_converters","CSV","classes/CSV.html#method-i-header_converters","()","<p>Returns the current list of converters in effect for headers.  See CSV::new\nfor details.  Built-in converters …\n"],["header_row?","CSV","classes/CSV.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if the next row read will be a header row.\n"],["header_row?","CSV::Parser","classes/CSV/Parser.html#method-i-header_row-3F","()",""],["header_row?","CSV::Row","classes/CSV/Row.html#method-i-header_row-3F","()","<p>Returns <code>true</code> if this is a header row.\n"],["headers","CSV","classes/CSV.html#method-i-headers","()","<p>Returns <code>nil</code> if headers will not be used, <code>true</code> if\nthey will but have not yet been read, or the actual …\n"],["headers","CSV::Parser","classes/CSV/Parser.html#method-i-headers","()",""],["headers","CSV::Row","classes/CSV/Row.html#method-i-headers","()","<p>Returns the headers of this row.\n"],["headers","CSV::Table","classes/CSV/Table.html#method-i-headers","()","<p>Returns the headers for the first row of this table (assumed to match all\nother rows). The headers Array …\n"],["headers=","URI::MailTo","classes/URI/MailTo.html#method-i-headers-3D","(v)","<p>Setter for headers <code>v</code>.\n"],["helo","Net::SMTP","classes/Net/SMTP.html#method-i-helo","(domain)",""],["help","Bundler::CLI","classes/Bundler/CLI.html#method-i-help","(cli = nil)",""],["help","Bundler::Thor","classes/Bundler/Thor.html#method-c-help","(shell, subcommand = false)","<p>Prints help information for this class.\n<p>Parameters\n<p>shell&lt;Bundler::Thor::Shell&gt;\n"],["help","Bundler::Thor","classes/Bundler/Thor.html#method-i-help","(command = nil, subcommand = false)",""],["help","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-help","(shell)","<p>Prints help information.\n<p>Options\n<p>short &mdash; When true, shows only usage.\n"],["help","Net::FTP","classes/Net/FTP.html#method-i-help","(arg = nil)","<p>Issues the HELP command.\n"],["help","OptionParser","classes/OptionParser.html#method-i-help","()","<p>Returns option summary string.\n"],["helpcontext","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpcontext","()","<p>Returns help context.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;)\nmethod ...\n</code></pre>\n"],["helpcontext","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpcontext","()","<p>Returns helpcontext. If helpcontext is not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpfile","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpfile","()","<p>Returns help file. If help file is not found, then the method returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpfile","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpfile","()","<p>Returns helpfile path. If helpfile is not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["helpstring","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-helpstring","()","<p>Returns help string of OLE method. If the help string is not found, then\nthe method returns nil.\n\n<pre><code>tobj ...\n</code></pre>\n"],["helpstring","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-helpstring","()","<p>Returns help string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;IWebBrowser&#39;)\nputs tobj.helpstring ...\n</code></pre>\n"],["here?","DRb","classes/DRb.html#method-c-here-3F","(uri)","<p>Is <code>uri</code> the URI for the current local server?\n"],["here?","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-here-3F","(uri)","<p>Is <code>uri</code> the URI for this server?\n"],["hex","Random::Formatter","classes/Random/Formatter.html#method-i-hex","(n=nil)","<p>SecureRandom.hex generates a random hexadecimal string.\n<p>The argument <em>n</em> specifies the length, in bytes, …\n"],["hex","String","classes/String.html#method-i-hex","()","<p>Treats leading characters from <em>str</em> as a string of hexadecimal\ndigits (with an optional sign and an optional …\n"],["hexdigest","Digest::Class","classes/Digest/Class.html#method-c-hexdigest","(*args)","<p>Returns the hex-encoded hash value of a given <em>string</em>.  This is\nalmost equivalent to Digest.hexencode …\n"],["hexdigest","Digest::Instance","classes/Digest/Instance.html#method-i-hexdigest","(p1 = v1)","<p>If none is given, returns the resulting hash value of the digest in a\nhex-encoded form, keeping the digest&#39;s …\n"],["hexdigest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-hexdigest","(p1, p2, p3)","<p>Returns the authentication code as a hex-encoded string. The\n<em>digest</em> parameter specifies the digest algorithm …\n"],["hexdigest","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-hexdigest","()","<p>Returns the authentication code an instance represents as a hex-encoded\nstring.\n"],["hexdigest!","Digest::Instance","classes/Digest/Instance.html#method-i-hexdigest-21","()","<p>Returns the resulting hash value in a hex-encoded form and resets the\ndigest to the initial state.\n"],["hexencode","Digest","classes/Digest.html#method-c-hexencode","(p1)","<p>Generates a hex-encoded version of a given <em>string</em>.\n"],["hidden","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-hidden","(name = \"\", value = nil)","<p>Generate a Hidden Input element as a string.\n<p>The attributes of the element can be specified as two arguments, …\n"],["hidden?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::HiddenCommand","classes/Bundler/Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["hidden?","Bundler::Thor::HiddenCommand","classes/Bundler/Thor/HiddenCommand.html#method-i-hidden-3F","()",""],["hierarchical?","URI::Generic","classes/URI/Generic.html#method-i-hierarchical-3F","()","<p>Returns true if URI is hierarchical.\n<p>Description\n<p>URI has components listed in order of decreasing significance …\n"],["hierarchical?","URI::LDAP","classes/URI/LDAP.html#method-i-hierarchical-3F","()","<p>Checks if URI has a path. For URI::LDAP this will return\n<code>false</code>.\n"],["history_file","IRB::Context","classes/IRB/Context.html#method-i-history_file","()","<p>A copy of the default <code>IRB.conf[:HISTORY_FILE]</code>\n"],["history_file=","IRB::Context","classes/IRB/Context.html#method-i-history_file-3D","(hist)","<p>Set <code>IRB.conf[:HISTORY_FILE]</code> to the given <code>hist</code>.\n"],["hkdf","OpenSSL::KDF","classes/OpenSSL/KDF.html#method-c-hkdf","(p1, p2 = {})","<p>HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as specified\nin RFC 5869.\n<p>New in OpenSSL …\n"],["home","Bundler","classes/Bundler.html#method-c-home","()",""],["home","Dir","classes/Dir.html#method-c-home","(*args)","<p>Returns the home directory of the current user or the named user if given.\n"],["home_workspace","IRB::Context","classes/IRB/Context.html#method-i-home_workspace","()","<p>Inherited from <code>TOPLEVEL_BINDING</code>.\n"],["hook","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-hook","(event, *args, &arg_blk)","<p>Runs all the hooks that are registered for the passed event\n<p>It passes the passed arguments and block to …\n"],["hook","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-c-hook","(event, &block)",""],["hook_plugins","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-hook_plugins","(event)","<p>Returns the list of plugin names handling the passed event\n"],["host","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-host","()",""],["host","Gem","classes/Gem.html#method-c-host","()","<p>Get the default RubyGems API host. This is normally\n<code>https://rubygems.org</code>.\n"],["host","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-host","()","<p>The host this request is for\n"],["host=","Gem","classes/Gem.html#method-c-host-3D","(host)","<p>Set the default RubyGems API host.\n"],["host=","URI::Generic","classes/URI/Generic.html#method-i-host-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["hostname","URI::Generic","classes/URI/Generic.html#method-i-hostname","()","<p>Extract the host part of the URI and unwrap brackets for IPv6 addresses.\n<p>This method is the same as URI::Generic#host …\n"],["hostname=","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-hostname-3D","(p1)","<p>Sets the server hostname used for SNI. This needs to be set before\nSSLSocket#connect.\n"],["hostname=","URI::Generic","classes/URI/Generic.html#method-i-hostname-3D","(v)","<p>Sets the host part of the URI as the argument with brackets for IPv6\naddresses.\n<p>This method is the same …\n"],["hour","DateTime","classes/DateTime.html#method-i-hour","()","<p>Returns the hour (0-23).\n\n<pre><code>DateTime.new(2001,2,3,4,5,6).hour         #=&gt; 4\n</code></pre>\n"],["hour","Time","classes/Time.html#method-i-hour","()","<p>Returns the hour of the day (0..23) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:26:20 -0600\nt.hour     ...\n</code></pre>\n"],["hour=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-hour-3D","(hour)",""],["hour=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-hour-3D","(hour)",""],["href=","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-href-3D","(value)",""],["hstack","Matrix","classes/Matrix.html#method-c-hstack","(x, *matrices)","<p>Create a matrix by stacking matrices horizontally\n\n<pre><code>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...\n</code></pre>\n"],["html","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-html","(attributes = {})","<p>Generate a top-level HTML element as a string.\n<p>The attributes of the element are specified as a hash. …\n"],["html","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-html","","<p>Allow HTML\n"],["html_escape","ERB::Util","classes/ERB/Util.html#method-c-html_escape","(s)","<p>A utility method for escaping HTML tag characters in <em>s</em>.\n\n<pre><code>require &quot;erb&quot;\ninclude ERB::Util\n\nputs html_escape(&quot;is ...</code></pre>\n"],["html_escape","RSS::Utils","classes/RSS/Utils.html#method-i-html_escape","(s)","<p>Takes a string <code>s</code> with some HTML in it, and escapes\n&#39;&amp;&#39;, &#39;“&#39;, &#39;&lt;&#39; …\n"],["html_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-html_name","()","<p>HTML id-friendly version of <code>#new_name</code>.\n"],["html_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-html_name","()","<p>HTML id-friendly method/attribute name\n"],["hton","IPAddr","classes/IPAddr.html#method-i-hton","()","<p>Returns a network byte ordered string form of the IP address.\n"],["http_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-http_default_port","()","<p>The default port to use for HTTP requests; defaults to 80.\n"],["http_header","CGI","classes/CGI.html#method-i-http_header","(options='text/html')","<p>Create an HTTP header block as a string.\n<p>Includes the empty line that ends the header block.\n<p><code>content_type_string</code> … &mdash; "],["http_proxy","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-http_proxy","()",""],["http_url","RDoc::Context","classes/RDoc/Context.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_url","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-http_url","(prefix)","<p>URL for this with a <code>prefix</code>\n"],["http_version","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-http_version","(uri)","<p>Returns the HTTP protocol version for <code>uri</code>\n"],["httpdate","Date","classes/Date.html#method-i-httpdate","()","<p>This method is equivalent to strftime(&#39;%a, %d %b %Y %T GMT&#39;). See\nalso RFC 2616.\n"],["httpdate","Date","classes/Date.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some RFC\n2616 format.\n\n<pre><code>Date.httpdate(&#39;Sat, ...</code></pre>\n"],["httpdate","DateTime","classes/DateTime.html#method-c-httpdate","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\nRFC 2616 format.\n\n<pre><code>DateTime.httpdate(&#39;Sat, ...</code></pre>\n"],["httpdate","Time","classes/Time.html#method-c-httpdate","(date)","<p>Parses <code>date</code> as an HTTP-date defined by RFC 2616 and converts\nit to a Time object.\n<p>ArgumentError is raised …\n"],["httpdate","Time","classes/Time.html#method-i-httpdate","()","<p>Returns a string which represents the time as RFC 1123 date of HTTP-date\ndefined by RFC 2616:\n\n<pre><code>day-of-week, ...</code></pre>\n"],["httponly=","CGI::Cookie","classes/CGI/Cookie.html#method-i-httponly-3D","(val)","<p>Set whether the Cookie is a httponly cookie or not.\n<p><code>val</code> must be a boolean.\n"],["https_default_port","Net::HTTP","classes/Net/HTTP.html#method-c-https_default_port","()","<p>The default port to use for HTTPS requests; defaults to 443.\n"],["hypot","Math","classes/Math.html#method-c-hypot","(p1, p2)","<p>Returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with\nsides <code>x</code> and <code>y</code>.\n\n<pre><code>Math.hypot(3, ...</code></pre>\n"],["i","Numeric","classes/Numeric.html#method-i-i","()","<p>Returns the corresponding imaginary number. Not available for complex\nnumbers.\n\n<pre><code>-42.i  #=&gt; (0-42i)\n2.0.i ...\n</code></pre>\n"],["icon","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-icon","()",""],["icon=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-icon-3D","(url)",""],["iconv","JSON","classes/JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby&#39;s <em>String.encode</em>\n"],["id","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-id","()","<p>Gets the id for this engine.\n\n<pre><code>OpenSSL::Engine.load\nOpenSSL::Engine.engines #=&gt; [#&lt;OpenSSL::Engine#&gt;, ...] ...\n</code></pre>\n"],["id","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-id","()","<p>Returns the Session ID.\n"],["id","REXML::Functions","classes/REXML/Functions.html#method-c-id","( object )","<p>Since REXML is non-validating, this method is not implemented as it\nrequires a DTD\n"],["id2name","Symbol","classes/Symbol.html#method-i-id2name","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre><code>:fred.id2name   #=&gt; &quot;fred&quot;\n:ginger.to_s    #=&gt; &quot;ginger&quot;\n</code></pre>\n"],["idempotent?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-idempotent-3F","(req)","<p>Is <code>req</code> idempotent according to RFC 2616?\n"],["ident","Syslog","classes/Syslog.html#method-c-ident","()","<p>Returns the identity string used in the last call to open()\n"],["identical?","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-identical-3F","(a, b)",""],["identical?","File","classes/File.html#method-c-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre><code>open(&quot;a&quot;, &quot;w&quot;) {} ...\n</code></pre>\n"],["identical?","FileTest","classes/FileTest.html#method-i-identical-3F","(p1, p2)","<p>Returns <code>true</code> if the named files are identical.\n<p><em>file_1</em> and <em>file_2</em> can be an IO object.\n\n<pre><code>open(&quot;a&quot;, &quot;w&quot;) {} ...\n</code></pre>\n"],["identical?","FileUtils","classes/FileUtils.html#method-c-identical-3F","(a, b)",""],["identifier","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-identifier","()",""],["identity","Matrix","classes/Matrix.html#method-c-identity","(n)","<p>Creates an <code>n</code> by <code>n</code> identity matrix.\n\n<pre><code>Matrix.identity(2)\n  =&gt; 1 0\n     0 1</code></pre>\n"],["idle","Net::IMAP","classes/Net/IMAP.html#method-i-idle","(timeout = nil, &response_handler)","<p>Sends an IDLE command that waits for notifications of new or expunged\nmessages.  Yields responses from …\n"],["idle_done","Net::IMAP","classes/Net/IMAP.html#method-i-idle_done","()","<p>Leaves IDLE.\n"],["if_modified_since","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-if_modified_since","(req, res, path = nil)","<p>Handles the If-Modified-Since HTTP header on <code>req</code> for\n<code>path</code>.  If the file has not been modified a Not  …\n"],["ifindex","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-ifindex","()","<p>Returns the interface index of <em>ifaddr</em>.\n"],["iflush","IO","classes/IO.html#method-i-iflush","()","<p>Flushes input buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["ignorable_dependency?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-ignorable_dependency-3F","(dep)",""],["ignore","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignore","()","<p>Use this to ignore a CodeObject and all its children until found again\n(#record_location is called). …\n"],["ignore_config?","Bundler::Settings","classes/Bundler/Settings.html#method-i-ignore_config-3F","()",""],["ignore_unknown_element","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-ignore_unknown_element","()",""],["ignore_unknown_element=","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-ignore_unknown_element-3D","(new_value)",""],["ignore_whitespace_nodes","REXML::Element","classes/REXML/Element.html#method-i-ignore_whitespace_nodes","()",""],["ignored?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-ignored-3F","()","<p>Has this class been ignored?\n<p>See also #ignore\n"],["imag","Complex","classes/Complex.html#method-i-imag","()","<p>Returns the imaginary part.\n\n<pre><code>Complex(7).imaginary      #=&gt; 0\nComplex(9, -4).imaginary  #=&gt; -4\n</code></pre>\n"],["imag","Numeric","classes/Numeric.html#method-i-imag","()","<p>Returns zero.\n"],["image","RSS::Rss","classes/RSS/Rss.html#method-i-image","()",""],["image_button","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-image_button","(src = \"\", name = nil, alt = nil)","<p>Generate an Image Button Input element as a string.\n<p><code>src</code> is the URL of the image to use for the button. …\n"],["image_size=","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-image_size-3D","(new_value)",""],["imaginary","Complex","classes/Complex.html#method-i-imaginary","()","<p>Returns the imaginary part.\n\n<pre><code>Complex(7).imaginary      #=&gt; 0\nComplex(9, -4).imaginary  #=&gt; -4\n</code></pre>\n"],["imaginary","Numeric","classes/Numeric.html#method-i-imaginary","()","<p>Returns zero.\n"],["img","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-img","(src = \"\", alt = \"\", width = nil, height = nil)","<p>Generate an Image element as a string.\n<p><code>src</code> is the URL of the image.  <code>alt</code> is the\nalternative text for the …\n"],["implemented_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-implemented_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["import_function","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-import_function","(name, ctype, argtype, call_type = nil)","<p>Returns a new Fiddle::Function instance at the memory address of the given\n<code>name</code> function.\n<p>Raises a DLError …\n"],["import_symbol","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-import_symbol","(name)","<p>Returns a new Fiddle::Pointer instance at the memory address of the given\n<code>name</code> symbol.\n<p>Raises a DLError …\n"],["import_value","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-import_value","(ty, addr)","<p>Returns a new instance of the C struct with the value <code>ty</code> at\nthe <code>addr</code> address.\n"],["in_bundle?","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-in_bundle-3F","()",""],["in_root","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-in_root","()","<p>Goes to the root and execute the given block.\n"],["inactivate","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-inactivate","(pc)",""],["inc","OptionParser","classes/OptionParser.html#method-c-inc","(arg, default = nil)","<p>Returns an incremented value of <code>default</code> according to\n<code>arg</code>.\n"],["inc","OptionParser","classes/OptionParser.html#method-i-inc","(*args)",""],["include","Module","classes/Module.html#method-i-include","(*args)","<p>Invokes <code>Module.append_features</code> on each parameter in reverse\norder.\n"],["include?","Array","classes/Array.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given <code>object</code> is present in\n<code>self</code> (that is, if any element <code>==</code>\n<code>object</code>), otherwise returns …\n"],["include?","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-include-3F","(other)","<p>Note: Do not override if you don&#39;t know what you are doing.\n"],["include?","Bundler::Source","classes/Bundler/Source.html#method-i-include-3F","(other)",""],["include?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-include-3F","(*args)",""],["include?","CSV::Row","classes/CSV/Row.html#method-i-include-3F","(header)",""],["include?","DBM","classes/DBM.html#method-i-include-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["include?","ENV","classes/ENV.html#method-c-include-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["include?","Enumerable","classes/Enumerable.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre><code>IO.constants.include? :SEEK_SET ...\n</code></pre>\n"],["include?","GDBM","classes/GDBM.html#method-i-include-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["include?","Hash","classes/Hash.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["include?","IPAddr","classes/IPAddr.html#method-i-include-3F","(other)","<p>Returns true if the given ipaddr is in the range.\n<p>e.g.:\n\n<pre><code>require &#39;ipaddr&#39;\nnet1 = IPAddr.new(&quot;192.168.2.0/24&quot;) ...\n</code></pre>\n"],["include?","Module","classes/Module.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>module</em> is included in <em>mod</em> or\none of <em>mod</em>&#39;s ancestors.\n\n<pre><code>module A\nend\nclass B\n  include ...</code></pre>\n"],["include?","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["include?","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-include-3F","(key)","<p>Whether an attlist declaration includes the given attribute definition\n\n<pre><code>if attlist_decl.include? &quot;xmlns:foobar&quot;</code></pre>\n"],["include?","Range","classes/Range.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  If begin and end are numeric, comparison …\n"],["include?","SDBM","classes/SDBM.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["include?","Set","classes/Set.html#method-i-include-3F","(o)","<p>Returns true if the set contains the given object.\n<p>Note that <code>include?</code> and <code>member?</code> do not test member\nequality …\n"],["include?","String","classes/String.html#method-i-include-3F","(p1)","<p>Returns <code>true</code> if <em>str</em> contains the given string or\ncharacter.\n\n<pre><code>&quot;hello&quot;.include? &quot;lo&quot;   #=&gt; true\n&quot;hello&quot;.include? ...\n</code></pre>\n"],["included","Bundler::Thor::RakeCompat","classes/Bundler/Thor/RakeCompat.html#method-c-included","(base)",""],["included","Exception2MessageMapper","classes/Exception2MessageMapper.html#method-c-included","(mod)",""],["included","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-c-included","(p1)","<p>Extends <em>modul</em> with the String::Extend module.\n"],["included","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-c-included","(base)",""],["included","Syslog::Constants","classes/Syslog/Constants.html#method-c-included","(p1)",""],["included","Syslog::Macros","classes/Syslog/Macros.html#method-c-included","(p1)",""],["included_modules","Module","classes/Module.html#method-i-included_modules","()","<p>Returns the list of modules included in <em>mod</em>.\n\n<pre><code>module Mixin\nend\n\nmodule Outer\n  include Mixin\nend\n\nMixin.included_modules ...\n</code></pre>\n"],["incompatible_argument_styles","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-incompatible_argument_styles","(arg, t)",""],["incompatible_argument_styles","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-c-incompatible_argument_styles","(*)",""],["incomplete_input?","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-incomplete_input-3F","()","<p>Returns true if the invalid byte sequence error is caused by premature end\nof string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;EUC-JP&quot;, ...</code></pre>\n"],["indent","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-indent","(count = 1)","<p>Sets the output padding while executing a block and resets it.\n"],["indent","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent","()","<p>Returns the string that is used to indent levels in the JSON text.\n"],["indent","REXML::Node","classes/REXML/Node.html#method-i-indent","(to, ind)",""],["indent=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-indent-3D","(p1)","<p>Sets the string that is used to indent levels in the JSON text.\n"],["indent_text","REXML::Text","classes/REXML/Text.html#method-i-indent_text","(string, level=1, style=\"\\t\", indentfirstline=true)",""],["indentation","Psych::Emitter","classes/Psych/Emitter.html#method-i-indentation","()","<p>Get the indentation level.\n"],["indentation=","Psych::Emitter","classes/Psych/Emitter.html#method-i-indentation-3D","(p1)","<p>Set the indentation level to <code>level</code>.  The level must be less\nthan 10 and greater than 1.\n"],["index","Array","classes/Array.html#method-i-index","(*args)","<p>Returns the <em>index</em> of the first object in <code>ary</code> such\nthat the object is <code>==</code> to <code>obj</code>.\n<p>If a block is given instead …\n"],["index","Bundler::Definition","classes/Bundler/Definition.html#method-i-index","()",""],["index","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-index","()","<p>The index object used to store the details about the plugin\n"],["index","CSV::Row","classes/CSV/Row.html#method-i-index","(header, minimum_index = 0)","<p>This method will return the index of a field with the provided\n<code>header</code>. The <code>offset</code> can be used to locate …\n"],["index","ENV","classes/ENV.html#method-c-index","(p1)","<p>Deprecated method that is equivalent to ENV.key\n"],["index","REXML::Elements","classes/REXML/Elements.html#method-i-index","(element)","<p>Returns the index of the supplied child (starting at 1), or -1 if the\nelement is not a child\n<p>element &mdash; "],["index","REXML::Parent","classes/REXML/Parent.html#method-i-index","( child )","<p>Fetches the index of a given child @param child the child to get the index\nof @return the index of the …\n"],["index","String","classes/String.html#method-i-index","(p1, p2 = v2)","<p>Returns the index of the first occurrence of the given <em>substring</em>\nor pattern (<em>regexp</em>) in <em>str</em>. Returns …\n"],["index","YAML::DBM","classes/YAML/DBM.html#method-i-index","( keystr )","<p>Deprecated, used YAML::DBM#key instead.\n<p>Note: YAML::DBM#index makes warning from internal of ::DBM#index …\n"],["index_file","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-index_file","()","<p>Path of default index file\n"],["index_for","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-index_for","(dependency)",""],["index_in_parent","REXML::Node","classes/REXML/Node.html#method-i-index_in_parent","()","<p>Returns the position that <code>self</code> holds in its parent&#39;s\narray, indexed from 1.\n"],["indicate_progress","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-indicate_progress","()","<p>Called roughly every {#progress_rate}, this method should convey progress\nto the user.\n<p>@return [void] …\n"],["indicate_progress","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-indicate_progress","()",""],["infinite?","BigDecimal","classes/BigDecimal.html#method-i-infinite-3F","()","<p>Returns nil, -1, or +1 depending on whether the value is finite, -Infinity,\nor +Infinity.\n"],["infinite?","Complex","classes/Complex.html#method-i-infinite-3F","()","<p>Returns <code>1</code> if <code>cmp</code>&#39;s real or imaginary part is\nan infinite number, otherwise returns <code>nil</code>.\n\n<pre><code>For example: ...</code></pre>\n"],["infinite?","Float","classes/Float.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.\n\n<pre><code>(0.0).infinite? ...\n</code></pre>\n"],["infinite?","Numeric","classes/Numeric.html#method-i-infinite-3F","()","<p>Returns <code>nil</code>, -1, or 1 depending on whether the value is\nfinite, <code>-Infinity</code>, or <code>+Infinity</code>.\n"],["infinity?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-infinity-3F","()",""],["inflate","Gem","classes/Gem.html#method-c-inflate","(data)","<p>A Zlib::Inflate#inflate wrapper\n"],["inflate","Zlib","classes/Zlib.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["inflate","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-inflate","(p1)","<p>Inputs <code>deflate_string</code> into the inflate stream and returns the\noutput from the stream.  Calling this method, …\n"],["inflate","Zlib::Inflate","classes/Zlib/Inflate.html#method-c-inflate","(p1)","<p>Decompresses <code>string</code>. Raises a Zlib::NeedDict exception if a\npreset dictionary is needed for decompression. …\n"],["info","Bundler::CLI","classes/Bundler/CLI.html#method-i-info","(gem_name)",""],["info","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-info","(msg, newline = nil)",""],["info","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-info","(message, newline = nil)",""],["info","Logger","classes/Logger.html#method-i-info","(progname = nil, &block)","<p>Log an <code>INFO</code> message.\n<p><code>message</code> &mdash; The message to log; does not need to be a String.\n<p><code>progname</code> &mdash; In the block form, …\n"],["info","Syslog::Logger","classes/Syslog/Logger.html#method-i-info","","<p>Logs a <code>message</code> at the info (syslog info) log level, or logs\nthe message returned from the block.\n"],["info","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-info","(msg)","<p>Shortcut for logging an INFO message\n"],["info?","Logger","classes/Logger.html#method-i-info-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>INFO</code> messages.\n"],["info?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-info-3F","()","<p>Will the logger output INFO messages?\n"],["info?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-info-3F","(code)","<p>Is <code>code</code> an informational status?\n"],["info_path","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-info_path","(name)",""],["inherited","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-inherited","(klass)","<p>Everytime someone inherits from a Bundler::Thor class, register the klass\nand file into baseclass.\n"],["inherited","RSS::Element","classes/RSS/Element.html#method-c-inherited","(klass)",""],["inherited","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-inherited","(subclass)",""],["inherited_array_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_array_reader","(constant_name)",""],["inherited_base","RSS::Element","classes/RSS/Element.html#method-c-inherited_base","()",""],["inherited_base","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-inherited_base","()",""],["inherited_hash_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_hash_reader","(constant_name)",""],["inherited_reader","RSS::Utils::InheritedReader","classes/RSS/Utils/InheritedReader.html#method-i-inherited_reader","(constant_name)",""],["init","Bundler::CLI","classes/Bundler/CLI.html#method-i-init","()",""],["init","IRB::Inspector","classes/IRB/Inspector.html#method-i-init","()","<p>Proc to call when the inspector is activated, good for requiring dependent\nlibraries.\n"],["initgroups","Process","classes/Process.html#method-c-initgroups","(p1, p2)","<p>Initializes the supplemental group access list by reading the system group\ndatabase and using all groups …\n"],["initialize","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-initialize","()",""],["initialize_clone","Set","classes/Set.html#method-i-initialize_clone","(orig)","<p>Clone internal hash.\n"],["initialize_copy","Array","classes/Array.html#method-i-initialize_copy","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre><code>a ...\n</code></pre>\n"],["initialize_copy","Bundler::Index","classes/Bundler/Index.html#method-i-initialize_copy","(o)",""],["initialize_copy","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-initialize_copy","(other)","<p>Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices}\nare properly copied. @param …\n"],["initialize_copy","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-initialize_copy","(other)",""],["initialize_copy","CSV::Row","classes/CSV/Row.html#method-i-initialize_copy","(other)",""],["initialize_copy","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-initialize_copy","(p1)","<p>Initializes this object from orig if it can be duplicated/cloned and\nreturns it.\n"],["initialize_copy","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-initialize_copy","(p1)",""],["initialize_copy","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-initialize_copy","(p1)",""],["initialize_copy","String","classes/String.html#method-i-initialize_copy","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre><code>s = &quot;hello&quot;  ...\n</code></pre>\n"],["initialize_copy","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-initialize_copy","(p1)","<p>Duplicates the deflate stream.\n"],["initialize_dup","Set","classes/Set.html#method-i-initialize_dup","(orig)","<p>Dup internal hash.\n"],["initialize_http_header","Net::HTTPHeader","classes/Net/HTTPHeader.html#method-i-initialize_http_header","(initheader)",""],["initialize_methods_etc","RDoc::Context","classes/RDoc/Context.html#method-i-initialize_methods_etc","()","<p>Sets the defaults for methods and so-forth\n"],["initialize_tracer","IRB","classes/IRB.html#method-c-initialize_tracer","()","<p>initialize tracing function\n"],["inject","Bundler::CLI","classes/Bundler/CLI.html#method-i-inject","(name, version)",""],["inject","Bundler::Injector","classes/Bundler/Injector.html#method-c-inject","(new_deps, options = {})",""],["inject","Bundler::Injector","classes/Bundler/Injector.html#method-i-inject","(gemfile_path, lockfile_path)","<p>@param [Pathname] gemfile_path The Gemfile in which to inject the new\ndependency. @param [Pathname]  …\n"],["inject","Enumerable","classes/Enumerable.html#method-i-inject","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["inject","REXML::Elements","classes/REXML/Elements.html#method-i-inject","( xpath=nil, initial=nil )",""],["inject_into_class","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-inject_into_class","(path, klass, *args, &block)","<p>Injects text right after the class definition. Since it depends on\ninsert_into_file, it&#39;s reversible. …\n"],["inject_into_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-inject_into_file","(destination, *args, &block)",""],["inject_into_module","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-inject_into_module","(path, module_name, *args, &block)","<p>Injects text right after the module definition. Since it depends on\ninsert_into_file, it&#39;s reversible. …\n"],["inline_html?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_html-3F","()","<p>Returns true if the element contains inline content that has a HTML media\ntype.\n"],["inline_html?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_html-3F","()",""],["inline_other?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other-3F","()","<p>Returns true if the element contains inline content that has a MIME media\ntype.\n"],["inline_other?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other-3F","()",""],["inline_other_base64?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_base64-3F","()","<p>Returns true if the element contains inline content encoded in base64.\n"],["inline_other_base64?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_base64-3F","()",""],["inline_other_text?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_text-3F","()","<p>Returns true if the element contains inline content that has a text media\ntype.\n"],["inline_other_text?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_text-3F","()",""],["inline_other_xml?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_other_xml-3F","()","<p>Returns true if the element contains inline content that has a XML media\ntype.\n"],["inline_other_xml?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_other_xml-3F","()",""],["inline_text?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_text-3F","()","<p>Returns true if the element contains inline content that has a text or HTML\nmedia type, or no media type …\n"],["inline_text?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_text-3F","()",""],["inline_xhtml?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-inline_xhtml-3F","()","<p>Returns true if the element contains inline content that has a XHTML media\ntype.\n"],["inline_xhtml?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-inline_xhtml-3F","()",""],["ino","File::Stat","classes/File/Stat.html#method-i-ino","()","<p>Returns the inode number for <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).ino   #=&gt; 1083669\n</code></pre>\n"],["inplace_mode","ARGF","classes/ARGF.html#method-i-inplace_mode","()","<p>Returns the file extension appended to the names of modified files under\nin-place edit mode. This value …\n"],["inplace_mode=","ARGF","classes/ARGF.html#method-i-inplace_mode-3D","(p1)","<p>Sets the filename extension for in-place editing mode to the given String.\nEach file being edited has …\n"],["input=","Readline","classes/Readline.html#method-c-input-3D","(p1)","<p>Specifies a File object <code>input</code> that is input stream for\nReadline.readline method.\n"],["input=","Shell::AppendFile","classes/Shell/AppendFile.html#method-i-input-3D","(filter)",""],["input=","Shell::AppendIO","classes/Shell/AppendIO.html#method-i-input-3D","(filter)",""],["input=","Shell::Filter","classes/Shell/Filter.html#method-i-input-3D","(filter)",""],["input=","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-input-3D","(inp)",""],["input?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-input-3F","()","<p>Returns true if the parameter is input.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["insert","Array","classes/Array.html#method-i-insert","(*args)","<p>Inserts the given values before the element with the given\n<code>index</code>.\n<p>Negative indices count backwards from …\n"],["insert","IRB::JobManager","classes/IRB/JobManager.html#method-i-insert","(irb)","<p>Add the given <code>irb</code> session to the jobs Array.\n"],["insert","String","classes/String.html#method-i-insert","(p1, p2)","<p>Inserts <em>other_str</em> before the character at the given\n<em>index</em>, modifying <em>str</em>. Negative indices count from …\n"],["insert_after","REXML::Parent","classes/REXML/Parent.html#method-i-insert_after","( child1, child2 )","<p>Inserts an child after another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_before","REXML::Parent","classes/REXML/Parent.html#method-i-insert_before","( child1, child2 )","<p>Inserts an child before another child @param child1 this is either an xpath\nor an Element.  If an Element …\n"],["insert_into_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-insert_into_file","(destination, *args, &block)","<p>Injects the given content into a file. Different from gsub_file, this\nmethod is reversible.\n<p>Parameters …\n"],["insert_output","Encoding::Converter","classes/Encoding/Converter.html#method-i-insert_output","(p1)","<p>Inserts string into the encoding converter. The string will be converted to\nthe destination encoding …\n"],["insert_text","Readline","classes/Readline.html#method-c-insert_text","(p1)","<p>Insert text into the line at the current cursor position.\n<p>See GNU Readline&#39;s rl_insert_text function. …\n"],["inside","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-inside","(dir = \"\", config = {}, &block)","<p>Do something in the root or on a provided subfolder. If a relative path is\ngiven it&#39;s referenced …\n"],["inspect","ARGF","classes/ARGF.html#method-i-inspect","()",""],["inspect","Addrinfo","classes/Addrinfo.html#method-i-inspect","()","<p>returns a string which shows addrinfo in human-readable form.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).inspect #=&gt; ...\n</code></pre>\n"],["inspect","Array","classes/Array.html#method-i-inspect","()","<p>Creates a string representation of <code>self</code>.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ].to_s     #=&gt; &quot;[\\&quot;a\\&quot;, \\&quot;b\\&quot;, \\&quot;c\\&quot;]&quot;\n</code></pre>\n"],["inspect","BigDecimal","classes/BigDecimal.html#method-i-inspect","()","<p>Returns a string representation of self.\n\n<pre><code>BigDecimal(&quot;1234.5678&quot;).inspect\n  #=&gt; &quot;0.12345678e4&quot;\n</code></pre>\n"],["inspect","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-inspect","()",""],["inspect","Bundler::Index","classes/Bundler/Index.html#method-i-inspect","()",""],["inspect","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-inspect","()","<p>@return [String] a string suitable for debugging\n"],["inspect","Bundler::Source","classes/Bundler/Source.html#method-i-inspect","()",""],["inspect","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-inspect","()",""],["inspect","CGI::Cookie","classes/CGI/Cookie.html#method-i-inspect","()","<p>A summary of cookie string.\n"],["inspect","CSV","classes/CSV.html#method-i-inspect","()","<p>Returns a simplified description of the key CSV attributes in an ASCII\ncompatible String.\n"],["inspect","CSV::Row","classes/CSV/Row.html#method-i-inspect","()","<p>A summary of fields, by header, in an ASCII compatible String.\n"],["inspect","CSV::Table","classes/CSV/Table.html#method-i-inspect","()","<p>Shows the mode and size of this table in a US-ASCII String.\n"],["inspect","Complex","classes/Complex.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre><code>Complex(2).inspect                       #=&gt; &quot;(2+0i)&quot;\nComplex(&#39;-8/6&#39;).inspect ...\n</code></pre>\n"],["inspect","Date","classes/Date.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre><code>Date.new(2001,2,3).inspect\n          #=&gt; &quot;#&lt;Date: 2001-02-03 ...\n</code></pre>\n"],["inspect","Digest::Instance","classes/Digest/Instance.html#method-i-inspect","()","<p>Creates a printable version of the digest object.\n"],["inspect","Dir","classes/Dir.html#method-i-inspect","()","<p>Return a string describing this Dir object.\n"],["inspect","ENV","classes/ENV.html#method-c-inspect","()","<p>Returns the contents of the environment as a String.\n"],["inspect","Encoding","classes/Encoding.html#method-i-inspect","()","<p>Returns a string which represents the encoding for programmers.\n\n<pre><code>Encoding::UTF_8.inspect       #=&gt; &quot;#&lt;Encoding:UTF-8&gt;&quot; ...\n</code></pre>\n"],["inspect","Encoding::Converter","classes/Encoding/Converter.html#method-i-inspect","()","<p>Returns a printable version of <em>ec</em>\n\n<pre><code>ec = Encoding::Converter.new(&quot;iso-8859-1&quot;, &quot;utf-8&quot;)\nputs ec.inspect ...\n</code></pre>\n"],["inspect","Enumerator","classes/Enumerator.html#method-i-inspect","()","<p>Creates a printable version of <em>e</em>.\n"],["inspect","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-inspect","()","<p>Convert this arithmetic sequence to a printable form.\n"],["inspect","Enumerator::Chain","classes/Enumerator/Chain.html#method-i-inspect","()","<p>Returns a printable version of the enumerator chain.\n"],["inspect","Exception","classes/Exception.html#method-i-inspect","()","<p>Return this exception&#39;s class name and message.\n"],["inspect","FalseClass","classes/FalseClass.html#method-i-inspect","()",""],["inspect","Fiber","classes/Fiber.html#method-i-inspect","()",""],["inspect","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-inspect","()","<p>Returns a string formatted with an easily readable representation of the\ninternal state of the pointer. …\n"],["inspect","File::Stat","classes/File/Stat.html#method-i-inspect","()","<p>Produce a nicely formatted description of <em>stat</em>.\n\n<pre><code>File.stat(&quot;/etc/passwd&quot;).inspect\n   #=&gt; &quot;#&lt;File::Stat ...\n</code></pre>\n"],["inspect","Float","classes/Float.html#method-i-inspect","()",""],["inspect","Hash","classes/Hash.html#method-i-inspect","()","<p>Return the contents of this hash as a string.\n\n<pre><code>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; =&gt; 300  } ...\n</code></pre>\n"],["inspect","IO","classes/IO.html#method-i-inspect","()","<p>Return a string describing this IO object.\n"],["inspect","IPAddr","classes/IPAddr.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the ipaddr.\n(“#&lt;IPAddr: family:address/mask&gt;”) …\n"],["inspect","IPSocket","classes/IPSocket.html#method-i-inspect","()","<p>Return a string describing this IPSocket object.\n"],["inspect","IRB::Irb","classes/IRB/Irb.html#method-i-inspect","()","<p>Outputs the local variables to this current session, including\n#signal_status and #context, using IRB::Locale …\n"],["inspect","IRB::JobManager","classes/IRB/JobManager.html#method-i-inspect","()","<p>Outputs a list of jobs, see the irb command <code>irb_jobs</code>, or\n<code>jobs</code>.\n"],["inspect","Integer","classes/Integer.html#method-i-inspect","(*args)",""],["inspect","MatchData","classes/MatchData.html#method-i-inspect","()","<p>Returns a printable version of <em>mtch</em>.\n\n<pre><code>puts /.$/.match(&quot;foo&quot;).inspect\n#=&gt; #&lt;MatchData &quot;o&quot;&gt;\n\nputs /(.)(.)(.)/.match(&quot;foo&quot;).inspect ...\n</code></pre>\n"],["inspect","Method","classes/Method.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: ...\n</code></pre>\n"],["inspect","Module","classes/Module.html#method-i-inspect","()",""],["inspect","Net::HTTP","classes/Net/HTTP.html#method-i-inspect","()",""],["inspect","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-inspect","()",""],["inspect","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-inspect","()",""],["inspect","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-inspect","()",""],["inspect","Net::POP3","classes/Net/POP3.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::POPMail","classes/Net/POPMail.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","Net::SMTP","classes/Net/SMTP.html#method-i-inspect","()","<p>Provide human-readable stringification of class state.\n"],["inspect","NilClass","classes/NilClass.html#method-i-inspect","()","<p>Always returns the string “nil”.\n"],["inspect","Object","classes/Object.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of\n<em>obj</em>. The default <code>inspect</code> shows the object&#39;s …\n"],["inspect","ObjectSpace::InternalObjectWrapper","classes/ObjectSpace/InternalObjectWrapper.html#method-i-inspect","()","<p>See Object#inspect.\n"],["inspect","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-inspect","()",""],["inspect","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-inspect","()","<p>String representation of this configuration object, including the class\nname and its sections.\n"],["inspect","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-inspect","()","<p>Pretty prints this engine.\n"],["inspect","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-inspect","()",""],["inspect","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-inspect","()",""],["inspect","OpenStruct","classes/OpenStruct.html#method-i-inspect","()","<p>Returns a string containing a detailed summary of the keys and values.\n"],["inspect","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-inspect","()",""],["inspect","Proc","classes/Proc.html#method-i-inspect","()",""],["inspect","Process::Status","classes/Process/Status.html#method-i-inspect","()","<p>Override the inspection method.\n\n<pre><code>system(&quot;false&quot;)\np $?.inspect #=&gt; &quot;#&lt;Process::Status: pid 12861 exit 1&gt;&quot;\n</code></pre>\n"],["inspect","REXML::Attribute","classes/REXML/Attribute.html#method-i-inspect","()",""],["inspect","REXML::Element","classes/REXML/Element.html#method-i-inspect","()",""],["inspect","REXML::Instruction","classes/REXML/Instruction.html#method-i-inspect","()",""],["inspect","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-inspect","()",""],["inspect","REXML::Text","classes/REXML/Text.html#method-i-inspect","()",""],["inspect","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-inspect","()",""],["inspect","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-inspect","()",""],["inspect","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-inspect","()",""],["inspect","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-i-inspect","()",""],["inspect","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-inspect","()",""],["inspect","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-inspect","()",""],["inspect","Range","classes/Range.html#method-i-inspect","()","<p>Convert this range object to a printable form (using <code>inspect</code>\nto convert the begin and end objects).\n"],["inspect","Rational","classes/Rational.html#method-i-inspect","()","<p>Returns the value as a string for inspection.\n\n<pre><code>Rational(2).inspect      #=&gt; &quot;(2/1)&quot;\nRational(-8, 6).inspect ...\n</code></pre>\n"],["inspect","Regexp","classes/Regexp.html#method-i-inspect","()","<p>Produce a nicely formatted string-version of <em>rxp</em>. Perhaps\nsurprisingly, <code>#inspect</code> actually produces the …\n"],["inspect","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-inspect","()","<p>Returns debugging information about this node as a string.\n"],["inspect","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-inspect","()","<p>Returns a human-readable string representation of this instruction\nsequence, including the #label and …\n"],["inspect","Set","classes/Set.html#method-i-inspect","()","<p>Returns a string containing a human-readable representation of the set\n(“#&lt;Set: {element1, element2, …\n"],["inspect","Shell","classes/Shell.html#method-i-inspect","()",""],["inspect","Shell::Filter","classes/Shell/Filter.html#method-i-inspect","()",""],["inspect","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-inspect","()","<p>returns a string which shows ancillarydata in human-readable form.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, ...</code></pre>\n"],["inspect","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-inspect","()","<p>Returns a string to show contents of <em>ifaddr</em>.\n"],["inspect","Socket::Option","classes/Socket/Option.html#method-i-inspect","()","<p>Returns a string which shows sockopt in human-readable form.\n\n<pre><code>p Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, ...</code></pre>\n"],["inspect","String","classes/String.html#method-i-inspect","()","<p>Returns a printable version of <em>str</em>, surrounded by quote marks,\nwith special characters escaped.\n\n<pre><code>str = ...</code></pre>\n"],["inspect","StringScanner","classes/StringScanner.html#method-i-inspect","()","<p>Returns a string that represents the StringScanner object, showing:\n<p>the current position\n<p>the size of the …\n"],["inspect","Struct","classes/Struct.html#method-i-inspect","()","<p>Returns a description of this struct as a string.\n"],["inspect","Symbol","classes/Symbol.html#method-i-inspect","()","<p>Returns the representation of <em>sym</em> as a symbol literal.\n\n<pre><code>:fred.inspect   #=&gt; &quot;:fred&quot;\n</code></pre>\n"],["inspect","Syslog","classes/Syslog.html#method-c-inspect","()","<p>Returns an inspect() string summarizing the object state.\n"],["inspect","Thread","classes/Thread.html#method-i-inspect","()",""],["inspect","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-inspect","()","<p>Returns the same as calling <code>inspect</code> on the string\nrepresentation of #to_str\n"],["inspect","Time","classes/Time.html#method-i-inspect","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n#strftime with the appropriate format string. …\n"],["inspect","TracePoint","classes/TracePoint.html#method-i-inspect","()","<p>Return a string containing a human-readable TracePoint status.\n"],["inspect","TrueClass","classes/TrueClass.html#method-i-inspect","()",""],["inspect","URI::Generic","classes/URI/Generic.html#method-i-inspect","()",""],["inspect","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-inspect","()",""],["inspect","UnboundMethod","classes/UnboundMethod.html#method-i-inspect","()","<p>Returns a human-readable description of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: ...\n</code></pre>\n"],["inspect","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-inspect","()","<p>Returns the method name with class name.\n"],["inspect","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-inspect","()","<p>Returns the parameter name with class name. If the parameter has default\nvalue, then returns name=value …\n"],["inspect","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-inspect","()","<p>Returns the OLE struct name and member name and the value of member\n<p>If COM server in VB.NET ComServer …\n"],["inspect","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-inspect","()","<p>Returns the type name with class name.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nie.ole_type.inspect ...\n</code></pre>\n"],["inspect","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-inspect","()","<p>Returns the type library name with class name.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["inspect","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-inspect","()","<p>Returns the OLE variable name and the value with class name.\n"],["inspect","Zlib::GzipFile::Error","classes/Zlib/GzipFile/Error.html#method-i-inspect","()","<p>Constructs a String of the GzipFile Error\n"],["inspect?","IRB::Context","classes/IRB/Context.html#method-i-inspect-3F","()","<p>Whether #inspect_mode is set or not, see #inspect_mode= for more detail.\n"],["inspect_mode=","IRB::Context","classes/IRB/Context.html#method-i-inspect_mode-3D","(opt)","<p>Specifies the inspect mode with <code>opt</code>:\n<p><code>true</code> &mdash; display <code>inspect</code>\n<p><code>false</code> &mdash; display <code>to_s</code>\n"],["inspect_raw","Date","classes/Date.html#method-i-inspect_raw","()",""],["inspect_sockaddr","Addrinfo","classes/Addrinfo.html#method-i-inspect_sockaddr","()","<p>returns a string which shows the sockaddr in <em>addrinfo</em> with\nhuman-readable form.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, ...</code></pre>\n"],["inspect_value","IRB::Inspector","classes/IRB/Inspector.html#method-i-inspect_value","(v)","<p>Proc to call when the input is evaluated and output in irb.\n"],["install","Bundler::CLI","classes/Bundler/CLI.html#method-i-install","()",""],["install","Bundler::CLI::Plugin","classes/Bundler/CLI/Plugin.html#method-i-install","(*plugins)",""],["install","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>If <code>src</code> is not same as <code>dest</code>, copies it and changes\nthe permission mode to <code>mode</code>.  If <code>dest</code> is a\ndirectory, …\n"],["install","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-install","()",""],["install","Bundler::Installer","classes/Bundler/Installer.html#method-c-install","(root, definition, options = {})","<p>Begins the installation process for Bundler. For more information see the\n#run method on this class. …\n"],["install","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-install","(names, options)","<p>Installs a new plugin by the given name\n<p>@param [Array&lt;String&gt;] names the name of plugin to be installed …\n"],["install","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-install","(spec, opts)","<p>Install the gem specified by the spec at appropriate path. `install_path`\nprovides a sufficient default, …\n"],["install","Bundler::Plugin::Installer","classes/Bundler/Plugin/Installer.html#method-i-install","(names, options)",""],["install","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-install","(spec, options = {})",""],["install","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-install","(spec, _opts = {})",""],["install","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-install","(spec, options = {})",""],["install","FileUtils","classes/FileUtils.html#method-c-install","(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)","<p>If <code>src</code> is not same as <code>dest</code>, copies it and changes\nthe permission mode to <code>mode</code>.  If <code>dest</code> is a\ndirectory, …\n"],["install","Gem","classes/Gem.html#method-c-install","(name, version = Gem::Requirement.default, *options)","<p>Top level install helper method. Allows you to install gems interactively:\n\n<pre><code>% irb\n&gt;&gt; Gem.install &quot;minitest&quot; ...</code></pre>\n"],["install_acl","DRb","classes/DRb.html#method-c-install_acl","(acl)","<p>Set the default ACL to <code>acl</code>.\n<p>See DRb::DRbServer.default_acl.\n"],["install_alias_method","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-install_alias_method","(to, from, override = NO_OVERRIDE)","<p>Installs alias methods for the default irb commands, see\n::install_extend_commands.\n"],["install_class_name","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-install_class_name","(uri, tag_name, class_name)","<p>record class_name for the supplied uri and tag_name\n"],["install_date_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_date_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["install_definition","Bundler::Plugin::Installer","classes/Bundler/Plugin/Installer.html#method-i-install_definition","(definition)","<p>Installs the plugin from Definition object created by limited parsing of\nGemfile searching for plugins …\n"],["install_dublin_core","RSS::Maker::DublinCoreModel","classes/RSS/Maker/DublinCoreModel.html#method-c-install_dublin_core","(klass)",""],["install_extend_commands","IRB::ContextExtender","classes/IRB/ContextExtender.html#method-c-install_extend_commands","()","<p>Installs the default context extensions as irb commands:\n<p>Context#eval_history= &mdash; <code>irb/ext/history.rb</code>\n<p>Context#use_tracer= … &mdash; "],["install_extend_commands","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-c-install_extend_commands","()","<p>Installs the default irb commands:\n<p><code>irb_current_working_workspace</code> &mdash; Context#main\n<p><code>irb_change_workspace</code> &mdash; Context#change_workspace …\n"],["install_from_spec","Bundler::GemInstaller","classes/Bundler/GemInstaller.html#method-i-install_from_spec","()",""],["install_gem","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-install_gem","(built_gem_path = nil, local = false)",""],["install_get_attribute","RSS::Element","classes/RSS/Element.html#method-c-install_get_attribute","(name, uri, required=true, type=nil, disp_name=nil, element_name=nil)",""],["install_get_text_element","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-install_get_text_element","(uri, name, accessor_base)",""],["install_have_attribute_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_attribute_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_child_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_child_element","(tag_name, uri, occurs, name=nil, type=nil)",""],["install_have_children_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_have_children_element","(tag_name, uri, occurs, name=nil, plural_name=nil)",""],["install_id_conv","DRb","classes/DRb.html#method-c-install_id_conv","(idconv)","<p>Set the default id conversion object.\n<p>This is expected to be an instance such as DRb::DRbIdConv that responds …\n"],["install_if","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-install_if","(*args)",""],["install_image_favicon","RSS::Maker::ImageFaviconModel","classes/RSS/Maker/ImageFaviconModel.html#method-c-install_image_favicon","(klass)",""],["install_image_item","RSS::Maker::ImageItemModel","classes/RSS/Maker/ImageItemModel.html#method-c-install_image_item","(klass)",""],["install_list","ACL","classes/ACL.html#method-i-install_list","(list)","<p>Adds <code>list</code> of ACL entries to this ACL.\n"],["install_model","RSS::Element","classes/RSS/Element.html#method-c-install_model","(tag, uri, occurs=nil, getter=nil, plural=false)",""],["install_must_call_validator","RSS::Element","classes/RSS/Element.html#method-c-install_must_call_validator","(prefix, uri)",""],["install_ns","RSS::Element","classes/RSS/Element.html#method-c-install_ns","(prefix, uri)",""],["install_path","Bundler","classes/Bundler.html#method-c-install_path","()",""],["install_path","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-install_path","()","<p>A default installation path to install a single gem. If the source servers\nmultiple gems, it&#39;s not …\n"],["install_path","Bundler::Plugin::Installer::Git","classes/Bundler/Plugin/Installer/Git.html#method-i-install_path","()",""],["install_path","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-install_path","()","<p>This is the path which is going to contain a specific checkout of the git\nrepository. When using local …\n"],["install_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-install_siginfo_handler","()","<p>Installs a siginfo handler that prints the current filename.\n"],["install_system_commands","Shell","classes/Shell.html#method-c-install_system_commands","(pre = \"sys_\")","<p>Convenience method for Shell::CommandProcessor.install_system_commands.\nDefines instance methods representing …\n"],["install_tasks","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-c-install_tasks","(opts = {})",""],["install_taxo_topic","RSS::Maker::TaxonomyTopicModel","classes/RSS/Maker/TaxonomyTopicModel.html#method-c-install_taxo_topic","(klass)",""],["install_taxo_topics","RSS::Maker::TaxonomyTopicsModel","classes/RSS/Maker/TaxonomyTopicsModel.html#method-c-install_taxo_topics","(klass)",""],["install_text_element","RSS::BaseModel","classes/RSS/BaseModel.html#method-i-install_text_element","(tag_name, uri, occurs, name=nil, type=nil, disp_name=nil)",""],["installation_attempted?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-installation_attempted-3F","()",""],["installed?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-installed-3F","()",""],["installed?","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-installed-3F","(plugin)","<p>currently only intended for specs\n<p>@return [String, nil] installed path\n"],["installed?","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-installed-3F","()","<p>A helper method, not necessary if not used internally.\n"],["installed?","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-installed-3F","(name)",""],["installed_docs","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-installed_docs","()","<p>Returns an Array of installed documentation.\n<p>Each entry contains the documentation name (gem name, &#39;Ruby …\n"],["instance","CSV","classes/CSV.html#method-c-instance","(data = $stdout, **options)","<p>This method will return a CSV instance, just like CSV::new(), but the\ninstance will be cached and returned …\n"],["instance","Syslog","classes/Syslog.html#method-c-instance","()","<p>Returns self, for backward compatibility.\n"],["instance_attributes","RDoc::Context","classes/RDoc/Context.html#method-i-instance_attributes","()","<p>Instance attributes\n"],["instance_delegate","Forwardable","classes/Forwardable.html#method-i-instance_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["instance_eval","BasicObject","classes/BasicObject.html#method-i-instance_eval","(*args)","<p>Evaluates a string containing Ruby source code, or the given block, within\nthe context of the receiver …\n"],["instance_exec","BasicObject","classes/BasicObject.html#method-i-instance_exec","(*args)","<p>Executes the given block within the context of the receiver (<em>obj</em>).\nIn order to set the context, the variable …\n"],["instance_method","Module","classes/Module.html#method-i-instance_method","(p1)","<p>Returns an <code>UnboundMethod</code> representing the given instance\nmethod in <em>mod</em>.\n\n<pre><code>class Interpreter\n  def do_a() ...</code></pre>\n"],["instance_method_list","RDoc::Context","classes/RDoc/Context.html#method-i-instance_method_list","()","<p>Instance methods\n"],["instance_methods","Module","classes/Module.html#method-i-instance_methods","(*args)","<p>Returns an array containing the names of the public and protected instance\nmethods in the receiver.  …\n"],["instance_methods","RDoc::Store","classes/RDoc/Store.html#method-i-instance_methods","()","<p>Instance methods cache accessor.  Maps a class to an Array of its instance\nmethods (not full name).\n"],["instance_of?","Object","classes/Object.html#method-i-instance_of-3F","(p1)","<p>Returns <code>true</code> if <em>obj</em> is an instance of the given\nclass. See also <code>Object#kind_of?</code>.\n\n<pre><code>class A;     end\nclass ...</code></pre>\n"],["instance_variable_defined?","Object","classes/Object.html#method-i-instance_variable_defined-3F","(p1)","<p>Returns <code>true</code> if the given instance variable is defined in\n<em>obj</em>. String arguments are converted to symbols. …\n"],["instance_variable_get","Object","classes/Object.html#method-i-instance_variable_get","(p1)","<p>Returns the value of the given instance variable, or nil if the instance\nvariable is not set. The <code>@</code> part …\n"],["instance_variable_set","Object","classes/Object.html#method-i-instance_variable_set","(p1, p2)","<p>Sets the instance variable named by <em>symbol</em> to the given object,\nthereby frustrating the efforts of the …\n"],["instance_variables","Object","classes/Object.html#method-i-instance_variables","()","<p>Returns an array of instance variable names for the receiver. Note that\nsimply defining an accessor does …\n"],["instruction","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-instruction","(name, instruction)","<p>Called when an instruction is encountered.  EG: &lt;?xsl\nsheet=&#39;foo&#39;?&gt; @p name the instruction …\n"],["instruction","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-instruction","(name, content)",""],["instruction?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-instruction-3F","()","<p>Content: [ String text ]\n"],["instruction_sequence","TracePoint","classes/TracePoint.html#method-i-instruction_sequence","()","<p>Compiled instruction sequence represented by a RubyVM::InstructionSequence\ninstance on the <code>:script_compiled</code> …\n"],["instructions","REXML::Element","classes/REXML/Element.html#method-i-instructions","()","<p>Get an array of all Instruction children. IMMUTABLE\n"],["int","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-int","()","<p>Returns the data in <em>ancillarydata</em> as an int.\n<p>The size and endian is dependent on the host.\n\n<pre><code>ancdata = Socket::AncillaryData.int(:UNIX, ...</code></pre>\n"],["int","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::AncillaryData object which contains a int as data.\n<p>The size and endian is dependent …\n"],["int","Socket::Option","classes/Socket/Option.html#method-c-int","(p1, p2, p3, p4)","<p>Creates a new Socket::Option object which contains an int as data.\n<p>The size and endian is dependent on …\n"],["int","Socket::Option","classes/Socket/Option.html#method-i-int","()","<p>Returns the data in <em>sockopt</em> as an int.\n<p>The size and endian is dependent on the platform.\n\n<pre><code>sockopt = Socket::Option.int(:INET, ...</code></pre>\n"],["int_from_prime_division","Prime","classes/Prime.html#method-i-int_from_prime_division","(pd)","<p>Re-composes a prime factorization and returns the product.\n<p>Parameters\n<p><code>pd</code> &mdash; Array of pairs of integers. The …\n"],["integer?","Integer","classes/Integer.html#method-i-integer-3F","()","<p>Since <code>int</code> is already an Integer, this always returns\n<code>true</code>.\n"],["integer?","Numeric","classes/Numeric.html#method-i-integer-3F","()","<p>Returns <code>true</code> if <code>num</code> is an Integer.\n\n<pre><code>1.0.integer?   #=&gt; false\n1.integer?     #=&gt; true\n</code></pre>\n"],["intern","String","classes/String.html#method-i-intern","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["intern","Symbol","classes/Symbol.html#method-i-intern","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["internal_class_of","ObjectSpace","classes/ObjectSpace.html#method-c-internal_class_of","(p1)","<p>MRI specific feature &mdash; Return internal class of obj.\n\n<p>obj can be an instance of InternalObjectWrapper.\n<p>Note …\n"],["internal_encoding","ARGF","classes/ARGF.html#method-i-internal_encoding","()","<p>Returns the internal encoding for strings read from <code>ARGF</code> as an\n<code>Encoding</code> object.\n<p>If <code>ARGF.set_encoding</code> has …\n"],["internal_encoding","IO","classes/IO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns <code>nil</code>.\n"],["internal_encoding","StringIO","classes/StringIO.html#method-i-internal_encoding","()","<p>Returns the Encoding of the internal string if conversion is specified. \nOtherwise returns nil.\n"],["internal_object_id","ObjectSpace::InternalObjectWrapper","classes/ObjectSpace/InternalObjectWrapper.html#method-i-internal_object_id","()","<p>Returns the Object#object_id of the internal object.\n"],["internal_super_of","ObjectSpace","classes/ObjectSpace.html#method-c-internal_super_of","(p1)","<p>MRI specific feature &mdash; Return internal super class of cls (Class or Module).\n\n<p>obj can be an instance of  …\n"],["interrupt","DEBUGGER__","classes/DEBUGGER__.html#method-c-interrupt","()",""],["interrupt","WEBrick","classes/WEBrick.html#method-i-interrupt","(thread, id, exception)","<p>Interrupts the timeout handler <code>id</code> and raises\n<code>exception</code>\n"],["intersect?","Set","classes/Set.html#method-i-intersect-3F","(set)","<p>Returns true if the set and the given set have at least one element in\ncommon.\n\n<pre><code>Set[1, 2, 3].intersect? ...\n</code></pre>\n"],["intersection","Set","classes/Set.html#method-i-intersection","(enum)",""],["invert","DBM","classes/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert","ENV","classes/ENV.html#method-c-invert","()","<p>Returns a new hash created by using environment variable names as values\nand values as names.\n"],["invert","GDBM","classes/GDBM.html#method-i-invert","()","<p>Returns a hash created by using <em>gdbm</em>&#39;s values as keys, and the\nkeys as values.\n"],["invert","Hash","classes/Hash.html#method-i-invert","()","<p>Returns a new hash created by using <em>hsh</em>&#39;s values as keys, and\nthe keys as values. If a key with the …\n"],["invert","SDBM","classes/SDBM.html#method-i-invert","()","<p>Returns a Hash in which the key-value pairs have been inverted.\n<p>Example:\n\n<pre><code>require &#39;sdbm&#39;\n\nSDBM.open &#39;my_database&#39; ...\n</code></pre>\n"],["invert","YAML::DBM","classes/YAML/DBM.html#method-i-invert","()","<p>Returns a Hash (not a DBM database) created by using each value in the\ndatabase as a key, with the corresponding …\n"],["invert!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-invert-21","()",""],["invkind","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-invkind","()","<p>Returns the method invoke kind.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...\n</code></pre>\n"],["invoke","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-invoke","(*names, &block)","<p>Invoke the given namespace or class given. It adds an instance method that\nwill invoke the klass and …\n"],["invoke","Bundler::Thor::Invocation","classes/Bundler/Thor/Invocation.html#method-i-invoke","(name = nil, *args)","<p>Receives a name and invokes it. The name can be a string (either “command”\nor “namespace:command”), …\n"],["invoke","WIN32OLE","classes/WIN32OLE.html#method-i-invoke","(*args)","<p>Runs OLE method. The first argument specifies the method name of OLE\nAutomation object. The others specify …\n"],["invoke_from_option","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-invoke_from_option","(*names, &block)","<p>Invoke a thor class based on the value supplied by the user to the given\noption named “name”. …\n"],["invoke_kind","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-invoke_kind","()","<p>Returns the method kind string. The string is “UNKNOWN” or “PROPERTY” or\n“PROPERTY” …\n"],["invoke_with_padding","Bundler::Thor::Invocation","classes/Bundler/Thor/Invocation.html#method-i-invoke_with_padding","(*args)","<p>Invokes using shell padding.\n"],["ioctl","CSV","classes/CSV.html#method-i-ioctl","(*args)",""],["ioctl","IO","classes/IO.html#method-i-ioctl","(p1, p2 = v2)","<p>Provides a mechanism for issuing low-level commands to control or query I/O\ndevices. Arguments and results …\n"],["ioflush","IO","classes/IO.html#method-i-ioflush","()","<p>Flushes input and output buffers in kernel.\n<p>You must require &#39;io/console&#39; to use this method. …\n"],["ip","Addrinfo","classes/Addrinfo.html#method-c-ip","(p1)","<p>returns an addrinfo object for IP address.\n<p>The port, socktype, protocol of the result is filled by zero. …\n"],["ip6_arpa","IPAddr","classes/IPAddr.html#method-i-ip6_arpa","()","<p>Returns a string for DNS reverse lookup compatible with RFC3172.\n"],["ip6_int","IPAddr","classes/IPAddr.html#method-i-ip6_int","()","<p>Returns a string for DNS reverse lookup compatible with RFC1886.\n"],["ip?","Addrinfo","classes/Addrinfo.html#method-i-ip-3F","()","<p>returns true if addrinfo is internet (IPv4/IPv6) address. returns false\notherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["ip_address","Addrinfo","classes/Addrinfo.html#method-i-ip_address","()","<p>Returns the IP address as a string.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_address    #=&gt; &quot;127.0.0.1&quot;\nAddrinfo.tcp(&quot;::1&quot;, ...</code></pre>\n"],["ip_address_list","Socket","classes/Socket.html#method-c-ip_address_list","()","<p>Returns local IP addresses as an array.\n<p>The array contains Addrinfo objects.\n\n<pre><code>pp Socket.ip_address_list ...\n</code></pre>\n"],["ip_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ip_pktinfo","()","<p>Extracts addr, ifindex and spec_dst from IP_PKTINFO ancillary data.\n<p>IP_PKTINFO is not standard.\n<p>Supported …\n"],["ip_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-ip_pktinfo","(p1, p2, p3 = v3)","<p>Returns new ancillary data for IP_PKTINFO.\n<p>If spec_dst is not given, addr is used.\n<p>IP_PKTINFO is not standard. …\n"],["ip_port","Addrinfo","classes/Addrinfo.html#method-i-ip_port","()","<p>Returns the port number as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_port    #=&gt; 80\nAddrinfo.tcp(&quot;::1&quot;, ...</code></pre>\n"],["ip_unpack","Addrinfo","classes/Addrinfo.html#method-i-ip_unpack","()","<p>Returns the IP address and port number as 2-element array.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ip_unpack    ...\n</code></pre>\n"],["ipv4?","Addrinfo","classes/Addrinfo.html#method-i-ipv4-3F","()","<p>returns true if addrinfo is IPv4 address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv4? ...\n</code></pre>\n"],["ipv4?","IPAddr","classes/IPAddr.html#method-i-ipv4-3F","()","<p>Returns true if the ipaddr is an IPv4 address.\n"],["ipv4_compat","IPAddr","classes/IPAddr.html#method-i-ipv4_compat","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-compatible IPv6 address. …\n"],["ipv4_compat?","IPAddr","classes/IPAddr.html#method-i-ipv4_compat-3F","()","<p>Returns true if the ipaddr is an IPv4-compatible IPv6 address.\n"],["ipv4_loopback?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_loopback-3F","()","<p>Returns true for IPv4 loopback address (127.0.0.0/8). It returns false\notherwise.\n"],["ipv4_mapped","IPAddr","classes/IPAddr.html#method-i-ipv4_mapped","()","<p>Returns a new ipaddr built by converting the native IPv4 address into an\nIPv4-mapped IPv6 address.\n"],["ipv4_mapped?","IPAddr","classes/IPAddr.html#method-i-ipv4_mapped-3F","()","<p>Returns true if the ipaddr is an IPv4-mapped IPv6 address.\n"],["ipv4_multicast?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_multicast-3F","()","<p>Returns true for IPv4 multicast address (224.0.0.0/4). It returns false\notherwise.\n"],["ipv4_multicast_loop","Socket::Option","classes/Socket/Option.html#method-i-ipv4_multicast_loop","()","<p>Returns the ipv4_multicast_loop data in <em>sockopt</em> as an integer.\n\n<pre><code>sockopt = Socket::Option.ipv4_multicast_loop(10) ...\n</code></pre>\n"],["ipv4_multicast_loop","Socket::Option","classes/Socket/Option.html#method-c-ipv4_multicast_loop","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_LOOP.\n<p>The size is dependent on the platform.\n\n<pre><code>sockopt ...\n</code></pre>\n"],["ipv4_multicast_ttl","Socket::Option","classes/Socket/Option.html#method-i-ipv4_multicast_ttl","()","<p>Returns the ipv4_multicast_ttl data in <em>sockopt</em> as an integer.\n\n<pre><code>sockopt = Socket::Option.ipv4_multicast_ttl(10) ...\n</code></pre>\n"],["ipv4_multicast_ttl","Socket::Option","classes/Socket/Option.html#method-c-ipv4_multicast_ttl","(p1)","<p>Creates a new Socket::Option object for IP_MULTICAST_TTL.\n<p>The size is dependent on the platform.\n\n<pre><code>p Socket::Option.ipv4_multicast_ttl(10) ...\n</code></pre>\n"],["ipv4_private?","Addrinfo","classes/Addrinfo.html#method-i-ipv4_private-3F","()","<p>Returns true for IPv4 private address (10.0.0.0/8, 172.16.0.0/12,\n192.168.0.0/16). It returns false otherwise. …\n"],["ipv6?","Addrinfo","classes/Addrinfo.html#method-i-ipv6-3F","()","<p>returns true if addrinfo is IPv6 address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).ipv6? ...\n</code></pre>\n"],["ipv6?","IPAddr","classes/IPAddr.html#method-i-ipv6-3F","()","<p>Returns true if the ipaddr is an IPv6 address.\n"],["ipv6_linklocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_linklocal-3F","()","<p>Returns true for IPv6 link local address (ff80::/10). It returns false\notherwise.\n"],["ipv6_loopback?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_loopback-3F","()","<p>Returns true for IPv6 loopback address (::1). It returns false otherwise.\n"],["ipv6_mc_global?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_global-3F","()","<p>Returns true for IPv6 multicast global scope address. It returns false\notherwise.\n"],["ipv6_mc_linklocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_linklocal-3F","()","<p>Returns true for IPv6 multicast link-local scope address. It returns false\notherwise.\n"],["ipv6_mc_nodelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_nodelocal-3F","()","<p>Returns true for IPv6 multicast node-local scope address. It returns false\notherwise.\n"],["ipv6_mc_orglocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_orglocal-3F","()","<p>Returns true for IPv6 multicast organization-local scope address. It\nreturns false otherwise.\n"],["ipv6_mc_sitelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_mc_sitelocal-3F","()","<p>Returns true for IPv6 multicast site-local scope address. It returns false\notherwise.\n"],["ipv6_multicast?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_multicast-3F","()","<p>Returns true for IPv6 multicast address (ff00::/8). It returns false\notherwise.\n"],["ipv6_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo","()","<p>Extracts addr and ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = ...</code></pre>\n"],["ipv6_pktinfo","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-ipv6_pktinfo","(p1, p2)","<p>Returns new ancillary data for IPV6_PKTINFO.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...\n</code></pre>\n"],["ipv6_pktinfo_addr","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo_addr","()","<p>Extracts addr from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...\n</code></pre>\n"],["ipv6_pktinfo_ifindex","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-ipv6_pktinfo_ifindex","()","<p>Extracts ifindex from IPV6_PKTINFO ancillary data.\n<p>IPV6_PKTINFO is defined by RFC 3542.\n\n<pre><code>addr = Addrinfo.ip(&quot;::1&quot;) ...\n</code></pre>\n"],["ipv6_sitelocal?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_sitelocal-3F","()","<p>Returns true for IPv6 site local address (ffc0::/10). It returns false\notherwise.\n"],["ipv6_to_ipv4","Addrinfo","classes/Addrinfo.html#method-i-ipv6_to_ipv4","()","<p>Returns IPv4 address of IPv4 mapped/compatible IPv6 address. It returns nil\nif <code>self</code> is not IPv4 mapped/compatible …\n"],["ipv6_unique_local?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_unique_local-3F","()","<p>Returns true for IPv6 unique local address (fc00::/7, RFC4193). It returns\nfalse otherwise.\n"],["ipv6_unspecified?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_unspecified-3F","()","<p>Returns true for IPv6 unspecified address (::). It returns false otherwise.\n"],["ipv6_v4compat?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_v4compat-3F","()","<p>Returns true for IPv4-compatible IPv6 address (::/80). It returns false\notherwise.\n"],["ipv6_v4mapped?","Addrinfo","classes/Addrinfo.html#method-i-ipv6_v4mapped-3F","()","<p>Returns true for IPv4-mapped IPv6 address (::ffff:0:0/80). It returns false\notherwise.\n"],["ipv6only!","Socket","classes/Socket.html#method-i-ipv6only-21","()","<p>enable the socket option IPV6_V6ONLY if IPV6_V6ONLY is available.\n"],["irb","Binding","classes/Binding.html#method-i-irb","()","<p>Opens an IRB session where <code>binding.irb</code> is called which allows\nfor interactive debugging. You can call …\n"],["irb","IRB","classes/IRB.html#method-c-irb","(file = nil, *main)","<p>Creates a new IRB session, see Irb.new.\n<p>The optional <code>file</code> argument is given to Context.new, along with\n…\n"],["irb","IRB::JobManager","classes/IRB/JobManager.html#method-i-irb","(key)","<p>Returns the irb session for the given <code>key</code> object, see #search\nfor more information.\n"],["irb_abort","IRB","classes/IRB.html#method-c-irb_abort","(irb, exception = Abort)","<p>Aborts then interrupts irb.\n<p>Will raise an Abort exception, or the given <code>exception</code>.\n"],["irb_at_exit","IRB","classes/IRB.html#method-c-irb_at_exit","()","<p>Calls each event hook of IRB.conf when the current session quits.\n"],["irb_context","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_context","()","<p>Displays current configuration.\n<p>Modifing the configuration is achieved by sending a message to IRB.conf …\n"],["irb_exit","IRB","classes/IRB.html#method-c-irb_exit","(irb, ret)","<p>Quits irb\n"],["irb_exit","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_exit","(ret = 0)","<p>Quits the current irb context\n<p><code>ret</code> is the optional signal or message to send to Context#exit\n<p>Same as <code>IRB.CurrentContext.exit</code> …\n"],["irb_level","IRB::Context","classes/IRB/Context.html#method-i-irb_level","()","<p>Size of the current WorkSpace stack\n"],["irb_load","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_load","(*opts, &b)","<p>Loads the given file similarly to Kernel#load, see IrbLoader#irb_load\n"],["irb_load","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-irb_load","(fn, priv = nil)","<p>Loads the given file similarly to Kernel#load\n"],["irb_require","IRB::ExtendCommandBundle","classes/IRB/ExtendCommandBundle.html#method-i-irb_require","(*opts, &b)","<p>Loads the given file similarly to Kernel#require\n"],["isEqual","Jacobian","classes/Jacobian.html#method-i-isEqual","(a,b,zero=0.0,e=1.0e-8)","<p>Determines the equality of two numbers by comparing to zero, or using the\nepsilon value\n"],["is_a?","Object","classes/Object.html#method-i-is_a-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["is_alias_for","RDoc::Constant","classes/RDoc/Constant.html#method-i-is_alias_for","()","<p>The module or class this constant is an alias for\n"],["is_reachable_from?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-is_reachable_from-3F","(other)",""],["is_version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-is_version_1_2-3F","()",""],["isatty","IO","classes/IO.html#method-i-isatty","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre><code>File.new(&quot;testfile&quot;).isatty ...\n</code></pre>\n"],["isatty","StringIO","classes/StringIO.html#method-i-isatty","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["isdst","Time","classes/Time.html#method-i-isdst","()","<p>Returns <code>true</code> if <em>time</em> occurs during Daylight Saving\nTime in its time zone.\n\n<pre><code># CST6CDT:\n  Time.local(2000, ...</code></pre>\n"],["iseuc","Kconv","classes/Kconv.html#method-c-iseuc","(str)","<p>Returns whether input encoding is EUC-JP or not.\n<p><strong>Note</strong> don&#39;t expect this return value is MatchData …\n"],["iseuc","String","classes/String.html#method-i-iseuc","()","<p>Returns whether <code>self</code>&#39;s encoding is EUC-JP or not.\n"],["isjis","Kconv","classes/Kconv.html#method-c-isjis","(str)","<p>Returns whether input encoding is ISO-2022-JP or not.\n"],["isjis","String","classes/String.html#method-i-isjis","()","<p>Returns whether <code>self</code>&#39;s encoding is ISO-2022-JP or not.\n"],["iso8601","Date","classes/Date.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical ISO 8601 formats.\n\n<pre><code>Date.iso8601(&#39;2001-02-03&#39;) ...\n</code></pre>\n"],["iso8601","Date","classes/Date.html#method-i-iso8601","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["iso8601","DateTime","classes/DateTime.html#method-c-iso8601","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical ISO 8601 formats.\n\n<pre><code>DateTime.iso8601(&#39;2001-02-03T04:05:06+07:00&#39;) ...\n</code></pre>\n"],["iso8601","DateTime","classes/DateTime.html#method-i-iso8601","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;). The optional\nargument <code>n</code> is the number of digits …\n"],["iso8601","Time","classes/Time.html#method-i-iso8601","(fraction_digits=0)",""],["iso8601","Time","classes/Time.html#method-c-iso8601","(date)",""],["issetugid","Process::Sys","classes/Process/Sys.html#method-c-issetugid","()","<p>Returns <code>true</code> if the process was created as a result of an\nexecve(2) system call which had either of the …\n"],["issjis","Kconv","classes/Kconv.html#method-c-issjis","(str)","<p>Returns whether input encoding is Shift_JIS or not.\n"],["issjis","String","classes/String.html#method-i-issjis","()","<p>Returns whether <code>self</code>&#39;s encoding is Shift_JIS or not.\n"],["issue","Bundler::CLI","classes/Bundler/CLI.html#method-i-issue","()",""],["issuer","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-issuer","()",""],["issuer","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-issuer","()",""],["issuer=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-issuer-3D","(p1)",""],["issuer=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-issuer-3D","(p1)",""],["issuer_certificate=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-issuer_certificate-3D","(p1)",""],["issuer_key_hash","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-issuer_key_hash","()","<p>Returns the issuerKeyHash of this certificate ID, the hash of the\nissuer&#39;s public key.\n"],["issuer_name_hash","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-issuer_name_hash","()","<p>Returns the issuerNameHash of this certificate ID, the hash of the\nissuer&#39;s distinguished name calculated …\n"],["issues_url","Bundler::FriendlyErrors","classes/Bundler/FriendlyErrors.html#method-i-issues_url","(exception)",""],["isutf8","Kconv","classes/Kconv.html#method-c-isutf8","(str)","<p>Returns whether input encoding is UTF-8 or not.\n"],["isutf8","String","classes/String.html#method-i-isutf8","()","<p>Returns whether <code>self</code>&#39;s encoding is UTF-8 or not.\n"],["italy","Date","classes/Date.html#method-i-italy","()","<p>This method is equivalent to new_start(Date::ITALY).\n"],["items","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-items","()","<p>Returns the Entry in an array.\n"],["items","RSS::Rss","classes/RSS/Rss.html#method-i-items","()",""],["iterator?","Kernel","classes/Kernel.html#method-i-iterator-3F","()","<p>Returns <code>true</code> if <code>yield</code> would execute a block in\nthe current context. The <code>iterator?</code> form is mildly deprecated.\n…\n"],["itself","Object","classes/Object.html#method-i-itself","()","<p>Returns the receiver.\n\n<pre><code>string = &quot;my string&quot;\nstring.itself.object_id == string.object_id   #=&gt; true\n</code></pre>\n"],["iv=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-iv-3D","(p1)","<p>Sets the cipher IV. Please note that since you should never be using ECB\nmode, an IV is always explicitly …\n"],["iv_len","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-iv_len","()","<p>Returns the expected length in bytes for an IV for this Cipher.\n"],["iv_len=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-iv_len-3D","(p1)","<p>Sets the IV/nonce length of the Cipher. Normally block ciphers don&#39;t\nallow changing the IV length, …\n"],["jacobian","Jacobian","classes/Jacobian.html#method-i-jacobian","(f,fx,x)","<p>Computes the Jacobian of f at x. fx is the value of f at x.\n"],["jd","Date","classes/Date.html#method-i-jd","()","<p>Returns the Julian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["jd","Date","classes/Date.html#method-c-jd","(p1 = v1, p2 = v2)","<p>Creates a date object denoting the given chronological Julian day number.\n\n<pre><code>Date.jd(2451944)          #=&gt; ...\n</code></pre>\n"],["jd","DateTime","classes/DateTime.html#method-c-jd","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6)","<p>Creates a DateTime object denoting the given chronological Julian day\nnumber.\n\n<pre><code>DateTime.jd(2451944)    ...\n</code></pre>\n"],["jisx0301","Date","classes/Date.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical JIS X 0301 formats.\n\n<pre><code>Date.jisx0301(&#39;H13.02.03&#39;) ...\n</code></pre>\n"],["jisx0301","Date","classes/Date.html#method-i-jisx0301","()","<p>Returns a string in a JIS X 0301 format.\n\n<pre><code>Date.new(2001,2,3).jisx0301       #=&gt; &quot;H13.02.03&quot;\n</code></pre>\n"],["jisx0301","DateTime","classes/DateTime.html#method-c-jisx0301","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical JIS X 0301 formats. …\n"],["jisx0301","DateTime","classes/DateTime.html#method-i-jisx0301","(*args)","<p>Returns a string in a JIS X 0301 format. The optional argument\n<code>n</code> is the number of digits for fractional …\n"],["jobs","Shell","classes/Shell.html#method-i-jobs","()","<p>Returns a list of scheduled jobs.\n"],["jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-jobs","()",""],["jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-jobs_exist-3F","()",""],["join","Array","classes/Array.html#method-i-join","(*args)","<p>Returns a string created by converting each element of the array to a\nstring, separated by the given …\n"],["join","File","classes/File.html#method-c-join","(*args)","<p>Returns a new string formed by joining the strings using\n<code>&quot;/&quot;</code>.\n\n<pre><code>File.join(&quot;usr&quot;, &quot;mail&quot;, &quot;gumby&quot;) ...\n</code></pre>\n"],["join","Pathname","classes/Pathname.html#method-i-join","(*args)","<p>Joins the given pathnames onto <code>self</code> to create a new Pathname\nobject.\n\n<pre><code>path0 = Pathname.new(&quot;/usr&quot;)     ...\n</code></pre>\n"],["join","Shellwords","classes/Shellwords.html#method-c-join","(array)",""],["join","Thread","classes/Thread.html#method-i-join","(*args)","<p>The calling thread will suspend execution and run this <code>thr</code>.\n<p>Does not return until <code>thr</code> exits or until the …\n"],["join","ThreadsWait","classes/ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","ThreadsWait","classes/ThreadsWait.html#method-i-join","(*threads)","<p>Waits for specified threads to terminate, and returns when one of the\nthreads terminated.\n"],["join","URI","classes/URI.html#method-c-join","(*str)","<p>Synopsis\n\n<pre><code>URI::join(str[, str, ...])</code></pre>\n<p>Args\n"],["join","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-join","(*uris)","<p>Args\n<p><code>uris</code> &mdash; an Array of Strings\n\n<p>Description\n"],["join_nowait","ThreadsWait","classes/ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["join_nowait","ThreadsWait","classes/ThreadsWait.html#method-i-join_nowait","(*threads)","<p>Specifies the threads that this object will wait for, but does not actually\nwait.\n"],["jruby?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-jruby-3F","()",""],["json_creatable?","Class","classes/Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a\nserialised JSON string. The class …\n"],["json_creatable?","JSON::GenericObject","classes/JSON/GenericObject.html#method-c-json_creatable-3F","()",""],["json_create","BigDecimal","classes/BigDecimal.html#method-c-json_create","(object)","<p>Import a JSON Marshalled object.\n<p>method used for JSON marshalling support.\n"],["json_create","Complex","classes/Complex.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Real value <code>r</code>, imaginary\nvalue <code>i</code>, to a Complex object.\n"],["json_create","Date","classes/Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to …\n"],["json_create","DateTime","classes/DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> …\n"],["json_create","Exception","classes/Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized …\n"],["json_create","JSON::Ext::Generator::GeneratorMethods::String::Extend","classes/JSON/Ext/Generator/GeneratorMethods/String/Extend.html#method-i-json_create","(p1)","<p>Raw Strings are JSON Objects (the raw bytes are stored in an array for the\nkey “raw”). The …\n"],["json_create","JSON::GenericObject","classes/JSON/GenericObject.html#method-c-json_create","(data)",""],["json_create","OpenStruct","classes/OpenStruct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>t</code> serialized by <code>to_json</code>.\n"],["json_create","Range","classes/Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","classes/Rational.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting numerator value <code>n</code>,\ndenominator value <code>d</code>, to a Rational object. …\n"],["json_create","Regexp","classes/Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options …\n"],["json_create","Struct","classes/Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","classes/Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","classes/Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["julian","Date","classes/Date.html#method-i-julian","()","<p>This method is equivalent to new_start(Date::JULIAN).\n"],["julian?","Date","classes/Date.html#method-i-julian-3F","()","<p>Returns true if the date is before the day of calendar reform.\n\n<pre><code>Date.new(1582,10,15).julian?           ...\n</code></pre>\n"],["julian_leap?","Date","classes/Date.html#method-c-julian_leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Julian\ncalendar.\n\n<pre><code>Date.julian_leap?(1900) ...\n</code></pre>\n"],["k","Bundler::Settings::Validator::Rule","classes/Bundler/Settings/Validator/Rule.html#method-i-k","(key)",""],["kconv","Kconv","classes/Kconv.html#method-c-kconv","(str, to_enc, from_enc=nil)","<p>Convert <code>str</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["kconv","String","classes/String.html#method-i-kconv","(to_enc, from_enc=nil)","<p>Convert <code>self</code> to <code>to_enc</code>. <code>to_enc</code> and\n<code>from_enc</code> are given as constants of Kconv or Encoding objects.\n"],["keep_alive?","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-keep_alive-3F","()","<p>Should the connection this request was made on be kept alive?\n"],["keep_alive?","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-keep_alive-3F","()","<p>Will this response&#39;s connection be kept alive?\n"],["keep_back","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-keep_back","()",""],["keep_back","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-i-keep_back","()",""],["keep_drop","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-keep_drop","()",""],["keep_drop","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-i-keep_drop","()",""],["keep_end","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-keep_end","()",""],["keep_end","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-i-keep_end","()",""],["keep_if","Array","classes/Array.html#method-i-keep_if","()","<p>Deletes every element of <code>self</code> for which the given block\nevaluates to <code>false</code>, and returns <code>self</code>.\n<p>If no block …\n"],["keep_if","ENV","classes/ENV.html#method-c-keep_if","()","<p>Deletes every environment variable where the block evaluates to\n<code>false</code>.\n<p>Returns an enumerator if no block …\n"],["keep_if","Hash","classes/Hash.html#method-i-keep_if","()","<p>Deletes every key-value pair from <em>hsh</em> for which <em>block</em>\nevaluates to <code>false</code>.\n<p>If no block is given, an enumerator …\n"],["keep_if","Set","classes/Set.html#method-i-keep_if","()","<p>Deletes every element of the set for which block evaluates to false, and\nreturns self. Returns an enumerator …\n"],["keep_start","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-keep_start","()",""],["keep_start","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-i-keep_start","()",""],["key","DBM","classes/DBM.html#method-i-key","(p1)","<p>Returns the key for the specified value.\n"],["key","ENV","classes/ENV.html#method-c-key","(p1)","<p>Returns the name of the environment variable with <code>value</code>.  If\nthe value is not found <code>nil</code> is returned. …\n"],["key","GDBM","classes/GDBM.html#method-i-key","(p1)","<p>Returns the <em>key</em> for a given <em>value</em>. If several keys may\nmap to the same value, the key that is found first …\n"],["key","Hash","classes/Hash.html#method-i-key","(p1)","<p>Returns the key of an occurrence of a given value. If the value is not\nfound, returns <code>nil</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; ...</code></pre>\n"],["key","KeyError","classes/KeyError.html#method-i-key","()","<p>Return the key caused this KeyError exception.\n"],["key","SDBM","classes/SDBM.html#method-i-key","(p1)","<p>Returns the <code>key</code> associated with the given <code>value</code>.\nIf more than one <code>key</code> corresponds to the given\n<code>value</code> …\n"],["key","YAML::DBM","classes/YAML/DBM.html#method-i-key","( keystr )","<p>Returns the key for the specified value.\n"],["key=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-key-3D","(key)","<p>For Net::HTTP parity\n"],["key=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-key-3D","(p1)","<p>Sets the cipher key. To generate a key, you should either use a secure\nrandom byte string or, if the …\n"],["key?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-key-3F","(*args)",""],["key?","CSV::Row","classes/CSV/Row.html#method-i-key-3F","(header)",""],["key?","DBM","classes/DBM.html#method-i-key-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["key?","ENV","classes/ENV.html#method-c-key-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["key?","GDBM","classes/GDBM.html#method-i-key-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["key?","Hash","classes/Hash.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["key?","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["key?","SDBM","classes/SDBM.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["key?","Thread","classes/Thread.html#method-i-key-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nfiber-local variable.\n\n<pre><code>me = Thread.current\nme[:oliver] ...\n</code></pre>\n"],["key_for","Bundler::Settings","classes/Bundler/Settings.html#method-i-key_for","(key)",""],["key_len","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-key_len","()","<p>Returns the key length in bytes of the Cipher.\n"],["key_len=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-key_len-3D","(p1)","<p>Sets the key length of the cipher.  If the cipher is a fixed length cipher\nthen attempting to set the …\n"],["keys","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-keys","()",""],["keys","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-keys","(*args)","<p>Return all query parameter names as an array of String.\n"],["keys","DBM","classes/DBM.html#method-i-keys","()","<p>Returns an array of all the string keys in the database.\n"],["keys","ENV","classes/ENV.html#method-c-keys","()","<p>Returns every environment variable name in an Array\n"],["keys","GDBM","classes/GDBM.html#method-i-keys","()","<p>Returns an array of all keys of this database.\n"],["keys","Hash","classes/Hash.html#method-i-keys","()","<p>Returns a new array populated with the keys from this hash. See also\n<code>Hash#values</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</code></pre>\n"],["keys","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-keys","()","<p>Iterates over keys and objects in a weakly referenced object\n"],["keys","SDBM","classes/SDBM.html#method-i-keys","()","<p>Returns a new Array containing the keys in the database.\n"],["keys","Thread","classes/Thread.html#method-i-keys","()","<p>Returns an array of the names of the fiber-local variables (as Symbols).\n\n<pre><code>thr = Thread.new do\n  Thread.current[:cat] ...</code></pre>\n"],["keys_with_inspector","IRB::Inspector","classes/IRB/Inspector.html#method-c-keys_with_inspector","(inspector)","<p>Determines the inspector to use where <code>inspector</code> is one of the\nkeys passed during inspector definition. …\n"],["kill","IRB::JobManager","classes/IRB/JobManager.html#method-i-kill","(*keys)","<p>Terminates the irb sessions specified by the given <code>keys</code>.\n<p>Raises an IrbAlreadyDead exception if one of …\n"],["kill","Process","classes/Process.html#method-c-kill","(*args)","<p>Sends the given signal to the specified process id(s) if <em>pid</em> is\npositive. If <em>pid</em> is zero <em>signal</em> is sent …\n"],["kill","Shell","classes/Shell.html#method-i-kill","(sig, command)","<p>Sends the given <code>signal</code> to the given <code>job</code>\n"],["kill","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-kill","(sig)",""],["kill","Thread","classes/Thread.html#method-i-kill","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["kill","Thread","classes/Thread.html#method-c-kill","(p1)","<p>Causes the given <code>thread</code> to exit, see also Thread::exit.\n\n<pre><code>count = 0\na = Thread.new { loop { count += 1 } ...</code></pre>\n"],["kill_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-kill_job","(sig, command)","<p>kill a job\n"],["kind_of?","Object","classes/Object.html#method-i-kind_of-3F","(p1)","<p>Returns <code>true</code> if <em>class</em> is the class of <em>obj</em>,\nor if <em>class</em> is one of the superclasses of <em>obj</em> or modules\nincluded …\n"],["l","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-l","()",""],["label","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-label","()","<p>Returns the label of this instruction sequence.\n<p><code>&lt;main&gt;</code> if it&#39;s at the top level,\n<code>&lt;compiled&gt;</code> …\n"],["label","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-label","()","<p>Returns the label of this frame.\n<p>Usually consists of method, class, module, etc names with decoration. …\n"],["lambda","Kernel","classes/Kernel.html#method-i-lambda","()","<p>Equivalent to <code>Proc.new</code>, except the resulting Proc objects\ncheck the number of parameters passed when …\n"],["lambda?","Proc","classes/Proc.html#method-i-lambda-3F","()","<p>Returns <code>true</code> for a Proc object for which argument handling is\nrigid. Such procs are typically generated …\n"],["lang","REXML::Functions","classes/REXML/Functions.html#method-c-lang","( language )","<p>UNTESTED\n"],["last","Array","classes/Array.html#method-i-last","(*args)","<p>Returns the last element(s) of <code>self</code>. If the array is empty,\nthe first form returns <code>nil</code>.\n<p>See also Array#first …\n"],["last","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-last","(p1)","<p>Returns the last number in this arithmetic sequence, or an array of the\nlast <code>n</code> elements.\n"],["last","REXML::Functions","classes/REXML/Functions.html#method-c-last","( )","<p>Returns the last node of the given list of nodes.\n"],["last","Range","classes/Range.html#method-i-last","(*args)","<p>Returns the last object in the range, or an array of the last\n<code>n</code> elements.\n<p>Note that with no arguments …\n"],["lastBuildDate=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-lastBuildDate-3D","(_date)",""],["last_column","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-last_column","()","<p>The column number in the source code where this AST&#39;s text ended.\n"],["last_error","Encoding::Converter","classes/Encoding/Converter.html#method-i-last_error","()","<p>Returns an exception object for the last conversion. Returns nil if the\nlast conversion did not produce …\n"],["last_error","Fiddle","classes/Fiddle.html#method-c-last_error","()","<p>Returns the last <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["last_error=","Fiddle","classes/Fiddle.html#method-c-last_error-3D","(error)","<p>Sets the last <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["last_lineno","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-last_lineno","()","<p>The line number in the source code where this AST&#39;s text ended.\n"],["last_match","Regexp","classes/Regexp.html#method-c-last_match","(*args)","<p>The first form returns the MatchData object generated by the last\nsuccessful pattern match.  Equivalent …\n"],["last_modified","OpenURI::Meta","classes/OpenURI/Meta.html#method-i-last_modified","()","<p>returns a Time that represents the Last-Modified field.\n"],["last_modified","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-last_modified","()","<p>Time this file was last modified, if known\n"],["last_status","Process","classes/Process.html#method-c-last_status","()","<p>Returns the status of the last executed child process in the current\nthread.\n\n<pre><code>Process.wait Process.spawn(&quot;ruby&quot;, ...</code></pre>\n"],["last_update","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-last_update","()",""],["last_update=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-last_update-3D","(p1)",""],["latest_gc_info","GC","classes/GC.html#method-c-latest_gc_info","(*args)","<p>Returns information about the most recent garbage collection.\n"],["latest_rubygems_version","Gem","classes/Gem.html#method-c-latest_rubygems_version","()","<p>Returns the latest release version of RubyGems.\n"],["latest_spec_for","Gem","classes/Gem.html#method-c-latest_spec_for","(name)","<p>Returns the latest release-version specification for the gem\n<code>name</code>.\n"],["latest_version","Bundler::Molinillo::Resolver::Resolution::PossibilitySet","classes/Bundler/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-latest_version","()","<p>@return [Object] most up-to-date dependency in the possibility set\n"],["latest_version_for","Gem","classes/Gem.html#method-c-latest_version_for","(name)","<p>Returns the version of the latest release-version of gem <code>name</code>\n"],["lazy","Enumerable","classes/Enumerable.html#method-i-lazy","()","<p>Returns a lazy enumerator, whose methods map/collect,\nflat_map/collect_concat, select/find_all, reject, …\n"],["lazy","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-lazy","()",""],["lchmod","File","classes/File.html#method-c-lchmod","(*args)","<p>Equivalent to <code>File::chmod</code>, but does not follow symbolic links\n(so it will change the permissions associated …\n"],["lchmod","Pathname","classes/Pathname.html#method-i-lchmod","(p1)","<p>Same as Pathname.chmod, but does not follow symbolic links.\n<p>See File.lchmod.\n"],["lchown","File","classes/File.html#method-c-lchown","(*args)","<p>Equivalent to <code>File::chown</code>, but does not follow symbolic links\n(so it will change the owner associated …\n"],["lchown","Pathname","classes/Pathname.html#method-i-lchown","(p1, p2)","<p>Same as Pathname.chown, but does not follow symbolic links.\n<p>See File.lchown.\n"],["lcm","Integer","classes/Integer.html#method-i-lcm","(p1)","<p>Returns the least common multiple of the two integers. The result is always\npositive. 0.lcm(x) and x.lcm …\n"],["ld","Date","classes/Date.html#method-i-ld","()","<p>Returns the Lilian day number.  This is a whole number, which is adjusted\nby the offset as the local …\n"],["ldd_available?","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-ldd_available-3F","()",""],["ldexp","Math","classes/Math.html#method-c-ldexp","(p1, p2)","<p>Returns the value of <code>fraction</code>*(2**<code>exponent</code>).\n\n<pre><code>fraction, exponent = Math.frexp(1234)\nMath.ldexp(fraction, ...</code></pre>\n"],["leap?","Date","classes/Date.html#method-i-leap-3F","()","<p>Returns true if the year is a leap year.\n\n<pre><code>Date.new(2000).leap?      #=&gt; true\nDate.new(2001).leap?      ...\n</code></pre>\n"],["leap?","Date","classes/Date.html#method-c-leap-3F","(p1)","<p>Returns true if the given year is a leap year of the proleptic Gregorian\ncalendar.\n\n<pre><code>Date.gregorian_leap?(1900) ...\n</code></pre>\n"],["length","Array","classes/Array.html#method-i-length","()","<p>Returns the number of elements in <code>self</code>. May be zero.\n\n<pre><code>[ 1, 2, 3, 4, 5 ].length   #=&gt; 5\n[].length       ...\n</code></pre>\n"],["length","DBM","classes/DBM.html#method-i-length","()","<p>Returns the number of entries in the database.\n"],["length","Digest::Instance","classes/Digest/Instance.html#method-i-length","()","<p>Returns digest_obj.digest_length().\n"],["length","ENV","classes/ENV.html#method-c-length","()","<p>Returns the number of environment variables.\n"],["length","GDBM","classes/GDBM.html#method-i-length","()","<p>Returns the number of key-value pairs in this database.\n"],["length","Hash","classes/Hash.html#method-i-length","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre><code>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</code></pre>\n"],["length","MatchData","classes/MatchData.html#method-i-length","()","<p>Returns the number of elements in the match array.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...\n</code></pre>\n"],["length","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-length","()","<p>Returns the number of referenced objects\n"],["length","Queue","classes/Queue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","REXML::Attributes","classes/REXML/Attributes.html#method-i-length","()","<p>Returns the number of attributes the owning Element contains.\n\n<pre><code>doc = Document &quot;&lt;a x=&#39;1&#39; y=&#39;2&#39; foo:x=&#39;3&#39;/&gt;&quot; ...\n</code></pre>\n"],["length","REXML::Parent","classes/REXML/Parent.html#method-i-length","()",""],["length","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-length","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["length","SDBM","classes/SDBM.html#method-i-length","()","<p>Returns the number of keys in the database.\n"],["length","Set","classes/Set.html#method-i-length","()",""],["length","SizedQueue","classes/SizedQueue.html#method-i-length","()","<p>Returns the length of the queue.\n"],["length","String","classes/String.html#method-i-length","()","<p>Returns the character length of <em>str</em>.\n"],["length","StringIO","classes/StringIO.html#method-i-length","()","<p>Returns the size of the buffer string.\n"],["length","Struct","classes/Struct.html#method-i-length","()","<p>Returns the number of struct members.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["length","Symbol","classes/Symbol.html#method-i-length","()","<p>Same as <code>sym.to_s.length</code>.\n"],["length","Tempfile","classes/Tempfile.html#method-i-length","()",""],["level","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-level","(name = nil)",""],["level","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-level","(name = nil)",""],["level","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-level","()","<p>returns the cmsg level as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).level\n#=&gt; ...\n</code></pre>\n"],["level","Socket::Option","classes/Socket/Option.html#method-i-level","()","<p>returns the socket level as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).level ...\n</code></pre>\n"],["level","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-level","()","<p>Returns compression level.\n"],["level=","Bundler::GemVersionPromoter","classes/Bundler/GemVersionPromoter.html#method-i-level-3D","(value)","<p>@param value [Symbol] One of three Symbols: :major, :minor or :patch.\n"],["level=","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-level-3D","(level)",""],["level=","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-level-3D","(name)",""],["level=","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-level-3D","(value)",""],["level=","Logger","classes/Logger.html#method-i-level-3D","(severity)","<p>Set logging severity threshold.\n<p><code>severity</code> &mdash; The Severity of the log message.\n\n"],["level_notifier=","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-i-level_notifier-3D","(value)","<p>Sets the leveled notifier for this object.\n<p>When the given <code>value</code> is an instance of AbstractNotifier,\n#level_notifier …\n"],["levenshtein_distance","Bundler::SimilarityDetector","classes/Bundler/SimilarityDetector.html#method-i-levenshtein_distance","(this, that, ins = 2, del = 2, sub = 1)","<p>www.informit.com/articles/article.aspx?p=683059&seqNum=36\n"],["lex","Ripper","classes/Ripper.html#method-c-lex","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of an array, which is\nformatted like <code>[[lineno, column],</code> …\n"],["lex_state_name","Ripper","classes/Ripper.html#method-c-lex_state_name","(p1)","<p>Returns a string representation of lex_state.\n"],["lgamma","Math","classes/Math.html#method-c-lgamma","(p1)","<p>Calculates the logarithmic gamma of <code>x</code> and the sign of gamma of\n<code>x</code>.\n<p>Math.lgamma(x) is same as\n\n<pre><code>[Math.log(Math.gamma(x).abs), ...</code></pre>\n"],["liberal_parsing?","CSV","classes/CSV.html#method-i-liberal_parsing-3F","()","<p>Returns <code>true</code> if illegal input is handled. See CSV::new for\ndetails.\n"],["liberal_parsing?","CSV::Parser","classes/CSV/Parser.html#method-i-liberal_parsing-3F","()",""],["library_name","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-library_name","()","<p>Returns library name. If the method fails to access library name,\nWIN32OLERuntimeError is raised.\n\n<pre><code>tlib ...\n</code></pre>\n"],["libyaml_version","Psych","classes/Psych.html#method-c-libyaml_version","()","<p>Returns the version of libyaml being used\n"],["licenses","Bundler::CLI","classes/Bundler/CLI.html#method-i-licenses","()",""],["limit","BigDecimal","classes/BigDecimal.html#method-c-limit","(p1 = v1)","<p>Limit the number of significant digits in newly created BigDecimal numbers\nto the specified value. Rounding …\n"],["line","CSV","classes/CSV.html#method-i-line","()","<p>The last row read from this file.\n"],["line","CSV::Parser","classes/CSV/Parser.html#method-i-line","()",""],["line","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-line","(line_no)","<p>Returns the current line number for #io.\n<p>#line counts the number of times #gets is called.\n<p>See IO#lineno …\n"],["line","REXML::ParseException","classes/REXML/ParseException.html#method-i-line","()",""],["line_buffer","Readline","classes/Readline.html#method-c-line_buffer","()","<p>Returns the full line that is being edited. This is useful from within the\ncomplete_proc for determining …\n"],["line_width","Psych::Emitter","classes/Psych/Emitter.html#method-i-line_width","()","<p>Get the preferred line width.\n"],["line_width=","Psych::Emitter","classes/Psych/Emitter.html#method-i-line_width-3D","(p1)","<p>Set the preferred line with to <code>width</code>.\n"],["lineno","ARGF","classes/ARGF.html#method-i-lineno","()","<p>Returns the current line number of ARGF as a whole. This value can be set\nmanually with <code>ARGF.lineno=</code> …\n"],["lineno","CSV","classes/CSV.html#method-i-lineno","()","<p>The line number of the last row read from this file. Fields with nested\nline-end characters will not …\n"],["lineno","CSV::Parser","classes/CSV/Parser.html#method-i-lineno","()",""],["lineno","IO","classes/IO.html#method-i-lineno","()","<p>Returns the current line number in <em>ios</em>.  The stream must be opened\nfor reading. <code>lineno</code> counts the number …\n"],["lineno","Ripper","classes/Ripper.html#method-i-lineno","()","<p>Return line number of current parsing line. This number starts from 1.\n"],["lineno","Ripper::Filter","classes/Ripper/Filter.html#method-i-lineno","()","<p>The line number of the current token. This value starts from 1. This method\nis valid only in event handlers. …\n"],["lineno","StringIO","classes/StringIO.html#method-i-lineno","()","<p>Returns the current line number in <strong>strio</strong>. The stringio\nmust be opened for reading. <code>lineno</code> counts the …\n"],["lineno","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-lineno","()","<p>Returns the line number of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["lineno","TracePoint","classes/TracePoint.html#method-i-lineno","()","<p>Line number of the event\n"],["lineno","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lineno","()","<p>The line number of the last row read from this file.\n"],["lineno=","ARGF","classes/ARGF.html#method-i-lineno-3D","(p1)","<p>Sets the line number of <code>ARGF</code> as a whole to the given\n<code>Integer</code>.\n<p><code>ARGF</code> sets the line number automatically …\n"],["lineno=","IO","classes/IO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n\n<pre><code>f = File.new(&quot;testfile&quot;) ...\n</code></pre>\n"],["lineno=","StringIO","classes/StringIO.html#method-i-lineno-3D","(p1)","<p>Manually sets the current line number to the given value. <code>$.</code>\nis updated only on the next read.\n"],["lineno=","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lineno-3D","(p1)","<p>Specify line number of the last row read from this file.\n"],["lines","ARGF","classes/ARGF.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","IO","classes/IO.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","String","classes/String.html#method-i-lines","(*args)","<p>Returns an array of lines in <em>str</em> split using the supplied record\nseparator (<code>$/</code> by default).  This is …\n"],["lines","StringIO","classes/StringIO.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["lines","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-lines","(*args)","<p>This is a deprecated alias for <code>each_line</code>.\n"],["linger","Socket::Option","classes/Socket/Option.html#method-i-linger","()","<p>Returns the linger data in <em>sockopt</em> as a pair of boolean and\ninteger.\n\n<pre><code>sockopt = Socket::Option.linger(true, ...</code></pre>\n"],["linger","Socket::Option","classes/Socket/Option.html#method-c-linger","(p1, p2)","<p>Creates a new Socket::Option object for SOL_SOCKET/SO_LINGER.\n<p><em>onoff</em> should be an integer or a boolean. …\n"],["link","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","File","classes/File.html#method-c-link","(p1, p2)","<p>Creates a new name for an existing file using a hard link. Will not\noverwrite <em>new_name</em> if it already …\n"],["link","FileUtils","classes/FileUtils.html#method-c-link","(src, dest, force: nil, noop: nil, verbose: nil)",""],["link","RSS::Maker::ImageBase","classes/RSS/Maker/ImageBase.html#method-i-link","()",""],["link_entry","FileUtils","classes/FileUtils.html#method-c-link_entry","(src, dest, dereference_root = false, remove_destination = false)","<p>Hard links a file system entry <code>src</code> to <code>dest</code>. If\n<code>src</code> is a directory, this method links its contents\nrecursively. …\n"],["link_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-link_file","(source, *args)","<p>Links the file from the relative source to the relative destination. If the\ndestination is not given …\n"],["link_local?","IPAddr","classes/IPAddr.html#method-i-link_local-3F","()","<p>Returns true if the ipaddr is a link-local address.  IPv4 addresses in\n169.254.0.0/16 reserved by RFC …\n"],["link_to","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-link_to","(content, label = content, text = nil)","<p>Finds a link reference for <code>label</code> and creates a new link to it\nwith\n<code>content</code> as the link text. If <code>label</code> ...\n"],["list","Bundler::CLI","classes/Bundler/CLI.html#method-i-list","()",""],["list","Encoding","classes/Encoding.html#method-c-list","()","<p>Returns the list of loaded encodings.\n\n<pre><code>Encoding.list\n#=&gt; [#&lt;Encoding:ASCII-8BIT&gt;, #&lt;Encoding:UTF-8&gt;,\n  ...</code></pre>\n"],["list","Net::FTP","classes/Net/FTP.html#method-i-list","(*args)","<p>Returns an array of file information in the directory (the output is like\n`ls -l`).  If a block is given, …\n"],["list","Net::IMAP","classes/Net/IMAP.html#method-i-list","(refname, mailbox)","<p>Sends a LIST command, and returns a subset of names from the complete set\nof all names available to the …\n"],["list","Signal","classes/Signal.html#method-c-list","()","<p>Returns a list of signal names mapped to the corresponding underlying\nsignal numbers.\n\n<pre><code>Signal.list   #=&gt; ...\n</code></pre>\n"],["list","Thread","classes/Thread.html#method-c-list","()","<p>Returns an array of Thread objects for all threads that are either runnable\nor stopped.\n\n<pre><code>Thread.new { sleep(200) ...</code></pre>\n"],["list","ThreadGroup","classes/ThreadGroup.html#method-i-list","()","<p>Returns an array of all existing Thread objects that belong to this group.\n\n<pre><code>ThreadGroup::Default.list  ...\n</code></pre>\n"],["list","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-list","()","<p>Returns all the FormData as an Array\n"],["list_files_in_directory","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-list_files_in_directory","(dir)","<p>Return a list of the files to be processed in a directory. We know that\nthis directory doesn&#39;t have …\n"],["list_item_from","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-list_item_from","(unparsed)","<p>Creates an RDoc::Markup::ListItem by parsing the <code>unparsed</code>\ncontent from\nthe first parsing pass.\n"],["listable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-listable-3F","()","<p>Returns <code>true</code> if the listing commands, LIST, NLST, and MLSD are\napplied to the directory.\n"],["listen","Addrinfo","classes/Addrinfo.html#method-i-listen","(backlog=Socket::SOMAXCONN)","<p>creates a listening socket bound to self.\n"],["listen","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-i-listen","(backlog=5)","<p>See TCPServer#listen for details.\n"],["listen","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-listen","( *args, &blok )","<p>Listen arguments:\n<p>Symbol, Array, Block\n\n<pre><code>Listen to Symbol events on Array elements\n</code></pre>\n"],["listen","Socket","classes/Socket.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","TCPServer","classes/TCPServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","UNIXServer","classes/UNIXServer.html#method-i-listen","(p1)","<p>Listens for connections, using the specified <code>int</code> as the\nbacklog. A call to <em>listen</em> only applies if the …\n"],["listen","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-listen","(address, port)","<p>Adds listeners from <code>address</code> and <code>port</code> to the\nserver.  See WEBrick::Utils::create_listeners for details. …\n"],["listener","RSS::REXMLParser","classes/RSS/REXMLParser.html#method-c-listener","()",""],["listener","RSS::XMLParserParser","classes/RSS/XMLParserParser.html#method-c-listener","()",""],["listener","RSS::XMLScanParser","classes/RSS/XMLScanParser.html#method-c-listener","()",""],["listener=","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-listener-3D","(listener)",""],["ljust","String","classes/String.html#method-i-ljust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> left\njustified …\n"],["ln","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a hard link <code>link</code> which points to\n<code>target</code>. If <code>link</code> already exists, raises\nErrno::EEXIST …\n"],["ln","FileUtils","classes/FileUtils.html#method-c-ln","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a hard link <code>link</code> which points to\n<code>target</code>. If <code>link</code> already exists, raises\nErrno::EEXIST …\n"],["ln","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-i-ln","()","<p>The long name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["ln_s","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-ln_s","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a symbolic link <code>link</code> which points\nto <code>target</code>. If <code>link</code> already exists, raises …\n"],["ln_s","FileUtils","classes/FileUtils.html#method-c-ln_s","(src, dest, force: nil, noop: nil, verbose: nil)","<p>In the first form, creates a symbolic link <code>link</code> which points\nto <code>target</code>. If <code>link</code> already exists, raises …\n"],["ln_sf","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Same as\n\n<pre><code>Bundler::FileUtils.ln_s(*args, force: true)\n</code></pre>\n"],["ln_sf","FileUtils","classes/FileUtils.html#method-c-ln_sf","(src, dest, noop: nil, verbose: nil)","<p>Same as\n\n<pre><code>FileUtils.ln_s(*args, force: true)\n</code></pre>\n"],["load","Bundler","classes/Bundler.html#method-c-load","()",""],["load","Bundler::YAMLSerializer","classes/Bundler/YAMLSerializer.html#method-i-load","(str)",""],["load","IRB::Locale","classes/IRB/Locale.html#method-i-load","(file, priv=nil)",""],["load","JSON","classes/JSON.html#method-i-load","(source, proc = nil, options = {})","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, …\n"],["load","JSON::GenericObject","classes/JSON/GenericObject.html#method-c-load","(source, proc = nil, opts = {})",""],["load","Kernel","classes/Kernel.html#method-i-load","(p1, p2 = v2)","<p>Loads and executes the Ruby program in the file <em>filename</em>. If the\nfilename does not resolve to an absolute …\n"],["load","Marshal","classes/Marshal.html#method-c-load","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["load","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-c-load","(p1 = v1)","<p>This method loads engines. If <em>name</em> is nil, then all builtin\nengines are loaded. Otherwise, the given …\n"],["load","OptionParser","classes/OptionParser.html#method-i-load","(filename = nil)","<p>Loads options from file names as <code>filename</code>. Does nothing when\nthe file is not present. Returns whether …\n"],["load","Psych","classes/Psych.html#method-c-load","(yaml, legacy_filename = NOT_GIVEN, filename: nil, fallback: false, symbolize_names: false)","<p>Load <code>yaml</code> in to a Ruby data structure.  If multiple documents\nare provided, the object contained in the …\n"],["load_all","RDoc::Store","classes/RDoc/Store.html#method-i-load_all","()","<p>Loads all items from this store into memory.  This recreates a\ndocumentation tree for use by a generator …\n"],["load_cache","RDoc::Store","classes/RDoc/Store.html#method-i-load_cache","()","<p>Loads cache file for this store\n"],["load_class","RDoc::Store","classes/RDoc/Store.html#method-i-load_class","(klass_name)","<p>Loads ri data for <code>klass_name</code> and hooks it up to this store.\n"],["load_class_data","RDoc::Store","classes/RDoc/Store.html#method-i-load_class_data","(klass_name)","<p>Loads ri data for <code>klass_name</code>\n"],["load_env_plugins","Gem","classes/Gem.html#method-c-load_env_plugins","()","<p>Find all &#39;rubygems_plugin&#39; files in $LOAD_PATH and load them\n"],["load_file","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-load_file","(path, priv = nil)","<p>Loads the given file in the current session&#39;s context and evaluates it.\n<p>See Irb#suspend_input_method …\n"],["load_file","Psych","classes/Psych.html#method-c-load_file","(filename, fallback: false)","<p>Load the document contained in <code>filename</code>.  Returns the yaml\ncontained in <code>filename</code> as a Ruby object, or …\n"],["load_from_binary","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-load_from_binary","(p1)","<p>Load an iseq object from binary format String object created by\nRubyVM::InstructionSequence.to_binary …\n"],["load_from_binary_extra_data","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-load_from_binary_extra_data","(p1)","<p>Load extra data embed into binary format String object.\n"],["load_gemspec","Bundler","classes/Bundler.html#method-c-load_gemspec","(file, validate = false)",""],["load_gemspec_uncached","Bundler","classes/Bundler.html#method-c-load_gemspec_uncached","(file, validate = false)",""],["load_marshal","Bundler","classes/Bundler.html#method-c-load_marshal","(data)",""],["load_method","RDoc::Store","classes/RDoc/Store.html#method-i-load_method","(klass_name, method_name)","<p>Loads ri data for <code>method_name</code> in <code>klass_name</code>\n"],["load_mime_types","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-load_mime_types","(file)","<p>Loads Apache-compatible mime.types in <code>file</code>.\n"],["load_options","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-load_options","()","<p>Loads options from .rdoc_options if the file exists, otherwise creates a\nnew RDoc::Options instance. …\n"],["load_page","RDoc::Store","classes/RDoc/Store.html#method-i-load_page","(page_name)","<p>Loads ri data for <code>page_name</code>\n"],["load_path_insert_index","Gem","classes/Gem.html#method-c-load_path_insert_index","()","<p>The index to insert activated gem paths into the $LOAD_PATH. The activated\ngem&#39;s paths are inserted …\n"],["load_paths","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-load_paths","()","<p>needed for inline\n"],["load_paths","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-load_paths","(name)",""],["load_paths","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-load_paths","()","<p>This is what we do in bundler/rubygems_ext full_require_paths is always\nimplemented in &gt;= 2.2.0\n"],["load_plugin","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-load_plugin","(name)","<p>Executes the plugins.rb file\n<p>@param [String] name of the plugin\n"],["load_plugins","Gem","classes/Gem.html#method-c-load_plugins","()","<p>Find the &#39;rubygems_plugin&#39; files in the latest installed gems and\nload them\n"],["load_private_key","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-load_private_key","(p1 = v1, p2 = v2)","<p>Loads the given private key identified by <em>id</em> and <em>data</em>.\n<p>An EngineError is raised of the OpenSSL::PKey is …\n"],["load_public_key","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-load_public_key","(p1 = v1, p2 = v2)","<p>Loads the given public key identified by <em>id</em> and <em>data</em>.\n<p>An EngineError is raised of the OpenSSL::PKey is …\n"],["load_random_file","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-load_random_file","(p1)","<p>Reads bytes from <em>filename</em> and adds them to the PRNG.\n"],["load_rdoc","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-load_rdoc","()","<p>Loads the RDoc generator\n"],["load_spec_files","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-load_spec_files","()",""],["load_stream","Psych","classes/Psych.html#method-c-load_stream","(yaml, legacy_filename = NOT_GIVEN, filename: nil, fallback: [])","<p>Load multiple documents given in <code>yaml</code>.  Returns the parsed\ndocuments as a list.  If a block is given, …\n"],["load_thorfile","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-load_thorfile","(path, content = nil, debug = false)","<p>Receives a path and load the thor file in the path. The file is evaluated\ninside the sandbox to avoid …\n"],["load_yaml","Gem","classes/Gem.html#method-c-load_yaml","()","<p>Loads YAML, preferring Psych\n"],["load_yaml","RDoc","classes/RDoc.html#method-c-load_yaml","()","<p>Loads the best available YAML library.\n"],["loaded_from","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-loaded_from","()",""],["local","Time","classes/Time.html#method-c-local","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre><code>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...\n</code></pre>\n"],["local_address","BasicSocket","classes/BasicSocket.html#method-i-local_address","()","<p>Returns an Addrinfo object for local address obtained by getsockname.\n<p>Note that addrinfo.protocol is filled …\n"],["local_index_file","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-local_index_file","()","<p>Path where the local index file is stored\n"],["local_method?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_method?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-local_method-3F","(instance, name)",""],["local_name","REXML::Functions","classes/REXML/Functions.html#method-c-local_name","( node_set=nil )","<p>UNTESTED\n"],["local_name","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-local_name","()",""],["local_name=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-local_name-3D","( name_str )",""],["local_override!","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-local_override-21","(path)",""],["local_overrides","Bundler::Settings","classes/Bundler/Settings.html#method-i-local_overrides","()",""],["local_platform","Bundler","classes/Bundler.html#method-c-local_platform","()",""],["local_root","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-local_root","()",""],["local_search","Bundler::Index","classes/Bundler/Index.html#method-i-local_search","(query, base = nil)",""],["local_specs","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-local_specs","(*)",""],["local_variable_defined?","Binding","classes/Binding.html#method-i-local_variable_defined-3F","(p1)","<p>Returns <code>true</code> if a local variable <code>symbol</code> exists.\n\n<pre><code>def foo\n  a = 1\n  binding.local_variable_defined?(:a) ...</code></pre>\n"],["local_variable_get","Binding","classes/Binding.html#method-i-local_variable_get","(p1)","<p>Returns the value of the local variable <code>symbol</code>.\n\n<pre><code>def foo\n  a = 1\n  binding.local_variable_get(:a) #=&gt; 1 ...</code></pre>\n"],["local_variable_get","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-local_variable_get","(name)",""],["local_variable_set","Binding","classes/Binding.html#method-i-local_variable_set","(p1, p2)","<p>Set local variable named <code>symbol</code> as <code>obj</code>.\n\n<pre><code>def foo\n  a = 1\n  bind = binding\n  bind.local_variable_set(:a, ...</code></pre>\n"],["local_variable_set","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-i-local_variable_set","(name, value)",""],["local_variables","Binding","classes/Binding.html#method-i-local_variables","()","<p>Returns the names of the binding&#39;s local variables as symbols.\n\n<pre><code>def foo\n  a = 1\n  2.times do |n|\n  ...</code></pre>\n"],["local_variables","Kernel","classes/Kernel.html#method-i-local_variables","()","<p>Returns the names of the current local variables.\n\n<pre><code>fred = 1\nfor i in 1..10\n   # ...\nend\nlocal_variables ...\n</code></pre>\n"],["local_variables","NameError","classes/NameError.html#method-i-local_variables","()","<p>Return a list of the local variable names defined where this NameError\nexception was raised.\n<p>Internal …\n"],["locale","WIN32OLE","classes/WIN32OLE.html#method-c-locale","()","<p>Returns current locale id (lcid). The default locale is\nWIN32OLE::LOCALE_SYSTEM_DEFAULT.\n\n<pre><code>lcid = WIN32OLE.locale\n</code></pre>\n"],["locale=","WIN32OLE","classes/WIN32OLE.html#method-c-locale-3D","(p1)","<p>Sets current locale id (lcid).\n\n<pre><code>WIN32OLE.locale = 1033 # set locale English(U.S)\nobj = WIN32OLE_VARIANT.new(&quot;$100,000&quot;, ...</code></pre>\n"],["locale_charmap","Encoding","classes/Encoding.html#method-c-locale_charmap","()","<p>Returns the locale charmap name. It returns nil if no appropriate\ninformation.\n\n<pre><code>Debian GNU/Linux\n  LANG=C ...\n</code></pre>\n"],["localtime","Time","classes/Time.html#method-i-localtime","(*args)","<p>Converts <em>time</em> to local time (using the local time zone in effect\nat the creation time of <em>time</em>) modifying …\n"],["location=","ERB","classes/ERB.html#method-i-location-3D","((filename, lineno))",""],["location_of_caller","Gem","classes/Gem.html#method-c-location_of_caller","(depth = 1)","<p>The file name and line number of the caller of the caller of this method.\n<p><code>depth</code> is how many layers up …\n"],["locations","Bundler::Settings","classes/Bundler/Settings.html#method-i-locations","(key)",""],["lock","Bundler::CLI","classes/Bundler/CLI.html#method-i-lock","()",""],["lock","Bundler::Definition","classes/Bundler/Definition.html#method-i-lock","(file, preserve_unknown_sections = false)",""],["lock","Bundler::ProcessLock","classes/Bundler/ProcessLock.html#method-c-lock","(bundle_path = Bundler.bundle_path)",""],["lock","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-lock","(opts = {})",""],["lock","Mutex","classes/Mutex.html#method-i-lock","()","<p>Attempts to grab the lock and waits if it isn&#39;t available. Raises\n<code>ThreadError</code> if <code>mutex</code> was locked …\n"],["lock","Net::HTTP","classes/Net/HTTP.html#method-i-lock","(path, body, initheader = nil)","<p>Sends a LOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["lock_sources","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-lock_sources","()",""],["locked?","Mutex","classes/Mutex.html#method-i-locked-3F","()","<p>Returns <code>true</code> if this lock is currently held by some thread.\n"],["locked_bundler_version","Bundler::Definition","classes/Bundler/Definition.html#method-i-locked_bundler_version","()",""],["locked_gems","Bundler","classes/Bundler.html#method-c-locked_gems","()",""],["locked_ruby_version","Bundler::Definition","classes/Bundler/Definition.html#method-i-locked_ruby_version","()",""],["locked_ruby_version_object","Bundler::Definition","classes/Bundler/Definition.html#method-i-locked_ruby_version_object","()",""],["log","BigMath","classes/BigMath.html#method-c-log","(p1, p2)","<p>Computes the natural logarithm of <code>decimal</code> to the specified\nnumber of digits of precision, <code>numeric</code>.\n<p>If …\n"],["log","CMath","classes/CMath.html#method-c-log","(z, b=::Math::E)","<p>Returns the natural logarithm of Complex. If a second argument is given, it\nwill be the base of logarithm. …\n"],["log","Logger","classes/Logger.html#method-i-log","(severity, message = nil, progname = nil)",""],["log","Math","classes/Math.html#method-c-log","(*args)",""],["log","Syslog","classes/Syslog.html#method-c-log","(*args)","<p>Log a message with the specified priority. Example:\n\n<pre><code>Syslog.log(Syslog::LOG_CRIT, &quot;Out of disk space&quot;) ...\n</code></pre>\n"],["log","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-log","(level, data)","<p>Logs <code>data</code> at <code>level</code> if the given level is above\nthe current log level.\n"],["log","WEBrick::Log","classes/WEBrick/Log.html#method-i-log","(level, data)","<p>Same as BasicLog#log\n"],["log10","CMath","classes/CMath.html#method-c-log10","(z)","<p>Returns the base 10 logarithm of <code>z</code>\n\n<pre><code>CMath.log10(-1) #=&gt; (0.0+1.3643763538418412i)\n</code></pre>\n"],["log10","Math","classes/Math.html#method-c-log10","(p1)","<p>Returns the base 10 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["log2","CMath","classes/CMath.html#method-c-log2","(z)","<p>Returns the base 2 logarithm of <code>z</code>\n\n<pre><code>CMath.log2(-1) =&gt; (0.0+4.532360141827194i)</code></pre>\n"],["log2","Math","classes/Math.html#method-c-log2","(p1)","<p>Returns the base 2 logarithm of <code>x</code>.\n<p>Domain: (0, INFINITY)\n<p>Codomain: (-INFINITY, INFINITY)\n"],["log_error","Bundler::FriendlyErrors","classes/Bundler/FriendlyErrors.html#method-i-log_error","(error)",""],["logging","Net::POP3","classes/Net/POP3.html#method-i-logging","(msg)","<p>debugging output for <code>msg</code>\n"],["login","Net::FTP","classes/Net/FTP.html#method-i-login","(user = \"anonymous\", passwd = nil, acct = nil)","<p>Logs in to the remote host.  The session must have been previously\nconnected.  If <code>user</code> is the string …\n"],["login","Net::IMAP","classes/Net/IMAP.html#method-i-login","(user, password)","<p>Sends a LOGIN command to identify the client and carries the plaintext\n<code>password</code> authenticating this  …\n"],["logo","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-logo","()",""],["logo=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-logo-3D","(url)",""],["logout","Net::IMAP","classes/Net/IMAP.html#method-i-logout","()","<p>Sends a LOGOUT command to inform the server that the client is done with\nthe connection.\n"],["long_desc","Bundler::Thor","classes/Bundler/Thor.html#method-c-long_desc","(long_description, options = {})","<p>Defines the long description of the next command.\n<p>Parameters\n<p>long description&lt;String&gt;\n"],["long_name","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-i-long_name","()",""],["lookup_color","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-lookup_color","(color)",""],["lookup_ring","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-lookup_ring","(timeout=5, &block)","<p>Looks up RingServers waiting <code>timeout</code> seconds.  RingServers\nwill be given <code>block</code> as a callback, which will …\n"],["lookup_ring_any","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-lookup_ring_any","(timeout=5)","<p>Returns the first found remote TupleSpace.  Any further recovered\nTupleSpaces can be found by calling …\n"],["lookup_server","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-lookup_server","(req)","<p>Finds the appropriate virtual host to handle <code>req</code>\n"],["loop","Kernel","classes/Kernel.html#method-i-loop","()","<p>Repeatedly executes the block.\n<p>If no block is given, an enumerator is returned instead.\n\n<pre><code>loop do\n  print ...</code></pre>\n"],["loopback?","IPAddr","classes/IPAddr.html#method-i-loopback-3F","()","<p>Returns true if the ipaddr is a loopback address.\n"],["ls","Net::FTP","classes/Net/FTP.html#method-i-ls","(*args)",""],["lshift!","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-lshift-21","(p1)",""],["lstat","File","classes/File.html#method-i-lstat","()","<p>Same as <code>IO#stat</code>, but does not follow the last symbolic link.\nInstead, reports on the link itself.\n\n<pre><code>File.symlink(&quot;testfile&quot;, ...</code></pre>\n"],["lstat","File","classes/File.html#method-c-lstat","(p1)","<p>Same as <code>File::stat</code>, but does not follow the last symbolic\nlink. Instead, reports on the link itself. …\n"],["lstat","Pathname","classes/Pathname.html#method-i-lstat","()","<p>See File.lstat.\n"],["lstrip","String","classes/String.html#method-i-lstrip","()","<p>Returns a copy of the receiver with leading whitespace removed. See also\nString#rstrip and String#strip …\n"],["lstrip!","String","classes/String.html#method-i-lstrip-21","()","<p>Removes leading whitespace from the receiver. Returns the altered receiver,\nor <code>nil</code> if no change was made. …\n"],["lsub","Net::IMAP","classes/Net/IMAP.html#method-i-lsub","(refname, mailbox)","<p>Sends a LSUB command, and returns a subset of names from the set of names\nthat the user has declared …\n"],["ludecomp","LUSolve","classes/LUSolve.html#method-i-ludecomp","(a,n,zero=0,one=1)","<p>Performs LU decomposition of the n by n matrix a.\n"],["lusolve","LUSolve","classes/LUSolve.html#method-i-lusolve","(a,b,ps,zero=0.0)","<p>Solves a*x = b for x, using LU decomposition.\n<p>a is a matrix, b is a constant vector, x is the solution …\n"],["lutime","File","classes/File.html#method-c-lutime","(*args)","<p>Sets the access and modification times of each named file to the first two\narguments. If a file is a …\n"],["maglev?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-maglev-3F","()",""],["magnitude","Complex","classes/Complex.html#method-i-magnitude","()","<p>Returns the absolute part of its polar form.\n\n<pre><code>Complex(-1).abs         #=&gt; 1\nComplex(3.0, -4.0).abs  #=&gt; ...\n</code></pre>\n"],["magnitude","Float","classes/Float.html#method-i-magnitude","()","<p>Returns the absolute value of <code>float</code>.\n\n<pre><code>(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n34.56.abs      ...\n</code></pre>\n"],["magnitude","Integer","classes/Integer.html#method-i-magnitude","()","<p>Returns the absolute value of <code>int</code>.\n\n<pre><code>(-12345).abs   #=&gt; 12345\n-12345.abs     #=&gt; 12345\n12345.abs      #=&gt; ...\n</code></pre>\n"],["magnitude","Numeric","classes/Numeric.html#method-i-magnitude","()","<p>Returns the absolute value of <code>num</code>.\n\n<pre><code>12.abs         #=&gt; 12\n(-34.56).abs   #=&gt; 34.56\n-34.56.abs     #=&gt; 34.56\n</code></pre>\n"],["magnitude","Rational","classes/Rational.html#method-i-magnitude","()","<p>Returns the absolute value of <code>rat</code>.\n\n<pre><code>(1/2r).abs    #=&gt; (1/2)\n(-1/2r).abs   #=&gt; (1/2)\n</code></pre>\n<p>Rational#magnitude is …\n"],["mail","Net::POPMail","classes/Net/POPMail.html#method-i-mail","( dest = +'' )",""],["mailfrom","Net::SMTP","classes/Net/SMTP.html#method-i-mailfrom","(from_addr)",""],["mails","Net::POP3","classes/Net/POP3.html#method-i-mails","()","<p>Returns an array of Net::POPMail objects, representing all the messages on\nthe server.  This array is …\n"],["main","IRB::Context","classes/IRB/Context.html#method-i-main","()","<p>The top-level workspace, see WorkSpace#main\n"],["main","RDoc::Store","classes/RDoc/Store.html#method-i-main","()","<p>Gets the main page for this RDoc store.  This page is used as the root of\nthe RDoc server.\n"],["main","Thread","classes/Thread.html#method-c-main","()","<p>Returns the main thread.\n"],["main=","RDoc::Store","classes/RDoc/Store.html#method-i-main-3D","(page)","<p>Sets the main page for this RDoc store.\n"],["main_irb","IRB::JobManager","classes/IRB/JobManager.html#method-i-main_irb","()","<p>Returns the top level irb session.\n"],["main_thread","IRB::JobManager","classes/IRB/JobManager.html#method-i-main_thread","()","<p>Returns the top level thread.\n"],["major?","Bundler::GemVersionPromoter","classes/Bundler/GemVersionPromoter.html#method-i-major-3F","()","<p>@return [bool] Convenience method for testing value of level variable.\n"],["major_deprecation","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-major_deprecation","(major_version, message)",""],["major_version","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-major_version","()","<p>Returns major version.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...\n</code></pre>\n"],["major_version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-major_version","()","<p>Returns the type library major version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...\n</code></pre>\n"],["make","RSS::Maker","classes/RSS/Maker.html#method-c-make","(version, &block)","<p>Builder for an RSS object Creates an object of the type passed in\n<code>args</code>\n<p>Executes the <code>block</code> to populate …\n"],["make","RSS::Maker::RSSBase","classes/RSS/Maker/RSSBase.html#method-i-make","()",""],["make","RSS::Maker::RSSBase","classes/RSS/Maker/RSSBase.html#method-c-make","(*args, &block)",""],["make_affine!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-make_affine-21","()",""],["make_compiler","ERB","classes/ERB.html#method-i-make_compiler","(trim_mode)","<p>Creates a new compiler for ERB.  See ERB::Compiler.new for details\n"],["make_edge","Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return\n[Edge] The edge this action adds …\n"],["make_edge","Bundler::Molinillo::DependencyGraph::DeleteEdge","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html#method-i-make_edge","(graph)","<p>@param  [DependencyGraph] graph the graph to find vertices from @return\n[Edge] The edge this action adds …\n"],["make_expires","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-make_expires","(sec=nil)","<p>Returns an expiry Time based on <code>sec</code> which can be one of:\n<p>Numeric &mdash; <code>sec</code> seconds into the future\n<p><code>true</code> &mdash; the expiry …\n"],["make_link","Pathname","classes/Pathname.html#method-i-make_link","(p1)","<p>Creates a hard link at <em>pathname</em>.\n<p>See File.link.\n"],["make_methods","Syslog::Logger","classes/Syslog/Logger.html#method-c-make_methods","(meth)","<p>Builds a methods for level <code>meth</code>.\n"],["make_passwd","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a basic password entry\n"],["make_passwd","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-c-make_passwd","(realm, user, pass)","<p>Used by UserDB to create a digest password entry\n"],["make_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-make_passwd","(realm, user, pass)","<p>Creates an obscured password in <code>realm</code> with <code>user</code>\nand <code>password</code> using the auth_type of this database.\n"],["make_regexp","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-make_regexp","(schemes = nil)","<p>Returns Regexp that is default self.regexp, unless <code>schemes</code> is\nprovided. Then it is a Regexp.union with …\n"],["make_socket","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-make_socket","(address, interface_address=nil, multicast_interface=0)","<p>Creates a socket at <code>address</code>\n<p>If <code>address</code> is multicast address then\n<code>interface_address</code> and <code>multicast_interface</code> …\n"],["make_switch","OptionParser","classes/OptionParser.html#method-i-make_switch","(opts, block = nil)","<p>Creates an OptionParser::Switch from the parameters. The parsed argument\nvalue is passed to the given …\n"],["make_symlink","Pathname","classes/Pathname.html#method-i-make_symlink","(p1)","<p>Creates a symbolic link.\n<p>See File.symlink.\n"],["make_thread_list","DEBUGGER__","classes/DEBUGGER__.html#method-c-make_thread_list","()",""],["make_tuple","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-make_tuple","(ary)","<p>Creates a Rinda::Tuple for <code>ary</code>.\n"],["make_variable_map","RDoc::Store","classes/RDoc/Store.html#method-i-make_variable_map","(variables)","<p>Converts the variable =&gt; ClassModule map <code>variables</code> from a C\nparser into a variable =&gt; class name …\n"],["makedirs","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["makedirs","FileUtils","classes/FileUtils.html#method-c-makedirs","(list, mode: nil, noop: nil, verbose: nil)",""],["maker_target","RSS::Atom::ContentModel","classes/RSS/Atom/ContentModel.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::Feed::Logo","classes/RSS/Atom/Feed/Logo.html#method-i-maker_target","(target)",""],["maker_target","RSS::Atom::PersonConstruct","classes/RSS/Atom/PersonConstruct.html#method-i-maker_target","(target)",""],["maker_target","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-i-maker_target","(target)",""],["maker_target","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-maker_target","(target)",""],["makers","RSS::Maker","classes/RSS/Maker.html#method-c-makers","()","<p>Returns collection of supported makers\n"],["malloc","Fiddle","classes/Fiddle.html#method-c-malloc","(p1)","<p>Allocate <code>size</code> bytes of memory and return the integer memory\naddress for the allocated memory.\n"],["malloc","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-c-malloc","(types, func = nil)","<p>Allocates a C struct with the <code>types</code> provided.\n<p>When the instance is garbage collected, the C function  …\n"],["malloc","Fiddle::CUnionEntity","classes/Fiddle/CUnionEntity.html#method-c-malloc","(types, func=nil)","<p>Allocates a C union the <code>types</code> provided.\n<p>When the instance is garbage collected, the C function <code>func</code> is\n…\n"],["malloc","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-c-malloc","(p1, p2 = v2)","<p>Allocate <code>size</code> bytes of memory and associate it with an\noptional <code>freefunc</code> that will be called when the …\n"],["malloc_allocated_size","GC","classes/GC.html#method-c-malloc_allocated_size","()","<p>Returns the size of memory allocated by malloc().\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["malloc_allocations","GC","classes/GC.html#method-c-malloc_allocations","()","<p>Returns the number of malloc() allocations.\n<p>Only available if ruby was built with <code>CALC_EXACT_MALLOC_SIZE</code> …\n"],["map","Array","classes/Array.html#method-i-map","()","<p>Invokes the given block once for each element of <code>self</code>.\n<p>Creates a new array containing the values returned …\n"],["map","Bundler::Thor","classes/Bundler/Thor.html#method-c-map","(mappings = nil)","<p>Maps an input to a command. If you define:\n\n<pre><code>map &quot;-T&quot; =&gt; &quot;list&quot;\n</code></pre>\n<p>Running:\n"],["map","Enumerable","classes/Enumerable.html#method-i-map","()","<p>Returns a new array with the results of running <em>block</em> once for\nevery element in <em>enum</em>.\n<p>If no block is given, …\n"],["map","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-map","()",""],["map","Psych::Coder","classes/Psych/Coder.html#method-i-map","(tag = @tag, style = @style)","<p>Emit a map.  The coder will be yielded to the block.\n"],["map!","Array","classes/Array.html#method-i-map-21","()","<p>Invokes the given block once for each element of <code>self</code>,\nreplacing the element with the value returned …\n"],["map!","Set","classes/Set.html#method-i-map-21","()",""],["map=","Psych::Coder","classes/Psych/Coder.html#method-i-map-3D","(map)","<p>Emit a map with <code>value</code>\n"],["mapping?","Psych::Nodes::Mapping","classes/Psych/Nodes/Mapping.html#method-i-mapping-3F","()",""],["mapping?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-mapping-3F","()",""],["mark","Psych::Parser","classes/Psych/Parser.html#method-i-mark","()","<p>Returns a Psych::Parser::Mark object that contains line, column, and index\ninformation.\n"],["markup","RDoc::Text","classes/RDoc/Text.html#method-i-markup","(text)","<p>Convert a string in markup format into HTML.\n<p>Requires the including class to implement #formatter\n"],["marshal_dump","Delegator","classes/Delegator.html#method-i-marshal_dump","()","<p>Serialization support for the object returned by _<em>getobj</em>_.\n"],["marshal_dump","OpenStruct","classes/OpenStruct.html#method-i-marshal_dump","()","<p>Provides marshalling support for use by the Marshal library.\n"],["marshal_dump","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_dump","()","<p>Dumps this AnyMethod for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_dump","()","<p>Dumps this Attr for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::Constant","classes/RDoc/Constant.html#method-i-marshal_dump","()","<p>Dumps this Constant for use by ri.  See also #marshal_load\n"],["marshal_dump","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-marshal_dump","()","<p>Dumps this TopLevel for use by ri.  See also #marshal_load\n"],["marshal_dump_old","Date","classes/Date.html#method-i-marshal_dump_old","()",""],["marshal_load","Delegator","classes/Delegator.html#method-i-marshal_load","(data)","<p>Reinitializes delegation from a serialized object.\n"],["marshal_load","OpenStruct","classes/OpenStruct.html#method-i-marshal_load","(x)","<p>Provides marshalling support for use by the Marshal library.\n"],["marshal_load","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-marshal_load","(array)","<p>Loads this AnyMethod from <code>array</code>.  For a loaded AnyMethod the\nfollowing methods will return cached values: …\n"],["marshal_load","RDoc::Attr","classes/RDoc/Attr.html#method-i-marshal_load","(array)","<p>Loads this Attr from <code>array</code>.  For a loaded Attr the following\nmethods will return cached values:\n<p>#full_name …\n"],["marshal_load","RDoc::Constant","classes/RDoc/Constant.html#method-i-marshal_load","(array)","<p>Loads this Constant from <code>array</code>.  For a loaded Constant the\nfollowing methods will return cached values: …\n"],["marshal_version","Gem","classes/Gem.html#method-c-marshal_version","()","<p>The version of the Marshal format for your Ruby.\n"],["mask","IPAddr","classes/IPAddr.html#method-i-mask","(prefixlen)","<p>Returns a new ipaddr built by masking IP address with the given\nprefixlen/netmask. (e.g. 8, 64, “255.255.255.0”, …\n"],["mask","Syslog","classes/Syslog.html#method-c-mask","()","<p>Returns the log priority mask in effect. The mask is not reset by opening\nor closing syslog.\n"],["mask!","IPAddr","classes/IPAddr.html#method-i-mask-21","(mask)","<p>Set current netmask to given mask.\n"],["mask=","Syslog","classes/Syslog.html#method-c-mask-3D","(p1)","<p>Sets the log priority mask. A method LOG_UPTO is defined to make it easier\nto set mask values. Example: …\n"],["match","ACL::ACLEntry","classes/ACL/ACLEntry.html#method-i-match","(addr)","<p>Matches <code>addr</code> against this entry.\n"],["match","ACL::ACLList","classes/ACL/ACLList.html#method-i-match","(addr)","<p>Matches <code>addr</code> against each ACLEntry in this list.\n"],["match","OptionParser::CompletingHash","classes/OptionParser/CompletingHash.html#method-i-match","(key)","<p>Completion for hash key.\n"],["match","REXML::IOSource","classes/REXML/IOSource.html#method-i-match","( pattern, cons=false )",""],["match","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-match","(element, path, namespaces=EMPTY_HASH)",""],["match","REXML::Source","classes/REXML/Source.html#method-i-match","(pattern, cons=false)",""],["match","REXML::XPath","classes/REXML/XPath.html#method-c-match","(element, path=nil, namespaces=nil, variables={}, options={})","<p>Returns an array of nodes matching a given XPath.\n"],["match","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-match","(path_stack, nodeset)",""],["match","Regexp","classes/Regexp.html#method-i-match","(p1, p2 = v2)","<p>Returns a <code>MatchData</code> object describing the match, or\n<code>nil</code> if there was no match. This is equivalent to …\n"],["match","Rinda::Template","classes/Rinda/Template.html#method-i-match","(tuple)","<p>Matches this template against <code>tuple</code>.  The <code>tuple</code>\nmust be the same size as the template.  An element with …\n"],["match","Rinda::TemplateEntry","classes/Rinda/TemplateEntry.html#method-i-match","(tuple)","<p>Matches this TemplateEntry against <code>tuple</code>.  See Template#match\nfor details on how a Template matches a …\n"],["match","String","classes/String.html#method-i-match","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then invokes its <code>match</code> method on <em>str</em>.  If …\n"],["match","Symbol","classes/Symbol.html#method-i-match","(*args)","<p>Returns <code>sym.to_s.match</code>.\n"],["match?","CSV::MatchP","classes/CSV/MatchP.html#method-i-match-3F","(pattern)",""],["match?","Regexp","classes/Regexp.html#method-i-match-3F","(*args)","<p>Returns a <code>true</code> or <code>false</code> indicates whether the\nregexp is matched or not without updating $~ and other …\n"],["match?","String","classes/String.html#method-i-match-3F","(*args)","<p>Converts <em>pattern</em> to a <code>Regexp</code> (if it isn&#39;t already\none), then returns a <code>true</code> or <code>false</code> indicates\nwhether …\n"],["match?","StringScanner","classes/StringScanner.html#method-i-match-3F","(p1)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Returns the length of the match, …\n"],["match?","Symbol","classes/Symbol.html#method-i-match-3F","(*args)","<p>Returns <code>sym.to_s.match?</code>.\n"],["match_platform","Bundler::MatchPlatform","classes/Bundler/MatchPlatform.html#method-i-match_platform","(p)",""],["match_to","REXML::Source","classes/REXML/Source.html#method-i-match_to","( char, pattern )",""],["match_to_consume","REXML::Source","classes/REXML/Source.html#method-i-match_to_consume","( char, pattern )",""],["matched","StringScanner","classes/StringScanner.html#method-i-matched","()","<p>Returns the last matched string.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)     # -&gt; 4\ns.matched ...\n</code></pre>\n"],["matched?","StringScanner","classes/StringScanner.html#method-i-matched-3F","()","<p>Returns <code>true</code> iff the last match was successful.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.match?(/\\w+/)  ...\n</code></pre>\n"],["matched_size","StringScanner","classes/StringScanner.html#method-i-matched_size","()","<p>Returns the size of the most recent match (see #matched), or\n<code>nil</code> if there was no recent match.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["matches","Bundler::Thor::LineEditor::Readline::PathCompletion","classes/Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-i-matches","()",""],["matches?","REXML::Entity","classes/REXML/Entity.html#method-c-matches-3F","(string)","<p>Evaluates whether the given string matches an entity definition, returning\ntrue if so, and false otherwise. …\n"],["matches?","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-matches-3F","( event )",""],["matches?","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-matches-3F","(event)",""],["matches?","REXML::Validation::Sequence","classes/REXML/Validation/Sequence.html#method-i-matches-3F","(event)",""],["matches_for_glob","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-matches_for_glob","(glob)",""],["materialize","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-materialize","(deps, missing_specs = nil)",""],["materialized_for_all_platforms","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-materialized_for_all_platforms","()","<p>Materialize for all the specs in the spec set, regardless of what platform\nthey&#39;re for This is in …\n"],["max","Array","classes/Array.html#method-i-max","(*args)","<p>Returns the object in <em>ary</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max","Enumerable","classes/Enumerable.html#method-i-max","(*args)","<p>Returns the object in <em>enum</em> with the maximum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["max","Range","classes/Range.html#method-i-max","(*args)","<p>Returns the maximum value in the range. Returns <code>nil</code> if the\nbegin value of the range larger than the end …\n"],["max","SizedQueue","classes/SizedQueue.html#method-i-max","()","<p>Returns the maximum size of the queue.\n"],["max=","SizedQueue","classes/SizedQueue.html#method-i-max-3D","(p1)","<p>Sets the maximum size of the queue to the given <code>number</code>.\n"],["max_by","Enumerable","classes/Enumerable.html#method-i-max_by","(*args)","<p>Returns the object in <em>enum</em> that gives the maximum value from the\ngiven block.\n<p>If no block is given, an …\n"],["max_flag_count","Net::IMAP","classes/Net/IMAP.html#method-c-max_flag_count","()","<p>Returns the max number of flags interned to symbols.\n"],["max_flag_count=","Net::IMAP","classes/Net/IMAP.html#method-c-max_flag_count-3D","(count)","<p>Sets the max number of flags interned to symbols.\n"],["max_nesting","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting","()","<p>This integer returns the maximum level of data structure nesting in the\ngenerated JSON, max_nesting = …\n"],["max_nesting=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-max_nesting-3D","(p1)","<p>This sets the maximum level of data structure nesting in the generated JSON\nto the integer depth, max_nesting …\n"],["max_retries=","Net::HTTP","classes/Net/HTTP.html#method-i-max_retries-3D","(retries)","<p>Maximum number of times to retry an idempotent request in case of\nNet::ReadTimeout, IOError, EOFError …\n"],["max_version=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-max_version-3D","(version)","<p>Sets the upper bound of the supported SSL/TLS protocol version. See\n#min_version= for the possible values. …\n"],["maxgroups","Process","classes/Process.html#method-c-maxgroups","()","<p>Returns the maximum number of gids allowed in the supplemental group access\nlist.\n\n<pre><code>Process.maxgroups   ...\n</code></pre>\n"],["maxgroups=","Process","classes/Process.html#method-c-maxgroups-3D","(p1)","<p>Sets the maximum number of gids allowed in the supplemental group access\nlist.\n"],["md5_available?","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-md5_available-3F","()",""],["mday","Date","classes/Date.html#method-i-mday","()","<p>Returns the day of the month (1-31).\n\n<pre><code>Date.new(2001,2,3).mday           #=&gt; 3\n</code></pre>\n"],["mday","Time","classes/Time.html#method-i-mday","()","<p>Returns the day of the month (1..n) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:03 -0600\nt.day      ...\n</code></pre>\n"],["mdtm","Net::FTP","classes/Net/FTP.html#method-i-mdtm","(filename)","<p>Returns the raw last modification time of the (remote) file in the format\n“YYYYMMDDhhmmss” …\n"],["measure","Benchmark","classes/Benchmark.html#method-c-measure","(label = \"\")","<p>Returns the time used to execute the given block as a Benchmark::Tms\nobject. Takes <code>label</code> option.\n\n<pre><code>require ...\n</code></pre>\n"],["media_subtype","Net::IMAP::BodyTypeBasic","classes/Net/IMAP/BodyTypeBasic.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMessage","classes/Net/IMAP/BodyTypeMessage.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeMultipart","classes/Net/IMAP/BodyTypeMultipart.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["media_subtype","Net::IMAP::BodyTypeText","classes/Net/IMAP/BodyTypeText.html#method-i-media_subtype","()","<p>Obsolete: use <code>subtype</code> instead.  Calling this will generate a\nwarning message to <code>stderr</code>, then return the …\n"],["mem_check_start","OpenSSL","classes/OpenSSL.html#method-c-mem_check_start","()","<p>Calls CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON). Starts tracking memory\nallocations. See also OpenSSL.print_mem_leaks …\n"],["member?","CSV::Row","classes/CSV/Row.html#method-i-member-3F","(header)",""],["member?","DBM","classes/DBM.html#method-i-member-3F","(p1)","<p>Returns true if the database contains the specified key, false otherwise.\n"],["member?","ENV","classes/ENV.html#method-c-member-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>name</code>.\n"],["member?","Enumerable","classes/Enumerable.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if any member of <em>enum</em> equals\n<em>obj</em>. Equality is tested using <code>==</code>.\n\n<pre><code>IO.constants.include? :SEEK_SET ...\n</code></pre>\n"],["member?","GDBM","classes/GDBM.html#method-i-member-3F","(p1)","<p>Returns true if the given key <em>k</em> exists within the database.\nReturns false otherwise.\n"],["member?","Hash","classes/Hash.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the given key is present in <em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.has_key?(&quot;a&quot;)   #=&gt; ...\n</code></pre>\n"],["member?","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>key</code> is registered\n"],["member?","Range","classes/Range.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if <code>obj</code> is an element of the range,\n<code>false</code> otherwise.  If begin and end are numeric, comparison …\n"],["member?","SDBM","classes/SDBM.html#method-i-member-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>key</code>.\n"],["member?","Set","classes/Set.html#method-i-member-3F","(o)",""],["members","Struct","classes/Struct.html#method-i-members","()","<p>Returns the struct members as an array of symbols:\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = ...</code></pre>\n"],["members","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-members","(group)","<p>Retrieve the list of members from <code>group</code>\n"],["memberwise","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-memberwise","(op, x)","<p>Returns a new Tms object obtained by memberwise operation <code>op</code>\nof the individual times for this Tms object …\n"],["memsize_of","ObjectSpace","classes/ObjectSpace.html#method-c-memsize_of","(p1)","<p>Return consuming memory size of obj.\n<p>Note that the return size is incomplete.  You need to deal with this …\n"],["memsize_of_all","ObjectSpace","classes/ObjectSpace.html#method-c-memsize_of_all","(p1 = v1)","<p>Return consuming memory size of all living objects.\n<p>If <code>klass</code> (should be Class object) is given, return …\n"],["merge","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-merge","(set)",""],["merge","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-merge","(other_hash, &block)",""],["merge","Hash","classes/Hash.html#method-i-merge","(*args)","<p>Returns a new hash that combines the contents of the receiver and the\ncontents of the given hashes.\n<p>If …\n"],["merge","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-merge","(p1)",""],["merge","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-merge","(class_module)","<p>Merges <code>class_module</code> into this ClassModule.\n<p>The data in <code>class_module</code> is preferred over the receiver.\n"],["merge","Set","classes/Set.html#method-i-merge","(enum)","<p>Merges the elements of the given enumerable object to the set and returns\nself.\n"],["merge","URI::Generic","classes/URI/Generic.html#method-i-merge","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["merge!","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-merge-21","(other_hash)",""],["merge!","Hash","classes/Hash.html#method-i-merge-21","(*args)","<p>Adds the contents of the given hashes to the receiver.\n<p>If no block is given, entries with duplicate keys …\n"],["merge!","URI::Generic","classes/URI/Generic.html#method-i-merge-21","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["message","Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","classes/Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html#method-i-message","()",""],["message","Bundler::Molinillo::NoSuchDependencyError","classes/Bundler/Molinillo/NoSuchDependencyError.html#method-i-message","()","<p>The error message for the missing dependency, including the specifications\nthat had this dependency. …\n"],["message","Bundler::NoSpaceOnDeviceError","classes/Bundler/NoSpaceOnDeviceError.html#method-i-message","()",""],["message","Bundler::OperationNotSupportedError","classes/Bundler/OperationNotSupportedError.html#method-i-message","()",""],["message","Bundler::PermissionError","classes/Bundler/PermissionError.html#method-i-message","()",""],["message","Bundler::TemporaryResourceError","classes/Bundler/TemporaryResourceError.html#method-i-message","()",""],["message","Bundler::VirtualProtocolError","classes/Bundler/VirtualProtocolError.html#method-i-message","()",""],["message","Exception","classes/Exception.html#method-i-message","()","<p>Returns the result of invoking <code>exception.to_s</code>. Normally this\nreturns the exception&#39;s message or name. …\n"],["message","Net::ReadTimeout","classes/Net/ReadTimeout.html#method-i-message","()",""],["message","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-message","()","<p>The first line of the human readable reply text\n"],["message","Net::WriteTimeout","classes/Net/WriteTimeout.html#method-i-message","()",""],["message","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-message","()","<p>Default stringizing method to emit standard error message.\n"],["message_loop","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-c-message_loop","()","<p>Translates and dispatches Windows message.\n"],["message_with_trees","Bundler::Molinillo::VersionConflict","classes/Bundler/Molinillo/VersionConflict.html#method-i-message_with_trees","(opts = {})","<p>@return [String] An error message that includes requirement trees,\n\n<pre><code>which is much more detailed &amp; customizable ...\n</code></pre>\n"],["meta_vars","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-meta_vars","()","<p>This method provides the metavariables defined by the revision 3 of “The\nWWW Common Gateway Interface …\n"],["method","Object","classes/Object.html#method-i-method","(p1)","<p>Looks up the named method as a receiver in <em>obj</em>, returning a\n<code>Method</code> object (or raising <code>NameError</code>). The …\n"],["method_added","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-method_added","(meth)","<p>Fire this callback whenever a method is added. Added methods are tracked as\ncommands by invoking the …\n"],["method_added","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-method_added","(id)",""],["method_defined?","Module","classes/Module.html#method-i-method_defined-3F","(*args)","<p>Returns <code>true</code> if the named method is defined by <em>mod</em>. \nIf <em>inherit</em> is set, the lookup will also search  …\n"],["method_file","RDoc::Store","classes/RDoc/Store.html#method-i-method_file","(klass_name, method_name)","<p>Path to the ri data for <code>method_name</code> in <code>klass_name</code>\n"],["method_id","TracePoint","classes/TracePoint.html#method-i-method_id","()","<p>Return the name at the definition of the method being called\n"],["method_missing","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-method_missing","(name, *args)",""],["method_missing","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-i-method_missing","(name, *args, &blk)",""],["method_missing","Bundler::Plugin::DSL","classes/Bundler/Plugin/DSL.html#method-i-method_missing","(name, *args)",""],["method_missing","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced remote object.\n"],["method_missing","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-method_missing","(msg_id, *a, &b)","<p>Routes method calls to the referenced remote object.\n"],["method_missing","Delegator","classes/Delegator.html#method-i-method_missing","(m, *args, &block)","<p>Handles the magic of delegation through _<em>getobj</em>_.\n"],["method_missing","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-method_missing","( id, *args )",""],["method_missing","WIN32OLE","classes/WIN32OLE.html#method-i-method_missing","(*args)","<p>Calls WIN32OLE#invoke method.\n"],["method_missing","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-method_missing","(*args)","<p>Returns value specified by the member name of VT_RECORD OLE variable. Or\nsets value specified by the …\n"],["method_option","Bundler::Thor","classes/Bundler/Thor.html#method-c-method_option","(name, options = {})","<p>Adds an option to the set of method options. If :for is given as option, it\nallows you to change the …\n"],["method_options","Bundler::Thor","classes/Bundler/Thor.html#method-c-method_options","(options = nil)","<p>Declares the options for the next command to be declared.\n<p>Parameters\n<p>Hash[Symbol =&gt; Object] &mdash; The hash …\n"],["methods","Delegator","classes/Delegator.html#method-i-methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["methods","Object","classes/Object.html#method-i-methods","(*args)","<p>Returns a list of the names of public and protected methods of\n<em>obj</em>. This will include all the methods …\n"],["methods","WIN32OLE","classes/WIN32OLE.html#method-i-methods","(*args)","<p>By overriding Object#methods, WIN32OLE might work well with did_you_mean\ngem. This is experimental.\n\n<pre><code>require ...\n</code></pre>\n"],["methods_by_type","RDoc::Context","classes/RDoc/Context.html#method-i-methods_by_type","(section = nil)","<p>Breaks method_list into a nested hash by type (<code>&#39;class&#39;</code>\nor <code>&#39;instance&#39;</code>) and visibility …\n"],["methods_matching","RDoc::Context","classes/RDoc/Context.html#method-i-methods_matching","(methods, singleton = false, &block)","<p>Yields AnyMethod and Attr entries matching the list of names in\n<code>methods</code>.\n"],["mime_split","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-mime_split","()","<p>Splits the type attribute into an array, e.g. [“text”, “xml”]\n"],["mime_type","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-mime_type","(filename, mime_tab)","<p>Returns the mime type of <code>filename</code> from the list in\n<code>mime_tab</code>.  If no mime type was found application/octet-stream\n…\n"],["min","Array","classes/Array.html#method-i-min","(*args)","<p>Returns the object in <em>ary</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","DateTime","classes/DateTime.html#method-i-min","()","<p>Returns the minute (0-59).\n\n<pre><code>DateTime.new(2001,2,3,4,5,6).min          #=&gt; 5\n</code></pre>\n"],["min","Enumerable","classes/Enumerable.html#method-i-min","(*args)","<p>Returns the object in <em>enum</em> with the minimum value. The first form\nassumes all objects implement <code>Comparable</code> …\n"],["min","Range","classes/Range.html#method-i-min","(*args)","<p>Returns the minimum value in the range. Returns <code>nil</code> if the\nbegin value of the range is larger than the …\n"],["min","Time","classes/Time.html#method-i-min","()","<p>Returns the minute of the hour (0..59) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:25:51 -0600\nt.min   ...\n</code></pre>\n"],["min_by","Enumerable","classes/Enumerable.html#method-i-min_by","(*args)","<p>Returns the object in <em>enum</em> that gives the minimum value from the\ngiven block.\n<p>If no block is given, an …\n"],["min_version=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-min_version-3D","(version)","<p>Sets the lower bound on the supported SSL/TLS protocol version. The version\nmay be specified by an integer …\n"],["mingw?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-mingw-3F","()",""],["minmax","Enumerable","classes/Enumerable.html#method-i-minmax","()","<p>Returns a two element array which contains the minimum and the maximum\nvalue in the enumerable.  The …\n"],["minmax_by","Enumerable","classes/Enumerable.html#method-i-minmax_by","()","<p>Returns a two element array containing the objects in <em>enum</em> that\ncorrespond to the minimum and maximum …\n"],["minor?","Bundler::GemVersionPromoter","classes/Bundler/GemVersionPromoter.html#method-i-minor-3F","()","<p>@return [bool] Convenience method for testing value of level variable.\n"],["minor_version","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-minor_version","()","<p>Returns minor version.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;)\nputs ...\n</code></pre>\n"],["minor_version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-minor_version","()","<p>Returns the type library minor version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...\n</code></pre>\n"],["minute","DateTime","classes/DateTime.html#method-i-minute","()","<p>Returns the minute (0-59).\n\n<pre><code>DateTime.new(2001,2,3,4,5,6).min          #=&gt; 5\n</code></pre>\n"],["minute=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-minute-3D","(minute)",""],["minute=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-minute-3D","(minute)",""],["mirror_for","Bundler::Settings","classes/Bundler/Settings.html#method-i-mirror_for","(uri)",""],["missing_extensions?","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-missing_extensions-3F","()","<p>This is defined directly to avoid having to load every installed spec\n"],["missing_lockfile_dependencies","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-missing_lockfile_dependencies","(all_spec_names)",""],["missing_specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-missing_specs","()",""],["missing_specs?","Bundler::Definition","classes/Bundler/Definition.html#method-i-missing_specs-3F","()",""],["mjd","Date","classes/Date.html#method-i-mjd","()","<p>Returns the modified Julian day number.  This is a whole number, which is\nadjusted by the offset as the …\n"],["mkcol","Net::HTTP","classes/Net/HTTP.html#method-i-mkcol","(path, body = nil, initheader = nil)","<p>Sends a MKCOL request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["mkdir","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates one or more directories.\n\n<pre><code>Bundler::FileUtils.mkdir &#39;test&#39;\nBundler::FileUtils.mkdir %w( tmp data ...</code></pre>\n"],["mkdir","Dir","classes/Dir.html#method-c-mkdir","(p1, p2 = v2)","<p>Makes a new directory named by <em>string</em>, with permissions specified\nby the optional parameter <em>anInteger</em> …\n"],["mkdir","FileUtils","classes/FileUtils.html#method-c-mkdir","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates one or more directories.\n\n<pre><code>FileUtils.mkdir &#39;test&#39;\nFileUtils.mkdir %w( tmp data )\nFileUtils.mkdir ...\n</code></pre>\n"],["mkdir","Net::FTP","classes/Net/FTP.html#method-i-mkdir","(dirname)","<p>Creates a remote directory.\n"],["mkdir","Pathname","classes/Pathname.html#method-i-mkdir","(p1 = v1)","<p>Create the referenced directory.\n<p>See Dir.mkdir.\n"],["mkdir","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-mkdir","(*path)","<p>Same as Dir.mkdir, except multiple directories are allowed.\n"],["mkdir_p","Bundler","classes/Bundler.html#method-c-mkdir_p","(path, options = {})",""],["mkdir_p","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates a directory and all its parent directories. For example,\n\n<pre><code>Bundler::FileUtils.mkdir_p &#39;/usr/local/lib/ruby&#39;\n</code></pre>\n"],["mkdir_p","FileUtils","classes/FileUtils.html#method-c-mkdir_p","(list, mode: nil, noop: nil, verbose: nil)","<p>Creates a directory and all its parent directories. For example,\n\n<pre><code>FileUtils.mkdir_p &#39;/usr/local/lib/ruby&#39;\n</code></pre>\n"],["mkfifo","File","classes/File.html#method-c-mkfifo","(*args)","<p>Creates a FIFO special file with name <em>file_name</em>.  <em>mode</em>\nspecifies the FIFO&#39;s permissions. It is modified …\n"],["mkpath","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","FileUtils","classes/FileUtils.html#method-c-mkpath","(list, mode: nil, noop: nil, verbose: nil)",""],["mkpath","Pathname","classes/Pathname.html#method-i-mkpath","()","<p>Creates a full path, including any intermediate directories that don&#39;t\nyet exist.\n<p>See FileUtils.mkpath …\n"],["mktime","Time","classes/Time.html#method-c-mktime","(*args)","<p>Same as Time::gm, but interprets the values in the local time zone.\n\n<pre><code>Time.local(2000,&quot;jan&quot;,1,20,15,1)  ...\n</code></pre>\n"],["mktmpdir","Dir","classes/Dir.html#method-c-mktmpdir","(prefix_suffix=nil, *rest)","<p>Dir.mktmpdir creates a temporary directory.\n<p>The directory is created with 0700 permission. Application …\n"],["mlsd","Net::FTP","classes/Net/FTP.html#method-i-mlsd","(pathname = nil)","<p>Returns an array of the entries of the directory specified by\n<code>pathname</code>. Each entry has the facts (e.g., …\n"],["mlst","Net::FTP","classes/Net/FTP.html#method-i-mlst","(pathname = nil)","<p>Returns data (e.g., size, last modification time, entry type, etc.) about\nthe file or directory specified …\n"],["mod_add","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_add","(p1, p2)",""],["mod_exp","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_exp","(p1, p2)",""],["mod_inverse","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_inverse","(p1)",""],["mod_mul","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_mul","(p1, p2)",""],["mod_sqr","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_sqr","(p1)",""],["mod_sub","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-mod_sub","(p1, p2)",""],["mode","BigDecimal","classes/BigDecimal.html#method-c-mode","(p1, p2 = v2)","<p>Controls handling of arithmetic exceptions and rounding. If no value is\nsupplied, the current value is …\n"],["mode","File::Stat","classes/File/Stat.html#method-i-mode","()","<p>Returns an integer representing the permission bits of <em>stat</em>. The\nmeaning of the bits is platform dependent; …\n"],["models","RSS::Element","classes/RSS/Element.html#method-c-models","()",""],["module","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-module","()","<p>Attempts to locate the included module object.  Returns the name if not\nknown.\n<p>The scoping rules of Ruby …\n"],["module?","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-module-3F","()","<p>Does this object represent a module?\n"],["module?","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-module-3F","()","<p>This is a module, returns true\n"],["module_eval","Module","classes/Module.html#method-i-module_eval","(*args)","<p>Evaluates the string or block in the context of <em>mod</em>, except that\nwhen a block is given, constant/class …\n"],["module_exec","Module","classes/Module.html#method-i-module_exec","(*args)","<p>Evaluates the given block in the context of the class/module. The method\ndefined in the block will belong …\n"],["module_names","RDoc::Store","classes/RDoc/Store.html#method-i-module_names","()","<p>Modules cache accessor.  An Array of all the module (and class) names in\nthe store.\n"],["modules","RDoc::Context","classes/RDoc/Context.html#method-i-modules","()","<p>Array of modules in this context\n"],["modules_hash","RDoc::Context","classes/RDoc/Context.html#method-i-modules_hash","()","<p>Hash of modules keyed by module name\n"],["modules_hash","RDoc::Store","classes/RDoc/Store.html#method-i-modules_hash","()","<p>Hash of all modules known to RDoc\n"],["modulo","BigDecimal","classes/BigDecimal.html#method-i-modulo","(p1)","<p>Returns the modulus from dividing by b.\n<p>See BigDecimal#divmod.\n"],["modulo","Float","classes/Float.html#method-i-modulo","(p1)","<p>Returns the modulo after division of <code>float</code> by\n<code>other</code>.\n\n<pre><code>6543.21.modulo(137)      #=&gt; 104.21000000000004\n6543.21.modulo(137.24) ...\n</code></pre>\n"],["modulo","Integer","classes/Integer.html#method-i-modulo","(p1)","<p>Returns <code>int</code> modulo <code>other</code>.\n<p>See Numeric#divmod for more information.\n"],["modulo","Numeric","classes/Numeric.html#method-i-modulo","(p1)","<p><code>x.modulo(y)</code> means <code>x-y*(x/y).floor</code>.\n<p>Equivalent to <code>num.divmod(numeric)[1]</code>.\n<p>See Numeric#divmod.\n"],["mon","Date","classes/Date.html#method-i-mon","()","<p>Returns the month (1-12).\n\n<pre><code>Date.new(2001,2,3).mon            #=&gt; 2\n</code></pre>\n"],["mon","Time","classes/Time.html#method-i-mon","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...\n</code></pre>\n"],["mon_enter","MonitorMixin","classes/MonitorMixin.html#method-i-mon_enter","()","<p>Enters exclusive section.\n"],["mon_exit","MonitorMixin","classes/MonitorMixin.html#method-i-mon_exit","()","<p>Leaves exclusive section.\n"],["mon_locked?","MonitorMixin","classes/MonitorMixin.html#method-i-mon_locked-3F","()","<p>Returns true if this monitor is locked by any thread\n"],["mon_owned?","MonitorMixin","classes/MonitorMixin.html#method-i-mon_owned-3F","()","<p>Returns true if this monitor is locked by current thread.\n"],["mon_synchronize","MonitorMixin","classes/MonitorMixin.html#method-i-mon_synchronize","()","<p>Enters exclusive section and executes the block.  Leaves the exclusive\nsection automatically when the …\n"],["mon_try_enter","MonitorMixin","classes/MonitorMixin.html#method-i-mon_try_enter","()","<p>Attempts to enter exclusive section.  Returns <code>false</code> if lock\nfails.\n"],["monday?","Date","classes/Date.html#method-i-monday-3F","()","<p>Returns true if the date is Monday.\n"],["monday?","Time","classes/Time.html#method-i-monday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Monday.\n\n<pre><code>t = Time.local(2003, 8, 4)       #=&gt; 2003-08-04 00:00:00 -0500 ...\n</code></pre>\n"],["month","Date","classes/Date.html#method-i-month","()","<p>Returns the month (1-12).\n\n<pre><code>Date.new(2001,2,3).mon            #=&gt; 2\n</code></pre>\n"],["month","Time","classes/Time.html#method-i-month","()","<p>Returns the month of the year (1..12) for <em>time</em>.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:30 -0600\nt.mon    ...\n</code></pre>\n"],["mount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-mount","(dir, servlet, *options)","<p>Mounts <code>servlet</code> on <code>dir</code> passing\n<code>options</code> to the servlet at creation time\n"],["mount_proc","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-mount_proc","(dir, proc=nil, &block)","<p>Mounts <code>proc</code> or <code>block</code> on <code>dir</code> and\ncalls it with a WEBrick::HTTPRequest and WEBrick::HTTPResponse\n"],["mountpoint?","Pathname","classes/Pathname.html#method-i-mountpoint-3F","()","<p>Returns <code>true</code> if <code>self</code> points to a mountpoint.\n"],["move","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","FileUtils","classes/FileUtils.html#method-c-move","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)",""],["move","Net::HTTP","classes/Net/HTTP.html#method-i-move","(path, initheader = nil)","<p>Sends a MOVE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["move","Net::IMAP","classes/Net/IMAP.html#method-i-move","(set, mailbox)","<p>Sends a MOVE command to move the specified message(s) to the end of the\nspecified destination <code>mailbox</code> …\n"],["move","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-move","(port, tuple, sec=nil)","<p>Moves <code>tuple</code> to <code>port</code>.\n"],["mri?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-mri-3F","()",""],["mswin64?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-mswin64-3F","()",""],["mswin?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-mswin-3F","()",""],["mtime","File","classes/File.html#method-c-mtime","(p1)","<p>Returns the modification time for the named file as a Time object.\n<p><em>file_name</em> can be an IO object.\n\n<pre><code>File.mtime(&quot;testfile&quot;) ...\n</code></pre>\n"],["mtime","File","classes/File.html#method-i-mtime","()","<p>Returns the modification time for <em>file</em>.\n\n<pre><code>File.new(&quot;testfile&quot;).mtime   #=&gt; Wed Apr 09 08:53:14 CDT 2003\n</code></pre>\n"],["mtime","File::Stat","classes/File/Stat.html#method-i-mtime","()","<p>Returns the modification time of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).mtime   #=&gt; Wed Apr 09 08:53:14 CDT 2003\n</code></pre>\n"],["mtime","Net::FTP","classes/Net/FTP.html#method-i-mtime","(filename, local = false)","<p>Returns the last modification time of the (remote) file.  If\n<code>local</code> is <code>true</code>, it is returned as a local …\n"],["mtime","Pathname","classes/Pathname.html#method-i-mtime","()","<p>Returns the last modified time of the file.\n<p>See File.mtime.\n"],["mtime","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-mtime","()","<p>Returns last modification time recorded in the gzip file header.\n"],["mtime=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-mtime-3D","(p1)","<p>Specify the modification time (<code>mtime</code>) in the gzip header.\nUsing an Integer.\n<p>Setting the mtime in the gzip …\n"],["mu_lock","Mutex_m","classes/Mutex_m.html#method-i-mu_lock","()","<p>See Mutex#lock\n"],["mu_locked?","Mutex_m","classes/Mutex_m.html#method-i-mu_locked-3F","()","<p>See Mutex#locked?\n"],["mu_synchronize","Mutex_m","classes/Mutex_m.html#method-i-mu_synchronize","(&block)","<p>See Mutex#synchronize\n"],["mu_try_lock","Mutex_m","classes/Mutex_m.html#method-i-mu_try_lock","()","<p>See Mutex#try_lock\n"],["mu_unlock","Mutex_m","classes/Mutex_m.html#method-i-mu_unlock","()","<p>See Mutex#unlock\n"],["mul","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-mul","(p1, p2 = v2, p3 = v3)","<p>Performs elliptic curve point multiplication.\n<p>The first form calculates <code>bn1 * point + bn2 * G</code>, where  …\n"],["mult","BigDecimal","classes/BigDecimal.html#method-i-mult","(p1, p2)","<p>Multiply by the specified value.\n<p>e.g.\n\n<pre><code>c = a.mult(b,n)\nc = a * b\n</code></pre>\n"],["multipart?","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-multipart-3F","()","<p>Returns whether the form contained multipart/form-data\n"],["multipart?","Net::IMAP::BodyTypeAttachment","classes/Net/IMAP/BodyTypeAttachment.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeBasic","classes/Net/IMAP/BodyTypeBasic.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeExtension","classes/Net/IMAP/BodyTypeExtension.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMessage","classes/Net/IMAP/BodyTypeMessage.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeMultipart","classes/Net/IMAP/BodyTypeMultipart.html#method-i-multipart-3F","()",""],["multipart?","Net::IMAP::BodyTypeText","classes/Net/IMAP/BodyTypeText.html#method-i-multipart-3F","()",""],["multipart_form","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-multipart_form","(action = nil, enctype = \"multipart/form-data\")","<p>Generate a Form element with multipart encoding as a String.\n<p>Multipart encoding is used for forms that …\n"],["must_C_version","StringScanner","classes/StringScanner.html#method-c-must_C_version","()","<p>This method is defined for backward compatibility.\n"],["must_call_validators","RSS::Element","classes/RSS/Element.html#method-c-must_call_validators","()",""],["mute","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-mute","()","<p>Mute everything that&#39;s inside given block\n"],["mute?","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-mute-3F","()","<p>Check if base is muted\n"],["mv","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves file(s) <code>src</code> to <code>dest</code>.  If <code>file</code>\nand <code>dest</code> exist on the different disk partition, the file is\ncopied …\n"],["mv","FileUtils","classes/FileUtils.html#method-c-mv","(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)","<p>Moves file(s) <code>src</code> to <code>dest</code>.  If <code>file</code>\nand <code>dest</code> exist on the different disk partition, the file is\ncopied …\n"],["n_bytes","Net::POP3","classes/Net/POP3.html#method-i-n_bytes","()","<p>Returns the total size in bytes of all the messages on the POP server.\n"],["n_jobs","IRB::JobManager","classes/IRB/JobManager.html#method-i-n_jobs","()","<p>The total number of irb sessions, used to set <code>irb_name</code> of the\ncurrent Context.\n"],["n_mails","Net::POP3","classes/Net/POP3.html#method-i-n_mails","()","<p>Returns the number of messages on the POP server.\n"],["name","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-name","()",""],["name","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-name","()",""],["name","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-name","()","<p>(see Bundler::Molinillo::ResolutionState#name)\n"],["name","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-name","()",""],["name","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-name","()",""],["name","Encoding","classes/Encoding.html#method-i-name","()","<p>Returns the name of the encoding.\n\n<pre><code>Encoding::UTF_8.name      #=&gt; &quot;UTF-8&quot;\n</code></pre>\n"],["name","Method","classes/Method.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","Module","classes/Module.html#method-i-name","()","<p>Returns the name of the module <em>mod</em>.  Returns nil for anonymous\nmodules.\n"],["name","NameError","classes/NameError.html#method-i-name","()","<p>Return the name associated with this NameError exception.\n"],["name","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-name","()","<p>Returns the name of the cipher which may differ slightly from the original\nname provided.\n"],["name","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-name","()","<p>Returns the sn of this Digest algorithm.\n<p>Example\n\n<pre><code>digest = OpenSSL::Digest::SHA512.new\nputs digest.name ...\n</code></pre>\n"],["name","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-name","()","<p>Get the descriptive name for this engine.\n\n<pre><code>OpenSSL::Engine.load\nOpenSSL::Engine.engines #=&gt; [#&lt;OpenSSL::Engine#&gt;, ...\n</code></pre>\n"],["name","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-name","()",""],["name","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-name","()","<p>Method name\n<p>If the method has no assigned name, it extracts it from #call_seq.\n"],["name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-name","()",""],["name","REXML::Document","classes/REXML/Document.html#method-i-name","()",""],["name","REXML::Functions","classes/REXML/Functions.html#method-c-name","( node_set=nil )",""],["name","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-name","()",""],["name","REXML::NotationDecl","classes/REXML/NotationDecl.html#method-i-name","()","<p>This method retrieves the name of the notation.\n<p>Method contributed by Henrik Martensson\n"],["name","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-name","()",""],["name","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-name","()","<p>Returns the interface name of <em>ifaddr</em>.\n"],["name","Thread","classes/Thread.html#method-i-name","()","<p>show the name of the thread.\n"],["name","UnboundMethod","classes/UnboundMethod.html#method-i-name","()","<p>Returns the name of the method.\n"],["name","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-name","()","<p>Returns the name of the method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...\n</code></pre>\n"],["name","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-name","()","<p>Returns name.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;)\nmethod = WIN32OLE_METHOD.new(tobj, ...</code></pre>\n"],["name","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-name","()","<p>Returns OLE type name.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;)\nputs ...\n</code></pre>\n"],["name","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-name","()","<p>Returns the type library name.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nname ...\n</code></pre>\n"],["name","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-name","()","<p>Returns the name of variable.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...\n</code></pre>\n"],["name=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name-3D","(new_name)","<p>Allows overriding the initial name.\n<p>Used for modules and classes that are constant aliases.\n"],["name=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-name-3D","( name_str, ns=nil )",""],["name=","REXML::Namespace","classes/REXML/Namespace.html#method-i-name-3D","( name )","<p>Sets the name and the expanded name\n"],["name=","Thread","classes/Thread.html#method-i-name-3D","(p1)","<p>set given name to the ruby thread. On some platform, it may set the name to\npthread and/or kernel.\n"],["name_for","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for","(dependency)","<p>(see Bundler::Molinillo::SpecificationProvider#name_for)\n"],["name_for","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-name_for","(dependency)","<p>Returns the name for the given `dependency`. @note This method should be\n&#39;pure&#39;, i.e. the return …\n"],["name_for","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-name_for","(dependency)",""],["name_for_explicit_dependency_source","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>(see\nBundler::Molinillo::SpecificationProvider#name_for_explicit_dependency_source)\n"],["name_for_explicit_dependency_source","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-name_for_explicit_dependency_source","()","<p>@return [String] the name of the source of explicit dependencies, i.e.\n\n<pre><code>those passed to {Resolver#resolve} ...</code></pre>\n"],["name_for_explicit_dependency_source","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-name_for_explicit_dependency_source","()",""],["name_for_locking_dependency_source","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>(see\nBundler::Molinillo::SpecificationProvider#name_for_locking_dependency_source)\n"],["name_for_locking_dependency_source","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-name_for_locking_dependency_source","()","<p>@return [String] the name of the source of &#39;locked&#39; dependencies,\ni.e.\n\n<pre><code>those passed to {Resolver#resolve} ...</code></pre>\n"],["name_for_locking_dependency_source","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-name_for_locking_dependency_source","()",""],["name_for_path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-name_for_path","()","<p>Name to use to generate the url: modules and classes that are aliases for\nanother module or class return …\n"],["name_for_path","RDoc::Context","classes/RDoc/Context.html#method-i-name_for_path","()","<p>Name to use to generate the url. <code>#full_name</code> by default.\n"],["name_list","Encoding","classes/Encoding.html#method-c-name_list","()","<p>Returns the list of available encoding names.\n\n<pre><code>Encoding.name_list\n#=&gt; [&quot;US-ASCII&quot;, &quot;ASCII-8BIT&quot;, &quot;UTF-8&quot;, ...\n</code></pre>\n"],["name_prefix","RDoc::Alias","classes/RDoc/Alias.html#method-i-name_prefix","()","<p>&#39;::&#39; for the alias of a singleton method/attribute, &#39;#&#39; for\ninstance-level.\n"],["name_prefix","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-name_prefix","()","<p>&#39;::&#39; for a class method/attribute, &#39;#&#39; for an instance\nmethod.\n"],["named_captures","MatchData","classes/MatchData.html#method-i-named_captures","()","<p>Returns a Hash using named capture.\n<p>A key of the hash is a name of the named captures. A value of the …\n"],["named_captures","Regexp","classes/Regexp.html#method-i-named_captures","()","<p>Returns a hash representing information about named captures of\n<em>rxp</em>.\n<p>A key of the hash is a name of the …\n"],["names","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-i-names","()",""],["names","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-names","()",""],["names","Encoding","classes/Encoding.html#method-i-names","()","<p>Returns the list of name and aliases of the encoding.\n\n<pre><code>Encoding::WINDOWS_31J.names  #=&gt; [&quot;Windows-31J&quot;, ...\n</code></pre>\n"],["names","MatchData","classes/MatchData.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings. It is same as\nmtch.regexp.names.\n\n<pre><code>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.match(&quot;hoge&quot;).names ...\n</code></pre>\n"],["names","Regexp","classes/Regexp.html#method-i-names","()","<p>Returns a list of names of captures as an array of strings.\n\n<pre><code>/(?&lt;foo&gt;.)(?&lt;bar&gt;.)(?&lt;baz&gt;.)/.names\n#=&gt; [&quot;foo&quot;, ...\n</code></pre>\n"],["names_path","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-names_path","()",""],["namespace","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-namespace","(name = nil)","<p>Sets the namespace for the Bundler::Thor or Bundler::Thor::Group class. By\ndefault the namespace is retrieved …\n"],["namespace","Object","classes/Object.html#method-i-namespace","(name)",""],["namespace","REXML::Attribute","classes/REXML/Attribute.html#method-i-namespace","(arg=nil)","<p>Returns the namespace URL, if defined, or nil otherwise\n\n<pre><code>e = Element.new(&quot;el&quot;)\ne.add_namespace(&quot;ns&quot;, &quot;http://url&quot;) ...\n</code></pre>\n"],["namespace","REXML::Element","classes/REXML/Element.html#method-i-namespace","(prefix=nil)","<p>Evaluates to the URI for a prefix, or the empty string if no such namespace\nis declared for this element. …\n"],["namespace","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-namespace","( prefix=prefix() )",""],["namespace=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-namespace-3D","( namespace )",""],["namespace_context","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_context","()",""],["namespace_context=","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_context-3D","(x)",""],["namespace_from_thor_class","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-namespace_from_thor_class","(constant)","<p>Receives a constant and converts it to a Bundler::Thor namespace. Since\nBundler::Thor commands can be …\n"],["namespace_uri","REXML::Functions","classes/REXML/Functions.html#method-c-namespace_uri","( node_set=nil )",""],["namespaces","REXML::Attributes","classes/REXML/Attributes.html#method-i-namespaces","()",""],["namespaces","REXML::Element","classes/REXML/Element.html#method-i-namespaces","()",""],["namespaces=","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-namespaces-3D","( namespaces )",""],["namespaces=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-namespaces-3D","( namespaces={} )",""],["namespaces_in_content","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-namespaces_in_content","(contents, file = __FILE__)","<p>Given the contents, evaluate it inside the sandbox and returns the\nnamespaces defined in the sandbox. …\n"],["nan?","BigDecimal","classes/BigDecimal.html#method-i-nan-3F","()","<p>Returns True if the value is Not a Number.\n"],["nan?","Float","classes/Float.html#method-i-nan-3F","()","<p>Returns <code>true</code> if <code>float</code> is an invalid IEEE floating\npoint number.\n\n<pre><code>a = -1.0      #=&gt; -1.0\na.nan?        #=&gt; ...\n</code></pre>\n"],["native","IPAddr","classes/IPAddr.html#method-i-native","()","<p>Returns a new ipaddr built by converting the IPv6 address into a native\nIPv4 address.  If the IP address …\n"],["need_base64_encode?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-need_base64_encode-3F","()","<p>Returns true if the content needs to be encoded in base64.\n"],["need_base64_encode?","RSS::Element","classes/RSS/Element.html#method-i-need_base64_encode-3F","()",""],["need_initialize_variables","RSS::Element","classes/RSS/Element.html#method-c-need_initialize_variables","()",""],["need_initialize_variables","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-need_initialize_variables","()",""],["need_parent?","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-c-need_parent-3F","()","<p>Returns true\n"],["need_parent?","RSS::Element","classes/RSS/Element.html#method-c-need_parent-3F","()",""],["needs","Gem","classes/Gem.html#method-c-needs","()",""],["negative?","Float","classes/Float.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>float</code> is less than 0.\n"],["negative?","Numeric","classes/Numeric.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>num</code> is less than 0.\n"],["negative?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-negative-3F","()",""],["negative?","Rational","classes/Rational.html#method-i-negative-3F","()","<p>Returns <code>true</code> if <code>rat</code> is less than 0.\n"],["nest","PrettyPrint","classes/PrettyPrint.html#method-i-nest","(indent)","<p>Increases left margin after newline with <code>indent</code> for line\nbreaks added in the block.\n"],["nesting","Module","classes/Module.html#method-c-nesting","()","<p>Returns the list of <code>Modules</code> nested at the point of call.\n\n<pre><code>module M1\n  module M2\n    $a = Module.nesting ...</code></pre>\n"],["netmask","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-netmask","()","<p>Returns the netmask address of <em>ifaddr</em>. nil is returned if netmask\nis not available in <em>ifaddr</em>.\n"],["new","ACL","classes/ACL.html#method-c-new","(list=nil, order = DENY_ALLOW)","<p>Creates a new ACL from <code>list</code> with an evaluation\n<code>order</code> of DENY_ALLOW or ALLOW_DENY.\n<p>An ACL <code>list</code> is an Array …\n"],["new","ACL::ACLEntry","classes/ACL/ACLEntry.html#method-c-new","(str)","<p>Creates a new entry using <code>str</code>.\n<p><code>str</code> may be “*” or “all” to match any address, an IP …\n"],["new","ACL::ACLList","classes/ACL/ACLList.html#method-c-new","()","<p>Creates an empty ACLList\n"],["new","Addrinfo","classes/Addrinfo.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>returns a new instance of Addrinfo. The instance contains sockaddr, family,\nsocktype, protocol. sockaddr …\n"],["new","Array","classes/Array.html#method-c-new","(p1 = v1, p2 = v2)","<p>Returns a new array.\n<p>In the first form, if no arguments are sent, the new array will be empty.\nWhen a …\n"],["new","BasicObject","classes/BasicObject.html#method-c-new","()","<p>Not documented\n"],["new","Benchmark::Tms","classes/Benchmark/Tms.html#method-c-new","(utime = 0.0, stime = 0.0, cutime = 0.0, cstime = 0.0, real = 0.0, label = nil)","<p>Returns an initialized Tms object which has <code>utime</code> as the user\nCPU time, <code>stime</code> as the system CPU time, …\n"],["new","BigDecimal","classes/BigDecimal.html#method-c-new","(*args, **kwargs)",""],["new","Bundler::CLI","classes/Bundler/CLI.html#method-c-new","(*args)",""],["new","Bundler::CLI::Add","classes/Bundler/CLI/Add.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Binstubs","classes/Bundler/CLI/Binstubs.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Cache","classes/Bundler/CLI/Cache.html#method-c-new","(options)",""],["new","Bundler::CLI::Check","classes/Bundler/CLI/Check.html#method-c-new","(options)",""],["new","Bundler::CLI::Clean","classes/Bundler/CLI/Clean.html#method-c-new","(options)",""],["new","Bundler::CLI::Config","classes/Bundler/CLI/Config.html#method-c-new","(options, args, thor)",""],["new","Bundler::CLI::Console","classes/Bundler/CLI/Console.html#method-c-new","(options, group)",""],["new","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-c-new","(options)",""],["new","Bundler::CLI::Exec","classes/Bundler/CLI/Exec.html#method-c-new","(options, args)",""],["new","Bundler::CLI::Gem","classes/Bundler/CLI/Gem.html#method-c-new","(options, gem_name, thor)",""],["new","Bundler::CLI::Info","classes/Bundler/CLI/Info.html#method-c-new","(options, gem_name)",""],["new","Bundler::CLI::Init","classes/Bundler/CLI/Init.html#method-c-new","(options)",""],["new","Bundler::CLI::Inject","classes/Bundler/CLI/Inject.html#method-c-new","(options, name, version)",""],["new","Bundler::CLI::Install","classes/Bundler/CLI/Install.html#method-c-new","(options)",""],["new","Bundler::CLI::List","classes/Bundler/CLI/List.html#method-c-new","(options)",""],["new","Bundler::CLI::Lock","classes/Bundler/CLI/Lock.html#method-c-new","(options)",""],["new","Bundler::CLI::Open","classes/Bundler/CLI/Open.html#method-c-new","(options, name)",""],["new","Bundler::CLI::Outdated","classes/Bundler/CLI/Outdated.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Package","classes/Bundler/CLI/Package.html#method-c-new","(options)",""],["new","Bundler::CLI::Platform","classes/Bundler/CLI/Platform.html#method-c-new","(options)",""],["new","Bundler::CLI::Pristine","classes/Bundler/CLI/Pristine.html#method-c-new","(gems)",""],["new","Bundler::CLI::Remove","classes/Bundler/CLI/Remove.html#method-c-new","(gems, options)",""],["new","Bundler::CLI::Show","classes/Bundler/CLI/Show.html#method-c-new","(options, gem_name)",""],["new","Bundler::CLI::Update","classes/Bundler/CLI/Update.html#method-c-new","(options, gems)",""],["new","Bundler::CLI::Viz","classes/Bundler/CLI/Viz.html#method-c-new","(options)",""],["new","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-c-new","(directory, fetcher)",""],["new","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-c-new","(directory)",""],["new","Bundler::CompactIndexClient::Updater","classes/Bundler/CompactIndexClient/Updater.html#method-c-new","(fetcher)",""],["new","Bundler::CompactIndexClient::Updater::MisMatchedChecksumError","classes/Bundler/CompactIndexClient/Updater/MisMatchedChecksumError.html#method-c-new","(path, server_checksum, local_checksum)",""],["new","Bundler::Definition","classes/Bundler/Definition.html#method-c-new","(lockfile, dependencies, sources, unlock, ruby_version = nil, optional_groups = [], gemfiles = [])","<p>How does the new system work?\n<p>Load information from Gemfile and Lockfile\n<p>Invalidate stale locked specs …\n"],["new","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-c-new","(dep, platform)",""],["new","Bundler::Dependency","classes/Bundler/Dependency.html#method-c-new","(name, version, options = {}, &blk)",""],["new","Bundler::Dsl","classes/Bundler/Dsl.html#method-c-new","()",""],["new","Bundler::Dsl::DSLError","classes/Bundler/Dsl/DSLError.html#method-c-new","(description, dsl_path, backtrace, contents = nil)","<p>@param [Exception] backtrace @see backtrace @param [String]    dsl_path \n@see dsl_path\n"],["new","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-c-new","(name, version, platform, dependencies, metadata = nil)",""],["new","Bundler::EnvironmentPreserver","classes/Bundler/EnvironmentPreserver.html#method-c-new","(env, keys)","<p>@param env [ENV] @param keys [Array&lt;String&gt;]\n"],["new","Bundler::FeatureFlag","classes/Bundler/FeatureFlag.html#method-c-new","(bundler_version)",""],["new","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-c-new","(remote)",""],["new","Bundler::Fetcher::AuthenticationRequiredError","classes/Bundler/Fetcher/AuthenticationRequiredError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::BadAuthenticationError","classes/Bundler/Fetcher/BadAuthenticationError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::Base","classes/Bundler/Fetcher/Base.html#method-c-new","(downloader, remote, display_uri)",""],["new","Bundler::Fetcher::CertificateFailureError","classes/Bundler/Fetcher/CertificateFailureError.html#method-c-new","(remote_uri)",""],["new","Bundler::Fetcher::Downloader","classes/Bundler/Fetcher/Downloader.html#method-c-new","(connection, redirect_limit)",""],["new","Bundler::Fetcher::SSLError","classes/Bundler/Fetcher/SSLError.html#method-c-new","(msg = nil)",""],["new","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-c-new","(base = nil, name = nil)",""],["new","Bundler::GemInstaller","classes/Bundler/GemInstaller.html#method-c-new","(spec, installer, standalone = false, worker = 0, force = false)",""],["new","Bundler::GemRequireError","classes/Bundler/GemRequireError.html#method-c-new","(orig_exception, msg)",""],["new","Bundler::GemVersionPromoter","classes/Bundler/GemVersionPromoter.html#method-c-new","(locked_specs = SpecSet.new([]), unlock_gems = [])","<p>Given a list of locked_specs and a list of gems to unlock creates a\nGemVersionPromoter instance.\n<p>@param …\n"],["new","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-c-new","(runtime)",""],["new","Bundler::GenericSystemCallError","classes/Bundler/GenericSystemCallError.html#method-c-new","(underlying_error, message)",""],["new","Bundler::Graph","classes/Bundler/Graph.html#method-c-new","(env, output_file, show_version = false, show_requirements = false, output_format = \"png\", without = [])",""],["new","Bundler::Graph::GraphVizClient","classes/Bundler/Graph/GraphVizClient.html#method-c-new","(graph_instance)",""],["new","Bundler::Index","classes/Bundler/Index.html#method-c-new","()",""],["new","Bundler::Injector","classes/Bundler/Injector.html#method-c-new","(deps, options = {})",""],["new","Bundler::Installer","classes/Bundler/Installer.html#method-c-new","(root, definition)",""],["new","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-c-new","(name, version, platform, source = nil)",""],["new","Bundler::LockfileGenerator","classes/Bundler/LockfileGenerator.html#method-c-new","(definition)","<p>@private\n"],["new","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#method-c-new","(lockfile)",""],["new","Bundler::MirrorSockets","classes/Bundler/MirrorSockets.html#method-c-new","(mirror)",""],["new","Bundler::Molinillo::CircularDependencyError","classes/Bundler/Molinillo/CircularDependencyError.html#method-c-new","(vertices)","<p>Initializes a new error with the given circular vertices. @param\n[Array&lt;DependencyGraph::Vertex&gt;] …\n"],["new","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-c-new","()","<p>Initializes an empty dependency graph\n"],["new","Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-c-new","(origin, destination, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String]\norigin the name of the origin …\n"],["new","Bundler::Molinillo::DependencyGraph::DeleteEdge","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html#method-c-new","(origin_name, destination_name, requirement)","<p>Initialize an action to add an edge to a dependency graph @param [String]\norigin_name the name of the …\n"],["new","Bundler::Molinillo::DependencyGraph::DetachVertexNamed","classes/Bundler/Molinillo/DependencyGraph/DetachVertexNamed.html#method-c-new","(name)","<p>Initialize an action to detach a vertex from a dependency graph @param\n[String] name the name of the …\n"],["new","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-c-new","()","<p>Initializes an empty log\n"],["new","Bundler::Molinillo::DependencyGraph::Tag","classes/Bundler/Molinillo/DependencyGraph/Tag.html#method-c-new","(tag)","<p>Initialize an action to tag a state of a dependency graph @param [Object]\ntag an opaque tag\n"],["new","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-c-new","(name, payload)","<p>Initializes a vertex with the given name and payload. @param [String] name\nsee {#name} @param [Object] …\n"],["new","Bundler::Molinillo::NoSuchDependencyError","classes/Bundler/Molinillo/NoSuchDependencyError.html#method-c-new","(dependency, required_by = [])","<p>Initializes a new error with the given missing dependency. @param [Object]\ndependency @see {#dependency} …\n"],["new","Bundler::Molinillo::Resolver","classes/Bundler/Molinillo/Resolver.html#method-c-new","(specification_provider, resolver_ui)","<p>Initializes a new resolver. @param  [SpecificationProvider]\nspecification_provider\n\n<pre><code>see {#specification_provider}</code></pre>\n"],["new","Bundler::Molinillo::Resolver::Resolution","classes/Bundler/Molinillo/Resolver/Resolution.html#method-c-new","(specification_provider, resolver_ui, requested, base)","<p>Initializes a new resolution. @param [SpecificationProvider]\nspecification_provider\n\n<pre><code>see {#specification_provider}</code></pre>\n"],["new","Bundler::Molinillo::VersionConflict","classes/Bundler/Molinillo/VersionConflict.html#method-c-new","(conflicts, specification_provider)","<p>Initializes a new error with the given version conflicts. @param [{String\n=&gt; Resolution::Conflict}] …\n"],["new","Bundler::ParallelInstaller","classes/Bundler/ParallelInstaller.html#method-c-new","(installer, all_specs, size, standalone, force)",""],["new","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-c-new","(spec)",""],["new","Bundler::PermissionError","classes/Bundler/PermissionError.html#method-c-new","(path, permission_type = :write)",""],["new","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-c-new","(name = nil, proxy = nil)","<p>Creates a new Bundler::Persistent::Net::HTTP::Persistent.\n<p>Set <code>name</code> to keep your connections apart from …\n"],["new","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-c-new","(opts)",""],["new","Bundler::Plugin::DSL","classes/Bundler/Plugin/DSL.html#method-c-new","()",""],["new","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-c-new","()",""],["new","Bundler::Plugin::Index::CommandConflict","classes/Bundler/Plugin/Index/CommandConflict.html#method-c-new","(plugin, commands)",""],["new","Bundler::Plugin::Index::SourceConflict","classes/Bundler/Plugin/Index/SourceConflict.html#method-c-new","(plugin, sources)",""],["new","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-c-new","(name, version, platform, spec_fetcher)",""],["new","Bundler::Resolver","classes/Bundler/Resolver.html#method-c-new","(index, source_requirements, base, gem_version_promoter, additional_base_requirements, platforms)",""],["new","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-c-new","(all_specs)",""],["new","Bundler::Retry","classes/Bundler/Retry.html#method-c-new","(name, exceptions = nil, retries = self.class.default_retries)",""],["new","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-c-new","(versions, patchlevel, engine, engine_version)",""],["new","Bundler::Runtime","classes/Bundler/Runtime.html#method-c-new","(root, definition)",""],["new","Bundler::Settings","classes/Bundler/Settings.html#method-c-new","(root = nil)",""],["new","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-c-new","(uri = nil, fallback_timeout = 0)",""],["new","Bundler::Settings::MirrorConfig","classes/Bundler/Settings/MirrorConfig.html#method-c-new","(config_line, value)",""],["new","Bundler::Settings::Mirrors","classes/Bundler/Settings/Mirrors.html#method-c-new","(prober = nil)",""],["new","Bundler::Settings::Validator::Rule","classes/Bundler/Settings/Validator/Rule.html#method-c-new","(keys, description, &validate)",""],["new","Bundler::SimilarityDetector","classes/Bundler/SimilarityDetector.html#method-c-new","(corpus)","<p>initialize with an array of words to be matched against\n"],["new","Bundler::SocketAddress","classes/Bundler/SocketAddress.html#method-c-new","(type, host, port)",""],["new","Bundler::Source::Gemspec","classes/Bundler/Source/Gemspec.html#method-c-new","(options)",""],["new","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-c-new","(options)",""],["new","Bundler::Source::Git::GitCommandError","classes/Bundler/Source/Git/GitCommandError.html#method-c-new","(command, path = nil, extra_info = nil)",""],["new","Bundler::Source::Git::GitNotAllowedError","classes/Bundler/Source/Git/GitNotAllowedError.html#method-c-new","(command)",""],["new","Bundler::Source::Git::GitNotInstalledError","classes/Bundler/Source/Git/GitNotInstalledError.html#method-c-new","()",""],["new","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-c-new","(path, uri, ref, revision = nil, git = nil)",""],["new","Bundler::Source::Git::MissingGitRevisionError","classes/Bundler/Source/Git/MissingGitRevisionError.html#method-c-new","(ref, repo)",""],["new","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-c-new","(options)",""],["new","Bundler::Source::Path::Installer","classes/Bundler/Source/Path/Installer.html#method-c-new","(spec, options = {})",""],["new","Bundler::SourceList","classes/Bundler/SourceList.html#method-c-new","()",""],["new","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-c-new","(specs)",""],["new","Bundler::Standalone","classes/Bundler/Standalone.html#method-c-new","(groups, definition)",""],["new","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-c-new","(args = [], options = {}, config = {})","<p>Extends initializer to add more configuration options.\n<p>Configuration\n<p>behavior&lt;Symbol&gt; &mdash; The actions …\n"],["new","Bundler::Thor::Base","classes/Bundler/Thor/Base.html#method-c-new","(args = [], local_options = {}, config = {})","<p>It receives arguments in an Array and two hashes, one for options and other\nfor configuration.\n<p>Notice …\n"],["new","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-c-new","(name, description, long_description, usage, options = nil)",""],["new","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-c-new","(*args, &block)",""],["new","Bundler::Thor::DynamicCommand","classes/Bundler/Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Bundler::Thor::DynamicCommand","classes/Bundler/Thor/DynamicCommand.html#method-c-new","(name, options = nil)",""],["new","Bundler::Thor::LineEditor::Basic","classes/Bundler/Thor/LineEditor/Basic.html#method-c-new","(prompt, options)",""],["new","Bundler::Thor::LineEditor::Readline::PathCompletion","classes/Bundler/Thor/LineEditor/Readline/PathCompletion.html#method-c-new","(text)",""],["new","Bundler::Thor::Shell","classes/Bundler/Thor/Shell.html#method-c-new","(args = [], options = {}, config = {})","<p>Add shell to initialize config values.\n<p>Configuration\n<p>shell&lt;Object&gt; &mdash; An instance of the shell to be …\n"],["new","Bundler::UI::RGProxy","classes/Bundler/UI/RGProxy.html#method-c-new","(ui)",""],["new","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-c-new","(options = {})",""],["new","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-c-new","()",""],["new","Bundler::VersionConflict","classes/Bundler/VersionConflict.html#method-c-new","(conflicts, msg = nil)",""],["new","Bundler::Worker","classes/Bundler/Worker.html#method-c-new","(size, name, func)","<p>Creates a worker pool of specified size\n<p>@param size [Integer] Size of pool @param name [String] name the …\n"],["new","Bundler::Worker::WrappedException","classes/Bundler/Worker/WrappedException.html#method-c-new","(exn)",""],["new","Bundler::YamlSyntaxError","classes/Bundler/YamlSyntaxError.html#method-c-new","(orig_exception, msg)",""],["new","CGI","classes/CGI.html#method-c-new","(options = {})","<p>Create a new CGI instance.\n<p><code>tag_maker</code> &mdash; This is the same as using the <code>options_hash</code> form with the value\n<code>{</code> …\n"],["new","CGI::Cookie","classes/CGI/Cookie.html#method-c-new","(name = \"\", *value)","<p>Create a new CGI::Cookie object.\n<p><code>name_string</code> &mdash; The name of the cookie; in this form, there is no #domain …\n"],["new","CGI::Session","classes/CGI/Session.html#method-c-new","(request, option={})","<p>Create a new CGI::Session object for <code>request</code>.\n<p><code>request</code> is an instance of the <code>CGI</code> class (see\ncgi.rb). <code>option</code> …\n"],["new","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-c-new","(session, option={})","<p>Create a new FileStore instance.\n<p>This constructor is used internally by CGI::Session.  The user does not …\n"],["new","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-c-new","(session, option=nil)","<p>Create a new MemoryStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is …\n"],["new","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-c-new","(session, option=nil)","<p>Create a new NullStore instance.\n<p><code>session</code> is the session this instance is associated with.\n<code>option</code> is a …\n"],["new","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-c-new","(session, option={})","<p>Create a new CGI::Session::PStore instance\n<p>This constructor is used internally by CGI::Session.  The user …\n"],["new","CSV","classes/CSV.html#method-c-new","(data, col_sep: \",\", row_sep: :auto, quote_char: '\"', field_size_limit: nil, converters: nil, unconverted_fields: nil, headers: false, return_headers: false, write_headers: nil, header_converters: nil, skip_blanks: false, force_quotes: false, skip_lines: nil, liberal_parsing: false, internal_encoding: nil, external_encoding: nil, encoding: nil, nil_value: nil, empty_value: \"\", quote_empty: true, write_converters: nil, write_nil_value: nil, write_empty_value: \"\", strip: false)","<p>This constructor will wrap either a String or IO object passed in\n<code>data</code> for reading and/or writing.   …\n"],["new","CSV::FieldsConverter","classes/CSV/FieldsConverter.html#method-c-new","(options={})",""],["new","CSV::MalformedCSVError","classes/CSV/MalformedCSVError.html#method-c-new","(message, line_number)",""],["new","CSV::Parser","classes/CSV/Parser.html#method-c-new","(input, options)",""],["new","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-c-new","(inputs, encoding, chunk_size: 8192)",""],["new","CSV::Parser::Scanner","classes/CSV/Parser/Scanner.html#method-c-new","(*args)",""],["new","CSV::Parser::UnoptimizedStringIO","classes/CSV/Parser/UnoptimizedStringIO.html#method-c-new","(string)",""],["new","CSV::Row","classes/CSV/Row.html#method-c-new","(headers, fields, header_row = false)","<p>Construct a new CSV::Row from <code>headers</code> and <code>fields</code>,\nwhich are expected to be Arrays.  If one Array is shorter …\n"],["new","CSV::Table","classes/CSV/Table.html#method-c-new","(array_of_rows, headers: nil)","<p>Construct a new CSV::Table from <code>array_of_rows</code>, which are\nexpected to be CSV::Row objects.  All rows are …\n"],["new","CSV::Writer","classes/CSV/Writer.html#method-c-new","(output, options)",""],["new","Class","classes/Class.html#method-c-new","(*args)","<p>Creates a new anonymous (unnamed) class with the given superclass (or\n<code>Object</code> if no parameter is given). …\n"],["new","Class","classes/Class.html#method-i-new","(*args)","<p>Calls <code>allocate</code> to create a new object of <em>class</em>&#39;s\nclass, then invokes that object&#39;s <code>initialize</code> …\n"],["new","ConditionVariable","classes/ConditionVariable.html#method-c-new","()","<p>Creates a new condition variable instance.\n"],["new","DBM","classes/DBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Open a dbm database with the specified name, which can include a directory\npath. Any file extensions …\n"],["new","DRb::DRbArray","classes/DRb/DRbArray.html#method-c-new","(ary)","<p>Creates a new DRbArray that either dumps or wraps all the items in the\nArray <code>ary</code> so they can be loaded …\n"],["new","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new","(obj, uri=nil)","<p>Create a new remote object stub.\n<p><code>obj</code> is the (local) object we want to create a stub for. \nNormally this …\n"],["new","DRb::DRbRemoteError","classes/DRb/DRbRemoteError.html#method-c-new","(error)","<p>Creates a new remote error that wraps the Exception <code>error</code>\n"],["new","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-new","(uri, soc, config, is_established)","<p>Create a DRb::DRbSSLSocket instance.\n<p><code>uri</code> is the URI we are connected to. <code>soc</code> is the\ntcp socket we are …\n"],["new","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-c-new","(config)","<p>Create a new DRb::DRbSSLSocket::SSLConfig instance\n<p>The DRb::DRbSSLSocket will take either a <code>config</code> Hash …\n"],["new","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-new","(uri=nil, front=nil, config_or_acl=nil)","<p>Create a new DRbServer instance.\n<p><code>uri</code> is the URI to bind to.  This is normally of the form\n&#39;druby://&lt;hostname&gt;:&lt;port&gt;&#39; …\n"],["new","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-c-new","(err, buf)","<p>Create a new DRbUnknown object.\n<p><code>buf</code> is a string containing a marshalled object that could not\nbe unmarshalled. …\n"],["new","DRb::DRbUnknownError","classes/DRb/DRbUnknownError.html#method-c-new","(unknown)","<p>Create a new DRbUnknownError for the DRb::DRbUnknown object\n<code>unknown</code>\n"],["new","DRb::ExtServ","classes/DRb/ExtServ.html#method-c-new","(there, name, server=nil)",""],["new","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-c-new","()",""],["new","DRb::GW","classes/DRb/GW.html#method-c-new","()","<p>Creates a new GW\n"],["new","DRb::TimerIdConv","classes/DRb/TimerIdConv.html#method-c-new","(keeping=600)","<p>Creates a new TimerIdConv which will hold objects for <code>keeping</code>\nseconds.\n"],["new","Date","classes/Date.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)",""],["new","DateTime","classes/DateTime.html#method-c-new","(*args)","<p>Creates a DateTime object denoting the given calendar date.\n\n<pre><code>DateTime.new(2001,2,3)    #=&gt; #&lt;DateTime: ...\n</code></pre>\n"],["new","Delegator","classes/Delegator.html#method-c-new","(obj)","<p>Pass in the <em>obj</em> to delegate method calls to.  All methods\nsupported by <em>obj</em> will be delegated to.\n"],["new","Digest::Instance","classes/Digest/Instance.html#method-i-new","()","<p>Returns a new, initialized copy of the digest object.  Equivalent to\ndigest_obj.clone().reset().\n"],["new","Dir","classes/Dir.html#method-c-new","(p1, p2 = {})","<p>Returns a new directory object for the named directory.\n<p>The optional <em>encoding</em> keyword argument specifies …\n"],["new","ERB","classes/ERB.html#method-c-new","(str, safe_level=NOT_GIVEN, legacy_trim_mode=NOT_GIVEN, legacy_eoutvar=NOT_GIVEN, trim_mode: nil, eoutvar: '_erbout')","<p>Constructs a new ERB object with the template specified in <em>str</em>.\n<p>An ERB object works by building a chunk …\n"],["new","Encoding::Converter","classes/Encoding/Converter.html#method-c-new","(*args)","<p>possible options elements:\n\n<pre><code>hash form:\n  :invalid =&gt; nil            # raise error on invalid byte sequence ...</code></pre>\n"],["new","Enumerator","classes/Enumerator.html#method-c-new","(*args)","<p>Creates a new Enumerator object, which can be used as an Enumerable.\n<p>In the first form, iteration is defined …\n"],["new","Enumerator::Chain","classes/Enumerator/Chain.html#method-c-new","(*args)","<p>Generates a new enumerator object that iterates over the elements of given\nenumerable objects in sequence. …\n"],["new","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-c-new","(*args)","<p>Creates a new Lazy enumerator. When the enumerator is actually enumerated\n(e.g. by calling #force),  …\n"],["new","Exception","classes/Exception.html#method-c-new","(*args)","<p>Construct a new Exception object, optionally passing in a message.\n"],["new","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-c-new","(addr, types, func = nil)","<p>Wraps the C pointer <code>addr</code> as a C struct with the given\n<code>types</code>.\n<p>When the instance is garbage collected, the …\n"],["new","Fiddle::Closure","classes/Fiddle/Closure.html#method-c-new","(p1, p2, p3 = v3)","<p>Construct a new Closure object.\n<p><code>ret</code> is the C type to be returned\n<p><code>args</code> is an Array of arguments, passed …\n"],["new","Fiddle::Closure::BlockCaller","classes/Fiddle/Closure/BlockCaller.html#method-c-new","(ctype, args, abi = Fiddle::Function::DEFAULT, &block)","<p>Description\n<p>Construct a new BlockCaller object.\n<p><code>ctype</code> is the C type to be returned\n"],["new","Fiddle::CompositeHandler","classes/Fiddle/CompositeHandler.html#method-c-new","(handlers)","<p>Create a new handler with the open <code>handlers</code>\n<p>Used internally by Fiddle::Importer.dlload\n"],["new","Fiddle::Function","classes/Fiddle/Function.html#method-c-new","(p1, p2, p3, p4 = v4, p5 = {})","<p>Constructs a Function object.\n<p><code>ptr</code> is a referenced function, of a Fiddle::Handle\n<p><code>args</code> is an Array of arguments, …\n"],["new","Fiddle::Handle","classes/Fiddle/Handle.html#method-c-new","(p1 = v1, p2 = v2)","<p>Create a new handler that opens <code>library</code> with\n<code>flags</code>.\n<p>If no <code>library</code> is specified or <code>nil</code> is given,\nDEFAULT …\n"],["new","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new pointer to <code>address</code> with an optional\n<code>size</code> and <code>freefunc</code>.\n<p><code>freefunc</code> will be called when the instance …\n"],["new","File","classes/File.html#method-c-new","(*args)","<p>Opens the file named by <code>filename</code> according to the given\n<code>mode</code> and returns a new File object.\n<p>See IO.new …\n"],["new","File::Stat","classes/File/Stat.html#method-c-new","(p1)","<p>Create a File::Stat object for the given file name (raising an exception if\nthe file doesn&#39;t exist). …\n"],["new","GDBM","classes/GDBM.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new GDBM instance by opening a gdbm file named <em>filename</em>.\nIf the file does not exist, a new …\n"],["new","GetoptLong","classes/GetoptLong.html#method-c-new","(*arguments)","<p>Set up option processing.\n<p>The options to support are passed to new() as an array of arrays. Each\nsub-array …\n"],["new","Hash","classes/Hash.html#method-c-new","(*args)","<p>Returns a new, empty hash. If this hash is subsequently accessed by a key\nthat doesn&#39;t correspond …\n"],["new","IO","classes/IO.html#method-c-new","(p1, p2 = v2, p3 = {})","<p>Returns a new IO object (a stream) for the given integer file descriptor\n<code>fd</code> and <code>mode</code> string.  <code>opt</code> may …\n"],["new","IPAddr","classes/IPAddr.html#method-c-new","(addr = '::', family = Socket::AF_UNSPEC)","<p>Creates a new ipaddr object either from a human readable IP address\nrepresentation in string, or from …\n"],["new","IRB::Context","classes/IRB/Context.html#method-c-new","(irb, workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new IRB context.\n<p>The optional <code>input_method</code> argument:\n<p><code>nil</code> &mdash; uses stdin or Readline\n"],["new","IRB::FileInputMethod","classes/IRB/FileInputMethod.html#method-c-new","(file)","<p>Creates a new input method object\n"],["new","IRB::Frame","classes/IRB/Frame.html#method-c-new","()","<p>Creates a new stack frame\n"],["new","IRB::InputMethod","classes/IRB/InputMethod.html#method-c-new","(file = STDIN_FILE_NAME)","<p>Creates a new input method object\n"],["new","IRB::Inspector","classes/IRB/Inspector.html#method-c-new","(inspect_proc, init_proc = nil)","<p>Creates a new inspector object, using the given <code>inspect_proc</code>\nwhen output return values in irb.\n"],["new","IRB::Irb","classes/IRB/Irb.html#method-c-new","(workspace = nil, input_method = nil, output_method = nil)","<p>Creates a new irb session\n"],["new","IRB::JobManager","classes/IRB/JobManager.html#method-c-new","()","<p>Creates a new JobManager object\n"],["new","IRB::Locale","classes/IRB/Locale.html#method-c-new","(locale = nil)",""],["new","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-c-new","(prefix, base_notifier)","<p>Creates a new Notifier object\n"],["new","IRB::Notifier::CompositeNotifier","classes/IRB/Notifier/CompositeNotifier.html#method-c-new","(prefix, base_notifier)","<p>Create a new composite notifier object with the given <code>prefix</code>,\nand <code>base_notifier</code> to use for output.\n"],["new","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-c-new","(base, level, prefix)","<p>Create a new leveled notifier with the given <code>base</code>, and\n<code>prefix</code> to send to AbstractNotifier.new\n<p>The given …\n"],["new","IRB::Notifier::NoMsgNotifier","classes/IRB/Notifier/NoMsgNotifier.html#method-c-new","()","<p>Creates a new notifier that should not be used to output messages.\n"],["new","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-c-new","()","<p>Creates a new input method object using Readline\n"],["new","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-c-new","()","<p>Creates a new input method object\n"],["new","IRB::WorkSpace","classes/IRB/WorkSpace.html#method-c-new","(*main)","<p>Creates a new workspace.\n<p>set self to main if specified, otherwise inherit main from\nTOPLEVEL_BINDING. …\n"],["new","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-c-new","(p1 = v1)","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string …\n"],["new","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-c-new","(p1, p2 = {})","<p>Creates a new JSON::Ext::Parser instance for the string <em>source</em>.\n<p>Creates a new JSON::Ext::Parser instance …\n"],["new","KeyError","classes/KeyError.html#method-c-new","(p1 = v1, p2 = {})","<p>Construct a new <code>KeyError</code> exception with the given message,\nreceiver and key.\n"],["new","Logger","classes/Logger.html#method-c-new","(logdev, shift_age = 0, shift_size = 1048576, level: DEBUG, progname: nil, formatter: nil, datetime_format: nil, shift_period_suffix: '%Y%m%d')","<p>Args\n<p><code>logdev</code> &mdash; The log device.  This is a filename (String) or IO object (typically\n<code>STDOUT</code>, <code>STDERR</code>, or an …\n"],["new","Logger::Formatter","classes/Logger/Formatter.html#method-c-new","()",""],["new","Logger::LogDevice","classes/Logger/LogDevice.html#method-c-new","(log = nil, shift_age: nil, shift_size: nil, shift_period_suffix: nil)",""],["new","Matrix","classes/Matrix.html#method-c-new","(rows, column_count = rows[0].size)","<p>Matrix.new is private; use Matrix.rows, columns, [], etc… to create.\n"],["new","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-c-new","(a)","<p>Constructs the eigenvalue decomposition for a square matrix <code>A</code>\n"],["new","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-c-new","(a)",""],["new","Module","classes/Module.html#method-c-new","()","<p>Creates a new anonymous module. If a block is given, it is passed the\nmodule object, and the block is …\n"],["new","MonitorMixin","classes/MonitorMixin.html#method-c-new","(*args)","<p>Use <code>extend MonitorMixin</code> or <code>include MonitorMixin</code>\ninstead of this constructor.  Have look at the examples …\n"],["new","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-c-new","(monitor)",""],["new","Mutex","classes/Mutex.html#method-c-new","()","<p>Creates a new Mutex\n"],["new","NameError","classes/NameError.html#method-c-new","(*args, p2 = {})","<p>Construct a new NameError exception. If given the <em>name</em> parameter\nmay subsequently be examined using the …\n"],["new","Net::FTP","classes/Net/FTP.html#method-c-new","(host = nil, user_or_options = {}, passwd = nil, acct = nil)","<p>Creates and returns a new <code>FTP</code> object. If a <code>host</code>\nis given, a connection is made.\n<p><code>options</code> is an option hash, …\n"],["new","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-c-new","(facts, pathname)",""],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::HTTP object for the specified server address, without\nopening the TCP connection or …\n"],["new","Net::HTTP","classes/Net/HTTP.html#method-c-new","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)","<p>Creates a new Net::HTTP object without opening a TCP connection or HTTP\nsession.\n<p>The <code>address</code> should be …\n"],["new","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-c-new","(m, reqbody, resbody, uri_or_path, initheader = nil)",""],["new","Net::HTTPRequest","classes/Net/HTTPRequest.html#method-c-new","(path, initheader = nil)","<p>Creates an HTTP request object for <code>path</code>.\n<p><code>initheader</code> are the default headers to use.  Net::HTTP adds\nAccept-Encoding …\n"],["new","Net::IMAP","classes/Net/IMAP.html#method-c-new","(host, port_or_options = {}, usessl = false, certs = nil, verify = true)","<p>Creates a new Net::IMAP object and connects it to the specified\n<code>host</code>.\n<p><code>options</code> is an option hash, each …\n"],["new","Net::IMAP::CramMD5Authenticator","classes/Net/IMAP/CramMD5Authenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::DigestMD5Authenticator","classes/Net/IMAP/DigestMD5Authenticator.html#method-c-new","(user, password, authname = nil)",""],["new","Net::IMAP::LoginAuthenticator","classes/Net/IMAP/LoginAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::PlainAuthenticator","classes/Net/IMAP/PlainAuthenticator.html#method-c-new","(user, password)",""],["new","Net::IMAP::ResponseError","classes/Net/IMAP/ResponseError.html#method-c-new","(response)",""],["new","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-c-new","(socket, method)",""],["new","Net::POP3","classes/Net/POP3.html#method-c-new","(addr, port = nil, isapop = false)","<p>Creates a new POP3 object.\n<p><code>address</code> is the hostname or ip address of your POP3 server.\n<p>The optional <code>port</code> …\n"],["new","Net::ReadTimeout","classes/Net/ReadTimeout.html#method-c-new","(io = nil)",""],["new","Net::SMTP","classes/Net/SMTP.html#method-c-new","(address, port = nil)","<p>Creates a new Net::SMTP object.\n<p><code>address</code> is the hostname or ip address of your SMTP server. \n<code>port</code> is the …\n"],["new","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-c-new","(status, string)","<p>Creates a new instance of the Response class and sets the status and string\nattributes\n"],["new","Net::WriteTimeout","classes/Net/WriteTimeout.html#method-c-new","(io = nil)",""],["new","NoMethodError","classes/NoMethodError.html#method-c-new","(*args, p2 = {})","<p>Construct a NoMethodError exception for a method of the given name called\nwith the given arguments.  …\n"],["new","OLEProperty","classes/OLEProperty.html#method-c-new","(obj, dispid, gettypes, settypes)",""],["new","OpenSSL::ASN1::ASN1Data","classes/OpenSSL/ASN1/ASN1Data.html#method-c-new","(p1, p2, p3)","<p><em>value</em>: Please have a look at Constructive and Primitive to see how\nRuby types are mapped to ASN.1 types …\n"],["new","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><em>value</em>: is mandatory.\n<p><em>tag</em>: optional, may be specified for tagged values. If no\n<em>tag</em> is specified, the UNIVERSAL …\n"],["new","OpenSSL::ASN1::Primitive","classes/OpenSSL/ASN1/Primitive.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p><em>value</em>: is mandatory.\n<p><em>tag</em>: optional, may be specified for tagged values. If no\n<em>tag</em> is specified, the UNIVERSAL …\n"],["new","OpenSSL::BN","classes/OpenSSL/BN.html#method-c-new","(p1, p2 = v2)","<p>Construct a new OpenSSL BIGNUM object.\n"],["new","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-c-new","(*)","<p>Creates an instance of OpenSSL&#39;s buffering IO module.\n"],["new","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-c-new","(p1)","<p>The string must be a valid cipher name like “AES-128-CBC” or “3DES”.\n<p>A list of cipher …\n"],["new","OpenSSL::Config","classes/OpenSSL/Config.html#method-c-new","(filename = nil)","<p>Creates an instance of OpenSSL&#39;s configuration class.\n<p>This can be used in contexts like OpenSSL::X509::ExtensionFactory.config= …\n"],["new","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-c-new","(p1, p2 = v2)","<p>Creates a Digest instance based on <em>string</em>, which is either the ln\n(long name) or sn (short name) of a …\n"],["new","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-c-new","(p1, p2)","<p>Returns an instance of OpenSSL::HMAC set with the key and digest algorithm\nto be used. The instance represents …\n"],["new","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-c-new","(p1 = v1)","<p>Parameters\n<p><em>request</em> - optional raw request, either in PEM or DER format.\n\n"],["new","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-c-new","(p1 = v1)","<p>Creates a new BasicResponse. If <em>der_string</em> is given, decodes\n<em>der_string</em> as DER.\n"],["new","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a new OpenSSL::OCSP::CertificateId for the given <em>subject</em>\nand <em>issuer</em> X509 certificates.  The  …\n"],["new","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Request.  The request may be created empty or\nfrom a <em>request_der</em> string. …\n"],["new","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-c-new","(p1 = v1)","<p>Creates a new OpenSSL::OCSP::Response.  The response may be created empty\nor from a <em>response_der</em> string. …\n"],["new","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-c-new","(p1)","<p>Creates a new SingleResponse from <em>der_string</em>.\n"],["new","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-c-new","(p1 = v1, p2 = v2)","<p>Parameters\n<p><em>str</em> - Must be a DER encoded PKCS12 string.\n<p><em>pass</em> - string\n"],["new","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-new","(p1 = v1)","<p>Many methods in this class aren&#39;t documented.\n"],["new","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-c-new","(p1)",""],["new","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-c-new","(p1, p2, p3)",""],["new","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-c-new","(p1 = v1, p2 = v2)","<p>Either generates a DH instance from scratch or by reading already existing\nDH parameters from <em>string</em> …\n"],["new","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new DSA instance by reading an existing key from <em>string</em>.\n<p>Parameters\n<p><em>size</em> is an integer representing …\n"],["new","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new EC object from given arguments.\n"],["new","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-c-new","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new EC::Group object.\n<p><em>ec_method</em> is a symbol that represents an EC_METHOD. Currently the\nfollowing …\n"],["new","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-c-new","(p1, p2 = v2)","<p>Creates a new instance of OpenSSL::PKey::EC::Point. If the only argument is\nan instance of EC::Point …\n"],["new","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-c-new","()","<p>Because PKey is an abstract class, actually calling this method explicitly\nwill raise a NotImplementedError …\n"],["new","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-c-new","(p1 = v1, p2 = v2)","<p>Generates or loads an RSA keypair.  If an integer <em>key_size</em> is\ngiven it represents the desired key size. …\n"],["new","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-c-new","(version = nil)","<p>Creates a new SSL context.\n<p>If an argument is given, #ssl_version= is called with the value. Note that\n…\n"],["new","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-c-new","(svr, ctx)","<p>Creates a new instance of SSLServer.\n<p><em>srv</em> is an instance of TCPServer.\n<p><em>ctx</em> is an instance of OpenSSL::SSL::SSLContext …\n"],["new","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-c-new","(p1, p2 = v2)","<p>Creates a new SSL socket from <em>io</em> which must be a real IO object\n(not an IO-like object that responds …\n"],["new","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-c-new","(p1)","<p>Creates a new Session object from an instance of SSLSocket or DER/PEM\nencoded String.\n"],["new","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-c-new","(p1, p2 = v2)",""],["new","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates an X509 extension.\n<p>The extension may be created from <em>der</em> data or from an extension\n<em>oid</em> and <em>value</em> …\n"],["new","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)",""],["new","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-c-new","(p1 = v1, p2 = v2)","<p>Creates a new Name.\n<p>A name may be created from a DER encoded string <em>der</em>, an Array\nrepresenting a <em>distinguished_name</em> …\n"],["new","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-c-new","(p1 = v1)",""],["new","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-c-new","(*args)",""],["new","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-c-new","(*args)","<p>Creates a new X509::Store.\n"],["new","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-c-new","(p1, p2 = v2, p3 = v3)",""],["new","OpenStruct","classes/OpenStruct.html#method-c-new","(hash=nil)","<p>Creates a new OpenStruct object.  By default, the resulting OpenStruct\nobject will have no attributes. …\n"],["new","OpenURI::HTTPError","classes/OpenURI/HTTPError.html#method-c-new","(message, io)",""],["new","OpenURI::HTTPRedirect","classes/OpenURI/HTTPRedirect.html#method-c-new","(message, io, uri)",""],["new","OptionParser","classes/OptionParser.html#method-c-new","(banner = nil, width = 32, indent = ' ' * 4)","<p>Initializes the instance and yields itself if called with a block.\n<p><code>banner</code> &mdash; Banner message.\n<p><code>width</code> &mdash; Summary …\n"],["new","OptionParser","classes/OptionParser.html#method-i-new","()","<p>Pushes a new List.\n"],["new","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-c-new","(*args)",""],["new","OptionParser::List","classes/OptionParser/List.html#method-c-new","()","<p>Just initializes all instance variables.\n"],["new","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-c-new","(*args)",""],["new","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-new","(pattern = nil, conv = nil, short = nil, long = nil, arg = nil, desc = ([] if short or long), block = nil, &_block)",""],["new","PStore","classes/PStore.html#method-c-new","(file, thread_safe = false)","<p>To construct a PStore object, pass in the <em>file</em> path where you\nwould like the data to be stored.\n<p>PStore …\n"],["new","Pathname","classes/Pathname.html#method-c-new","(p1)","<p>Create a Pathname object from the given String (or String-like object). If\n<code>path</code> contains a NULL character …\n"],["new","PrettyPrint","classes/PrettyPrint.html#method-c-new","(output=''.dup, maxwidth=79, newline=\"\\n\", &genspace)","<p>Creates a buffer for pretty printing.\n<p><code>output</code> is an output target. If it is not specified, &#39;&#39;\nis …\n"],["new","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-c-new","(output, maxwidth=nil, newline=nil)","<p>Create a PrettyPrint::SingleLine object\n<p>Arguments:\n<p><code>output</code> - String (or similar) to store rendered text. …\n"],["new","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-c-new","()",""],["new","Prime::EratosthenesSieve","classes/Prime/EratosthenesSieve.html#method-c-new","()",""],["new","Prime::Generator23","classes/Prime/Generator23.html#method-c-new","()",""],["new","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-c-new","(ubound = nil)",""],["new","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-c-new","()",""],["new","Proc","classes/Proc.html#method-c-new","(*args)","<p>Creates a new <code>Proc</code> object, bound to the current context.\n<code>Proc::new</code> may be called without a block only …\n"],["new","Psych::ClassLoader::Restricted","classes/Psych/ClassLoader/Restricted.html#method-c-new","(classes, symbols)",""],["new","Psych::Coder","classes/Psych/Coder.html#method-c-new","(tag)",""],["new","Psych::DisallowedClass","classes/Psych/DisallowedClass.html#method-c-new","(klass_name)",""],["new","Psych::Emitter","classes/Psych/Emitter.html#method-c-new","(p1, p2 = v2)","<p>Create a new Psych::Emitter that writes to <code>io</code>.\n"],["new","Psych::Handler::DumperOptions","classes/Psych/Handler/DumperOptions.html#method-c-new","()",""],["new","Psych::Handlers::Recorder","classes/Psych/Handlers/Recorder.html#method-c-new","()",""],["new","Psych::Nodes::Alias","classes/Psych/Nodes/Alias.html#method-c-new","(anchor)","<p>Create a new Alias that points to an <code>anchor</code>\n"],["new","Psych::Nodes::Document","classes/Psych/Nodes/Document.html#method-c-new","(version = [], tag_directives = [], implicit = false)","<p>Create a new Psych::Nodes::Document object.\n<p><code>version</code> is a list indicating the YAML version.\n<code>tags_directives</code> …\n"],["new","Psych::Nodes::Mapping","classes/Psych/Nodes/Mapping.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new Psych::Nodes::Mapping object.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is …\n"],["new","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-c-new","()","<p>Create a new Psych::Nodes::Node\n"],["new","Psych::Nodes::Scalar","classes/Psych/Nodes/Scalar.html#method-c-new","(value, anchor = nil, tag = nil, plain = true, quoted = false, style = ANY)","<p>Create a new Psych::Nodes::Scalar object.\n<p><code>value</code> is the string value of the scalar <code>anchor</code> is\nan associated …\n"],["new","Psych::Nodes::Sequence","classes/Psych/Nodes/Sequence.html#method-c-new","(anchor = nil, tag = nil, implicit = true, style = BLOCK)","<p>Create a new object representing a YAML sequence.\n<p><code>anchor</code> is the anchor associated with the sequence or …\n"],["new","Psych::Nodes::Stream","classes/Psych/Nodes/Stream.html#method-c-new","(encoding = UTF8)","<p>Create a new Psych::Nodes::Stream node with an <code>encoding</code> that\ndefaults to Psych::Nodes::Stream::UTF8. …\n"],["new","Psych::Parser","classes/Psych/Parser.html#method-c-new","(handler = Handler.new)","<p>Creates a new Psych::Parser instance with <code>handler</code>.  YAML\nevents will be called on <code>handler</code>.  See Psych::Parser …\n"],["new","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-c-new","(class_loader)","<p>Create a new scanner\n"],["new","Psych::Streaming::ClassMethods","classes/Psych/Streaming/ClassMethods.html#method-i-new","(io)","<p>Create a new streaming emitter.  Emitter will print to <code>io</code>. \nSee Psych::Stream for an example.\n"],["new","Psych::SyntaxError","classes/Psych/SyntaxError.html#method-c-new","(file, line, col, offset, problem, context)",""],["new","Psych::SyntaxError","classes/Psych/SyntaxError.html#method-c-new","(file, line, col, offset, problem, context)",""],["new","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-c-new","()","<p>Create a new TreeBuilder instance\n"],["new","Psych::Visitors::DepthFirst","classes/Psych/Visitors/DepthFirst.html#method-c-new","(block)",""],["new","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-c-new","(io, options = {})",""],["new","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-c-new","(ss, class_loader)",""],["new","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-c-new","(emitter, ss, options)",""],["new","Queue","classes/Queue.html#method-c-new","()","<p>Creates a new queue instance.\n"],["new","RDoc::Alias","classes/RDoc/Alias.html#method-c-new","(text, old_name, new_name, comment, singleton = false)","<p>Creates a new Alias with a token stream of <code>text</code> that aliases\n<code>old_name</code> to <code>new_name</code>, has <code>comment</code>\nand is …\n"],["new","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-c-new","(text, name)","<p>Creates a new AnyMethod with a token stream <code>text</code> and\n<code>name</code>\n"],["new","RDoc::Attr","classes/RDoc/Attr.html#method-c-new","(text, name, rw, comment, singleton = false)","<p>Creates a new Attr with body <code>text</code>, <code>name</code>,\nread/write status <code>rw</code> and <code>comment</code>. \n<code>singleton</code> marks this as a …\n"],["new","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-c-new","(name, superclass = nil)","<p>Creates a new ClassModule with <code>name</code> with optional\n<code>superclass</code>\n<p>This is a constructor for subclasses, and …\n"],["new","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-c-new","()","<p>Creates a new CodeObject that will document itself and its children\n"],["new","RDoc::Comment","classes/RDoc/Comment.html#method-c-new","(text = nil, location = nil)","<p>Creates a new comment with <code>text</code> that is found in the\nRDoc::TopLevel <code>location</code>.\n"],["new","RDoc::Constant","classes/RDoc/Constant.html#method-c-new","(name, value, comment)","<p>Creates a new constant with <code>name</code>, <code>value</code> and\n<code>comment</code>\n"],["new","RDoc::Context","classes/RDoc/Context.html#method-c-new","()","<p>Creates an unnamed empty context with public current visibility\n"],["new","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-c-new","(context)","<p>Allows cross-references to be created based on the given\n<code>context</code> (RDoc::Context).\n"],["new","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-c-new","(str, safe_level = nil, trim_mode = nil, eoutvar = 'io')","<p>Defaults <code>eoutvar</code> to &#39;io&#39;, otherwise is identical to\nERB&#39;s initialize\n"],["new","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-new","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>Creates a new markdown parser that enables the given\n<code>extensions</code>.\n"],["new","RDoc::Markup","classes/RDoc/Markup.html#method-c-new","(attribute_manager = nil)","<p>Take a block of text and use various heuristics to determine its structure\n(paragraphs, lists, and so …\n"],["new","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-c-new","(text, name)","<p>Creates a new MethodAttr from token stream <code>text</code> and method or\nattribute name <code>name</code>.\n<p>Usually this is called …\n"],["new","RDoc::Mixin","classes/RDoc/Mixin.html#method-c-new","(name, comment)","<p>Creates a new Mixin for <code>name</code> with <code>comment</code>\n"],["new","RDoc::Parser","classes/RDoc/Parser.html#method-c-new","(top_level, file_name, content, options, stats)","<p>Creates a new Parser storing <code>top_level</code>,\n<code>file_name</code>, <code>content</code>, <code>options</code> and\n<code>stats</code> in instance variables. …\n"],["new","RDoc::RDoc","classes/RDoc/RDoc.html#method-c-new","()","<p>Creates a new RDoc::RDoc instance.  Call #document to parse files and\ngenerate documentation.\n"],["new","RDoc::Require","classes/RDoc/Require.html#method-c-new","(name, comment)","<p>Creates a new Require that loads <code>name</code> with\n<code>comment</code>\n"],["new","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-c-new","(spec, generate_rdoc = false, generate_ri = true)","<p>Creates a new documentation generator for <code>spec</code>.  RDoc and ri\ndata generation can be enabled or disabled …\n"],["new","RDoc::Servlet","classes/RDoc/Servlet.html#method-c-new","(server, stores, cache, mount_path = nil, extra_doc_dirs = [])","<p>Creates a new WEBrick servlet.\n<p>Use <code>mount_path</code> when mounting the servlet somewhere other than\n/.\n<p>Use <code>extra_doc_dirs</code> …\n"],["new","RDoc::Stats","classes/RDoc/Stats.html#method-c-new","(store, num_files, verbosity = 1)","<p>Creates a new Stats that will have <code>num_files</code>. \n<code>verbosity</code> defaults to 1 which will create an\nRDoc::Stats::Normal …\n"],["new","RDoc::Store","classes/RDoc/Store.html#method-c-new","(path = nil, type = nil)","<p>Creates a new Store of <code>type</code> that will load or save to\n<code>path</code>\n"],["new","RDoc::Store::MissingFileError","classes/RDoc/Store/MissingFileError.html#method-c-new","(store, file, name)","<p>Creates a new MissingFileError for the missing <code>file</code> for the\ngiven <code>name</code> that should have been in the  …\n"],["new","RDoc::Task","classes/RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::Task","classes/RDoc/Task.html#method-c-new","(name = :rdoc)","<p>Create an RDoc task with the given name. See the RDoc::Task class overview\nfor documentation.\n"],["new","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-new","()","<p>Creates a new TomDoc parser.  See also RDoc::Markup::parse\n"],["new","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-c-new","(absolute_name, relative_name = absolute_name)","<p>Creates a new TopLevel for the file at <code>absolute_name</code>.  If\ndocumentation is being generated outside the …\n"],["new","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-c-new","(source)","<p>Create an AttlistDecl, pulling the information from a Source.  Notice that\nthis isn&#39;t very convenient; …\n"],["new","REXML::Attribute","classes/REXML/Attribute.html#method-c-new","( first, second=nil, parent=nil )","<p>Constructor. FIXME: The parser doesn&#39;t catch illegal characters in\nattributes\n<p>first &mdash; Either: an Attribute …\n"],["new","REXML::Attributes","classes/REXML/Attributes.html#method-c-new","(element)","<p>Constructor\n<p>element &mdash; the Element of which this is an Attribute\n\n"],["new","REXML::CData","classes/REXML/CData.html#method-c-new","( first, whitespace=true, parent=nil )","\n<pre><code>Constructor.  CData is data between &lt;![CDATA[ ... ]]&gt;</code></pre>\n<p><em>Examples</em>\n\n<pre><code>CData.new( source )\nCData.new( &quot;Here is ...</code></pre>\n"],["new","REXML::Child","classes/REXML/Child.html#method-c-new","( parent = nil )","<p>Constructor.  Any inheritors of this class should call super to make sure\nthis method is called.\n<p>parent … &mdash; "],["new","REXML::Comment","classes/REXML/Comment.html#method-c-new","( first, second = nil )","<p>Constructor.  The first argument can be one of three types: @param first If\nString, the contents of this …\n"],["new","REXML::DTD::ElementDecl","classes/REXML/DTD/ElementDecl.html#method-c-new","(match)","<p>s*(((([“‘]).*?5)|*)*?)(/)?&gt;/um, true)\n"],["new","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-c-new","(src)","<p>&lt;!ENTITY name SYSTEM “…”&gt; &lt;!ENTITY name “…”&gt;\n"],["new","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-c-new","(src)",""],["new","REXML::Declaration","classes/REXML/Declaration.html#method-c-new","(src)",""],["new","REXML::DocType","classes/REXML/DocType.html#method-c-new","( first, parent=nil )","<p>Constructor\n\n<pre><code>dt = DocType.new( &#39;foo&#39;, &#39;-//I/Hate/External/IDs&#39; )\n# &lt;!DOCTYPE foo &#39;-//I/Hate/External/IDs&#39;&gt; ...\n</code></pre>\n"],["new","REXML::Document","classes/REXML/Document.html#method-c-new","( source = nil, context = {} )","<p>Constructor @param source if supplied, must be a Document, String, or IO.\nDocuments have their context …\n"],["new","REXML::Element","classes/REXML/Element.html#method-c-new","( arg = UNDEFINED, parent=nil, context=nil )","<p>Constructor\n<p>arg &mdash; if not supplied, will be set to the default value. If a String, the name of\nthis object …\n"],["new","REXML::ElementDecl","classes/REXML/ElementDecl.html#method-c-new","( src )",""],["new","REXML::Elements","classes/REXML/Elements.html#method-c-new","(parent)","<p>Constructor\n<p>parent &mdash; the parent Element\n\n"],["new","REXML::Entity","classes/REXML/Entity.html#method-c-new","(stream, value=nil, parent=nil, reference=false)","<p>Create a new entity.  Simple entities can be constructed by passing a name,\nvalue to the constructor; …\n"],["new","REXML::ExternalEntity","classes/REXML/ExternalEntity.html#method-c-new","( src )",""],["new","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-c-new","( ie_hack=false )","<p>Prints out the XML document with no formatting – except if ie_hack is set.\n<p>ie_hack &mdash; If set to true, then …\n\n"],["new","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-c-new","( indentation=2, ie_hack=false )","<p>Create a new pretty printer.\n<p>output &mdash; An object implementing &#39;&lt;&lt;(String)&#39;, to which the output …\n"],["new","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-c-new","( indentation=2, ie_hack=false )",""],["new","REXML::IOSource","classes/REXML/IOSource.html#method-c-new","(arg, block_size=500, encoding=nil)","<p>block_size has been deprecated\n"],["new","REXML::Instruction","classes/REXML/Instruction.html#method-c-new","(target, content=nil)","<p>Constructs a new Instruction @param target can be one of a number of\nthings.  If String, then the target …\n"],["new","REXML::Light::Node","classes/REXML/Light/Node.html#method-c-new","(node=nil)","<p>Create a new element.\n"],["new","REXML::NotationDecl","classes/REXML/NotationDecl.html#method-c-new","(name, middle, pub, sys)",""],["new","REXML::Output","classes/REXML/Output.html#method-c-new","(real_IO, encd=\"iso-8859-1\")",""],["new","REXML::Parent","classes/REXML/Parent.html#method-c-new","(parent=nil)","<p>Constructor @param parent if supplied, will be set as the parent of this\nobject\n"],["new","REXML::ParseException","classes/REXML/ParseException.html#method-c-new","( message, source=nil, parser=nil, exception=nil )",""],["new","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-c-new","( source )",""],["new","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-c-new","(arg)","<p>The type of this event.  Will be one of :tag_start, :tag_end, :text,\n:processing_instruction, :comment, …\n"],["new","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-c-new","(stream)",""],["new","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-c-new","(source)",""],["new","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-c-new","(source, listener)",""],["new","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-c-new","( source, build_context = Document.new )",""],["new","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-c-new","(stream)",""],["new","REXML::Source","classes/REXML/Source.html#method-c-new","(arg, encoding=nil)","<p>Constructor @param arg must be a String, and should be a valid XML document\n@param encoding if non-null, …\n"],["new","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-c-new","(*enums)","<p>Creates a new SyncEnumerator which enumerates rows of given Enumerable\nobjects.\n"],["new","REXML::Text","classes/REXML/Text.html#method-c-new","(arg, respect_whitespace=false, parent=nil, raw=nil, entity_filter=nil, illegal=NEEDS_A_SECOND_CHECK )","<p>Constructor <code>arg</code> if a String, the content is set to the String.\nIf a Text, the object is shallowly cloned. …\n"],["new","REXML::UndefinedNamespaceException","classes/REXML/UndefinedNamespaceException.html#method-c-new","( prefix, source, parser )",""],["new","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-c-new","(context)",""],["new","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-c-new","(event_type, event_arg=nil )",""],["new","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-c-new","(context)",""],["new","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-c-new","(context)",""],["new","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-c-new","(value)",""],["new","REXML::Validation::RelaxNG","classes/REXML/Validation/RelaxNG.html#method-c-new","(source)","<p>FIXME: Namespaces\n"],["new","REXML::Validation::State","classes/REXML/Validation/State.html#method-c-new","( context )",""],["new","REXML::Validation::ValidationException","classes/REXML/Validation/ValidationException.html#method-c-new","(msg)",""],["new","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-c-new","(version=DEFAULT_VERSION, encoding=nil, standalone=nil)",""],["new","REXML::XPathNode","classes/REXML/XPathNode.html#method-c-new","(node, context=nil)",""],["new","REXML::XPathParser","classes/REXML/XPathParser.html#method-c-new","(strict: false)",""],["new","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-c-new","(version=nil, encoding=nil, standalone=nil)","<p>Creates a new Atom Entry element.\n"],["new","RSS::Atom::Feed","classes/RSS/Atom/Feed.html#method-c-new","(version=nil, encoding=nil, standalone=nil)","<p>Creates a new Atom feed\n"],["new","RSS::BaseParser","classes/RSS/BaseParser.html#method-c-new","(rss)",""],["new","RSS::ConversionError","classes/RSS/ConversionError.html#method-c-new","(string, to, from)",""],["new","RSS::Converter","classes/RSS/Converter.html#method-c-new","(to_enc, from_enc=nil)",""],["new","RSS::Element","classes/RSS/Element.html#method-c-new","(do_validate=true, attrs=nil)",""],["new","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-c-new","(*args)",""],["new","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-c-new","(*args)",""],["new","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-new","(*args)",""],["new","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-c-new","(*args)",""],["new","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-c-new","(*args)",""],["new","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-c-new","()",""],["new","RSS::Maker::Atom::Entry","classes/RSS/Maker/Atom/Entry.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Atom::Feed","classes/RSS/Maker/Atom/Feed.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-new","(maker)",""],["new","RSS::Maker::ItemsBase","classes/RSS/Maker/ItemsBase.html#method-c-new","(maker)",""],["new","RSS::Maker::RSS09","classes/RSS/Maker/RSS09.html#method-c-new","(feed_version)",""],["new","RSS::Maker::RSS091","classes/RSS/Maker/RSS091.html#method-c-new","(feed_version=\"0.91\")",""],["new","RSS::Maker::RSS092","classes/RSS/Maker/RSS092.html#method-c-new","(feed_version=\"0.92\")",""],["new","RSS::Maker::RSS10","classes/RSS/Maker/RSS10.html#method-c-new","(feed_version=\"1.0\")",""],["new","RSS::Maker::RSS20","classes/RSS/Maker/RSS20.html#method-c-new","(feed_version=\"2.0\")",""],["new","RSS::Maker::RSSBase","classes/RSS/Maker/RSSBase.html#method-c-new","(feed_version)",""],["new","RSS::MissingAttributeError","classes/RSS/MissingAttributeError.html#method-c-new","(tag, attribute)",""],["new","RSS::MissingTagError","classes/RSS/MissingTagError.html#method-c-new","(tag, parent)",""],["new","RSS::NSError","classes/RSS/NSError.html#method-c-new","(tag, prefix, require_uri)",""],["new","RSS::NotAvailableValueError","classes/RSS/NotAvailableValueError.html#method-c-new","(tag, value, attribute=nil)",""],["new","RSS::NotExpectedTagError","classes/RSS/NotExpectedTagError.html#method-c-new","(tag, uri, parent)",""],["new","RSS::NotSetError","classes/RSS/NotSetError.html#method-c-new","(name, variables)",""],["new","RSS::NotValidXMLParser","classes/RSS/NotValidXMLParser.html#method-c-new","(parser)",""],["new","RSS::NotWellFormedError","classes/RSS/NotWellFormedError.html#method-c-new","(line=nil, element=nil)","<p>Create a new NotWellFormedError for an error at <code>line</code> in\n<code>element</code>.  If a block is given the return value …\n"],["new","RSS::OverlappedPrefixError","classes/RSS/OverlappedPrefixError.html#method-c-new","(prefix)",""],["new","RSS::Parser","classes/RSS/Parser.html#method-c-new","(rss, parser_class=self.class.default_parser)",""],["new","RSS::RDF","classes/RSS/RDF.html#method-c-new","(version=nil, encoding=nil, standalone=nil)",""],["new","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-c-new","(*args)",""],["new","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel","classes/RSS/RDF/Channel.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Image","classes/RSS/RDF/Channel/Image.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Items","classes/RSS/RDF/Channel/Items.html#method-c-new","(*args)",""],["new","RSS::RDF::Channel::Textinput","classes/RSS/RDF/Channel/Textinput.html#method-c-new","(*args)",""],["new","RSS::RDF::Image","classes/RSS/RDF/Image.html#method-c-new","(*args)",""],["new","RSS::RDF::Item","classes/RSS/RDF/Item.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-new","(*args)",""],["new","RSS::RDF::Textinput","classes/RSS/RDF/Textinput.html#method-c-new","(*args)",""],["new","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss","classes/RSS/Rss.html#method-c-new","(feed_version, version=nil, encoding=nil, standalone=nil)",""],["new","RSS::Rss::Channel::Cloud","classes/RSS/Rss/Channel/Cloud.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Image","classes/RSS/Rss/Channel/Image.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Category","classes/RSS/Rss/Channel/Item/Category.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Enclosure","classes/RSS/Rss/Channel/Item/Enclosure.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Guid","classes/RSS/Rss/Channel/Item/Guid.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::Item::Source","classes/RSS/Rss/Channel/Item/Source.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipDays::Day","classes/RSS/Rss/Channel/SkipDays/Day.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::SkipHours::Hour","classes/RSS/Rss/Channel/SkipHours/Hour.html#method-c-new","(*args)",""],["new","RSS::Rss::Channel::TextInput","classes/RSS/Rss/Channel/TextInput.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-new","(*args)",""],["new","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-new","(*args)",""],["new","RSS::TooMuchTagError","classes/RSS/TooMuchTagError.html#method-c-new","(tag, parent)",""],["new","RSS::UnknownConversionMethodError","classes/RSS/UnknownConversionMethodError.html#method-c-new","(to, from)",""],["new","RSS::UnknownTagError","classes/RSS/UnknownTagError.html#method-c-new","(tag, uri)",""],["new","RSS::UnsupportedMakerVersionError","classes/RSS/UnsupportedMakerVersionError.html#method-c-new","(version)",""],["new","RSS::XML::Element","classes/RSS/XML/Element.html#method-c-new","(name, prefix=nil, uri=nil, attributes={}, children=[])",""],["new","RSS::XMLParserNotFound","classes/RSS/XMLParserNotFound.html#method-c-new","()",""],["new","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-c-new","(*attrs)",""],["new","RSS::XMLStyleSheetMixin","classes/RSS/XMLStyleSheetMixin.html#method-c-new","(*args)",""],["new","Random","classes/Random.html#method-c-new","(*args)","<p>Creates a new PRNG using <code>seed</code> to set the initial state. If\n<code>seed</code> is omitted, the generator is initialized …\n"],["new","Range","classes/Range.html#method-c-new","(p1, p2, p3 = v3)","<p>Constructs a range using the given <code>begin</code> and <code>end</code>.\nIf the <code>exclude_end</code> parameter is omitted or is\n<code>false</code> …\n"],["new","Regexp","classes/Regexp.html#method-c-new","(*args)","<p>Constructs a new regular expression from <code>pattern</code>, which can be\neither a String or a Regexp (in which …\n"],["new","Resolv","classes/Resolv.html#method-c-new","(resolvers=[Hosts.new, DNS.new])","<p>Creates a new Resolv using <code>resolvers</code>.\n"],["new","Resolv::DNS","classes/Resolv/DNS.html#method-c-new","(config_info=nil)","<p>Creates a new DNS resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses /etc/resolv.conf.\n"],["new","Resolv::DNS::Resource::DomainName","classes/Resolv/DNS/Resource/DomainName.html#method-c-new","(name)","<p>Creates a new DomainName from <code>name</code>.\n"],["new","Resolv::DNS::Resource::Generic","classes/Resolv/DNS/Resource/Generic.html#method-c-new","(data)","<p>Creates a new generic resource.\n"],["new","Resolv::DNS::Resource::HINFO","classes/Resolv/DNS/Resource/HINFO.html#method-c-new","(cpu, os)","<p>Creates a new HINFO running <code>os</code> on <code>cpu</code>.\n"],["new","Resolv::DNS::Resource::IN::A","classes/Resolv/DNS/Resource/IN/A.html#method-c-new","(address)","<p>Creates a new A for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::AAAA","classes/Resolv/DNS/Resource/IN/AAAA.html#method-c-new","(address)","<p>Creates a new AAAA for <code>address</code>.\n"],["new","Resolv::DNS::Resource::IN::SRV","classes/Resolv/DNS/Resource/IN/SRV.html#method-c-new","(priority, weight, port, target)","<p>Create a SRV resource record.\n<p>See the documentation for #priority, #weight, #port and #target for\n<code>priority</code> …\n"],["new","Resolv::DNS::Resource::IN::WKS","classes/Resolv/DNS/Resource/IN/WKS.html#method-c-new","(address, protocol, bitmap)",""],["new","Resolv::DNS::Resource::LOC","classes/Resolv/DNS/Resource/LOC.html#method-c-new","(version, ssize, hprecision, vprecision, latitude, longitude, altitude)",""],["new","Resolv::DNS::Resource::MINFO","classes/Resolv/DNS/Resource/MINFO.html#method-c-new","(rmailbx, emailbx)",""],["new","Resolv::DNS::Resource::MX","classes/Resolv/DNS/Resource/MX.html#method-c-new","(preference, exchange)","<p>Creates a new MX record with <code>preference</code>, accepting mail at\n<code>exchange</code>.\n"],["new","Resolv::DNS::Resource::SOA","classes/Resolv/DNS/Resource/SOA.html#method-c-new","(mname, rname, serial, refresh, retry_, expire, minimum)","<p>Creates a new SOA record.  See the attr documentation for the details of\neach argument.\n"],["new","Resolv::DNS::Resource::TXT","classes/Resolv/DNS/Resource/TXT.html#method-c-new","(first_string, *rest_strings)",""],["new","Resolv::Hosts","classes/Resolv/Hosts.html#method-c-new","(filename = DefaultFileName)","<p>Creates a new Resolv::Hosts, using <code>filename</code> for its data\nsource.\n"],["new","Resolv::LOC::Alt","classes/Resolv/LOC/Alt.html#method-c-new","(altitude)",""],["new","Resolv::LOC::Coord","classes/Resolv/LOC/Coord.html#method-c-new","(coordinates,orientation)",""],["new","Resolv::LOC::Size","classes/Resolv/LOC/Size.html#method-c-new","(scalar)",""],["new","Resolv::MDNS","classes/Resolv/MDNS.html#method-c-new","(config_info=nil)","<p>Creates a new one-shot Multicast DNS (mDNS) resolver.\n<p><code>config_info</code> can be:\n<p>nil &mdash; Uses the default mDNS addresses …\n"],["new","Rinda::DRbObjectTemplate","classes/Rinda/DRbObjectTemplate.html#method-c-new","(uri=nil, ref=nil)","<p>Creates a new DRbObjectTemplate that will match against <code>uri</code>\nand <code>ref</code>.\n"],["new","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-c-new","(place, event, tuple, expires=nil)","<p>Creates a new NotifyTemplateEntry that watches <code>place</code> for\n+event+s that match <code>tuple</code>.\n"],["new","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-new","(broadcast_list=@@broadcast_list, port=Ring_PORT)","<p>Creates a new RingFinger that will look for RingServers at\n<code>port</code> on the addresses in <code>broadcast_list</code>.\n<p>If …\n"],["new","Rinda::RingProvider","classes/Rinda/RingProvider.html#method-c-new","(klass, front, desc, renewer = nil)","<p>Creates a RingProvider that will provide a <code>klass</code> service\nrunning on <code>front</code>, with a <code>description</code>. \n<code>renewer</code> …\n"],["new","Rinda::RingServer","classes/Rinda/RingServer.html#method-c-new","(ts, addresses=[Socket::INADDR_ANY], port=Ring_PORT)","<p>Advertises <code>ts</code> on the given <code>addresses</code> at\n<code>port</code>.\n<p>If <code>addresses</code> is omitted only the UDP broadcast address is …\n"],["new","Rinda::SimpleRenewer","classes/Rinda/SimpleRenewer.html#method-c-new","(sec=180)","<p>Creates a new SimpleRenewer that keeps an object alive for another\n<code>sec</code> seconds.\n"],["new","Rinda::Tuple","classes/Rinda/Tuple.html#method-c-new","(ary_or_hash)","<p>Creates a new Tuple from <code>ary_or_hash</code> which must be an Array or\nHash.\n"],["new","Rinda::TupleBag::TupleBin","classes/Rinda/TupleBag/TupleBin.html#method-c-new","()",""],["new","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-c-new","(ary, sec=nil)","<p>Creates a TupleEntry based on <code>ary</code> with an optional renewer or\nexpiry time <code>sec</code>.\n<p>A renewer must implement …\n"],["new","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-c-new","(period=60)","<p>Creates a new TupleSpace.  <code>period</code> is used to control how often\nto look for dead tuples after modifications …\n"],["new","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-c-new","(ts)","<p>Creates a new TupleSpaceProxy to wrap <code>ts</code>.\n"],["new","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-c-new","(place, ary, expires=nil)",""],["new","Ripper","classes/Ripper.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Create a new Ripper object. <em>src</em> must be a String, an IO, or an\nObject which has #gets method.\n<p>This method …\n"],["new","Ripper::Filter","classes/Ripper/Filter.html#method-c-new","(src, filename = '-', lineno = 1)","<p>Creates a new Ripper::Filter instance, passes parameters <code>src</code>,\n<code>filename</code>, and <code>lineno</code> to Ripper::Lexer.new …\n"],["new","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-new","(p1, *args, p3 = {})","<p>Takes <code>source</code>, a String of Ruby code and compiles it to an\nInstructionSequence.\n<p>Optionally takes <code>file</code>, …\n"],["new","SDBM","classes/SDBM.html#method-c-new","(p1, p2 = v2)","<p>Creates a new database handle by opening the given <code>filename</code>.\nSDBM actually uses two physical files, with …\n"],["new","SOCKSSocket","classes/SOCKSSocket.html#method-c-new","(p1, p2)","<p>Opens a SOCKS connection to <code>host</code> via the SOCKS server\n<code>serv</code>.\n"],["new","SOCKSSocket","classes/SOCKSSocket.html#method-c-new","(host, serv)",""],["new","Set","classes/Set.html#method-c-new","(enum = nil)","<p>Creates a new set containing the elements of the given enumerable object.\n<p>If a block is given, the elements …\n"],["new","Shell","classes/Shell.html#method-c-new","(pwd = Dir.pwd, umask = nil)","<p>Creates a Shell object which current directory is set to the process\ncurrent directory, unless otherwise …\n"],["new","Shell::AppendFile","classes/Shell/AppendFile.html#method-c-new","(sh, to_filename, filter)",""],["new","Shell::AppendIO","classes/Shell/AppendIO.html#method-c-new","(sh, io, filter)",""],["new","Shell::Cat","classes/Shell/Cat.html#method-c-new","(sh, *filenames)",""],["new","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-new","(shell)",""],["new","Shell::Concat","classes/Shell/Concat.html#method-c-new","(sh, *jobs)",""],["new","Shell::Echo","classes/Shell/Echo.html#method-c-new","(sh, *strings)",""],["new","Shell::Filter","classes/Shell/Filter.html#method-c-new","(sh)",""],["new","Shell::Glob","classes/Shell/Glob.html#method-c-new","(sh, pattern)",""],["new","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-new","(shell)",""],["new","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-c-new","(sh, command, *opts)",""],["new","Shell::Tee","classes/Shell/Tee.html#method-c-new","(sh, filename)",""],["new","Shell::Void","classes/Shell/Void.html#method-c-new","(sh, *opts)",""],["new","SignalException","classes/SignalException.html#method-c-new","(*args)","<p>Construct a new SignalException object.  <code>sig_name</code> should be a\nknown signal name.\n"],["new","SizedQueue","classes/SizedQueue.html#method-c-new","(p1)","<p>Creates a fixed-length queue with a maximum size of <code>max</code>.\n"],["new","Socket","classes/Socket.html#method-c-new","(p1, p2, p3 = v3)","<p>Creates a new socket object.\n<p><em>domain</em> should be a communications domain such as: :INET, :INET6,\n:UNIX, etc. …\n"],["new","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-new","(p1, p2, p3, p4)","<p><em>family</em> should be an integer, a string or a symbol.\n<p>Socket::AF_INET, “AF_INET”, “INET”, …\n"],["new","Socket::Option","classes/Socket/Option.html#method-c-new","(p1, p2, p3, p4)","<p>Returns a new Socket::Option object.\n\n<pre><code>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...\n</code></pre>\n"],["new","Socket::UDPSource","classes/Socket/UDPSource.html#method-c-new","(remote_address, local_address, &reply_proc)","<p><code>remote_address</code> is an Addrinfo object.\n<p><code>local_address</code> is an Addrinfo object.\n<p><code>reply_proc</code> is a Proc used to …\n"],["new","String","classes/String.html#method-c-new","(p1 = v1, p2 = {})","<p>Returns a new string object containing a copy of <em>str</em>.\n<p>The optional <em>encoding</em> keyword argument specifies …\n"],["new","StringIO","classes/StringIO.html#method-c-new","(*args)","<p>Creates new StringIO instance from with <em>string</em> and <em>mode</em>.\n"],["new","StringScanner","classes/StringScanner.html#method-c-new","(p1, p2 = v2)","<p>Creates a new StringScanner object to scan over the given\n<code>string</code>. <code>dup</code> argument is obsolete and not used …\n"],["new","Struct","classes/Struct.html#method-c-new","(*args)","<p>The first two forms are used to create a new Struct subclass\n<code>class_name</code> that can contain a value for …\n"],["new","Sync_m","classes/Sync_m.html#method-c-new","(*args)",""],["new","Sync_m","classes/Sync_m.html#method-c-new","(*args)",""],["new","SyntaxError","classes/SyntaxError.html#method-c-new","(*args)","<p>Construct a SyntaxError exception.\n"],["new","Syslog::Logger","classes/Syslog/Logger.html#method-c-new","(program_name = 'ruby', facility = nil)","<p>Fills in variables for Logger compatibility.  If this is the first instance\nof Syslog::Logger, <code>program_name</code> …\n"],["new","SystemCallError","classes/SystemCallError.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>If <em>errno</em> corresponds to a known system error code, constructs the\nappropriate <code>Errno</code> class for that error, …\n"],["new","SystemExit","classes/SystemExit.html#method-c-new","(*args)","<p>Create a new <code>SystemExit</code> exception with the given status and\nmessage. Status is true, false, or an integer. …\n"],["new","TCPServer","classes/TCPServer.html#method-c-new","(p1 = v1, p2)","<p>Creates a new server socket bound to <em>port</em>.\n<p>If <em>hostname</em> is given, the socket is bound to it.\n\n<pre><code>serv = TCPServer.new(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["new","TCPSocket","classes/TCPSocket.html#method-c-new","(host, serv, *rest)",""],["new","TCPSocket","classes/TCPSocket.html#method-c-new","(p1, p2, p3 = v3, p4 = v4)","<p>Opens a TCP connection to <code>remote_host</code> on\n<code>remote_port</code>.  If <code>local_host</code> and\n<code>local_port</code> are specified, then …\n"],["new","Tempfile","classes/Tempfile.html#method-c-new","(basename=\"\", tmpdir=nil, mode: 0, **options)","<p>Creates a temporary file with permissions 0600 (= only readable and\nwritable by the owner) and opens …\n"],["new","Thread","classes/Thread.html#method-c-new","(*args)","<p>Creates a new thread executing the given block.\n<p>Any <code>args</code> given to ::new will be passed to the block:\n\n<pre><code>arr ...\n</code></pre>\n"],["new","ThreadsWait","classes/ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","ThreadsWait","classes/ThreadsWait.html#method-c-new","(*threads)","<p>Creates a ThreadsWait object, specifying the threads to wait on.\nNon-blocking.\n"],["new","Time","classes/Time.html#method-c-new","(*args)","<p>Returns a Time object.\n<p>It is initialized to the current system time if no argument is given.\n<p><strong>Note:</strong> The …\n"],["new","TracePoint","classes/TracePoint.html#method-c-new","(*args)","<p>Returns a new TracePoint object, not enabled by default.\n<p>Next, in order to activate the trace, you must …\n"],["new","UDPSocket","classes/UDPSocket.html#method-c-new","(p1 = v1)","<p>Creates a new UDPSocket object.\n<p><em>address_family</em> should be an integer, a string or a symbol:\nSocket::AF_INET …\n"],["new","UNIXServer","classes/UNIXServer.html#method-c-new","(p1)","<p>Creates a new UNIX server socket bound to <em>path</em>.\n\n<pre><code>require &#39;socket&#39;\n\nserv = UNIXServer.new(&quot;/tmp/sock&quot;)\ns ...\n</code></pre>\n"],["new","UNIXSocket","classes/UNIXSocket.html#method-c-new","(p1)","<p>Creates a new UNIX client socket connected to <em>path</em>.\n\n<pre><code>require &#39;socket&#39;\n\ns = UNIXSocket.new(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["new","URI::FTP","classes/URI/FTP.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = nil, arg_check = false)","<p>Description\n<p>Creates a new URI::FTP object from generic URL components with no syntax\nchecking.\n<p>Unlike build(), …\n"],["new","URI::Generic","classes/URI/Generic.html#method-c-new","(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)","<p>Args\n<p><code>scheme</code> &mdash; Protocol scheme, i.e. &#39;http&#39;,&#39;ftp&#39;,&#39;mailto&#39; and so\non.\n<p><code>userinfo</code> &mdash; User …\n"],["new","URI::LDAP","classes/URI/LDAP.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::LDAP object from generic URI components as per RFC 2396.\nNo LDAP-specific …\n"],["new","URI::MailTo","classes/URI/MailTo.html#method-c-new","(*arg)","<p>Description\n<p>Creates a new URI::MailTo object from generic URL components with no syntax\nchecking.\n<p>This …\n"],["new","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-c-new","(opts = {})","<p>Synopsis\n\n<pre><code>URI::Parser.new([opts])\n</code></pre>\n<p>Args\n"],["new","UncaughtThrowError","classes/UncaughtThrowError.html#method-c-new","(*args)","<p>Document-class: UncaughtThrowError\n<p>Raised when <code>throw</code> is called with a <em>tag</em> which does not\nhave corresponding …\n"],["new","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-c-new","(log_file=nil, level=nil)","<p>Initializes a new logger for <code>log_file</code> that outputs messages at\n<code>level</code> or higher.  <code>log_file</code> can be a filename, …\n"],["new","WEBrick::CGI","classes/WEBrick/CGI.html#method-c-new","(*args)","<p>Creates a new CGI interface.\n<p>The first argument in <code>args</code> is a configuration hash which would\nupdate WEBrick::Config::HTTP …\n"],["new","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-new","(name, value)","<p>Creates a new cookie with the given <code>name</code> and\n<code>value</code>\n"],["new","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-c-new","(config={}, default=Config::General)","<p>Creates a new generic server from <code>config</code>.  The default\nconfiguration comes from <code>default</code>.\n"],["new","WEBrick::HTTPAuth::BasicAuth","classes/WEBrick/HTTPAuth/BasicAuth.html#method-c-new","(config, default=Config::BasicAuth)","<p>Creates a new BasicAuth instance.\n<p>See WEBrick::Config::BasicAuth for default configuration entries\n<p>You …\n"],["new","WEBrick::HTTPAuth::DigestAuth","classes/WEBrick/HTTPAuth/DigestAuth.html#method-c-new","(config, default=Config::DigestAuth)","<p>Creates a new DigestAuth instance.  Be sure to use the same DigestAuth\ninstance for multiple requests …\n"],["new","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-c-new","(path)","<p>Open a digest password database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-c-new","(path)","<p>Open a group database at <code>path</code>\n"],["new","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-c-new","(path, password_hash: nil)","<p>Open a password database at <code>path</code>\n"],["new","WEBrick::HTTPProxyServer","classes/WEBrick/HTTPProxyServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Proxy server configurations.  The proxy server handles the following\nconfiguration items in addition …\n"],["new","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-c-new","(config)","<p>Creates a new HTTP request.  WEBrick::Config::HTTP is the default\nconfiguration.\n"],["new","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-c-new","(config)","<p>Creates a new HTTP response object.  WEBrick::Config::HTTP is the default\nconfiguration.\n"],["new","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-c-new","(config={}, default=Config::HTTP)","<p>Creates a new HTTP server according to <code>config</code>\n<p>An HTTP server uses the following attributes:\n<p>:AccessLog … &mdash; "],["new","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-c-new","(server, *options)","<p>Initializes a new servlet for <code>server</code> using\n<code>options</code> which are stored as-is in +@options+.  +@logger+ is …\n"],["new","WEBrick::HTTPServlet::CGIHandler","classes/WEBrick/HTTPServlet/CGIHandler.html#method-c-new","(server, name)","<p>Creates a new CGI script servlet for the script at <code>name</code>\n"],["new","WEBrick::HTTPServlet::DefaultFileHandler","classes/WEBrick/HTTPServlet/DefaultFileHandler.html#method-c-new","(server, local_path)","<p>Creates a DefaultFileHandler instance for the file at\n<code>local_path</code>.\n"],["new","WEBrick::HTTPServlet::ERBHandler","classes/WEBrick/HTTPServlet/ERBHandler.html#method-c-new","(server, name)","<p>Creates a new ERBHandler on <code>server</code> that will evaluate and\nserve the ERB file <code>name</code>\n"],["new","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-new","(server, root, options={}, default=Config::FileHandler)","<p>Creates a FileHandler servlet on <code>server</code> that serves files\nstarting at directory <code>root</code>\n<p><code>options</code> may be a …\n"],["new","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-c-new","(*args)","<p>Creates a new FormData object.\n<p><code>args</code> is an Array of form data entries.  One FormData will be\ncreated for …\n"],["new","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-c-new","(version)","<p>Creates a new HTTPVersion from <code>version</code>.\n"],["new","WEBrick::Log","classes/WEBrick/Log.html#method-c-new","(log_file=nil, level=nil)","<p>Same as BasicLog#initialize\n<p>You can set the timestamp format through #time_format\n"],["new","WEBrick::SNIRequest","classes/WEBrick/SNIRequest.html#method-c-new","(sslsocket, hostname)","<p>Creates a new SNIRequest.\n"],["new","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-new","()","<p>Creates a new TimeoutHandler.  You should use ::register and ::cancel\ninstead of creating the timeout …\n"],["new","WIN32OLE","classes/WIN32OLE.html#method-c-new","(p1, p2 = v2, *args, p4 = {})","<p>Returns a new WIN32OLE object(OLE Automation object). The first argument\nserver specifies OLE Automation …\n"],["new","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-c-new","(*args)","<p>Returns OLE event object. The first argument specifies WIN32OLE object. The\nsecond argument specifies …\n"],["new","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_METHOD object which represents the information about\nOLE method. The first argument …\n"],["new","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_PARAM object which represents OLE parameter information.\n1st argument should be WIN32OLE_METHOD …\n"],["new","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-c-new","(p1, p2)","<p>Returns WIN32OLE_RECORD object. The first argument is struct name (String\nor Symbol). The second parameter …\n"],["new","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-new","(p1, p2)","<p>Returns a new WIN32OLE_TYPE object. The first argument <em>typelib</em>\nspecifies OLE type library name. The second …\n"],["new","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-c-new","(*args)","<p>Returns a new WIN32OLE_TYPELIB object.\n<p>The first argument <em>typelib</em>  specifies OLE type library name or …\n"],["new","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-c-new","(*args)","<p>Returns Ruby object wrapping OLE variant. The first argument specifies Ruby\nobject to convert OLE variant …\n"],["new","WeakRef","classes/WeakRef.html#method-c-new","(orig)","<p>Creates a weak reference to <code>orig</code>\n<p>Raises an ArgumentError if the given <code>orig</code> is immutable, such\nas Symbol …\n"],["new","XMP","classes/XMP.html#method-c-new","(bind = nil)","<p>Creates a new XMP object.\n<p>The top-level binding or, optional <code>bind</code> parameter will be used\nwhen creating …\n"],["new","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-c-new","()","<p>Creates a new StringInputMethod object\n"],["new","YAML::Store","classes/YAML/Store.html#method-c-new","( *o )","<p>Creates a new YAML::Store object, which will store data in\n<code>file_name</code>. If the file does not already exist, …\n"],["new","Zlib::Deflate","classes/Zlib/Deflate.html#method-c-new","(p1 = v1, p2 = v2, p3 = v3, p4 = v4)","<p>Creates a new deflate stream for compression. If a given argument is nil,\nthe default value of that argument …\n"],["new","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-c-new","(p1, p2 = {})","<p>Creates a GzipReader object associated with <code>io</code>. The GzipReader\nobject reads gzipped data from <code>io</code>, and …\n"],["new","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-c-new","(p1, p2 = v2, p3 = v3)","<p>Creates a GzipWriter object associated with <code>io</code>.\n<code>level</code> and <code>strategy</code> should be the same as the\narguments …\n"],["new","Zlib::Inflate","classes/Zlib/Inflate.html#method-c-new","(p1 = v1)","<p>Creates a new inflate stream for decompression.  <code>window_bits</code>\nsets the size of the history buffer and …\n"],["new!","Date","classes/Date.html#method-c-new-21","(p1 = v1, p2 = v2, p3 = v3)",""],["new_alias_name","IRB::MethodExtender","classes/IRB/MethodExtender.html#method-i-new_alias_name","(name, prefix = \"__alias_of__\", postfix = \"__\")","<p>Returns a unique method name to use as an alias for the given\n<code>name</code>.\n<p>Usually returns <code>#{prefix}#{name}#{postfix}&lt;num&gt;</code> …\n"],["new_cond","MonitorMixin","classes/MonitorMixin.html#method-i-new_cond","()","<p>Creates a new MonitorMixin::ConditionVariable associated with the receiver.\n"],["new_ntoh","IPAddr","classes/IPAddr.html#method-c-new_ntoh","(addr)","<p>Creates a new ipaddr containing the given network byte ordered string form\nof an IP address.\n"],["new_offset","DateTime","classes/DateTime.html#method-i-new_offset","(p1 = v1)","<p>Duplicates self and resets its offset.\n\n<pre><code>d = DateTime.new(2001,2,3,4,5,6,&#39;-02:00&#39;)\n                     ...</code></pre>\n"],["new_platform?","Bundler::Definition","classes/Bundler/Definition.html#method-i-new_platform-3F","()",""],["new_seed","Random","classes/Random.html#method-c-new_seed","()","<p>Returns an arbitrary seed value. This is used by Random.new when no seed\nvalue is specified as an argument. …\n"],["new_specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-new_specs","()",""],["new_start","Date","classes/Date.html#method-i-new_start","(p1 = v1)","<p>Duplicates self and resets its day of calendar reform.\n\n<pre><code>d = Date.new(1582,10,15)\nd.new_start(Date::JULIAN) ...\n</code></pre>\n"],["new_with","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host\n<code>uri</code> and object <code>ref</code>.\n"],["new_with","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with","(uri, ref)","<p>Creates a DRb::DRbObject given the reference information to the remote host\n<code>uri</code> and object <code>ref</code>.\n"],["new_with_uri","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_uri","DRb::DRbObject","classes/DRb/DRbObject.html#method-c-new_with_uri","(uri)","<p>Create a new DRbObject from a URI alone.\n"],["new_with_value_if_need","RSS::Utils","classes/RSS/Utils.html#method-i-new_with_value_if_need","(klass, value)","<p>If <code>value</code> is an instance of class <code>klass</code>, return\nit, else create a new instance of <code>klass</code> with value\n<code>value</code> …\n"],["newobj","Net::HTTP","classes/Net/HTTP.html#method-c-newobj","(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)",""],["next","Date","classes/Date.html#method-i-next","()","<p>Returns a date object denoting the following day.\n"],["next","Enumerator","classes/Enumerator.html#method-i-next","()","<p>Returns the next object in the enumerator, and move the internal position\nforward.  When the position …\n"],["next","Integer","classes/Integer.html#method-i-next","()","<p>Returns the successor of <code>int</code>, i.e. the Integer equal to\n<code>int+1</code>.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ ...\n</code></pre>\n"],["next","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-next","()",""],["next","Prime::Generator23","classes/Prime/Generator23.html#method-i-next","()",""],["next","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-next","()","<p>alias of <code>succ</code>.\n"],["next","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-next","()",""],["next","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-next","( event )",""],["next","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-next","( event )",""],["next","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-next","( event )",""],["next","REXML::Validation::Optional","classes/REXML/Validation/Optional.html#method-i-next","( event )",""],["next","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-next","( event )",""],["next","REXML::Validation::ZeroOrMore","classes/REXML/Validation/ZeroOrMore.html#method-i-next","( event )",""],["next","String","classes/String.html#method-i-next","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["next","Symbol","classes/Symbol.html#method-i-next","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["next!","String","classes/String.html#method-i-next-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["next_current","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-next_current","( event )",""],["next_day","Date","classes/Date.html#method-i-next_day","(p1 = v1)","<p>This method is equivalent to d + n.\n"],["next_element","REXML::Element","classes/REXML/Element.html#method-i-next_element","()","<p>Returns the next sibling that is an element, or nil if there is no Element\nsibling after this one\n\n<pre><code>doc ...\n</code></pre>\n"],["next_float","Float","classes/Float.html#method-i-next_float","()","<p>Returns the next representable floating point number.\n<p>Float::MAX.next_float and Float::INFINITY.next_float …\n"],["next_month","Date","classes/Date.html#method-i-next_month","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; n.\n<p>See Date#>> for examples.\n"],["next_rotate_time","Logger::Period","classes/Logger/Period.html#method-i-next_rotate_time","(now, shift_age)",""],["next_sibling=","REXML::Child","classes/REXML/Child.html#method-i-next_sibling-3D","( other )","<p>Sets the next sibling of this child.  This can be used to insert a child\nafter some other child.\n\n<pre><code>a = Element.new(&quot;a&quot;) ...\n</code></pre>\n"],["next_sibling_node","REXML::Node","classes/REXML/Node.html#method-i-next_sibling_node","()","<p>@return the next sibling (nil if unset)\n"],["next_token","Racc::Parser","classes/Racc/Parser.html#method-i-next_token","()","<p>The method to fetch next token. If you use #do_parse method, you must\nimplement #next_token.\n<p>The format …\n"],["next_update","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-next_update","()",""],["next_update","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-next_update","()",""],["next_update=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-next_update-3D","(p1)",""],["next_values","Enumerator","classes/Enumerator.html#method-i-next_values","()","<p>Returns the next object as an array in the enumerator, and move the\ninternal position forward.  When …\n"],["next_wait","ThreadsWait","classes/ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_wait","ThreadsWait","classes/ThreadsWait.html#method-i-next_wait","(nonblock = nil)","<p>Waits until any of the specified threads has terminated, and returns the\none that does.\n<p>If there is no …\n"],["next_year","Date","classes/Date.html#method-i-next_year","(p1 = v1)","<p>This method is equivalent to d &gt;&gt; (n * 12).\n\n<pre><code>Date.new(2001,2,3).next_year      #=&gt; #&lt;Date: 2002-02-03 ...\n</code></pre>\n"],["nil?","NilClass","classes/NilClass.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n"],["nil?","Object","classes/Object.html#method-i-nil-3F","()","<p>Only the object <em>nil</em> responds <code>true</code> to\n<code>nil?</code>.\n\n<pre><code>Object.new.nil?   #=&gt; false\nnil.nil?          #=&gt; true\n</code></pre>\n"],["nkf","NKF","classes/NKF.html#method-c-nkf","(p1, p2)","<p>Convert <em>str</em> and return converted result. Conversion details are\nspecified by <em>opt</em> as String.\n\n<pre><code>require &#39;nkf&#39; ...\n</code></pre>\n"],["nlink","File::Stat","classes/File/Stat.html#method-i-nlink","()","<p>Returns the number of hard links to <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).nlink             #=&gt; 1\nFile.link(&quot;testfile&quot;, ...</code></pre>\n"],["nlsolve","Newton","classes/Newton.html#method-i-nlsolve","(f,x)","<p>See also Newton\n"],["nlst","Net::FTP","classes/Net/FTP.html#method-i-nlst","(dir = nil)","<p>Returns an array of filenames in the remote directory.\n"],["no?","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-no-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “n” or\n“no”.\n"],["no?","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-no-3F","()",""],["no?","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-no-3F","()",""],["no_commands","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-no_commands","()","<p>All methods defined inside the given block are not added as commands.\n<p>So you can do:\n\n<pre><code>class MyScript &lt; Bundler::Thor ...</code></pre>\n"],["no_tasks","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-no_tasks","()",""],["nobits?","Integer","classes/Integer.html#method-i-nobits-3F","(p1)","<p>Returns <code>true</code> if no bits of <code>int &amp; mask</code> are 1.\n"],["node_type","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-node_type","()",""],["node_type","REXML::Attribute","classes/REXML/Attribute.html#method-i-node_type","()",""],["node_type","REXML::Comment","classes/REXML/Comment.html#method-i-node_type","()",""],["node_type","REXML::DocType","classes/REXML/DocType.html#method-i-node_type","()",""],["node_type","REXML::Document","classes/REXML/Document.html#method-i-node_type","()",""],["node_type","REXML::Element","classes/REXML/Element.html#method-i-node_type","()",""],["node_type","REXML::Instruction","classes/REXML/Instruction.html#method-i-node_type","()",""],["node_type","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-node_type","()",""],["node_type","REXML::Text","classes/REXML/Text.html#method-i-node_type","()",""],["node_type","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-node_type","()",""],["noecho","IO","classes/IO.html#method-i-noecho","()","<p>Yields <code>self</code> with disabling echo back.\n\n<pre><code>STDIN.noecho(&amp;:gets)\n</code></pre>\n<p>will read and return a line without echo back. …\n"],["non_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-non_aliases","()","<p>Returns the classes and modules that are not constants aliasing another\nclass or module. For use by formatters …\n"],["nonblock","IO","classes/IO.html#method-i-nonblock","(p1 = v1)","<p>Yields <code>self</code> in non-blocking mode.\n<p>When <code>false</code> is given as an argument, <code>self</code> is\nyielded in blocking mode. …\n"],["nonblock=","IO","classes/IO.html#method-i-nonblock-3D","(p1)","<p>Enables non-blocking mode on a stream when set to <code>true</code>, and\nblocking mode when set to <code>false</code>.\n"],["nonblock?","IO","classes/IO.html#method-i-nonblock-3F","()","<p>Returns <code>true</code> if an IO object is in non-blocking mode.\n"],["none?","Array","classes/Array.html#method-i-none-3F","(*args)","<p>See also Enumerable#none?\n"],["none?","Enumerable","classes/Enumerable.html#method-i-none-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block never …\n"],["nonzero?","BigDecimal","classes/BigDecimal.html#method-i-nonzero-3F","()","<p>Returns self if the value is non-zero, nil otherwise.\n"],["nonzero?","Numeric","classes/Numeric.html#method-i-nonzero-3F","()","<p>Returns <code>self</code> if <code>num</code> is not zero, <code>nil</code>\notherwise.\n<p>This behavior is useful when chaining comparisons:\n\n<pre><code>a = ...</code></pre>\n"],["noop","Net::FTP","classes/Net/FTP.html#method-i-noop","()","<p>Issues a NOOP command.\n<p>Does nothing except return a response.\n"],["noop","Net::IMAP","classes/Net/IMAP.html#method-i-noop","()","<p>Sends a NOOP command to the server. It does nothing.\n"],["normalize","RDoc::Comment","classes/RDoc/Comment.html#method-i-normalize","()","<p>Normalizes the text.  See RDoc::Text#normalize_comment for details\n"],["normalize","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-normalize","( input, entities=nil, entity_filter=nil )","<p>Escapes all possible entities\n"],["normalize","RSS::Maker::ItemsBase","classes/RSS/Maker/ItemsBase.html#method-i-normalize","()",""],["normalize","URI::Generic","classes/URI/Generic.html#method-i-normalize","()","<p>Returns normalized URI.\n\n<pre><code>require &#39;uri&#39;\n\nURI(&quot;HTTP://my.EXAMPLE.com&quot;).normalize\n#=&gt; #&lt;URI::HTTP http://my.example.com/&gt;\n</code></pre>\n"],["normalize!","URI::Generic","classes/URI/Generic.html#method-i-normalize-21","()","<p>Destructive version of #normalize.\n"],["normalize_comment","RDoc::Text","classes/RDoc/Text.html#method-i-normalize_comment","(text)","<p>Strips hashes, expands tabs then flushes <code>text</code> to the left\n"],["normalize_path","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-normalize_path","(path)","<p>Normalizes a request path.  Raises an exception if the path cannot be\nnormalized.\n"],["normalize_space","REXML::Functions","classes/REXML/Functions.html#method-c-normalize_space","( string=nil )","<p>UNTESTED\n"],["normalize_uri","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-normalize_uri","(uri)","<p>Adds “http://” to the String <code>uri</code> if it is missing.\n"],["normalized","REXML::Entity","classes/REXML/Entity.html#method-i-normalized","()","<p>Returns the value of this entity unprocessed – raw.  This is the normalized\nvalue; that is, with all …\n"],["normalized_file_list","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-normalized_file_list","(relative_files, force_doc = false, exclude_pattern = nil)","<p>Given a list of files and directories, create a list of all the Ruby files\nthey contain.\n<p>If <code>force_doc</code> …\n"],["not","REXML::Functions","classes/REXML/Functions.html#method-c-not","( object )","<p>UNTESTED\n"],["not_after","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_after","()",""],["not_after=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_after-3D","(p1)",""],["not_before","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_before","()",""],["not_before=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-not_before-3D","(p1)",""],["not_debugging?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["not_debugging?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-not_debugging-3F","(instance)",""],["not_found","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-not_found","(generator, req, res, message = nil)","<p>Returns a 404 page built by <code>generator</code> for <code>req</code> on\n<code>res</code>.\n"],["not_set_name","RSS::Maker::Atom::Entry::Channel::Generator","classes/RSS/Maker/Atom/Entry/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Categories::Category","classes/RSS/Maker/Atom/Feed/Channel/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Generator","classes/RSS/Maker/Atom/Feed/Channel/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Channel::Links::Link","classes/RSS/Maker/Atom/Feed/Channel/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Categories::Category","classes/RSS/Maker/Atom/Feed/Items/Item/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Links::Link","classes/RSS/Maker/Atom/Feed/Items/Item/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Categories::Category","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Categories/Category.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Generator","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Generator.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Links::Link","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Links/Link.html#method-c-not_set_name","()",""],["not_set_name","RSS::Maker::Atom::Feed::Items::Item::Source::Logo","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Logo.html#method-c-not_set_name","()",""],["notation","REXML::DocType","classes/REXML/DocType.html#method-i-notation","(name)","<p>Retrieves a named notation. Only notations declared in the internal DTD\nsubset can be retrieved.\n<p>Method …\n"],["notationdecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-notationdecl","(name, public_or_system, public_id, system_id)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-notationdecl","(content)","<p>&lt;!NOTATION …&gt;\n"],["notationdecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-notationdecl-3F","()","<p>Content: [ String text ]\n"],["notations","REXML::DocType","classes/REXML/DocType.html#method-i-notations","()","<p>This method returns a list of notations that have been declared in the\n<em>internal</em> DTD subset. Notations …\n"],["note","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-note","(label)","<p>Stores <code>label</code> as a note and fills in previously unknown note\nreferences.\n"],["note_for","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-note_for","(ref)","<p>Creates a new link for the footnote <code>reference</code> and adds the\nreference to\nthe note order list for proper ...\n"],["notes","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-notes","","<p>Enables the notes extension\n"],["nothing_changed?","Bundler::Definition","classes/Bundler/Definition.html#method-i-nothing_changed-3F","()",""],["notify","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-notify","(ev)","<p>Called by TupleSpace to notify this NotifyTemplateEntry of a new event.\n"],["notify","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-notify","(event, tuple, sec=nil)","<p>Registers for notifications of <code>event</code>.  Returns a\nNotifyTemplateEntry. See NotifyTemplateEntry for examples …\n"],["notify","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-notify","(ev, tuple, sec=nil)","<p>Registers for notifications of event <code>ev</code> on the proxied\nTupleSpace. See TupleSpace#notify\n"],["notify","Shell","classes/Shell.html#method-c-notify","(*opts)",""],["notify","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-notify","(*opts)","<p>%pwd, %cwd -&gt; @pwd\n"],["notify","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-notify","(*opts)","<p>ex)\n\n<pre><code>if you wish to output:\n   &quot;shell: job(#{@command}:#{@pid}) close pipe-out.&quot;\nthen\n   mes: &quot;job(%id) ...</code></pre>\n"],["notify?","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-notify-3F","()","<p>A wrapper method used to determine whether notifications are enabled.\n<p>Defaults to <code>true</code>.\n"],["notify?","IRB::Notifier::LeveledNotifier","classes/IRB/Notifier/LeveledNotifier.html#method-i-notify-3F","()","<p>Whether to output messages to the output method, depending on the level of\nthis notifier object.\n"],["notify?","IRB::Notifier::NoMsgNotifier","classes/IRB/Notifier/NoMsgNotifier.html#method-i-notify-3F","()","<p>Ensures notifications are ignored, see AbstractNotifier#notify? for more\ninformation.\n"],["notify_observers","DRb::DRbObservable","classes/DRb/DRbObservable.html#method-i-notify_observers","(*arg)","<p>Notifies observers of a change in state.  See also\nObservable#notify_observers\n"],["notify_observers","Observable","classes/Observable.html#method-i-notify_observers","(*arg)","<p>Notify observers of a change in state <strong>if</strong> this object&#39;s\nchanged state is <code>true</code>.\n<p>This will invoke the …\n"],["now","DateTime","classes/DateTime.html#method-c-now","(p1 = v1)","<p>Creates a DateTime object denoting the present time.\n\n<pre><code>DateTime.now              #=&gt; #&lt;DateTime: 2011-06-11T21:20:44+09:00 ...\n</code></pre>\n"],["now","Time","classes/Time.html#method-c-now","()","<p>Creates a new Time object for the current time. This is same as Time.new\nwithout arguments.\n\n<pre><code>Time.now  ...\n</code></pre>\n"],["nowrite","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-nowrite","()",""],["npn_protocol","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-npn_protocol","()","<p>Returns the protocol string that was finally selected by the client during\nthe handshake.\n"],["nprocessors","Etc","classes/Etc.html#method-c-nprocessors","()","<p>Returns the number of online processors.\n<p>The result is intended as the number of processes to use all …\n"],["nread","IO","classes/IO.html#method-i-nread","()","<p>Returns number of bytes that can be read without blocking. Returns zero if\nno information available. …\n"],["nsec","Time","classes/Time.html#method-i-nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...\n</code></pre>\n"],["nth_kday","Date","classes/Date.html#method-c-nth_kday","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)",""],["nth_kday","DateTime","classes/DateTime.html#method-c-nth_kday","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9)",""],["nth_kday?","Date","classes/Date.html#method-i-nth_kday-3F","(p1, p2)",""],["ntop","IPAddr","classes/IPAddr.html#method-c-ntop","(addr)","<p>Convert a network byte ordered string form of an IP address into human\nreadable form.\n"],["null?","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-null-3F","()","<p>Returns <code>true</code> if this is a null pointer.\n"],["num_bits","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-num_bits","()",""],["num_bytes","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-num_bytes","()",""],["num_waiting","Queue","classes/Queue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["num_waiting","SizedQueue","classes/SizedQueue.html#method-i-num_waiting","()","<p>Returns the number of threads waiting on the queue.\n"],["number","REXML::Functions","classes/REXML/Functions.html#method-c-number","( object=nil )","<p>a string that consists of optional whitespace followed by an optional minus\nsign followed by a Number …\n"],["numerator","Complex","classes/Complex.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre><code>    1   2       3+4i  &lt;-  numerator\n    - + -i  -&gt;  ----\n    2   3        6    ...</code></pre>\n"],["numerator","Float","classes/Float.html#method-i-numerator","()","<p>Returns the numerator.  The result is machine dependent.\n\n<pre><code>n = 0.3.numerator    #=&gt; 5404319552844595\nd = ...</code></pre>\n"],["numerator","Integer","classes/Integer.html#method-i-numerator","()","<p>Returns self.\n"],["numerator","Numeric","classes/Numeric.html#method-i-numerator","()","<p>Returns the numerator.\n"],["numerator","Rational","classes/Rational.html#method-i-numerator","()","<p>Returns the numerator.\n\n<pre><code>Rational(7).numerator        #=&gt; 7\nRational(7, 1).numerator     #=&gt; 7\nRational(9, ...</code></pre>\n"],["object_address_group","PP::PPMethods","classes/PP/PPMethods.html#method-i-object_address_group","(obj, &block)","<p>A convenience method, like object_group, but also reformats the\nObject&#39;s object_id.\n"],["object_class","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-object_class","()","<p>Returns the NormalClass “Object”, creating it if not found.\n<p>Records <code>self</code> as a location in “Object”. …\n"],["object_group","PP::PPMethods","classes/PP/PPMethods.html#method-i-object_group","(obj)","<p>A convenience method which is same as follows:\n\n<pre><code>group(1, &#39;#&lt;&#39; + obj.class.name, &#39;&gt;&#39;) { ... }</code></pre>\n"],["object_id","Object","classes/Object.html#method-i-object_id","()","<p>Returns an integer identifier for <code>obj</code>.\n<p>The same number will be returned on all calls to <code>object_id</code> for\n…\n"],["object_nl","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl","()","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["object_nl=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-object_nl-3D","(p1)","<p>This string is put at the end of a line that holds a JSON object (or Hash).\n"],["oct","String","classes/String.html#method-i-oct","()","<p>Treats leading characters of <em>str</em> as a string of octal digits (with\nan optional sign) and returns the …\n"],["odd?","Integer","classes/Integer.html#method-i-odd-3F","()","<p>Returns <code>true</code> if <code>int</code> is an odd number.\n"],["odd?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-odd-3F","()",""],["of","RubyVM::AbstractSyntaxTree","classes/RubyVM/AbstractSyntaxTree.html#method-c-of","(p1)","<p>Returns AST nodes of the given proc or method.\n\n<pre><code>RubyVM::AbstractSyntaxTree.of(proc {1 + 2})\n# =&gt; #&lt;RubyVM::AbstractSyntaxTree::Node(NODE_SCOPE(0) ...\n</code></pre>\n"],["of","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-c-of","(p1)","<p>Returns the instruction sequence containing the given proc or method.\n<p>For example, using irb:\n\n<pre><code># a proc ...\n</code></pre>\n"],["off","Tracer","classes/Tracer.html#method-c-off","()","<p>Disable tracing\n"],["off_event","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-off_event","(p1 = v1)","<p>removes the callback of event.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;)\nev = WIN32OLE_EVENT.new(ie) ...\n</code></pre>\n"],["offset","DateTime","classes/DateTime.html#method-i-offset","()","<p>Returns the offset.\n\n<pre><code>DateTime.parse(&#39;04pm+0730&#39;).offset        #=&gt; (5/16)\n</code></pre>\n"],["offset","MatchData","classes/MatchData.html#method-i-offset","(p1)","<p>Returns a two-element array containing the beginning and ending offsets of\nthe <em>n</em>th match. <em>n</em> can be a …\n"],["offset_vtbl","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-offset_vtbl","()","<p>Returns the offset ov VTBL.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...\n</code></pre>\n"],["oflush","IO","classes/IO.html#method-i-oflush","()","<p>Flushes output buffer in kernel.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["oid","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-i-oid","()","<p>Returns a String representing the Object Identifier in the dot notation,\ne.g. “1.2.3.4.5”\n"],["oid","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-oid","()",""],["oid","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-oid","()",""],["oid=","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-oid-3D","(p1)",""],["oid=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-oid-3D","(p1)",""],["old_enc=","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-old_enc-3D","( enc )",""],["ole_activex_initialize","WIN32OLE","classes/WIN32OLE.html#method-i-ole_activex_initialize","()","<p>Initialize WIN32OLE object(ActiveX Control) by calling\nIPersistMemory::InitNew.\n<p>Before calling OLE method, …\n"],["ole_classes","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-ole_classes","(p1)","<p>Returns array of WIN32OLE_TYPE objects defined by the <em>typelib</em> type\nlibrary. This method will be OBSOLETE …\n"],["ole_classes","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-ole_classes","()",""],["ole_free","WIN32OLE","classes/WIN32OLE.html#method-i-ole_free","()","<p>invokes Release method of Dispatch interface of WIN32OLE object. Usually,\nyou do not need to call this …\n"],["ole_free","WIN32OLE","classes/WIN32OLE.html#method-c-ole_free","(p1)","<p>Invokes Release method of Dispatch interface of WIN32OLE object. You should\nnot use this method because …\n"],["ole_func_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_func_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_get_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_get_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (gettable) of WIN32OLE …\n"],["ole_instance_variable_get","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-ole_instance_variable_get","(p1)","<p>Returns value specified by the member name of VT_RECORD OLE object. If the\nmember name is not correct, …\n"],["ole_instance_variable_set","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-ole_instance_variable_set","(p1, p2)","<p>Sets value specified by the member name of VT_RECORD OLE object. If the\nmember name is not correct,  …\n"],["ole_method","WIN32OLE","classes/WIN32OLE.html#method-i-ole_method","(p1)","<p>Returns WIN32OLE_METHOD object corresponding with method specified by 1st\nargument.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...\n</code></pre>\n"],["ole_method_help","WIN32OLE","classes/WIN32OLE.html#method-i-ole_method_help","(p1)",""],["ole_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_methods","()","<p>Returns the array of WIN32OLE_METHOD object. The element is OLE method of\nWIN32OLE object.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;) ...\n</code></pre>\n"],["ole_methods","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_methods","()","<p>Returns array of WIN32OLE_METHOD objects which represent OLE method defined\nin OLE type library.\n\n<pre><code>tobj ...\n</code></pre>\n"],["ole_obj_help","WIN32OLE","classes/WIN32OLE.html#method-i-ole_obj_help","()",""],["ole_put_methods","WIN32OLE","classes/WIN32OLE.html#method-i-ole_put_methods","()","<p>Returns the array of WIN32OLE_METHOD object . The element of the array is\nproperty (settable) of WIN32OLE …\n"],["ole_query_interface","WIN32OLE","classes/WIN32OLE.html#method-i-ole_query_interface","(p1)","<p>Returns WIN32OLE object for a specific dispatch or dual interface specified\nby iid.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...\n</code></pre>\n"],["ole_reference_count","WIN32OLE","classes/WIN32OLE.html#method-c-ole_reference_count","(p1)","<p>Returns reference counter of Dispatch interface of WIN32OLE object. You\nshould not use this method because …\n"],["ole_respond_to?","WIN32OLE","classes/WIN32OLE.html#method-i-ole_respond_to-3F","(p1)","<p>Returns true when OLE object has OLE method, otherwise returns false.\n\n<pre><code>ie = WIN32OLE.new(&#39;InternetExplorer.Application&#39;) ...\n</code></pre>\n"],["ole_show_help","WIN32OLE","classes/WIN32OLE.html#method-c-ole_show_help","(p1, p2 = v2)","<p>Displays helpfile. The 1st argument specifies WIN32OLE_TYPE object or\nWIN32OLE_METHOD object or helpfile. …\n"],["ole_type","WIN32OLE","classes/WIN32OLE.html#method-i-ole_type","()","<p>Returns WIN32OLE_TYPE object.\n\n<pre><code>excel = WIN32OLE.new(&#39;Excel.Application&#39;)\ntobj = excel.ole_type\n</code></pre>\n"],["ole_type","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-ole_type","()","<p>Returns OLE type of WIN32OLE_PARAM object(parameter of OLE method).\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["ole_type","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_type","()","<p>returns type of OLE class.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Application&#39;) ...\n</code></pre>\n"],["ole_type","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-ole_type","()","<p>Returns OLE type string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...\n</code></pre>\n"],["ole_type_detail","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-ole_type_detail","()","<p>Returns detail information of type of argument.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["ole_type_detail","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-ole_type_detail","()","<p>Returns detail information of type. The information is array of type.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;DirectX ...</code></pre>\n"],["ole_typelib","WIN32OLE","classes/WIN32OLE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object. The object represents the type library\nwhich contains the WIN32OLE …\n"],["ole_typelib","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-ole_typelib","()","<p>Returns the WIN32OLE_TYPELIB object which is including the WIN32OLE_TYPE\nobject. If it is not found, …\n"],["ole_types","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-ole_types","()","<p>Returns the type library file path.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...\n</code></pre>\n"],["on","OptionParser","classes/OptionParser.html#method-i-on","(*opts, &block)","<p>Add option switch and handler. See #make_switch for an explanation of\nparameters.\n"],["on","Tracer","classes/Tracer.html#method-c-on","()","<p>Start tracing\n<p>Example\n\n<pre><code>Tracer.on\n# code to trace here\nTracer.off\n</code></pre>\n"],["on_attr_charref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_charref","(code)",""],["on_attr_charref_hex","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_charref_hex","(code)",""],["on_attr_entityref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_entityref","(ref)",""],["on_attr_value","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attr_value","(str)",""],["on_attribute","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_attribute","(name)",""],["on_charref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_charref","(code)",""],["on_charref_hex","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_charref_hex","(code)",""],["on_curve?","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-on_curve-3F","()",""],["on_entityref","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_entityref","(ref)",""],["on_error","Racc::Parser","classes/Racc/Parser.html#method-i-on_error","(t, val, vstack)","<p>This method is called when a parse error is found.\n<p>ERROR_TOKEN_ID is an internal ID of token which caused …\n"],["on_etag","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_etag","(name)",""],["on_event","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-on_event","(*args)","<p>Defines the callback event. If argument is omitted, this method defines the\ncallback of all events.  …\n"],["on_event_with_outargs","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-on_event_with_outargs","(*args)","<p>Defines the callback of event. If you want modify argument in callback, you\ncould use this method instead …\n"],["on_head","OptionParser","classes/OptionParser.html#method-i-on_head","(*opts, &block)","<p>Add option switch like with #on, but at head of summary.\n"],["on_stag","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag","(name)",""],["on_stag_end","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag_end","(name)",""],["on_stag_end_empty","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_stag_end_empty","(name)",""],["on_tail","OptionParser","classes/OptionParser.html#method-i-on_tail","(*opts, &block)","<p>Add option switch like with #on, but at tail of summary.\n"],["on_xmldecl_encoding","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_encoding","(str)",""],["on_xmldecl_end","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_end","()",""],["on_xmldecl_standalone","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_standalone","(str)",""],["on_xmldecl_version","RSS::XMLScanListener","classes/RSS/XMLScanListener.html#method-i-on_xmldecl_version","(str)",""],["one?","Array","classes/Array.html#method-i-one-3F","(*args)","<p>See also Enumerable#one?\n"],["one?","Enumerable","classes/Enumerable.html#method-i-one-3F","(*args)","<p>Passes each element of the collection to the given block. The method\nreturns <code>true</code> if the block returns …\n"],["one?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-one-3F","()",""],["ongoing_visibility=","RDoc::Context","classes/RDoc/Context.html#method-i-ongoing_visibility-3D","(visibility)","<p>Changes the visibility for new methods to <code>visibility</code>\n"],["opaque=","URI::Generic","classes/URI/Generic.html#method-i-opaque-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["open","Bundler::CLI","classes/Bundler/CLI.html#method-i-open","(name)",""],["open","CSV","classes/CSV.html#method-c-open","(filename, mode=\"r\", **options)","<p>This method opens an IO object, and wraps that with CSV.  This is intended\nas the primary interface for …\n"],["open","DBM","classes/DBM.html#method-c-open","(*args)","<p>Open a dbm database and yields it if a block is given. See also\n<code>DBM.new</code>.\n"],["open","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-open","(uri, config, first=true)","<p>Open a client connection to <code>uri</code> with the configuration\n<code>config</code>.\n<p>The DRbProtocol module asks each registered …\n"],["open","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-open","(uri, config)","<p>Return an DRb::DRbSSLSocket instance as a client-side connection, with the\nSSL connected.  This is called …\n"],["open","Dir","classes/Dir.html#method-c-open","(*args)","<p>The optional <em>encoding</em> keyword argument specifies the encoding of\nthe directory. If not specified, the …\n"],["open","File","classes/File.html#method-c-open","(*args)","<p>With no associated block, <code>File.open</code> is a synonym for File.new.\nIf the optional code block is given, it …\n"],["open","GDBM","classes/GDBM.html#method-c-open","(*args)","<p>If called without a block, this is synonymous to GDBM::new. If a block is\ngiven, the new GDBM instance …\n"],["open","IO","classes/IO.html#method-c-open","(*args)","<p>With no associated block, <code>IO.open</code> is a synonym for IO.new.  If\nthe optional code block is given, it will …\n"],["open","Kernel","classes/Kernel.html#method-c-open","(*args)","<p>Creates an IO object connected to the given stream, file, or subprocess.\n<p>If <code>path</code> does not start with a …\n"],["open","Net::FTP","classes/Net/FTP.html#method-c-open","(host, *args)","<p>A synonym for <code>FTP.new</code>, but with a mandatory host parameter.\n<p>If a block is given, it is passed the <code>FTP</code> …\n"],["open","OpenURI::OpenRead","classes/OpenURI/OpenRead.html#method-i-open","(*rest, &block)","<p>OpenURI::OpenRead#open provides `open&#39; for URI::HTTP and URI::FTP.\n<p>OpenURI::OpenRead#open takes optional …\n"],["open","PTY","classes/PTY.html#method-c-open","()","<p>Allocates a pty (pseudo-terminal).\n<p>In the block form, yields two arguments <code>master_io, slave_file</code>\nand the …\n"],["open","Pathname","classes/Pathname.html#method-i-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Opens the file for reading or writing.\n<p>See File.open.\n"],["open","Resolv::DNS","classes/Resolv/DNS.html#method-c-open","(*args)","<p>Creates a new DNS resolver.  See Resolv::DNS.new for argument details.\n<p>Yields the created DNS resolver …\n"],["open","SDBM","classes/SDBM.html#method-c-open","(*args)","<p>If called without a block, this is the same as SDBM.new.\n<p>If a block is given, the new database will be …\n"],["open","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-open","(path, mode = nil, perm = 0666, &b)","<p>See IO.open when <code>path</code> is a file.\n<p>See Dir.open when <code>path</code> is a directory.\n"],["open","StringIO","classes/StringIO.html#method-c-open","(*args)","<p>Equivalent to StringIO.new except that when it is called with a block, it\nyields with the new instance …\n"],["open","Syslog","classes/Syslog.html#method-c-open","(p1 = v1, p2 = v2, p3 = v3)","<p>Open the syslog facility. Raises a runtime exception if it is already open.\n<p>Can be called with or without …\n"],["open","Tempfile","classes/Tempfile.html#method-c-open","(*args)","<p>Creates a new Tempfile.\n<p>If no block is given, this is a synonym for Tempfile.new.\n<p>If a block is given, …\n"],["open","Tempfile","classes/Tempfile.html#method-i-open","()","<p>Opens or reopens the file with mode “r+”.\n"],["open","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> as a gzipped file, and\nreturns a GzipReader object associated with …\n"],["open","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-c-open","(*args)","<p>Opens a file specified by <code>filename</code> for writing gzip compressed\ndata, and returns a GzipWriter object …\n"],["open!","Syslog","classes/Syslog.html#method-c-open-21","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["open_message_stream","Net::SMTP","classes/Net/SMTP.html#method-i-open_message_stream","(from_addr, *to_addrs)","<p>Opens a message writer stream and gives it to the block. The stream is\nvalid only in the block, and has …\n"],["open_server","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-open_server","(uri, config, first=true)","<p>Open a server listening for connections at <code>uri</code> with\nconfiguration <code>config</code>.\n<p>The DRbProtocol module asks …\n"],["open_server","DRb::DRbSSLSocket","classes/DRb/DRbSSLSocket.html#method-c-open_server","(uri, config)","<p>Returns a DRb::DRbSSLSocket instance as a server-side connection, with the\nSSL connected.  This is called …\n"],["opendir","Pathname","classes/Pathname.html#method-i-opendir","()","<p>Opens the referenced directory.\n<p>See Dir.open.\n"],["opened?","Syslog","classes/Syslog.html#method-c-opened-3F","()","<p>Returns true if the syslog is open.\n"],["option","Bundler::Thor","classes/Bundler/Thor.html#method-c-option","(name, options = {})",""],["option_list","RDoc::Task","classes/RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["option_list","RDoc::Task","classes/RDoc/Task.html#method-i-option_list","()","<p>List of options that will be supplied to RDoc\n"],["optional?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-optional-3F","()","<p>Returns true if argument is optional.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbook&#39;) ...\n</code></pre>\n"],["options","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-options","()",""],["options","Bundler::Thor","classes/Bundler/Thor.html#method-c-options","(options = nil)",""],["options","Net::HTTP","classes/Net/HTTP.html#method-i-options","(path, initheader = nil)","<p>Sends a OPTIONS request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["options","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-options","()","<p>Gets various OpenSSL options.\n"],["options","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-options","()","<p>Actual OptionParser object, automatically created if nonexistent.\n<p>If called with a block, yields the  …\n"],["options","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-options","()","<p>The options instance from the store this CodeObject is attached to, or a\ndefault options instance if …\n"],["options","Regexp","classes/Regexp.html#method-i-options","()","<p>Returns the set of bits corresponding to the options used when creating\nthis Regexp (see <code>Regexp::new</code> …\n"],["options","Syslog","classes/Syslog.html#method-c-options","()","<p>Returns the options bitmask used in the last call to open()\n"],["options=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-options-3D","(p1)","<p>Sets various OpenSSL options.\n"],["options=","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-options-3D","(opt)","<p>Sets OptionParser object, when <code>opt</code> is <code>false</code> or\n<code>nil</code>, methods OptionParser::Arguable#options and\nOptionParser::Arguable#options= …\n"],["options_to_lock","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-options_to_lock","()","<p>Options to be saved in the lockfile so that the source plugin is able to\ncheck out same version of gem …\n"],["optname","Socket::Option","classes/Socket/Option.html#method-i-optname","()","<p>returns the socket option name as an integer.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).optname ...\n</code></pre>\n"],["ord","Integer","classes/Integer.html#method-i-ord","()","<p>Returns the <code>int</code> itself.\n\n<pre><code>97.ord   #=&gt; 97\n</code></pre>\n<p>This method is intended for compatibility to character literals …\n"],["ord","String","classes/String.html#method-i-ord","()","<p>Returns the <code>Integer</code> ordinal of a one-character string.\n\n<pre><code>&quot;a&quot;.ord         #=&gt; 97\n</code></pre>\n"],["order","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-order","()","<p>Returns the order of the group.\n<p>See the OpenSSL documentation for EC_GROUP_get_order()\n"],["order","OptionParser","classes/OptionParser.html#method-i-order","(*argv, into: nil, &nonopt)","<p>Parses command line arguments <code>argv</code> in order. When a block is\ngiven, each non-option argument is yielded. …\n"],["order!","OptionParser","classes/OptionParser.html#method-i-order-21","(argv = default_argv, into: nil, &nonopt)","<p>Same as #order, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["order!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-order-21","(&blk)","<p>Parses <code>self</code> destructively in order and returns\n<code>self</code> containing the rest arguments left unparsed.\n"],["ordering=","GetoptLong","classes/GetoptLong.html#method-i-ordering-3D","(ordering)","<p>Set the handling of the ordering of options and arguments. A RuntimeError\nis raised if option processing …\n"],["ordinal","Date","classes/Date.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3)","<p>Creates a date object denoting the given ordinal date.\n<p>The day of year should be a negative or a positive …\n"],["ordinal","DateTime","classes/DateTime.html#method-c-ordinal","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7)","<p>Creates a DateTime object denoting the given ordinal date.\n\n<pre><code>DateTime.ordinal(2001,34) #=&gt; #&lt;DateTime: 2001-02-03T00:00:00+00:00 ...\n</code></pre>\n"],["orig_initialize","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-orig_initialize","(extensions = DEFAULT_EXTENSIONS, debug = false)","<p>TODO remove when kpeg 0.10 is released\n"],["orig_name","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-orig_name","()","<p>Returns original filename recorded in the gzip file header, or\n<code>nil</code> if original filename is not present. …\n"],["orig_name=","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-orig_name-3D","(p1)","<p>Specify the original name (<code>str</code>) in the gzip header.\n"],["original_env","Bundler","classes/Bundler.html#method-c-original_env","()","<p>@return [Hash] Environment present before Bundler was activated\n"],["original_name","Method","classes/Method.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre><code>class C\n  def foo; end\n  alias bar foo\nend\nC.instance_method(:bar).original_name ...\n</code></pre>\n"],["original_name","UnboundMethod","classes/UnboundMethod.html#method-i-original_name","()","<p>Returns the original name of the method.\n\n<pre><code>class C\n  def foo; end\n  alias bar foo\nend\nC.instance_method(:bar).original_name ...\n</code></pre>\n"],["os_code","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-os_code","()","<p>Returns OS code number recorded in the gzip file header.\n"],["os_match","Bundler::GemHelpers::PlatformMatch","classes/Bundler/GemHelpers/PlatformMatch.html#method-c-os_match","(spec_platform, user_platform)",""],["other_elements","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-c-other_elements","()",""],["otool_available?","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-otool_available-3F","()",""],["out","CGI","classes/CGI.html#method-i-out","(options = \"text/html\")","<p>Print an HTTP header and body to $DEFAULT_OUTPUT ($&gt;)\n<p><code>content_type_string</code> &mdash; If a string is passed, it …\n"],["out","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-out","(dev = STDOUT, &block)","<p>Calls <code>device.print</code> on the result passing the <em>block</em> to\n#transact\n"],["out_of_line?","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-out_of_line-3F","()","<p>Returns true if the element contains linked content.\n"],["out_of_line?","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-out_of_line-3F","()",""],["outdated","Bundler::CLI","classes/Bundler/CLI.html#method-i-outdated","(*gems)",""],["output","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-output","()","<p>The {IO} object that should be used to print output. `STDOUT`, by default.\n<p>@return [IO]\n"],["output=","Readline","classes/Readline.html#method-c-output-3D","(p1)","<p>Specifies a File object <code>output</code> that is output stream for\nReadline.readline method.\n"],["output?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-output-3F","()","<p>Returns true if argument is output.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Internet Controls&#39;, &#39;DWebBrowserEvents&#39;) ...\n</code></pre>\n"],["output_encoding=","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-output_encoding-3D","(enc)",""],["output_flag_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-output_flag_file","(op_dir)","<p>Return the path name of the flag file in an output directory.\n"],["output_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-output_name","(context)","<p>Name for output to HTML.  For class methods the full name with a “.” is\nused like <code>SomeClass.method_name</code> …\n"],["output_post_install_messages","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-output_post_install_messages","(messages)",""],["output_without_groups_message","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-output_without_groups_message","()",""],["owned?","File","classes/File.html#method-c-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","File::Stat","classes/File/Stat.html#method-i-owned-3F","()","<p>Returns <code>true</code> if the effective user id of the process is the\nsame as the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).owned? ...\n</code></pre>\n"],["owned?","FileTest","classes/FileTest.html#method-i-owned-3F","(p1)","<p>Returns <code>true</code> if the named file exists and the effective used\nid of the calling process is the owner of …\n"],["owned?","Mutex","classes/Mutex.html#method-i-owned-3F","()","<p>Returns <code>true</code> if this lock is currently held by current thread.\n"],["owned?","Pathname","classes/Pathname.html#method-i-owned-3F","()","<p>See FileTest.owned?.\n"],["owner","Method","classes/Method.html#method-i-owner","()","<p>Returns the class or module that defines the method. See also receiver.\n\n<pre><code>(1..3).method(:map).owner #=&gt; ...\n</code></pre>\n"],["owner","UnboundMethod","classes/UnboundMethod.html#method-i-owner","()","<p>Returns the class or module that defines the method. See also receiver.\n\n<pre><code>(1..3).method(:map).owner #=&gt; ...\n</code></pre>\n"],["p","Kernel","classes/Kernel.html#method-i-p","(*args)","<p>For each object, directly writes <em>obj</em>.<code>inspect</code> followed\nby a newline to the program&#39;s standard output. …\n"],["p","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-p","()","<p>Returns the permutation matrix <code>P</code>\n"],["pack","Array","classes/Array.html#method-i-pack","(p1, p2 = {})","<p>Packs the contents of <em>arr</em> into a binary sequence according to the\ndirectives in <em>aTemplateString</em> (see …\n"],["pack_sockaddr_in","Socket","classes/Socket.html#method-c-pack_sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre><code>Socket.sockaddr_in(80, &quot;127.0.0.1&quot;)\n#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...\n</code></pre>\n"],["pack_sockaddr_un","Socket","classes/Socket.html#method-c-pack_sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre><code>Socket.sockaddr_un(&quot;/tmp/sock&quot;) #=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;\n</code></pre>\n"],["package","Bundler::CLI","classes/Bundler/CLI.html#method-i-package","()",""],["package_name","Bundler::Thor","classes/Bundler/Thor.html#method-c-package_name","(name, _ = {})","<p>Allows for custom “Command” package naming.\n<p>Parameters\n<p>name&lt;String&gt; options&lt;Hash&gt; …\n"],["padding=","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-padding-3D","(value)","<p>Sets the output padding, not allowing less than zero values.\n"],["padding=","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-padding-3D","(p1)","<p>Enables or disables padding. By default encryption operations are padded\nusing standard block padding …\n"],["page","RDoc::Store","classes/RDoc/Store.html#method-i-page","(name)","<p>Returns the RDoc::TopLevel that is a text file and has the given\n<code>name</code>\n"],["page_file","RDoc::Store","classes/RDoc/Store.html#method-i-page_file","(page_name)","<p>Path to the ri data for <code>page_name</code>\n"],["page_name","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-page_name","()","<p>Base name of this file without the extension\n"],["pair","Socket","classes/Socket.html#method-c-pair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["pair","UNIXSocket","classes/UNIXSocket.html#method-c-pair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["paragraph","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-paragraph","(parts)","<p>Creates an RDoc::Markup::Paragraph from <code>parts</code> and\nincluding\nextension-specific behavior\n"],["param_list","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_list","()","<p>A list of this method&#39;s method and yield parameters. \n<code>call-seq</code> params are preferred over parsed method …\n"],["param_seq","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-param_seq","()","<p>Pretty parameter list for this method.  If the method&#39;s parameters were\ngiven by <code>call-seq</code> it is preferred …\n"],["parameters","Method","classes/Method.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre><code>def foo(bar); end\nmethod(:foo).parameters #=&gt; [[:req, ...\n</code></pre>\n"],["parameters","Proc","classes/Proc.html#method-i-parameters","()","<p>Returns the parameter information of this proc.\n\n<pre><code>prc = lambda{|x, y=42, *other|}\nprc.parameters  #=&gt; [[:req, ...\n</code></pre>\n"],["parameters","TracePoint","classes/TracePoint.html#method-i-parameters","()","<p>Return the parameters of the method or block that the current hook belongs\nto\n"],["parameters","UnboundMethod","classes/UnboundMethod.html#method-i-parameters","()","<p>Returns the parameter information of this method.\n\n<pre><code>def foo(bar); end\nmethod(:foo).parameters #=&gt; [[:req, ...\n</code></pre>\n"],["params","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-params","()","<p>Stores all parameters of key to the hash INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use …\n"],["params","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-params","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Stores all parameters of key to the hash. …\n"],["params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-params","()","<p>returns array of WIN32OLE_PARAM object corresponding with method\nparameters.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["params","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-params","(p1, p2)","<p>Changes the parameters of the deflate stream to allow changes between\ndifferent types of data that require …\n"],["params=","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-params-3D","(hash)","<p>Set all the parameters.\n"],["params_ok?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-params_ok-3F","()","<p>Validates the Diffie-Hellman parameters associated with this instance. It\nchecks whether a safe prime …\n"],["parent","Pathname","classes/Pathname.html#method-i-parent","()","<p>Returns the parent directory.\n<p>This is same as <code>self + &#39;..&#39;</code>.\n"],["parent","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent","()","<p>Our parent CodeObject.  The parent may be missing for classes loaded from\nlegacy RI data stores.\n"],["parent","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-parent","()",""],["parent=","REXML::Child","classes/REXML/Child.html#method-i-parent-3D","( other )","<p>Sets the parent of this child to the supplied argument.\n<p>other &mdash; Must be a Parent object.  If this object …\n"],["parent=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-parent-3D","( node )",""],["parent=","REXML::Text","classes/REXML/Text.html#method-i-parent-3D","(parent)",""],["parent?","REXML::Node","classes/REXML/Node.html#method-i-parent-3F","()",""],["parent?","REXML::Parent","classes/REXML/Parent.html#method-i-parent-3F","()",""],["parent_file_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_file_name","()","<p>File name of our parent\n"],["parent_name","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-parent_name","()","<p>Name of our parent\n"],["parent_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-parent_name","()","<p>Name of our parent with special handling for un-marshaled methods\n"],["parse","Bundler::Settings::Mirrors","classes/Bundler/Settings/Mirrors.html#method-i-parse","(key, value)",""],["parse","CGI","classes/CGI.html#method-c-parse","(query)","<p>Parse an HTTP query string into a hash of key=&gt;value pairs.\n\n<pre><code>params = CGI::parse(&quot;query_string&quot;)\n  # ...\n</code></pre>\n"],["parse","CGI::Cookie","classes/CGI/Cookie.html#method-c-parse","(raw_cookie)","<p>Parse a raw cookie string into a hash of cookie-name=&gt;Cookie pairs.\n\n<pre><code>cookies = CGI::Cookie.parse(&quot;raw_cookie_string&quot;) ...\n</code></pre>\n"],["parse","CSV","classes/CSV.html#method-c-parse","(*args, &block)","<p>This method can be used to easily parse CSV out of a String.  You may\neither provide a <code>block</code> which will …\n"],["parse","CSV::Parser","classes/CSV/Parser.html#method-i-parse","(&block)",""],["parse","Date","classes/Date.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a date\nobject.  This method does not function …\n"],["parse","DateTime","classes/DateTime.html#method-c-parse","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time, and creates a DateTime\nobject.  This method does not …\n"],["parse","JSON","classes/JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: …\n"],["parse","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-parse","()","<p>Parses the current JSON text <em>source</em> and returns the complete data\nstructure as a result.\n"],["parse","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-c-parse","(str)","<p>Parses the received response and separates the reply code and the human\nreadable reply text\n"],["parse","OpenSSL::Config","classes/OpenSSL/Config.html#method-c-parse","(string)","<p>Parses a given <em>string</em> as a blob that contains configuration for\nOpenSSL.\n<p>If the source of the IO is a …\n"],["parse","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-c-parse","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse","OptionParser","classes/OptionParser.html#method-i-parse","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in order when environment\nvariable POSIXLY_CORRECT is set, and in …\n"],["parse","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if any arguments given.\n"],["parse","OptionParser::Switch::OptionalArgument","classes/OptionParser/Switch/OptionalArgument.html#method-i-parse","(arg, argv, &error)","<p>Parses argument if given, or uses default value.\n"],["parse","OptionParser::Switch::PlacedArgument","classes/OptionParser/Switch/PlacedArgument.html#method-i-parse","(arg, argv, &error)","<p>Returns nil if argument is not present or begins with &#39;-&#39;.\n"],["parse","OptionParser::Switch::RequiredArgument","classes/OptionParser/Switch/RequiredArgument.html#method-i-parse","(arg, argv)","<p>Raises an exception if argument is not present.\n"],["parse","Psych","classes/Psych.html#method-c-parse","(yaml, legacy_filename = NOT_GIVEN, filename: nil, fallback: NOT_GIVEN)","<p>Parse a YAML string in <code>yaml</code>.  Returns the\nPsych::Nodes::Document. <code>filename</code> is used in the exception\nmessage …\n"],["parse","Psych::Parser","classes/Psych/Parser.html#method-i-parse","(p1, p2 = v2)","<p>Parse the YAML document contained in <code>yaml</code>.  Events will be\ncalled on the handler set on the parser instance. …\n"],["parse","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-parse","(comment_location)","<p>Parses <code>comment_location</code> into an RDoc::Markup::Document\ncomposed of multiple RDoc::Markup::Documents with …\n"],["parse","RDoc::Comment","classes/RDoc/Comment.html#method-i-parse","()","<p>Parses the comment into an RDoc::Markup::Document.  The parsed document is\ncached until the text is changed. …\n"],["parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-c-parse","(markdown)","<p>Parses the <code>markdown</code> document into an RDoc::Document using the\ndefault\nextensions.\n"],["parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-parse","(markdown)","<p>Parses <code>markdown</code> into an RDoc::Document\n"],["parse","RDoc::Markup","classes/RDoc/Markup.html#method-c-parse","(str)","<p>Parses <code>str</code> into an RDoc::Markup::Document.\n"],["parse","RDoc::Options","classes/RDoc/Options.html#method-i-parse","(argv)","<p>Parses command line options.\n"],["parse","RDoc::RD","classes/RDoc/RD.html#method-c-parse","(rd)","<p>Parses <code>rd</code> source and returns an RDoc::Markup::Document.  If\nthe <code>=begin</code> or <code>=end</code> lines are missing they …\n"],["parse","RDoc::Text","classes/RDoc/Text.html#method-i-parse","(text, format = 'rdoc')","<p>Normalizes <code>text</code> then builds a RDoc::Markup::Document from it\n"],["parse","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-parse","(text)","<p>Parses TomDoc from text\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Examples\n"],["parse","REXML::DTD::Parser","classes/REXML/DTD/Parser.html#method-c-parse","( input )",""],["parse","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-parse","()",""],["parse","REXML::Parsers::StreamParser","classes/REXML/Parsers/StreamParser.html#method-i-parse","()",""],["parse","REXML::Parsers::TreeParser","classes/REXML/Parsers/TreeParser.html#method-i-parse","()",""],["parse","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-parse","()",""],["parse","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-parse","(path)",""],["parse","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-parse","(path, nodeset)",""],["parse","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-parse","()",""],["parse","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-parse","(duration, do_validate=true)",""],["parse","RSS::Parser","classes/RSS/Parser.html#method-c-parse","(rss, *args)",""],["parse","RSS::Utils::CSV","classes/RSS/Utils/CSV.html#method-i-parse","(value, &block)",""],["parse","RSS::Utils::ExplicitCleanOther","classes/RSS/Utils/ExplicitCleanOther.html#method-i-parse","(value)",""],["parse","RSS::Utils::YesOther","classes/RSS/Utils/YesOther.html#method-i-parse","(value)",""],["parse","Ripper","classes/Ripper.html#method-c-parse","(src, filename = '(ripper)', lineno = 1)","<p>Parses the given Ruby program read from <code>src</code>. <code>src</code>\nmust be a String or an IO or a object with a #gets method. …\n"],["parse","Ripper","classes/Ripper.html#method-i-parse","()","<p>Start parsing and returns the value of the root action.\n"],["parse","Ripper::Filter","classes/Ripper/Filter.html#method-i-parse","(init = nil)","<p>Starts the parser. <code>init</code> is a data accumulator and is passed to\nthe next event handler (as of Enumerable#inject …\n"],["parse","RubyVM::AbstractSyntaxTree","classes/RubyVM/AbstractSyntaxTree.html#method-c-parse","(p1)","<p>Parses the given string into an abstract syntax tree, returning the root\nnode of that tree.\n<p>SyntaxError …\n"],["parse","Time","classes/Time.html#method-c-parse","(date, now=self.now)","<p>Takes a string representation of a Time and attempts to parse it using a\nheuristic.\n\n<pre><code>require &#39;time&#39;\n\nTime.parse(&quot;2010-10-31&quot;) ...\n</code></pre>\n"],["parse","URI","classes/URI.html#method-c-parse","(uri)","<p>Synopsis\n\n<pre><code>URI::parse(uri_str)\n</code></pre>\n<p>Args\n"],["parse","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-parse","(uri)","<p>Args\n<p><code>uri</code> &mdash; String\n\n<p>Description\n"],["parse","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse","(str)","<p>Parses a Cookie field sent from the user-agent.  Returns an array of\ncookies.\n"],["parse","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-parse","(socket=nil)","<p>Parses a request from <code>socket</code>.  This is called internally by\nWEBrick::HTTPServer.\n"],["parse!","JSON","classes/JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse …\n"],["parse!","OptionParser","classes/OptionParser.html#method-i-parse-21","(argv = default_argv, into: nil)","<p>Same as #parse, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["parse!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-parse-21","()","<p>Parses <code>self</code> destructively and returns <code>self</code>\ncontaining the rest arguments left unparsed.\n"],["parse_args","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-parse_args","( element, string )",""],["parse_config","OpenSSL::Config","classes/OpenSSL/Config.html#method-c-parse_config","(io)","<p>Parses the configuration data read from <em>io</em>, see also #parse.\n<p>Raises a ConfigError on invalid configuration …\n"],["parse_ctype","Fiddle::CParser","classes/Fiddle/CParser.html#method-i-parse_ctype","(ty, tymap=nil)","<p>Given a String of C type <code>ty</code>, returns the corresponding Fiddle\nconstant.\n<p><code>ty</code> can also accept an Array of …\n"],["parse_dot_doc_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_dot_doc_file","(in_dir, filename)","<p>The .document file contains a list of file and directory name patterns,\nrepresenting candidates for documentation. …\n"],["parse_file","Psych","classes/Psych.html#method-c-parse_file","(filename, fallback: false)","<p>Parse a file at <code>filename</code>. Returns the Psych::Nodes::Document.\n<p>Raises a Psych::SyntaxError when a YAML …\n"],["parse_file","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_file","(filename)","<p>Parses <code>filename</code> and returns an RDoc::TopLevel\n"],["parse_file","RubyVM::AbstractSyntaxTree","classes/RubyVM/AbstractSyntaxTree.html#method-c-parse_file","(p1)","<p>Reads the file from <code>pathname</code>, then parses it like ::parse,\nreturning the root node of the abstract syntax …\n"],["parse_files","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-parse_files","(files)","<p>Parse each file on the command line, recursively entering directories.\n"],["parse_files_matching","RDoc::Parser","classes/RDoc/Parser.html#method-c-parse_files_matching","(regexp)","<p>Record which file types this parser can understand.\n<p>It is ok to call this multiple times.\n"],["parse_form_data","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_form_data","(io, boundary)","<p>Parses form data in <code>io</code> with the given <code>boundary</code>\n"],["parse_header","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_header","(raw)","<p>Parses an HTTP header <code>raw</code> into a hash of header fields with an\nArray of values.\n"],["parse_helper","REXML::DTD::Parser","classes/REXML/DTD/Parser.html#method-c-parse_helper","( input )","<p>Takes a String and parses it out\n"],["parse_int","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-i-parse_int","(string)","<p>Parse and return an int from <code>string</code>\n"],["parse_line","CSV","classes/CSV.html#method-c-parse_line","(line, **options)","<p>This method is a shortcut for converting a single line of a CSV String into\nan Array.  Note that if  …\n"],["parse_openssl","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-c-parse_openssl","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_printf_format","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-parse_printf_format","(format, opts)","<p>Returns an array of the given <code>format</code> and <code>opts</code> to\nbe used by Kernel#sprintf, if there was a successful …\n"],["parse_query","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_query","(str)","<p>Parses the query component of a URI in <code>str</code>\n"],["parse_qvalues","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_qvalues","(value)","<p>Parses q values in <code>value</code> as used in Accept headers.\n"],["parse_range_header","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-parse_range_header","(ranges_specifier)","<p>Parses a Range header value <code>ranges_specifier</code>\n"],["parse_rfc2253","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-c-parse_rfc2253","(str, template=OBJECT_TYPE_TEMPLATE)",""],["parse_set_cookie","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse_set_cookie","(str)","<p>Parses the cookie in <code>str</code>\n"],["parse_set_cookies","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-c-parse_set_cookies","(str)","<p>Parses the cookies in <code>str</code>\n"],["parse_signature","Fiddle::CParser","classes/Fiddle/CParser.html#method-i-parse_signature","(signature, tymap=nil)","<p>Parses a C prototype signature\n<p>If Hash <code>tymap</code> is provided, the return value and the arguments\nfrom the …\n"],["parse_source","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-c-parse_source","(source, listener)",""],["parse_source","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-c-parse_source","(source, listener)",""],["parse_stream","Psych","classes/Psych.html#method-c-parse_stream","(yaml, legacy_filename = NOT_GIVEN, filename: nil, &block)","<p>Parse a YAML string in <code>yaml</code>.  Returns the\nPsych::Nodes::Stream. This method can handle multiple YAML …\n"],["parse_stream","REXML::Document","classes/REXML/Document.html#method-c-parse_stream","( source, listener )",""],["parse_struct_signature","Fiddle::CParser","classes/Fiddle/CParser.html#method-i-parse_struct_signature","(signature, tymap=nil)","<p>Parses a C struct&#39;s members\n<p>Example:\n\n<pre><code>require &#39;fiddle/import&#39;\n\ninclude Fiddle::CParser\n  #=&gt; Object ...\n</code></pre>\n"],["parse_time","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-i-parse_time","(string)","<p>Parse and return a Time from <code>string</code>\n"],["parser","Psych","classes/Psych.html#method-c-parser","()","<p>Returns a default parser\n"],["parser","URI::Generic","classes/URI/Generic.html#method-i-parser","()","<p>Returns the parser to be used.\n<p>Unless a URI::Parser is defined, DEFAULT_PARSER is used.\n"],["parser=","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-parser-3D","(val)",""],["partition","Enumerable","classes/Enumerable.html#method-i-partition","()","<p>Returns two arrays, the first containing the elements of <em>enum</em> for\nwhich the block evaluates to true, …\n"],["partition","String","classes/String.html#method-i-partition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string and\nreturns the part before it, the match, and the part …\n"],["pass","Thread","classes/Thread.html#method-c-pass","()","<p>Give the thread scheduler a hint to pass execution to another thread. A\nrunning thread may or may not …\n"],["passwd","Etc","classes/Etc.html#method-c-passwd","()","<p>Provides a convenient Ruby iterator which executes a block for each entry\nin the /etc/passwd file.\n<p>The …\n"],["password","URI::Generic","classes/URI/Generic.html#method-i-password","()","<p>Returns the password component.\n"],["password=","URI::Generic","classes/URI/Generic.html#method-i-password-3D","(password)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["password_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-password_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a Password Input element as a string.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits default …\n"],["patch","Net::HTTP","classes/Net/HTTP.html#method-i-patch","(path, data, initheader = nil, dest = nil)","<p>Sends a PATCH request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["patch_level_options","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-patch_level_options","(options)",""],["path","ARGF","classes/ARGF.html#method-i-path","()","<p>Returns the current filename. “-” is returned when the current file is\nSTDIN.\n<p>For example:\n\n<pre><code>$ ...</code></pre>\n"],["path","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-path","(path, options = {}, &blk)",""],["path","Bundler::Settings","classes/Bundler/Settings.html#method-i-path","()","<p>for legacy reasons, in Bundler 1, the ruby scope isnt appended when the\nsetting comes from ENV or the …\n"],["path","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-path","()",""],["path","CSV","classes/CSV.html#method-i-path","()",""],["path","Dir","classes/Dir.html#method-i-path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre><code>d = Dir.new(&quot;..&quot;)\nd.path   #=&gt; &quot;..&quot;\n</code></pre>\n"],["path","File","classes/File.html#method-i-path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n<p>The pathname may not …\n"],["path","File","classes/File.html#method-c-path","(p1)","<p>Returns the string representation of the path\n\n<pre><code>File.path(&quot;/dev/null&quot;)          #=&gt; &quot;/dev/null&quot;\nFile.path(Pathname.new(&quot;/tmp&quot;)) ...\n</code></pre>\n"],["path","Gem","classes/Gem.html#method-c-path","()",""],["path","PStore","classes/PStore.html#method-i-path","()","<p>Returns the path to the data store file.\n"],["path","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-path","()","<p>Path to this class or module for use with HTML generator output.\n"],["path","RDoc::Constant","classes/RDoc/Constant.html#method-i-path","()","<p>Path to this constant for use with HTML generator output.\n"],["path","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-path","()","<p>Path to this method for use with HTML generator output.\n"],["path","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-path","()","<p>Path to this file for use with HTML generator output.\n"],["path","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-path","()","<p>Returns the path of this instruction sequence.\n<p><code>&lt;compiled&gt;</code> if the iseq was evaluated from a string. …\n"],["path","Tempfile","classes/Tempfile.html#method-i-path","()","<p>Returns the full path name of the temporary file. This will be nil if\n#unlink has been called.\n"],["path","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-path","()","<p>Returns the file name of this frame.\n<p>For example, using <code>caller_locations.rb</code> from\nThread::Backtrace::Location …\n"],["path","TracePoint","classes/TracePoint.html#method-i-path","()","<p>Path of the file being run\n"],["path","UNIXSocket","classes/UNIXSocket.html#method-i-path","()","<p>Returns the path of the local address of unixsocket.\n\n<pre><code>s = UNIXServer.new(&quot;/tmp/sock&quot;)\np s.path #=&gt; &quot;/tmp/sock&quot;\n</code></pre>\n"],["path","URI::FTP","classes/URI/FTP.html#method-i-path","()","<p>Returns the path from an FTP URI.\n<p>RFC 1738 specifically states that the path for an FTP URI does not include\n…\n"],["path","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-path","()","<p>Returns the type library file path.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;) ...\n</code></pre>\n"],["path=","URI::Generic","classes/URI/Generic.html#method-i-path-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["path?","Bundler::Source","classes/Bundler/Source.html#method-i-path-3F","()",""],["path_to?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-path_to-3F","(other)","<p>Is there a path from `self` to `other` following edges in the dependency\ngraph? @return true iff there …\n"],["pathconf","IO","classes/IO.html#method-i-pathconf","(p1)","<p>Returns pathname configuration variable using fpathconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["paths","Gem","classes/Gem.html#method-c-paths","()","<p>Retrieve the PathSupport object that RubyGems uses to lookup files.\n"],["paths=","Gem","classes/Gem.html#method-c-paths-3D","(env)","<p>Initialize the filesystem paths to use from <code>env</code>.\n<code>env</code> is a hash-like object (typically ENV) that is queried …\n"],["pattern","OptionParser::Switch","classes/OptionParser/Switch.html#method-c-pattern","()",""],["pattern","OptionParser::Switch::NoArgument","classes/OptionParser/Switch/NoArgument.html#method-c-pattern","()",""],["pause","RubyVM::MJIT","classes/RubyVM/MJIT.html#method-c-pause","(p1 = {})",""],["pbkdf2_hmac","OpenSSL::KDF","classes/OpenSSL/KDF.html#method-c-pbkdf2_hmac","(p1, p2 = {})","<p>PKCS #5 PBKDF2 (Password-Based Key Derivation Function 2) in combination\nwith HMAC. Takes <em>pass</em>, <em>salt</em> …\n"],["pbkdf2_hmac","OpenSSL::PKCS5","classes/OpenSSL/PKCS5.html#method-i-pbkdf2_hmac","(pass, salt, iter, keylen, digest)","<p>OpenSSL::PKCS5.pbkdf2_hmac has been renamed to OpenSSL::KDF.pbkdf2_hmac.\nThis method is provided for …\n"],["pbkdf2_hmac_sha1","OpenSSL::PKCS5","classes/OpenSSL/PKCS5.html#method-i-pbkdf2_hmac_sha1","(pass, salt, iter, keylen)",""],["peek","Enumerator","classes/Enumerator.html#method-i-peek","()","<p>Returns the next object in the enumerator, but doesn&#39;t move the\ninternal position forward.  If the …\n"],["peek","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-peek","(depth=0)","<p>Peek at the <code>depth</code> event in the stack.  The first element on\nthe stack is at depth 0.  If <code>depth</code> is -1, …\n"],["peek","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-peek","(depth=0)",""],["peek","StringScanner","classes/StringScanner.html#method-i-peek","(p1)","<p>Extracts a string corresponding to <code>string[pos,len]</code>, without\nadvancing the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["peek_result","Coverage","classes/Coverage.html#method-c-peek_result","()","<p>Returns a hash that contains filename as key and coverage array as value.\nThis is the same as `Coverage.result(stop: …\n"],["peek_values","Enumerator","classes/Enumerator.html#method-i-peek_values","()","<p>Returns the next object as an array, similar to Enumerator#next_values, but\ndoesn&#39;t move the internal …\n"],["peep","StringScanner","classes/StringScanner.html#method-i-peep","(p1)","<p>Equivalent to #peek. This method is obsolete; use #peek instead.\n"],["peer_cert","Net::HTTP","classes/Net/HTTP.html#method-i-peer_cert","()","<p>Returns the X.509 certificates the server presented.\n"],["peer_cert","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-peer_cert","()","<p>The X509 certificate for this socket&#39;s peer.\n"],["peer_cert_chain","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-peer_cert_chain","()","<p>The X509 certificate chain for this socket&#39;s peer.\n"],["peeraddr","IPSocket","classes/IPSocket.html#method-i-peeraddr","(*args)","<p>Returns the remote address as an array which contains address_family, port,\nhostname and numeric_address. …\n"],["peeraddr","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-peeraddr","()",""],["peeraddr","UNIXSocket","classes/UNIXSocket.html#method-i-peeraddr","()","<p>Returns the remote address as an array which contains address_family and\nunix_path.\n<p>Example\n\n<pre><code>serv = UNIXServer.new(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["peg_parse","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-peg_parse","(markdown)","<p>The internal kpeg parse method\n"],["pending","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-pending","()","<p>The number of bytes that are immediately available for reading.\n"],["pending_interrupt?","Thread","classes/Thread.html#method-i-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty for the target\nthread.\n<p>If <code>error</code> is given, then …\n"],["pending_interrupt?","Thread","classes/Thread.html#method-c-pending_interrupt-3F","(*args)","<p>Returns whether or not the asynchronous queue is empty.\n<p>Since Thread::handle_interrupt can be used to …\n"],["percent_doc","RDoc::Stats","classes/RDoc/Stats.html#method-i-percent_doc","()","<p>Calculates the percentage of items documented.\n"],["perform_git_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-perform_git_push","(options = \"\")",""],["permanent_link=","RSS::Maker::ItemsBase::ItemBase::GuidBase","classes/RSS/Maker/ItemsBase/ItemBase/GuidBase.html#method-i-permanent_link-3D","(bool)",""],["permanent_link?","RSS::Maker::ItemsBase::ItemBase::GuidBase","classes/RSS/Maker/ItemsBase/ItemBase/GuidBase.html#method-i-permanent_link-3F","()",""],["permutation","Array","classes/Array.html#method-i-permutation","(*args)","<p>When invoked with a block, yield all permutations of length <code>n</code>\nof the elements of the array, then return …\n"],["permute","OptionParser","classes/OptionParser.html#method-i-permute","(*argv, into: nil)","<p>Parses command line arguments <code>argv</code> in permutation mode and\nreturns list of non-option arguments.\n"],["permute!","OptionParser","classes/OptionParser.html#method-i-permute-21","(argv = default_argv, into: nil)","<p>Same as #permute, but removes switches destructively. Non-option arguments\nremain in <code>argv</code>.\n"],["permute!","OptionParser::Arguable","classes/OptionParser/Arguable.html#method-i-permute-21","()","<p>Parses <code>self</code> destructively in permutation mode and returns\n<code>self</code> containing the rest arguments left unparsed. …\n"],["pfamily","Addrinfo","classes/Addrinfo.html#method-i-pfamily","()","<p>returns the protocol family as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).pfamily == Socket::PF_INET #=&gt; ...\n</code></pre>\n"],["phase","Complex","classes/Complex.html#method-i-phase","()","<p>Returns the angle part of its polar form.\n\n<pre><code>Complex.polar(3, Math::PI/2).arg  #=&gt; 1.5707963267948966\n</code></pre>\n"],["phase","Float","classes/Float.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["phase","Numeric","classes/Numeric.html#method-i-phase","()","<p>Returns 0 if the value is positive, pi otherwise.\n"],["pid","IO","classes/IO.html#method-i-pid","()","<p>Returns the process ID of a child process associated with <em>ios</em>.\nThis will be set by <code>IO.popen</code>.\n\n<pre><code>pipe = IO.popen(&quot;-&quot;) ...\n</code></pre>\n"],["pid","Process","classes/Process.html#method-c-pid","()","<p>Returns the process id of this process. Not available on all platforms.\n\n<pre><code>Process.pid   #=&gt; 27415\n</code></pre>\n"],["pid","Process::Status","classes/Process/Status.html#method-i-pid","()","<p>Returns the process ID that this status object represents.\n\n<pre><code>fork { exit }   #=&gt; 26569\nProcess.wait    #=&gt; ...\n</code></pre>\n"],["pid","StringIO","classes/StringIO.html#method-i-pid","()","<p>Returns <code>nil</code>.  Just for compatibility to IO.\n"],["pipe","IO","classes/IO.html#method-c-pipe","(p1 = v1, p2 = v2, p3 = {})","<p>Creates a pair of pipe endpoints (connected to each other) and returns them\nas a two-element array of …\n"],["pipe?","File","classes/File.html#method-c-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["pipe?","File::Stat","classes/File/Stat.html#method-i-pipe-3F","()","<p>Returns <code>true</code> if the operating system supports pipes and\n<em>stat</em> is a pipe; <code>false</code> otherwise.\n"],["pipe?","FileTest","classes/FileTest.html#method-i-pipe-3F","(p1)","<p>Returns <code>true</code> if the named file is a pipe.\n<p><em>file_name</em> can be an IO object.\n"],["pipe?","Pathname","classes/Pathname.html#method-i-pipe-3F","()","<p>See FileTest.pipe?.\n"],["pipeline","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-pipeline","(uri, requests, &block)","<p>Pipelines <code>requests</code> to the HTTP server at <code>uri</code>\nyielding responses if a block is given.  Returns all responses …\n"],["pipeline","Open3","classes/Open3.html#method-c-pipeline","(*cmds)","<p>Open3.pipeline starts a list of commands as a pipeline. It waits for the\ncompletion of the commands. …\n"],["pipeline_r","Open3","classes/Open3.html#method-c-pipeline_r","(*cmds, &block)","<p>Open3.pipeline_r starts a list of commands as a pipeline with a pipe which\nconnects to stdout of the …\n"],["pipeline_rw","Open3","classes/Open3.html#method-c-pipeline_rw","(*cmds, &block)","<p>Open3.pipeline_rw starts a list of commands as a pipeline with pipes which\nconnect to stdin of the first …\n"],["pipeline_start","Open3","classes/Open3.html#method-c-pipeline_start","(*cmds, &block)","<p>Open3.pipeline_start starts a list of commands as a pipeline. No pipes are\ncreated for stdin of the first …\n"],["pipeline_w","Open3","classes/Open3.html#method-c-pipeline_w","(*cmds, &block)","<p>Open3.pipeline_w starts a list of commands as a pipeline with a pipe which\nconnects to stdin of the first …\n"],["pkcs5_keyivgen","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-pkcs5_keyivgen","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Generates and sets the key/IV based on a password.\n<p><strong>WARNING</strong>: This method is only PKCS5 v1.5 compliant when …\n"],["pkg_config","MakeMakefile","classes/MakeMakefile.html#method-i-pkg_config","(pkg, option=nil)","<p>Returns compile/link information about an installed library in a tuple of\n<code>[cflags, ldflags, libs]</code>, by …\n"],["platform","Bundler::CLI","classes/Bundler/CLI.html#method-i-platform","()",""],["platform","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-platform","(*platforms)",""],["platform_sort_key","Bundler::Resolver","classes/Bundler/Resolver.html#method-c-platform_sort_key","(platform)",""],["platform_specificity_match","Bundler::GemHelpers","classes/Bundler/GemHelpers.html#method-c-platform_specificity_match","(spec_platform, user_platform)",""],["platform_string","Bundler::LazySpecification::Identifier","classes/Bundler/LazySpecification/Identifier.html#method-i-platform_string","()",""],["platform_version_match","Bundler::GemHelpers::PlatformMatch","classes/Bundler/GemHelpers/PlatformMatch.html#method-c-platform_version_match","(spec_platform, user_platform)",""],["platforms","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-platforms","(*platforms)",""],["platforms","Gem","classes/Gem.html#method-c-platforms","()","<p>Array of platforms this RubyGems supports.\n"],["platforms=","Gem","classes/Gem.html#method-c-platforms-3D","(platforms)","<p>Set array of platforms this RubyGems supports (primarily for testing).\n"],["platforms_match?","Bundler::MatchPlatform","classes/Bundler/MatchPlatform.html#method-c-platforms_match-3F","(gemspec_platform, local_platform)",""],["plugin","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-plugin","(*args)",""],["plugin","Bundler::Plugin::DSL","classes/Bundler/Plugin/DSL.html#method-i-plugin","(name, *args)",""],["plugin_path","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-plugin_path","(name)",""],["plural_forms","RSS::Element","classes/RSS/Element.html#method-c-plural_forms","()",""],["point","Readline","classes/Readline.html#method-c-point","()","<p>Returns the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>The index in <code>Readline.line_buffer</code> …\n"],["point=","Readline","classes/Readline.html#method-c-point-3D","(p1)","<p>Set the index of the current cursor position in\n<code>Readline.line_buffer</code>.\n<p>Raises NotImplementedError if the …\n"],["point_conversion_form","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form","()","<p>Returns the form how EC::Point data is encoded as ASN.1.\n<p>See also #point_conversion_form=.\n"],["point_conversion_form=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-point_conversion_form-3D","(p1)","<p>Sets the form how EC::Point data is encoded as ASN.1 as defined in X9.62.\n<p><em>format</em> can be one of these: …\n"],["pointer","StringScanner","classes/StringScanner.html#method-i-pointer","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pointer=","StringScanner","classes/StringScanner.html#method-i-pointer-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.pos = 7            # ...\n</code></pre>\n"],["polar","Complex","classes/Complex.html#method-i-polar","()","<p>Returns an array; [cmp.abs, cmp.arg].\n\n<pre><code>Complex(1, 2).polar  #=&gt; [2.23606797749979, 1.1071487177940904]\n</code></pre>\n"],["polar","Complex","classes/Complex.html#method-c-polar","(p1, p2 = v2)","<p>Returns a complex object which denotes the given polar form.\n\n<pre><code>Complex.polar(3, 0)            #=&gt; (3.0+0.0i) ...\n</code></pre>\n"],["polar","Numeric","classes/Numeric.html#method-i-polar","()","<p>Returns an array; [num.abs, num.arg].\n"],["pop","Array","classes/Array.html#method-i-pop","(*args)","<p>Removes the last element from <code>self</code> and returns it, or\n<code>nil</code> if the array is empty.\n<p>If a number <code>n</code> is given, …\n"],["pop","Net::POPMail","classes/Net/POPMail.html#method-i-pop","( dest = +'' )","<p>This method fetches the message.  If called with a block, the message is\nyielded to the block one chunk …\n"],["pop","Queue","classes/Queue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["pop","Rinda::NotifyTemplateEntry","classes/Rinda/NotifyTemplateEntry.html#method-i-pop","()","<p>Retrieves a notification.  Raises RequestExpiredError when this\nNotifyTemplateEntry expires.\n"],["pop","SizedQueue","classes/SizedQueue.html#method-i-pop","(*args)","<p>Retrieves data from the queue.\n<p>If the queue is empty, the calling thread is suspended until data is pushed\n…\n"],["pop!","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-pop-21","(graph)","<p>Pops the most recent action from the log and undoes the action @param\n[DependencyGraph] graph @return …\n"],["pop_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-pop_inspect_key","(id)","<p>Removes an object from the set of objects being pretty printed.\n"],["pop_possibility_state","Bundler::Molinillo::DependencyState","classes/Bundler/Molinillo/DependencyState.html#method-i-pop_possibility_state","()","<p>Removes a possibility from `self` @return [PossibilityState] a state with a\nsingle possibility,\n\n<pre><code>the possibility ...\n</code></pre>\n"],["pop_token","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-pop_token","()","<p>Remove the last token from the collected tokens\n"],["pop_workspace","IRB::Context","classes/IRB/Context.html#method-i-pop_workspace","()","<p>Removes the last element from the current #workspaces stack and returns it,\nor <code>nil</code> if the current workspace …\n"],["popd","Shell","classes/Shell.html#method-i-popd","()",""],["popdir","Shell","classes/Shell.html#method-i-popdir","()","<p>Pops a directory from the directory stack, and sets the current directory\nto it.\n"],["popen","IO","classes/IO.html#method-c-popen","(*args)","<p>Runs the specified command as a subprocess; the subprocess&#39;s standard\ninput and output will be connected …\n"],["popen2","Open3","classes/Open3.html#method-c-popen2","(*cmd, &block)","<p>Open3.popen2 is similar to Open3.popen3 except that it doesn&#39;t create a\npipe for the standard error …\n"],["popen2e","Open3","classes/Open3.html#method-c-popen2e","(*cmd, &block)","<p>Open3.popen2e is similar to Open3.popen3 except that it merges the standard\noutput stream and the standard …\n"],["popen3","Open3","classes/Open3.html#method-c-popen3","(*cmd, &block)","<p>Open stdin, stdout, and stderr streams and start external executable. In\naddition, a thread to wait for …\n"],["popup_menu","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-popup_menu","(name = \"\", *values)","<p>Generate a Select element as a string.\n<p><code>name</code> is the name of the element.  The <code>values</code> are\nthe options that …\n"],["port","Net::POP3","classes/Net/POP3.html#method-i-port","()","<p>The port number to connect to.\n"],["port","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-port","()","<p>The port this request is for\n"],["port=","URI::Generic","classes/URI/Generic.html#method-i-port-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["pos","ARGF","classes/ARGF.html#method-i-pos","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre><code>ARGF.pos    #=&gt; 0\nARGF.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["pos","Dir","classes/Dir.html#method-i-pos","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...\n</code></pre>\n"],["pos","IO","classes/IO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.pos    #=&gt; 0\nf.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["pos","StringIO","classes/StringIO.html#method-i-pos","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["pos","StringScanner","classes/StringScanner.html#method-i-pos","()","<p>Returns the byte position of the scan pointer.  In the &#39;reset&#39;\nposition, this value is zero. …\n"],["pos","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-pos","()","<p>Total number of output bytes output so far.\n"],["pos","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-pos","()","<p>Total number of input bytes read so far.\n"],["pos=","ARGF","classes/ARGF.html#method-i-pos-3D","(p1)","<p>Seeks to the position given by <em>position</em> (in bytes) in\n<code>ARGF</code>.\n<p>For example:\n\n<pre><code>ARGF.pos = 17\nARGF.gets   #=&gt; ...\n</code></pre>\n"],["pos=","Dir","classes/Dir.html#method-i-pos-3D","(p1)","<p>Synonym for <code>Dir#seek</code>, but returns the position parameter.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)   #=&gt; #&lt;Dir:0x401b3c40&gt; ...\n</code></pre>\n"],["pos=","IO","classes/IO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <em>ios</em>. It is not\nguaranteed that seeking to the right position …\n"],["pos=","StringIO","classes/StringIO.html#method-i-pos-3D","(p1)","<p>Seeks to the given position (in bytes) in <strong>strio</strong>.\n"],["pos=","StringScanner","classes/StringScanner.html#method-i-pos-3D","(p1)","<p>Set the byte position of the scan pointer.\n\n<pre><code>s = StringScanner.new(&#39;test string&#39;)\ns.pos = 7            # ...\n</code></pre>\n"],["position","REXML::Functions","classes/REXML/Functions.html#method-c-position","( )",""],["position","REXML::IOSource","classes/REXML/IOSource.html#method-i-position","()",""],["position","REXML::ParseException","classes/REXML/ParseException.html#method-i-position","()",""],["position","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-position","()",""],["position","REXML::Source","classes/REXML/Source.html#method-i-position","()",""],["position","REXML::XPathNode","classes/REXML/XPathNode.html#method-i-position","()",""],["positive?","Float","classes/Float.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>float</code> is greater than 0.\n"],["positive?","Numeric","classes/Numeric.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>num</code> is greater than 0.\n"],["positive?","Rational","classes/Rational.html#method-i-positive-3F","()","<p>Returns <code>true</code> if <code>rat</code> is greater than 0.\n"],["possibilities","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-possibilities","()","<p>(see Bundler::Molinillo::ResolutionState#possibilities)\n"],["possibility","Bundler::Molinillo::Resolver::Resolution::Conflict","classes/Bundler/Molinillo/Resolver/Resolution/Conflict.html#method-i-possibility","()","<p>@return [Object] a spec that was unable to be activated due to a conflict\n"],["post","Net::HTTP","classes/Net/HTTP.html#method-i-post","(path, data, initheader = nil, dest = nil)","<p>Posts <code>data</code> (must be a String) to <code>path</code>.\n<code>header</code> must be a Hash like { &#39;Accept&#39; =&gt;\n&#39;<strong>/</strong>&#39;, …\n"],["post","Net::HTTP","classes/Net/HTTP.html#method-c-post","(url, data, header = nil)","<p>Posts data to the specified URI object.\n<p>Example:\n\n<pre><code>require &#39;net/http&#39;\nrequire &#39;uri&#39;\n\nNet::HTTP.post URI(&#39;http://www.example.com/api/search&#39;), ...</code></pre>\n"],["post2","Net::HTTP","classes/Net/HTTP.html#method-i-post2","(path, data, initheader = nil)",""],["post_build","Gem","classes/Gem.html#method-c-post_build","(&hook)","<p>Adds a post-build hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["post_connection_check","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-post_connection_check","(hostname)","<p>Perform hostname verification following RFC 6125.\n<p>This method MUST be called after calling #connect to …\n"],["post_form","Net::HTTP","classes/Net/HTTP.html#method-c-post_form","(url, params)","<p>Posts HTML form data to the specified URI object. The form data must be\nprovided as a Hash mapping from …\n"],["post_install","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-post_install","(spec, disable_exts = false)","<p>It builds extensions, generates bins and installs them for the spec\nprovided.\n<p>It depends on `spec.loaded_from` …\n"],["post_install","Bundler::Source::Path::Installer","classes/Bundler/Source/Path/Installer.html#method-i-post_install","()",""],["post_install","Gem","classes/Gem.html#method-c-post_install","(&hook)","<p>Adds a post-install hook that will be passed an Gem::Installer instance\nwhen Gem::Installer#install is …\n"],["post_install_message","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-post_install_message","()","<p>needed for post_install_messages during install\n"],["post_match","MatchData","classes/MatchData.html#method-i-post_match","()","<p>Returns the portion of the original string after the current match.\nEquivalent to the special variable …\n"],["post_match","StringScanner","classes/StringScanner.html#method-i-post_match","()","<p>Returns the <strong><em>post</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["post_reset","Gem","classes/Gem.html#method-c-post_reset","(&hook)","<p>Adds a hook that will get run after Gem::Specification.reset is run.\n"],["post_uninstall","Gem","classes/Gem.html#method-c-post_uninstall","(&hook)","<p>Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance\nand the spec that was uninstalled …\n"],["pow","Integer","classes/Integer.html#method-i-pow","(*args)","<p>Returns (modular) exponentiation as:\n\n<pre><code>a.pow(b)     #=&gt; same as a**b\na.pow(b, m)  #=&gt; same as (a**b) % m, ...\n</code></pre>\n"],["power","BigDecimal","classes/BigDecimal.html#method-i-power","(p1, p2 = v2)","<p>Returns the value raised to the power of n.\n<p>Note that n must be an Integer.\n<p>Also available as the operator …\n"],["pp","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-pp","(*objs)","<p>Same as #ppx, except it uses the #prefix given during object\ninitialization. See OutputMethod#ppx for …\n"],["pp","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-pp","(*objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each.\n<p>See #puts for more detail.\n"],["pp","Kernel","classes/Kernel.html#method-c-pp","(*objs)","<p>prints arguments in pretty form.\n<p>pp returns argument(s).\n"],["pp","PP","classes/PP.html#method-c-pp","(obj, out=$>, width=79)","<p>Outputs <code>obj</code> to <code>out</code> in pretty printed format of\n<code>width</code> columns in width.\n<p>If <code>out</code> is omitted, <code>$&gt;</code> is assumed. …\n"],["pp","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp","(obj)","<p>Adds <code>obj</code> to the pretty printing buffer using\nObject#pretty_print or Object#pretty_print_cycle.\n<p>Object#pretty_print_cycle …\n"],["pp_hash","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp_hash","(obj)","<p>A pretty print for a Hash\n"],["pp_object","PP::PPMethods","classes/PP/PPMethods.html#method-i-pp_object","(obj)","<p>A present standard failsafe for pretty printing any given Object\n"],["ppid","Process","classes/Process.html#method-c-ppid","()","<p>Returns the process id of the parent of this process. Returns untrustworthy\nvalue on Win32/64. Not available …\n"],["ppx","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-ppx","(prefix, *objs)","<p>Same as #pp, except it concatenates the given <code>prefix</code> with the\n#prefix given during object initialization. …\n"],["ppx","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-ppx","(prefix, *objs)","<p>Prints the given <code>objs</code> calling Object#inspect on each and\nappending the given <code>prefix</code>.\n<p>See #puts for more …\n"],["pre_input_hook","Readline","classes/Readline.html#method-c-pre_input_hook","()","<p>Returns a Proc object <code>proc</code> to call after the first prompt has\nbeen printed and just before readline starts …\n"],["pre_input_hook=","Readline","classes/Readline.html#method-c-pre_input_hook-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to call after the first prompt\nhas been printed and just before readline …\n"],["pre_install","Gem","classes/Gem.html#method-c-pre_install","(&hook)","<p>Adds a pre-install hook that will be passed an Gem::Installer instance when\nGem::Installer#install is …\n"],["pre_match","MatchData","classes/MatchData.html#method-i-pre_match","()","<p>Returns the portion of the original string before the current match.\nEquivalent to the special variable …\n"],["pre_match","StringScanner","classes/StringScanner.html#method-i-pre_match","()","<p>Returns the <strong><em>pre</strong>-match</em> (in the regular expression\nsense) of the last scan.\n\n<pre><code>s = StringScanner.new(&#39;test ...</code></pre>\n"],["pre_reset","Gem","classes/Gem.html#method-c-pre_reset","(&hook)","<p>Adds a hook that will get run before Gem::Specification.reset is run.\n"],["pre_uninstall","Gem","classes/Gem.html#method-c-pre_uninstall","(&hook)","<p>Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance\nand the spec that will be …\n"],["pread","IO","classes/IO.html#method-i-pread","(p1, p2, p3 = v3)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using the pread system call\nand returns them as a string without modifying …\n"],["precs","BigDecimal","classes/BigDecimal.html#method-i-precs","()","<p>Returns an Array of two Integer values.\n<p>The first value is the current number of significant digits in …\n"],["pred","Integer","classes/Integer.html#method-i-pred","()","<p>Returns the predecessor of <code>int</code>, i.e. the Integer equal to\n<code>int-1</code>.\n\n<pre><code>1.pred      #=&gt; 0\n(-1).pred   #=&gt; -2\n</code></pre>\n"],["predecessors","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge\nwith\n\n<pre><code>`self` as their {Edge#destination}</code></pre>\n"],["predicate","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-predicate","(path)",""],["predicate","REXML::QuickPath","classes/REXML/QuickPath.html#method-c-predicate","( elements, path )","<p>A predicate filters a node-set with respect to an axis to produce a new\nnode-set. For each node in the …\n"],["predicate","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-predicate","(path, nodeset)",""],["predicate_to_string","REXML::Parsers::XPathParser","classes/REXML/Parsers/XPathParser.html#method-i-predicate_to_string","( path, &block )",""],["prefix","Gem","classes/Gem.html#method-c-prefix","()","<p>The directory prefix this RubyGems was installed at. If your prefix is in a\nstandard location (ie, rubygems …\n"],["prefix","IPAddr","classes/IPAddr.html#method-i-prefix","()","<p>Returns the prefix length in bits for the ipaddr.\n"],["prefix","REXML::Attribute","classes/REXML/Attribute.html#method-i-prefix","()","<p>Returns the namespace of the attribute.\n\n<pre><code>e = Element.new( &quot;elns:myelement&quot; )\ne.add_attribute( &quot;nsa:a&quot;, ...</code></pre>\n"],["prefix","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-prefix","( namespace=nil )",""],["prefix=","IPAddr","classes/IPAddr.html#method-i-prefix-3D","(prefix)","<p>Sets the prefix length in bits\n"],["prefixes","REXML::Attributes","classes/REXML/Attributes.html#method-i-prefixes","()","<p>Returns an array of Strings containing all of the prefixes declared by this\nset of # attributes.  The …\n"],["prefixes","REXML::Element","classes/REXML/Element.html#method-i-prefixes","()","<p>Evaluates to an <code>Array</code> containing the prefixes (names) of all\ndefined namespaces at this context node. …\n"],["prepare_message","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-prepare_message","(message, *color)",""],["prepend","Array","classes/Array.html#method-i-prepend","(*args)",""],["prepend","Module","classes/Module.html#method-i-prepend","(*args)","<p>Invokes <code>Module.prepend_features</code> on each parameter in reverse\norder.\n"],["prepend","OptionParser::List","classes/OptionParser/List.html#method-i-prepend","(*args)","<p>Inserts <code>switch</code> at the head of the list, and associates short,\nlong and negated long options. Arguments …\n"],["prepend","String","classes/String.html#method-i-prepend","(*args)","<p>Prepend—Prepend the given strings to <em>str</em>.\n\n<pre><code>a = &quot;!&quot;\na.prepend(&quot;hello &quot;, &quot;world&quot;) #=&gt; &quot;hello world!&quot;\na ...\n</code></pre>\n"],["prepend_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-prepend_file","(path, *args, &block)",""],["prepend_to_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-prepend_to_file","(path, *args, &block)","<p>Prepend text to a file. Since it depends on insert_into_file, it&#39;s\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; … &mdash; "],["pressed?","IO","classes/IO.html#method-i-pressed-3F","(p1)",""],["pretty","CGI::Util","classes/CGI/Util.html#method-i-pretty","(string, shift = \" \")","<p>Prettify (indent) an HTML string.\n<p><code>string</code> is the HTML string to indent.  <code>shift</code> is\nthe indentation unit …\n"],["pretty_dependency","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-pretty_dependency","(dep, print_source = false)",""],["pretty_generate","JSON","classes/JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier …\n"],["pretty_inspect","Kernel","classes/Kernel.html#method-i-pretty_inspect","()","<p>Returns a pretty printed object as a string.\n<p>In order to use this method you must first require the PP …\n"],["pretty_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_name","()",""],["pretty_name","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-pretty_name","()","<p>Method/attribute name with class/instance indicator\n"],["pretty_new_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_new_name","()","<p>New name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_old_name","RDoc::Alias","classes/RDoc/Alias.html#method-i-pretty_old_name","()","<p>Old name with prefix &#39;::&#39; or &#39;#&#39;.\n"],["pretty_print","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-pretty_print","(q)",""],["pretty_print","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-pretty_print","(q)",""],["pretty_print","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-pretty_print","(q)",""],["pretty_print_children","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-pretty_print_children","(q, names = [])",""],["pretty_values_for","Bundler::Settings","classes/Bundler/Settings.html#method-i-pretty_values_for","(exposed_key)",""],["prev_day","Date","classes/Date.html#method-i-prev_day","(p1 = v1)","<p>This method is equivalent to d - n.\n"],["prev_float","Float","classes/Float.html#method-i-prev_float","()","<p>Returns the previous representable floating point number.\n<p>(-Float::MAX).prev_float and (-Float::INFINITY).prev_float …\n"],["prev_month","Date","classes/Date.html#method-i-prev_month","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; n.\n<p>See Date#<< for examples.\n"],["prev_year","Date","classes/Date.html#method-i-prev_year","(p1 = v1)","<p>This method is equivalent to d &lt;&lt; (n * 12).\n\n<pre><code>Date.new(2001,2,3).prev_year      #=&gt; #&lt;Date: 2000-02-03 ...\n</code></pre>\n"],["previous=","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-previous-3D","( previous )",""],["previous_element","REXML::Element","classes/REXML/Element.html#method-i-previous_element","()","<p>Returns the previous sibling that is an element, or nil if there is no\nElement sibling prior to this …\n"],["previous_period_end","Logger::Period","classes/Logger/Period.html#method-i-previous_period_end","(now, shift_age)",""],["previous_sibling=","REXML::Child","classes/REXML/Child.html#method-i-previous_sibling-3D","(other)","<p>Sets the previous sibling of this child.  This can be used to insert a\nchild before some other child. …\n"],["previous_sibling_node","REXML::Node","classes/REXML/Node.html#method-i-previous_sibling_node","()","<p>@return the previous sibling (nil if unset)\n"],["primary","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-primary","()","<p>Returns the first advertised TupleSpace.\n"],["prime?","Integer","classes/Integer.html#method-i-prime-3F","()","<p>Returns true if <code>self</code> is a prime number, else returns false.\n"],["prime?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-prime-3F","(p1 = v1)","<p>Performs a Miller-Rabin probabilistic primality test with <em>checks</em>\niterations. If <em>checks</em> is not specified, …\n"],["prime?","Prime","classes/Prime.html#method-i-prime-3F","(value, generator = Prime::Generator23.new)","<p>Returns true if <code>value</code> is a prime number, else returns false.\n<p>Parameters\n<p><code>value</code> &mdash; an arbitrary integer to be …\n"],["prime_division","Integer","classes/Integer.html#method-i-prime_division","(generator = Prime::Generator23.new)","<p>Returns the factorization of <code>self</code>.\n<p>See Prime#prime_division for more details.\n"],["prime_division","Prime","classes/Prime.html#method-i-prime_division","(value, generator = Prime::Generator23.new)","<p>Returns the factorization of <code>value</code>.\n<p>Parameters\n<p><code>value</code> &mdash; An arbitrary integer.\n"],["prime_fasttest?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-prime_fasttest-3F","(p1 = v1, p2 = v2)","<p>Performs a Miller-Rabin primality test. This is same as #prime? except this\nfirst attempts trial divisions …\n"],["primitive_convert","Encoding::Converter","classes/Encoding/Converter.html#method-i-primitive_convert","(p1, p2, p3 = v3, p4 = v4, p5 = v5, p6 = {})","<p>possible opt elements:\n\n<pre><code>hash form:\n  :partial_input =&gt; true           # source buffer may be part of larger ...</code></pre>\n"],["primitive_errinfo","Encoding::Converter","classes/Encoding/Converter.html#method-i-primitive_errinfo","()","<p>primitive_errinfo returns important information regarding the last error as\na 5-element array:\n\n<pre><code>[result, ...</code></pre>\n"],["print","ARGF","classes/ARGF.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","CGI","classes/CGI.html#method-i-print","(*options)","<p>Print an argument or list of arguments to the default output stream\n\n<pre><code>cgi = CGI.new\ncgi.print    # default: ...\n</code></pre>\n"],["print","IO","classes/IO.html#method-i-print","(*args)","<p>Writes the given object(s) to <em>ios</em>. Returns <code>nil</code>.\n<p>The stream must be opened for writing. Each given object …\n"],["print","IO::generic_writable","classes/IO/generic_writable.html#method-i-print","(*args)","<p>See IO#print.\n"],["print","IRB::Locale","classes/IRB/Locale.html#method-i-print","(*opts)",""],["print","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-print","(*opts)","<p>See OutputMethod#print for more detail.\n"],["print","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-print","(*opts)","<p>Open this method to implement your own output method, raises a\nNotImplementedError if you don&#39;t define …\n"],["print","IRB::StdioOutputMethod","classes/IRB/StdioOutputMethod.html#method-i-print","(*opts)","<p>Prints the given <code>opts</code> to standard output, see IO#print for\nmore information.\n"],["print","Kernel","classes/Kernel.html#method-i-print","(*args)","<p>Prints each object in turn to <code>$stdout</code>. If the output field\nseparator (<code>$,</code>) is not <code>nil</code>, its contents will …\n"],["print","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-print","(str)",""],["print","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-print","(*args)","<p>Writes <em>args</em> to the stream.\n<p>See IO#print for full details.\n"],["print","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-print","(*args)","<p>Same as IO.\n"],["print_in_columns","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-print_in_columns","(array)","<p>Prints values in columns\n<p>Parameters\n<p>Array[String, String, …]\n"],["print_major_deprecations!","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-print_major_deprecations-21","()",""],["print_mem_leaks","OpenSSL","classes/OpenSSL.html#method-c-print_mem_leaks","()","<p>For debugging the Ruby/OpenSSL library. Calls CRYPTO_mem_leaks_fp(stderr).\nPrints detected memory leaks …\n"],["print_options","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-print_options","(shell, options, group_name = nil)","<p>Receives a set of options and print them.\n"],["print_post_install_message","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-print_post_install_message","(name, msg)",""],["print_profile","Profiler__","classes/Profiler__.html#method-i-print_profile","(f)","<p>Outputs the results from the profiler.\n<p>See Profiler__ for more information.\n"],["print_table","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-print_table","(array, options = {})","<p>Prints a table.\n<p>Parameters\n<p>Array[Array[String, String, …]]\n"],["print_usage","IRB","classes/IRB.html#method-c-print_usage","()","<p>Outputs the irb help message, see IRB@Command+line+options.\n"],["print_wrapped","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-print_wrapped","(message, options = {})","<p>Prints a long string, word-wrapping the text to the current width of the\nterminal display. Ideal for …\n"],["printable_commands","Bundler::Thor","classes/Bundler/Thor.html#method-c-printable_commands","(all = true, subcommand = false)","<p>Returns commands ready to be printed.\n"],["printable_commands","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-printable_commands","(*)","<p>Returns commands ready to be printed.\n"],["printable_tasks","Bundler::Thor","classes/Bundler/Thor.html#method-c-printable_tasks","(all = true, subcommand = false)",""],["printable_tasks","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-printable_tasks","(*)",""],["printf","ARGF","classes/ARGF.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO","classes/IO.html#method-i-printf","(*args)","<p>Formats and writes to <em>ios</em>, converting parameters under control of\nthe format string. See <code>Kernel#sprintf</code> …\n"],["printf","IO::generic_writable","classes/IO/generic_writable.html#method-i-printf","(*args)","<p>See IO#printf.\n"],["printf","IRB::Locale","classes/IRB/Locale.html#method-i-printf","(*opts)",""],["printf","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-printf","(format, *opts)","<p>See OutputMethod#printf for more detail.\n"],["printf","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-printf","(format, *opts)","<p>Extends IO#printf to format the given <code>opts</code> for Kernel#sprintf\nusing #parse_printf_format\n"],["printf","Kernel","classes/Kernel.html#method-i-printf","(*args)","<p>Equivalent to:\n\n<pre><code>io.write(sprintf(string, obj, ...))</code></pre>\n<p>or\n"],["printf","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-printf","(*args)",""],["printf","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-printf","(s, *args)","<p>Formats and writes to the stream converting parameters under control of the\nformat string.\n<p>See Kernel#sprintf …\n"],["printf","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-printf","(*args)","<p>Same as IO.\n"],["printn","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-printn","(*opts)","<p>See OutputMethod#printn for more detail.\n"],["printn","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-printn","(*opts)","<p>Prints the given <code>opts</code>, with a newline delimiter.\n"],["priority","Thread","classes/Thread.html#method-i-priority","()","<p>Returns the priority of <em>thr</em>. Default is inherited from the current\nthread which creating the new thread, …\n"],["priority=","Thread","classes/Thread.html#method-i-priority-3D","(p1)","<p>Sets the priority of <em>thr</em> to <em>integer</em>. Higher-priority\nthreads will run more frequently than lower-priority …\n"],["pristine","Bundler::CLI","classes/Bundler/CLI.html#method-i-pristine","(*gems)",""],["private?","IPAddr","classes/IPAddr.html#method-i-private-3F","()","<p>Returns true if the ipaddr is a private address.  IPv4 addresses in\n10.0.0.0/8, 172.16.0.0/12 and 192.168.0.0/16 …\n"],["private?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-private-3F","()","<p>Indicates whether this DH instance has a private key associated with it or\nnot. The private key may be …\n"],["private?","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-private-3F","()","<p>Indicates whether this DSA instance has a private key associated with it or\nnot. The private key may …\n"],["private?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private-3F","()","<p>Returns whether this EC instance has a private key. The private key (BN)\ncan be retrieved with EC#private_key …\n"],["private?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private-3F","()","<p>Does this keypair contain a private key?\n"],["private_call?","NoMethodError","classes/NoMethodError.html#method-i-private_call-3F","()","<p>Return true if the caused method was called as private.\n"],["private_class_method","Module","classes/Module.html#method-i-private_class_method","(*args)","<p>Makes existing class methods private. Often used to hide the default\nconstructor <code>new</code>.\n<p>String arguments …\n"],["private_constant","Module","classes/Module.html#method-i-private_constant","(*args)","<p>Makes a list of existing constants private.\n"],["private_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_decrypt","(p1, p2 = v2)","<p>Decrypt <em>string</em>, which has been encrypted with the public key, with\nthe private key.  <em>padding</em> defaults …\n"],["private_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-private_encrypt","(p1, p2 = v2)","<p>Encrypt <em>string</em> with the private key.  <em>padding</em> defaults to\nPKCS1_PADDING. The encrypted string output …\n"],["private_instance_methods","Module","classes/Module.html#method-i-private_instance_methods","(*args)","<p>Returns a list of the private instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the …\n"],["private_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_private_key()\n"],["private_key=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-private_key-3D","(key)","<p>Sets this client&#39;s SSL private key\n"],["private_key=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_private_key()\n"],["private_key?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-private_key-3F","()",""],["private_method?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-private_method-3F","(instance)",""],["private_method?","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-private_method-3F","(instance)",""],["private_method_defined?","Module","classes/Module.html#method-i-private_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named private method is defined by\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also …\n"],["private_methods","Object","classes/Object.html#method-i-private_methods","(*args)","<p>Returns the list of private methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["proc","Kernel","classes/Kernel.html#method-i-proc","()","<p>Equivalent to <code>Proc.new</code>.\n"],["process","Net::IMAP::CramMD5Authenticator","classes/Net/IMAP/CramMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::DigestMD5Authenticator","classes/Net/IMAP/DigestMD5Authenticator.html#method-i-process","(challenge)",""],["process","Net::IMAP::LoginAuthenticator","classes/Net/IMAP/LoginAuthenticator.html#method-i-process","(data)",""],["process","Net::IMAP::PlainAuthenticator","classes/Net/IMAP/PlainAuthenticator.html#method-i-process","(data)",""],["processingInstruction","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-processingInstruction","(target, content)",""],["processing_instruction","REXML::Functions","classes/REXML/Functions.html#method-c-processing_instruction","( node )",""],["processing_instruction","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-processing_instruction","(target, data)",""],["product","Array","classes/Array.html#method-i-product","(*args)","<p>Returns an array of all combinations of elements from all arrays.\n<p>The length of the returned array is …\n"],["progid","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-progid","()","<p>Returns ProgID if it exists. If not found, then returns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel ...</code></pre>\n"],["progids","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-progids","()","<p>Returns array of ProgID.\n"],["program_name","OptionParser","classes/OptionParser.html#method-i-program_name","()","<p>Program name to be emitted in error message and default banner, defaults to\n$0.\n"],["progress","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-progress","(position)",""],["progress_rate","Bundler::Molinillo::UI","classes/Bundler/Molinillo/UI.html#method-i-progress_rate","()","<p>How often progress should be conveyed to the user via {#indicate_progress},\nin seconds. A third of a …\n"],["prompt_mode=","IRB::Context","classes/IRB/Context.html#method-i-prompt_mode-3D","(mode)","<p>Sets the <code>mode</code> of the prompt in this context.\n<p>See IRB@Customizing+the+IRB+Prompt for more information. …\n"],["prompting?","IRB::Context","classes/IRB/Context.html#method-i-prompting-3F","()","<p>Whether #verbose? is <code>true</code>, and <code>input_method</code> is\neither StdioInputMethod or ReadlineInputMethod, see #io …\n"],["proper_subset?","Set","classes/Set.html#method-i-proper_subset-3F","(set)","<p>Returns true if the set is a proper subset of the given set.\n"],["proper_superset?","Set","classes/Set.html#method-i-proper_superset-3F","(set)","<p>Returns true if the set is a proper superset of the given set.\n"],["propfind","Net::HTTP","classes/Net/HTTP.html#method-i-propfind","(path, body = nil, initheader = {'Depth' => '0'})","<p>Sends a PROPFIND request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["proppatch","Net::HTTP","classes/Net/HTTP.html#method-i-proppatch","(path, body, initheader = nil)","<p>Sends a PROPPATCH request to the <code>path</code> and gets a response, as\nan HTTPResponse object.\n"],["protected_instance_methods","Module","classes/Module.html#method-i-protected_instance_methods","(*args)","<p>Returns a list of the protected instance methods defined in <em>mod</em>.\nIf the optional parameter is <code>false</code>, …\n"],["protected_method_defined?","Module","classes/Module.html#method-i-protected_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named protected method is defined\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["protected_methods","Delegator","classes/Delegator.html#method-i-protected_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["protected_methods","Object","classes/Object.html#method-i-protected_methods","(*args)","<p>Returns the list of protected methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["protocol","Addrinfo","classes/Addrinfo.html#method-i-protocol","()","<p>returns the socket type as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).protocol == Socket::IPPROTO_TCP #=&gt; ...\n</code></pre>\n"],["provide","Rinda::RingProvider","classes/Rinda/RingProvider.html#method-i-provide","()","<p>Advertises this service on the primary remote TupleSpace.\n"],["proxy=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy-3D","(proxy)","<p>Sets the proxy server.  The <code>proxy</code> may be the URI of the proxy\nserver, the symbol <code>:ENV</code> which will read …\n"],["proxy?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy-3F","()","<p>True if requests for this connection will be proxied\n"],["proxy_address","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_address","()","<p>The address of the proxy server, if one is configured.\n"],["proxy_basic_auth","WEBrick::HTTPAuth","classes/WEBrick/HTTPAuth.html#method-i-proxy_basic_auth","(req, res, realm)","<p>Simple wrapper for providing basic authentication for a proxied request.\nWhen called with a request  …\n"],["proxy_bypass?","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy_bypass-3F","(host, port)","<p>Returns true when proxy should by bypassed for host.\n"],["proxy_class?","Net::HTTP","classes/Net/HTTP.html#method-c-proxy_class-3F","()","<p>returns true if self is a class which was created by HTTP::Proxy.\n"],["proxy_from_env","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-proxy_from_env","()","<p>Creates a URI for an HTTP proxy server from ENV variables.\n<p>If <code>HTTP_PROXY</code> is set a proxy will be returned. …\n"],["proxy_from_env?","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_from_env-3F","()","<p>True if the proxy for this connection is determined from the environment\n"],["proxy_pass","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_pass","()","<p>The password of the proxy server, if one is configured.\n"],["proxy_port","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_port","()","<p>The port of the proxy server, if one is configured.\n"],["proxy_user","Net::HTTP","classes/Net/HTTP.html#method-i-proxy_user","()","<p>The username of the proxy server, if one is configured.\n"],["proxyaddr","Net::HTTP","classes/Net/HTTP.html#method-i-proxyaddr","()",""],["proxyport","Net::HTTP","classes/Net/HTTP.html#method-i-proxyport","()",""],["prune","Find","classes/Find.html#method-c-prune","()","<p>Skips the current file or directory, restarting the loop with the next\nentry. If the current file is …\n"],["prune_cache","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-prune_cache","(cache_path)",""],["pseudo_bytes","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-pseudo_bytes","(p1)","<p>Generates a String with <em>length</em> number of pseudo-random bytes.\n<p>Pseudo-random byte sequences generated by …\n"],["ptr","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-ptr","()","<p>Returns a new Fiddle::Pointer instance that is a dereferenced pointer for\nthis pointer.\n<p>Analogous to the …\n"],["pubDate","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-pubDate","()",""],["pubDate","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-pubDate","()",""],["pubDate=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-pubDate-3D","(date)",""],["pubDate=","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-pubDate-3D","(date)",""],["public","REXML::DocType","classes/REXML/DocType.html#method-i-public","()","<p>This method retrieves the public identifier identifying the document&#39;s\nDTD.\n<p>Method contributed by …\n"],["public?","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-public-3F","()","<p>Indicates whether this DH instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-public-3F","()","<p>Indicates whether this DSA instance has a public key associated with it or\nnot. The public key may be …\n"],["public?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public-3F","()","<p>Returns whether this EC instance has a public key. The public key\n(EC::Point) can be retrieved with  …\n"],["public?","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public-3F","()","<p>The return value is always <code>true</code> since every private key is\nalso a public key.\n"],["public_class_method","Module","classes/Module.html#method-i-public_class_method","(*args)","<p>Makes a list of existing class methods public.\n<p>String arguments are converted to symbols.\n"],["public_command","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-public_command","(*names)","<p>Allows to use private methods from parent in child classes as commands.\n<p>Parameters\n\n<pre><code>names&lt;Array&gt;:: Method ...\n</code></pre>\n"],["public_constant","Module","classes/Module.html#method-i-public_constant","(*args)","<p>Makes a list of existing constants public.\n"],["public_decrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_decrypt","(p1, p2 = v2)","<p>Decrypt <em>string</em>, which has been encrypted with the private key,\nwith the public key.  <em>padding</em> defaults …\n"],["public_encrypt","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_encrypt","(p1, p2 = v2)","<p>Encrypt <em>string</em> with the public key.  <em>padding</em> defaults to\nPKCS1_PADDING. The encrypted string output can …\n"],["public_instance_method","Module","classes/Module.html#method-i-public_instance_method","(p1)","<p>Similar to <em>instance_method</em>, searches public method only.\n"],["public_instance_methods","Module","classes/Module.html#method-i-public_instance_methods","(*args)","<p>Returns a list of the public instance methods defined in <em>mod</em>. If\nthe optional parameter is <code>false</code>, the …\n"],["public_key","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-public_key","()","<p>Returns the public key associated with the SPKI, an instance of\nOpenSSL::PKey.\n"],["public_key","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-public_key","()","<p>Returns a new DH instance that carries just the public information, i.e.\nthe prime <em>p</em> and the generator …\n"],["public_key","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-public_key","()","<p>Returns a new DSA instance that carries just the public key information. If\nthe current instance has …\n"],["public_key","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key","()","<p>See the OpenSSL documentation for EC_KEY_get0_public_key()\n"],["public_key","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-public_key","()","<p>Makes new RSA instance containing the public key from the private key.\n"],["public_key","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-public_key","()",""],["public_key","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-public_key","()",""],["public_key=","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-public_key-3D","(p1)","<p>Parameters\n<p><em>pub</em> - the public key to be set for this instance\n\n<p>Sets the public key to be associated with the …\n"],["public_key=","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key-3D","(p1)","<p>See the OpenSSL documentation for EC_KEY_set_public_key()\n"],["public_key=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-public_key-3D","(p1)",""],["public_key=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-public_key-3D","(p1)",""],["public_key?","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-public_key-3F","()",""],["public_method","Object","classes/Object.html#method-i-public_method","(p1)","<p>Similar to <em>method</em>, searches public method only.\n"],["public_method_defined?","Module","classes/Module.html#method-i-public_method_defined-3F","(*args)","<p>Returns <code>true</code> if the named public method is defined by\n<em>mod</em>.  If <em>inherit</em> is set, the lookup will also search …\n"],["public_methods","Delegator","classes/Delegator.html#method-i-public_methods","(all=true)","<p>Returns the methods available to this delegate object as the union of this\nobject&#39;s and _<em>getobj</em> …\n"],["public_methods","Object","classes/Object.html#method-i-public_methods","(*args)","<p>Returns the list of public methods accessible to <em>obj</em>. If the\n<em>all</em> parameter is set to <code>false</code>, only those …\n"],["public_send","Object","classes/Object.html#method-i-public_send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. Unlike send, public_send …\n"],["public_task","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-public_task","(*names)",""],["pull","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-pull","()","<p>Returns the next event.  This is a <code>PullEvent</code> object.\n"],["pull","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-pull","()",""],["purgeable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-purgeable-3F","()","<p>Returns <code>true</code> if the objects in the directory may be deleted,\nor the directory may be purged.\n"],["purpose=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-purpose-3D","(p1)","<p>Sets the store&#39;s purpose to <em>purpose</em>. If specified, the\nverifications on the store will check every …\n"],["purpose=","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-purpose-3D","(p1)","<p>Sets the purpose of the context. See Store#purpose=.\n"],["push","Array","classes/Array.html#method-i-push","(*args)","<p>Append — Pushes the given object(s) on to the end of this array. This\nexpression returns the array …\n"],["push","CSV::Row","classes/CSV/Row.html#method-i-push","(*args)","<p>A shortcut for appending multiple fields.  Equivalent to:\n\n<pre><code>args.each { |arg| csv_row &lt;&lt; arg }\n</code></pre>\n<p>This method …\n"],["push","CSV::Table","classes/CSV/Table.html#method-i-push","(*rows)","<p>A shortcut for appending multiple rows.  Equivalent to:\n\n<pre><code>rows.each { |row| self &lt;&lt; row }\n</code></pre>\n<p>This method returns …\n"],["push","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-push","(object)",""],["push","Queue","classes/Queue.html#method-i-push","(p1)","<p>Pushes the given <code>object</code> to the queue.\n"],["push","REXML::Parent","classes/REXML/Parent.html#method-i-push","( object )",""],["push","Rinda::TupleBag","classes/Rinda/TupleBag.html#method-i-push","(tuple)","<p>Add <code>tuple</code> to the TupleBag.\n"],["push","SizedQueue","classes/SizedQueue.html#method-i-push","(*args)","<p>Pushes <code>object</code> to the queue.\n<p>If there is no space left in the queue, waits until space becomes\navailable, …\n"],["push_inspect_key","PP::PPMethods","classes/PP/PPMethods.html#method-i-push_inspect_key","(id)","<p>Adds the object_id <code>id</code> to the set of objects being pretty\nprinted, so as to not repeat objects.\n"],["push_workspace","IRB::Context","classes/IRB/Context.html#method-i-push_workspace","(*_main)","<p>Creates a new workspace with the given object or binding, and appends it\nonto the current #workspaces …\n"],["pushd","Shell","classes/Shell.html#method-i-pushd","(path = nil, verbose = @verbose)",""],["pushdir","Shell","classes/Shell.html#method-i-pushdir","(path = nil, verbose = @verbose)","<p>Pushes the current directory to the directory stack, changing the current\ndirectory to <code>path</code>.\n<p>If <code>path</code> is …\n"],["put","Net::FTP","classes/Net/FTP.html#method-i-put","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)","<p>Transfers <code>localfile</code> to the server in whatever mode the session\nis set (text or binary).  See #puttextfile …\n"],["putback","Encoding::Converter","classes/Encoding/Converter.html#method-i-putback","(*args)","<p>Put back the bytes which will be converted.\n<p>The bytes are caused by invalid_byte_sequence error. When …\n"],["putbinaryfile","Net::FTP","classes/Net/FTP.html#method-i-putbinaryfile","(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE)","<p>Transfers <code>localfile</code> to the server in binary mode, storing the\nresult in <code>remotefile</code>. If a block is supplied, …\n"],["putc","ARGF","classes/ARGF.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>. If <em>obj</em> is\n<code>String</code> …\n"],["putc","IO","classes/IO.html#method-i-putc","(p1)","<p>If <em>obj</em> is <code>Numeric</code>, write the character whose code is\nthe least-significant byte of <em>obj</em>. If <em>obj</em> is\n<code>String</code> …\n"],["putc","Kernel","classes/Kernel.html#method-i-putc","(p1)","<p>Equivalent to:\n\n<pre><code>$stdout.putc(int)\n</code></pre>\n<p>Refer to the documentation for IO#putc for important information regarding\n…\n"],["putc","StringIO","classes/StringIO.html#method-i-putc","(p1)","<p>See IO#putc.\n"],["putc","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-putc","(p1)","<p>Same as IO.\n"],["puts","ARGF","classes/ARGF.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","CSV","classes/CSV.html#method-i-puts","(row)",""],["puts","IO","classes/IO.html#method-i-puts","(*args)","<p>Writes the given object(s) to <em>ios</em>. Writes a newline after any that\ndo not already end with a newline …\n"],["puts","IO::generic_writable","classes/IO/generic_writable.html#method-i-puts","(*args)","<p>See IO#puts.\n"],["puts","IRB::Locale","classes/IRB/Locale.html#method-i-puts","(*opts)",""],["puts","IRB::Notifier::AbstractNotifier","classes/IRB/Notifier/AbstractNotifier.html#method-i-puts","(*objs)","<p>See OutputMethod#puts for more detail.\n"],["puts","IRB::OutputMethod","classes/IRB/OutputMethod.html#method-i-puts","(*objs)","<p>Calls #print on each element in the given <code>objs</code>, followed by a\nnewline character.\n"],["puts","Kernel","classes/Kernel.html#method-i-puts","(*args)","<p>Equivalent to\n\n<pre><code>$stdout.puts(obj, ...)</code></pre>\n"],["puts","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-puts","(str = '')",""],["puts","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-puts","(*args)","<p>Writes <em>args</em> to the stream along with a record separator.\n<p>See IO#puts for full details.\n"],["puts","XMP","classes/XMP.html#method-i-puts","(exps)","<p>Evaluates the given <code>exps</code>, for example:\n\n<pre><code>require &#39;irb/xmp&#39;\nx = XMP.new\n\nx.puts &#39;{:a =&gt; 1, :b =&gt; 2, :c =&gt; ...</code></pre>\n"],["puts","XMP::StringInputMethod","classes/XMP/StringInputMethod.html#method-i-puts","(exps)","<p>Concatenates all expressions in this printer, separated by newlines.\n<p>An Encoding::CompatibilityError is …\n"],["puts","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-puts","(*args)","<p>Same as IO.\n"],["puttextfile","Net::FTP","classes/Net/FTP.html#method-i-puttextfile","(localfile, remotefile = File.basename(localfile))","<p>Transfers <code>localfile</code> to the server in ASCII (text) mode,\nstoring the result in <code>remotefile</code>. If callback …\n"],["pwd","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-pwd","()","<p>Returns the name of the current directory.\n"],["pwd","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-pwd","()",""],["pwd","Dir","classes/Dir.html#method-c-pwd","()","<p>Returns the path to the current working directory of this process as a\nstring.\n\n<pre><code>Dir.chdir(&quot;/tmp&quot;)   #=&gt; ...\n</code></pre>\n"],["pwd","FileUtils","classes/FileUtils.html#method-c-pwd","()","<p>Returns the name of the current directory.\n"],["pwd","Net::FTP","classes/Net/FTP.html#method-i-pwd","()","<p>Returns the current remote directory.\n"],["pwd","Pathname","classes/Pathname.html#method-c-pwd","()","<p>Returns the current working directory as a Pathname.\n\n<pre><code>Pathname.getwd\n    #=&gt; #&lt;Pathname:/home/zzak/projects/ruby&gt;\n</code></pre>\n"],["pwrite","IO","classes/IO.html#method-i-pwrite","(p1, p2)","<p>Writes the given string to <em>ios</em> at <em>offset</em> using pwrite()\nsystem call.  This is advantageous to combining …\n"],["query","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-query","()","<p>Request query as a Hash\n"],["query=","URI::Generic","classes/URI/Generic.html#method-i-query-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["quiet","RDoc::Options","classes/RDoc/Options.html#method-i-quiet","()","<p>Don&#39;t display progress as we process the files\n"],["quiet=","RDoc::Options","classes/RDoc/Options.html#method-i-quiet-3D","(bool)","<p>Set quietness to <code>bool</code>\n"],["quiet?","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-quiet-3F","()",""],["quiet?","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-quiet-3F","()",""],["quit","Net::FTP","classes/Net/FTP.html#method-i-quit","()","<p>Exits the FTP session.\n"],["quit","Net::SMTP","classes/Net/SMTP.html#method-i-quit","()",""],["quo","BigDecimal","classes/BigDecimal.html#method-i-quo","(p1)","<p>Divide by the specified value.\n<p>See BigDecimal#div.\n"],["quo","Complex","classes/Complex.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre><code>Complex(2, 3)  / Complex(2, 3)   #=&gt; ((1/1)+(0/1)*i)\nComplex(900)   / Complex(1)   ...\n</code></pre>\n"],["quo","Float","classes/Float.html#method-i-quo","(p1)","<p>Returns <code>float / numeric</code>, same as Float#/.\n"],["quo","Numeric","classes/Numeric.html#method-i-quo","(p1)","<p>Returns the most exact division (rational for integers, float for floats).\n"],["quo","Rational","classes/Rational.html#method-i-quo","(p1)","<p>Performs division.\n\n<pre><code>Rational(2, 3)  / Rational(2, 3)   #=&gt; (1/1)\nRational(900)   / Rational(1)      #=&gt; ...\n</code></pre>\n"],["quote","Regexp","classes/Regexp.html#method-c-quote","(p1)","<p>Escapes any characters that would have special meaning in a regular\nexpression. Returns a new escaped …\n"],["quote","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-quote","(str)","<p>Quotes and escapes quotes in <code>str</code>\n"],["quote_char","CSV","classes/CSV.html#method-i-quote_char","()","<p>The encoded <code>:quote_char</code> used in parsing and writing.  See\nCSV::new for details.\n"],["quote_character","CSV::Parser","classes/CSV/Parser.html#method-i-quote_character","()",""],["quoting_detection_proc","Readline","classes/Readline.html#method-c-quoting_detection_proc","()","<p>Returns the quoting detection Proc object.\n"],["quoting_detection_proc=","Readline","classes/Readline.html#method-c-quoting_detection_proc-3D","(p1)","<p>Specifies a Proc object <code>proc</code> to determine if a character in\nthe user&#39;s input is escaped. It should …\n"],["racc_accept","Racc::Parser","classes/Racc/Parser.html#method-i-racc_accept","()",""],["racc_e_pop","Racc::Parser","classes/Racc/Parser.html#method-i-racc_e_pop","(state, tstack, vstack)",""],["racc_next_state","Racc::Parser","classes/Racc/Parser.html#method-i-racc_next_state","(curstate, state)",""],["racc_print_stacks","Racc::Parser","classes/Racc/Parser.html#method-i-racc_print_stacks","(t, v)",""],["racc_print_states","Racc::Parser","classes/Racc/Parser.html#method-i-racc_print_states","(s)",""],["racc_read_token","Racc::Parser","classes/Racc/Parser.html#method-i-racc_read_token","(t, tok, val)","<p>For debugging output\n"],["racc_reduce","Racc::Parser","classes/Racc/Parser.html#method-i-racc_reduce","(toks, sim, tstack, vstack)",""],["racc_shift","Racc::Parser","classes/Racc/Parser.html#method-i-racc_shift","(tok, tstack, vstack)",""],["racc_token2str","Racc::Parser","classes/Racc/Parser.html#method-i-racc_token2str","(tok)",""],["radio_button","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-radio_button","(name = \"\", value = nil, checked = nil)","<p>Generates a radio-button Input element.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nthe value of the …\n"],["radio_group","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-radio_group","(name = \"\", *values)","<p>Generate a sequence of radio button Input elements, as a String.\n<p>This works the same as #checkbox_group() …\n"],["raise","Delegator","classes/Delegator.html#method-i-raise","","<p>Use __raise__ if your Delegator does not have a object to delegate the\nraise method call.\n"],["raise","Kernel","classes/Kernel.html#method-i-raise","(*args)","<p>With no arguments, raises the exception in <code>$!</code> or raises a\n<code>RuntimeError</code> if <code>$!</code> is <code>nil</code>. With a\nsingle <code>String</code> …\n"],["raise","Thread","classes/Thread.html#method-i-raise","(*args)","<p>Raises an exception from the given thread. The caller does not have to be\n<code>thr</code>. See Kernel#raise for more …\n"],["raise_for_undefined_entity?","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::BaseParser","classes/RSS/BaseParser.html#method-c-raise_for_undefined_entity-3F","()",""],["raise_for_undefined_entity?","RSS::REXMLListener","classes/RSS/REXMLListener.html#method-c-raise_for_undefined_entity-3F","()",""],["raised_exception","TracePoint","classes/TracePoint.html#method-i-raised_exception","()","<p>Value from exception raised on the <code>:raise</code> event\n"],["rake_classes","Bundler::Thor::RakeCompat","classes/Bundler/Thor/RakeCompat.html#method-c-rake_classes","()",""],["rake_namespace","Object","classes/Object.html#method-i-rake_namespace","(name)",""],["rand","Kernel","classes/Kernel.html#method-i-rand","(*args)","<p>If called without an argument, or if <code>max.to_i.abs == 0</code>, rand\nreturns a pseudo-random floating point number …\n"],["rand","Random","classes/Random.html#method-c-rand","(*args)","<p>Alias of Random::DEFAULT.rand.\n"],["rand","Random","classes/Random.html#method-i-rand","(*args)","<p>When <code>max</code> is an Integer, <code>rand</code> returns a random\ninteger greater than or equal to zero and less than <code>max</code> …\n"],["rand","Random::Formatter","classes/Random/Formatter.html#method-i-rand","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["random_add","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-random_add","(p1, p2)","<p>Mixes the bytes from <em>str</em> into the Pseudo Random Number\nGenerator(PRNG) state.\n<p>Thus, if the data from  …\n"],["random_bytes","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-random_bytes","(p1)","<p>Generates a String with <em>length</em> number of cryptographically strong\npseudo-random bytes.\n<p>Example\n\n<pre><code>OpenSSL::Random.random_bytes(12) ...\n</code></pre>\n"],["random_bytes","Random::Formatter","classes/Random/Formatter.html#method-i-random_bytes","(n=nil)","<p>SecureRandom.random_bytes generates a random binary string.\n<p>The argument <em>n</em> specifies the length of the …\n"],["random_iv","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-random_iv","()","<p>Generate a random IV with OpenSSL::Random.random_bytes and sets it to the\ncipher, and returns it.\n<p>You …\n"],["random_key","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-random_key","()","<p>Generate a random key with OpenSSL::Random.random_bytes and sets it to the\ncipher, and returns it.\n<p>You …\n"],["random_number","Random::Formatter","classes/Random/Formatter.html#method-i-random_number","(*args)","<p>Generates formatted random number from raw random bytes. See Random#rand.\n"],["random_string","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-random_string","(len)","<p>Generates a random string of length <code>len</code>\n"],["rassoc","Array","classes/Array.html#method-i-rassoc","(p1)","<p>Searches through the array whose elements are also arrays.\n<p>Compares <code>obj</code> with the second element of each …\n"],["rassoc","ENV","classes/ENV.html#method-c-rassoc","(p1)","<p>Returns an Array of the name and value of the environment variable with\n<code>value</code> or <code>nil</code> if the value cannot …\n"],["rassoc","Hash","classes/Hash.html#method-i-rassoc","(p1)","<p>Searches through the hash comparing <em>obj</em> with the value using\n<code>==</code>. Returns the first key-value pair (two-element …\n"],["rationalize","Complex","classes/Complex.html#method-i-rationalize","(*args)","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre><code>Complex(1.0/3, ...</code></pre>\n"],["rationalize","Float","classes/Float.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value (flt-|eps| &lt;= result &lt;=\nflt+|eps|).  If the optional …\n"],["rationalize","Integer","classes/Integer.html#method-i-rationalize","(*args)","<p>Returns the value as a rational.  The optional argument <code>eps</code> is\nalways ignored.\n"],["rationalize","NilClass","classes/NilClass.html#method-i-rationalize","(*args)","<p>Returns zero as a rational.  The optional argument <code>eps</code> is\nalways ignored.\n"],["rationalize","Rational","classes/Rational.html#method-i-rationalize","(*args)","<p>Returns a simpler approximation of the value if the optional argument\n<code>eps</code> is given (rat-|eps| &lt;= result …\n"],["raw","IO","classes/IO.html#method-i-raw","(*args)","<p>Yields <code>self</code> within raw mode.\n\n<pre><code>STDIN.raw(&amp;:gets)\n</code></pre>\n<p>will read and return a line without echo back and line editing. …\n"],["raw","REXML::Element","classes/REXML/Element.html#method-i-raw","()","<p>Evaluates to <code>true</code> if raw mode is set for this element.  This\nis the case if the context has :<code>raw</code> set …\n"],["raw!","IO","classes/IO.html#method-i-raw-21","(*args)","<p>Enables raw mode.\n<p>If the terminal mode needs to be back, use io.raw { … }.\n<p>See IO#raw for details on …\n"],["raw_cookie","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-raw_cookie","()","<p>Get the raw cookies as a string.\n"],["raw_cookie2","CGI::QueryExtension","classes/CGI/QueryExtension.html#method-i-raw_cookie2","()","<p>Get the raw RFC2965 cookies as a string.\n"],["raw_data","GC::Profiler","classes/GC/Profiler.html#method-c-raw_data","()","<p>Returns an Array of individual raw profile data Hashes ordered from\nearliest to latest by <code>:GC_INVOKE_TIME</code> …\n"],["raw_require_paths","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-raw_require_paths","()",""],["rbx?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-rbx-3F","()",""],["rcptto","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto","(to_addr)",""],["rcptto_list","Net::SMTP","classes/Net/SMTP.html#method-i-rcptto_list","(to_addrs)",""],["rdev","File::Stat","classes/File/Stat.html#method-i-rdev","()","<p>Returns an integer representing the device type on which <em>stat</em>\nresides. Returns <code>nil</code> if the operating system …\n"],["rdev_major","File::Stat","classes/File/Stat.html#method-i-rdev_major","()","<p>Returns the major part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).rdev_major   #=&gt; 2\nFile.stat(&quot;/dev/tty&quot;).rdev_major ...\n</code></pre>\n"],["rdev_minor","File::Stat","classes/File/Stat.html#method-i-rdev_minor","()","<p>Returns the minor part of <code>File_Stat#rdev</code> or <code>nil</code>.\n\n<pre><code>File.stat(&quot;/dev/fd1&quot;).rdev_minor   #=&gt; 1\nFile.stat(&quot;/dev/tty&quot;).rdev_minor ...\n</code></pre>\n"],["rdoc_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-rdoc_installed-3F","()","<p>Is rdoc documentation installed?\n"],["rdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["rdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rdoc_task_description","()","<p>Task description for the rdoc task or its renamed equivalent\n"],["re_exchange","Process::GID","classes/Process/GID.html#method-c-re_exchange","()","<p>Exchange real and effective group IDs and return the new effective group\nID. Not available on all platforms. …\n"],["re_exchange","Process::UID","classes/Process/UID.html#method-c-re_exchange","()","<p>Exchange real and effective user IDs and return the new effective user ID.\nNot available on all platforms. …\n"],["re_exchangeable?","Process::GID","classes/Process/GID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective group IDs of a process\nmay be exchanged on the current platform. …\n"],["re_exchangeable?","Process::UID","classes/Process/UID.html#method-c-re_exchangeable-3F","()","<p>Returns <code>true</code> if the real and effective user IDs of a process\nmay be exchanged on the current platform. …\n"],["reachable_objects_from","ObjectSpace","classes/ObjectSpace.html#method-c-reachable_objects_from","(p1)","<p>MRI specific feature &mdash; Return all reachable objects from `obj&#39;.\n\n<p>This method returns all reachable objects …\n"],["reachable_objects_from_root","ObjectSpace","classes/ObjectSpace.html#method-c-reachable_objects_from_root","()","<p>MRI specific feature &mdash; Return all reachable objects from root.\n\n"],["read","ARGF","classes/ARGF.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from ARGF. The files named on the command line\nare concatenated and treated as a single …\n"],["read","CSV","classes/CSV.html#method-c-read","(path, *options)","<p>Use to slurp a CSV file into an Array of Arrays.  Pass the\n<code>path</code> to the file and any <code>options</code> CSV::new() …\n"],["read","CSV","classes/CSV.html#method-i-read","()","<p>Slurps the remaining rows and returns an Array of Arrays.\n<p>The data source must be open for reading.\n"],["read","Dir","classes/Dir.html#method-i-read","()","<p>Reads the next entry from <em>dir</em> and returns it as a string. Returns\n<code>nil</code> at the end of the stream.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...\n</code></pre>\n"],["read","IO","classes/IO.html#method-i-read","(p1 = v1, p2 = v2)","<p>Reads <em>length</em> bytes from the I/O stream.\n<p><em>length</em> must be a non-negative integer or <code>nil</code>.\n<p>If <em>length</em> is a positive …\n"],["read","IO","classes/IO.html#method-c-read","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Opens the file, optionally seeks to the given <code>offset</code>, then\nreturns <code>length</code> bytes (defaulting to the rest …\n"],["read","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-read","(size=nil, buf=nil)","<p>Reads <em>size</em> bytes from the stream.  If <em>buf</em> is provided it\nmust reference a string which will receive the …\n"],["read","OpenSSL::PKey","classes/OpenSSL/PKey.html#method-c-read","(p1, p2 = v2)","<p>Reads a DER or PEM encoded string from <em>string</em> or <em>io</em> and\nreturns an instance of the appropriate PKey class. …\n"],["read","OpenURI::OpenRead","classes/OpenURI/OpenRead.html#method-i-read","(options={})","<p>OpenURI::OpenRead#read() reads a content referenced by self and returns the\ncontent as string. The string …\n"],["read","Pathname","classes/Pathname.html#method-i-read","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all data from the file, or the first <code>N</code> bytes if\nspecified.\n<p>See File.read.\n"],["read","REXML::IOSource","classes/REXML/IOSource.html#method-i-read","()",""],["read","REXML::Source","classes/REXML/Source.html#method-i-read","()",""],["read","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-read","(tuple, sec=nil)","<p>Reads <code>tuple</code>, but does not remove it.\n"],["read","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-read","(tuple, sec=nil, &block)","<p>Reads <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#read.\n"],["read","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-read","(tuple)",""],["read","StringIO","classes/StringIO.html#method-i-read","(*args)","<p>See IO#read.\n"],["read","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-read","(p1 = v1)","<p>See Zlib::GzipReader documentation for a description.\n"],["read_all","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-read_all","(tuple)","<p>Returns all tuples matching <code>tuple</code>.  Does not remove the found\ntuples.\n"],["read_all","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-read_all","(tuple)","<p>Reads all tuples matching <code>tuple</code> from the proxied TupleSpace. \nSee TupleSpace#read_all.\n"],["read_binary","Gem","classes/Gem.html#method-c-read_binary","(path)","<p>Safely read a file in binary mode on all platforms.\n"],["read_body","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-read_body","(dest = nil, &block)","<p>Gets the entity body returned by the remote HTTP server.\n<p>If a block is given, the body is passed to the …\n"],["read_file","Bundler","classes/Bundler.html#method-c-read_file","(file)",""],["read_file","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-read_file","(filename, encoding, force_transcode = false)","<p>Reads the contents of <code>filename</code> and handles any encoding\ndirectives in the file.\n<p>The content will be converted …\n"],["read_nonblock","ARGF","classes/ARGF.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream in non-blocking\nmode.\n"],["read_nonblock","IO","classes/IO.html#method-i-read_nonblock","(len, buf = nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes from <em>ios</em> using the read(2)\nsystem call after O_NONBLOCK is set for the underlying …\n"],["read_nonblock","IO::generic_readable","classes/IO/generic_readable.html#method-i-read_nonblock","(p1, p2 = v2, p3 = {})","<p>Similar to #read, but raises <code>EOFError</code> at end of string unless\nthe +exception: false+ option is passed …\n"],["read_nonblock","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-read_nonblock","(maxlen, buf=nil, exception: true)","<p>Reads at most <em>maxlen</em> bytes in the non-blocking manner.\n<p>When no data can be read without blocking it raises …\n"],["read_smime","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-read_smime","(p1)",""],["read_timeout=","Net::FTP","classes/Net/FTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-read_timeout-3D","(sec)","<p>Setter for the read_timeout attribute.\n"],["read_timeout=","Net::POP3","classes/Net/POP3.html#method-i-read_timeout-3D","(sec)","<p>Set the read timeout.\n"],["read_timeout=","Net::SMTP","classes/Net/SMTP.html#method-i-read_timeout-3D","(sec)","<p>Set the number of seconds to wait until timing-out a read(2) call.\n"],["readable?","File","classes/File.html#method-c-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable?","File::Stat","classes/File/Stat.html#method-i-readable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the effective\nuser id of this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).readable? ...\n</code></pre>\n"],["readable?","FileTest","classes/FileTest.html#method-i-readable-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["readable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-readable-3F","()","<p>Returns <code>true</code> if the RETR command may be applied to the file.\n"],["readable?","Pathname","classes/Pathname.html#method-i-readable-3F","()","<p>See FileTest.readable?.\n"],["readable_after_eof?","IRB::InputMethod","classes/IRB/InputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::ReadlineInputMethod","classes/IRB/ReadlineInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_after_eof?","IRB::StdioInputMethod","classes/IRB/StdioInputMethod.html#method-i-readable_after_eof-3F","()","<p>Whether this input method is still readable when there is no more data to\nread.\n<p>See IO#eof for more information. …\n"],["readable_real?","File","classes/File.html#method-c-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readable_real?","File::Stat","classes/File/Stat.html#method-i-readable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is readable by the real user id\nof this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).readable_real? ...\n</code></pre>\n"],["readable_real?","FileTest","classes/FileTest.html#method-i-readable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is readable by the real user\nand group id of this process. See access(3). …\n"],["readable_real?","Pathname","classes/Pathname.html#method-i-readable_real-3F","()","<p>See FileTest.readable_real?.\n"],["readagain_bytes","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-readagain_bytes","()","<p>Returns the bytes to be read again when Encoding::InvalidByteSequenceError\noccurs.\n"],["readbyte","ARGF","classes/ARGF.html#method-i-readbyte","()","<p>Reads the next 8-bit byte from ARGF and returns it as an\n<code>Integer</code>. Raises an <code>EOFError</code> after the last byte …\n"],["readbyte","IO","classes/IO.html#method-i-readbyte","()","<p>Reads a byte as with <code>IO#getbyte</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readbyte","IO::generic_readable","classes/IO/generic_readable.html#method-i-readbyte","()","<p>See IO#readbyte.\n"],["readbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readbyte","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readchar","ARGF","classes/ARGF.html#method-i-readchar","()","<p>Reads the next character from <code>ARGF</code> and returns it as a\n<code>String</code>. Raises an <code>EOFError</code> after the last\ncharacter …\n"],["readchar","IO","classes/IO.html#method-i-readchar","()","<p>Reads a one-character string from <em>ios</em>. Raises an\n<code>EOFError</code> on end of file.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.readchar ...\n</code></pre>\n"],["readchar","IO::generic_readable","classes/IO/generic_readable.html#method-i-readchar","()","<p>See IO#readchar.\n"],["readchar","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readchar","()","<p>Reads a one-character string from the stream.  Raises an EOFError at end of\nfile.\n"],["readchar","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readchar","()","<p>See Zlib::GzipReader documentation for a description.\n"],["readline","ARGF","classes/ARGF.html#method-i-readline","(*args)","<p>Returns the next line from the current file in <code>ARGF</code>.\n<p>By default lines are assumed to be separated by  …\n"],["readline","Bundler::Thor::LineEditor","classes/Bundler/Thor/LineEditor.html#method-c-readline","(prompt, options = {})",""],["readline","Bundler::Thor::LineEditor::Basic","classes/Bundler/Thor/LineEditor/Basic.html#method-i-readline","()",""],["readline","Bundler::Thor::LineEditor::Readline","classes/Bundler/Thor/LineEditor/Readline.html#method-i-readline","()",""],["readline","CSV","classes/CSV.html#method-i-readline","()",""],["readline","IO","classes/IO.html#method-i-readline","(*args)","<p>Reads a line as with <code>IO#gets</code>, but raises an\n<code>EOFError</code> on end of file.\n"],["readline","IO::generic_readable","classes/IO/generic_readable.html#method-i-readline","(*args)","<p>See IO#readline.\n"],["readline","IRB::Locale","classes/IRB/Locale.html#method-i-readline","(*rs)",""],["readline","Kernel","classes/Kernel.html#method-i-readline","(*args)","<p>Equivalent to <code>Kernel::gets</code>, except <code>readline</code>\nraises <code>EOFError</code> at end of file.\n"],["readline","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readline","(eol=$/)","<p>Reads a line from the stream which is separated by <em>eol</em>.\n<p>Raises EOFError if at end of file.\n"],["readline","Readline","classes/Readline.html#method-c-readline","(p1 = v1, p2 = v2)","<p>Shows the <code>prompt</code> and reads the inputted line with line\nediting. The inputted line is added to the history …\n"],["readline","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readline","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlines","ARGF","classes/ARGF.html#method-i-readlines","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["readlines","CSV","classes/CSV.html#method-c-readlines","(*args)","<p>Alias for CSV::read().\n"],["readlines","CSV","classes/CSV.html#method-i-readlines","()",""],["readlines","IO","classes/IO.html#method-c-readlines","(p1, p2 = v2, p3 = v3, p4 = v4, p5 = {})","<p>Reads the entire file specified by <em>name</em> as individual lines, and\nreturns those lines in an array. Lines …\n"],["readlines","IO","classes/IO.html#method-i-readlines","(*args)","<p>Reads all of the lines in <em>ios</em>, and returns them in an array. Lines\nare separated by the optional <em>sep</em> …\n"],["readlines","Kernel","classes/Kernel.html#method-i-readlines","(*args)","<p>Returns an array containing the lines returned by calling\n<code>Kernel.gets(<em>sep</em>)</code> until the end of file.\n"],["readlines","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readlines","(eol=$/)","<p>Reads lines from the stream which are separated by <em>eol</em>.\n<p>See also #gets\n"],["readlines","Pathname","classes/Pathname.html#method-i-readlines","(p1 = v1, p2 = v2, p3 = v3)","<p>Returns all the lines from the file.\n<p>See File.readlines.\n"],["readlines","StringIO","classes/StringIO.html#method-i-readlines","(*args)","<p>See IO#readlines.\n"],["readlines","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readlines","(*args)","<p>See Zlib::GzipReader documentation for a description.\n"],["readlink","File","classes/File.html#method-c-readlink","(p1)","<p>Returns the name of the file referenced by the given link. Not available on\nall platforms.\n\n<pre><code>File.symlink(&quot;testfile&quot;, ...</code></pre>\n"],["readlink","Pathname","classes/Pathname.html#method-i-readlink","()","<p>Read symbolic link.\n<p>See File.readlink.\n"],["readpartial","ARGF","classes/ARGF.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the ARGF stream.\n<p>If the optional <em>outbuf</em> argument is present, it must reference …\n"],["readpartial","IO","classes/IO.html#method-i-readpartial","(*args)","<p>Reads at most <em>maxlen</em> bytes from the I/O stream. It blocks only if\n<em>ios</em> has no data immediately available. …\n"],["readpartial","IO::generic_readable","classes/IO/generic_readable.html#method-i-readpartial","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["readpartial","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-readpartial","(maxlen, buf=nil)","<p>Reads at most <em>maxlen</em> bytes from the stream.  If <em>buf</em> is\nprovided it must reference a string which will …\n"],["readpartial","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-readpartial","(size, buf = ''.b)","<p>for IO.copy_stream.  Note: we may return a larger string than\n<code>size</code> here; but IO.copy_stream does not …\n"],["readpartial","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-readpartial","(p1, p2 = v2)","<p>Reads at most <em>maxlen</em> bytes from the gziped stream but it blocks\nonly if <em>gzipreader</em> has no data immediately …\n"],["ready","Net::SMTP","classes/Net/SMTP.html#method-i-ready","(from_addr, *to_addrs)",""],["ready?","IO","classes/IO.html#method-i-ready-3F","()","<p>Returns true if input available without blocking, or false. Returns nil if\nno information available. …\n"],["ready_to_enqueue?","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-ready_to_enqueue-3F","()","<p>Only true when spec in neither installed nor already enqueued\n"],["real","Complex","classes/Complex.html#method-i-real","()","<p>Returns the real part.\n\n<pre><code>Complex(7).real      #=&gt; 7\nComplex(9, -4).real  #=&gt; 9\n</code></pre>\n"],["real","Numeric","classes/Numeric.html#method-i-real","()","<p>Returns self.\n"],["real?","Complex","classes/Complex.html#method-i-real-3F","()","<p>Returns false.\n"],["real?","Numeric","classes/Numeric.html#method-i-real-3F","()","<p>Returns <code>true</code> if <code>num</code> is a real number (i.e. not\nComplex).\n"],["realdirpath","File","classes/File.html#method-c-realdirpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem. The real pathname doesn&#39;t …\n"],["realdirpath","Pathname","classes/Pathname.html#method-i-realdirpath","(p1 = v1)","<p>Returns the real (absolute) pathname of <code>self</code> in the actual\nfilesystem.\n<p>Does not contain symlinks or useless …\n"],["realloc","Fiddle","classes/Fiddle.html#method-c-realloc","(p1, p2)","<p>Change the size of the memory allocated at the memory location\n<code>addr</code> to <code>size</code> bytes.  Returns the memory …\n"],["realpath","File","classes/File.html#method-c-realpath","(*args)","<p>Returns the real (absolute) pathname of <em>pathname</em> in the actual\nfilesystem not containing symlinks or …\n"],["realpath","Pathname","classes/Pathname.html#method-i-realpath","(p1 = v1)","<p>Returns the real (absolute) pathname for <code>self</code> in the actual\nfilesystem.\n<p>Does not contain symlinks or useless …\n"],["realtime","Benchmark","classes/Benchmark.html#method-c-realtime","()","<p>Returns the elapsed real time used to execute the given block.\n"],["reason","LocalJumpError","classes/LocalJumpError.html#method-i-reason","()","<p>The reason this block was terminated: :break, :redo, :retry, :next,\n:return, or :noreason.\n"],["reason","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-reason","()","<p>Returns error reason. Override this for I18N.\n"],["reason_phrase","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-reason_phrase","(code)","<p>Returns the description corresponding to the HTTP status <code>code</code>\n\n<pre><code>WEBrick::HTTPStatus.reason_phrase 404\n=&gt; ...</code></pre>\n"],["reason_phrase","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-reason_phrase","()","<p>Returns the HTTP status description\n"],["receive","REXML::Validation::RelaxNG","classes/REXML/Validation/RelaxNG.html#method-i-receive","(event)",""],["receiver","Binding","classes/Binding.html#method-i-receiver","()","<p>Returns the bound receiver of the binding object.\n"],["receiver","KeyError","classes/KeyError.html#method-i-receiver","()","<p>Return the receiver associated with this KeyError exception.\n"],["receiver","Method","classes/Method.html#method-i-receiver","()","<p>Returns the bound receiver of the method object.\n\n<pre><code>(1..3).method(:map).receiver # =&gt; 1..3\n</code></pre>\n"],["receiver","NameError","classes/NameError.html#method-i-receiver","()","<p>Return the receiver associated with this NameError exception.\n"],["recipients","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-recipients","()",""],["reconnect","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reconnect","()","<p>Forces reconnection of HTTP connections.\n"],["reconnect_ssl","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reconnect_ssl","()","<p>Forces reconnection of SSL connections.\n"],["record_entity_expansion","REXML::Document","classes/REXML/Document.html#method-i-record_entity_expansion","()",""],["record_location","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-record_location","(top_level)","<p>Records the RDoc::TopLevel (file) where this code object was defined\n"],["record_location","RDoc::Context","classes/RDoc/Context.html#method-i-record_location","(top_level)","<p>Record <code>top_level</code> as a file <code>self</code> is in.\n"],["recover","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-recover","(argv)","<p>Pushes back erred argument(s) to <code>argv</code>.\n"],["rect","Complex","classes/Complex.html#method-c-rect","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre><code>Complex.rectangular(1, 2)  #=&gt; (1+2i)\n</code></pre>\n"],["rect","Complex","classes/Complex.html#method-i-rect","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre><code>Complex(1, 2).rectangular  #=&gt; [1, 2]\n</code></pre>\n"],["rect","Numeric","classes/Numeric.html#method-i-rect","()","<p>Returns an array; [num, 0].\n"],["rectangular","Complex","classes/Complex.html#method-c-rectangular","(p1, p2 = v2)","<p>Returns a complex object which denotes the given rectangular form.\n\n<pre><code>Complex.rectangular(1, 2)  #=&gt; (1+2i)\n</code></pre>\n"],["rectangular","Complex","classes/Complex.html#method-i-rectangular","()","<p>Returns an array; [cmp.real, cmp.imag].\n\n<pre><code>Complex(1, 2).rectangular  #=&gt; [1, 2]\n</code></pre>\n"],["rectangular","Numeric","classes/Numeric.html#method-i-rectangular","()","<p>Returns an array; [num, 0].\n"],["recurse_proc","JSON","classes/JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["recursive_predecessors","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_predecessors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} where `self` is a\n\n<pre><code>{#descendent?}</code></pre>\n"],["recursive_successors","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-recursive_successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} where `self` is an\n\n<pre><code>{#ancestor?}</code></pre>\n"],["recv","BasicSocket","classes/BasicSocket.html#method-i-recv","(*args)","<p>Receives a message.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* …\n"],["recv_io","UNIXSocket","classes/UNIXSocket.html#method-i-recv_io","(p1 = v1, p2 = v2)","<p>Example\n\n<pre><code>UNIXServer.open(&quot;/tmp/sock&quot;) {|serv|\n  UNIXSocket.open(&quot;/tmp/sock&quot;) {|c|\n    s = serv.accept\n ...</code></pre>\n"],["recv_nonblock","BasicSocket","classes/BasicSocket.html#method-i-recv_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom","IPSocket","classes/IPSocket.html#method-i-recvfrom","(*args)","<p>Receives a message and return the message as a string and an address which\nthe message come from.\n<p><em>maxlen</em> …\n"],["recvfrom","Socket","classes/Socket.html#method-i-recvfrom","(*args)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code>.\n<em>flags</em> is zero or more of the <code>MSG_</code> options. The first\nelement …\n"],["recvfrom","UNIXSocket","classes/UNIXSocket.html#method-i-recvfrom","(*args)","<p>Receives a message via <em>unixsocket</em>.\n<p><em>maxlen</em> is the maximum number of bytes to receive.\n<p><em>flags</em> should be a …\n"],["recvfrom_nonblock","Socket","classes/Socket.html#method-i-recvfrom_nonblock","(len, flag = 0, str = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>socket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvfrom_nonblock","UDPSocket","classes/UDPSocket.html#method-i-recvfrom_nonblock","(len, flag = 0, outbuf = nil, exception: true)","<p>Receives up to <em>maxlen</em> bytes from <code>udpsocket</code> using\nrecvfrom(2) after O_NONBLOCK is set for the underlying …\n"],["recvmsg","BasicSocket","classes/BasicSocket.html#method-i-recvmsg","(dlen = nil, flags = 0, clen = nil, scm_rights: false)","<p>recvmsg receives a message using recvmsg(2) system call in blocking manner.\n<p><em>maxmesglen</em> is the maximum …\n"],["recvmsg_nonblock","BasicSocket","classes/BasicSocket.html#method-i-recvmsg_nonblock","(dlen = nil, flags = 0, clen = nil, scm_rights: false, exception: true)","<p>recvmsg receives a message using recvmsg(2) system call in non-blocking\nmanner.\n<p>It is similar to BasicSocket#recvmsg …\n"],["redirect?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-redirect-3F","(code)","<p>Is <code>code</code> a redirection status?\n"],["redisplay","Readline","classes/Readline.html#method-c-redisplay","()","<p>Change what&#39;s displayed on the screen to reflect the current contents.\n<p>See GNU Readline&#39;s rl_redisplay …\n"],["reduce","Enumerable","classes/Enumerable.html#method-i-reduce","(p1 = v1, p2 = v2)","<p>Combines all elements of <em>enum</em> by applying a binary operation,\nspecified by a block or a symbol that names …\n"],["ref","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-ref","()","<p>Returns a new Fiddle::Pointer instance that is a reference pointer for this\npointer.\n<p>Analogous to the …\n"],["reference","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-reference","(label, link)","<p>Stores <code>label</code> as a reference to <code>link</code> and fills in\npreviously unknown\nlink references.\n"],["reformatted_help_args","Bundler::CLI","classes/Bundler/CLI.html#method-c-reformatted_help_args","(args)","<p>Reformat the arguments passed to bundle that include a –help flag into the\ncorresponding `bundle help …\n"],["refresh","Gem","classes/Gem.html#method-c-refresh","()","<p>Refresh available gems from disk.\n"],["refresh_line","Readline","classes/Readline.html#method-c-refresh_line","()","<p>Clear the current input line.\n"],["regexp","MatchData","classes/MatchData.html#method-i-regexp","()","<p>Returns the regexp.\n\n<pre><code>m = /a.*b/.match(&quot;abc&quot;)\nm.regexp #=&gt; /a.*b/\n</code></pre>\n"],["regexp","OptionParser::Completion","classes/OptionParser/Completion.html#method-c-regexp","(key, icase)",""],["regexp","URI","classes/URI.html#method-c-regexp","(schemes = nil)","<p>Synopsis\n\n<pre><code>URI::regexp([match_schemes])\n</code></pre>\n<p>Args\n"],["regist","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-regist","(name, ro)",""],["regist_server","DRb","classes/DRb.html#method-c-regist_server","(server)","<p>Registers <code>server</code> with DRb.\n<p>This is called when a new DRb::DRbServer is created.\n<p>If there is no primary …\n"],["register","Bundler::Thor","classes/Bundler/Thor.html#method-c-register","(klass, subcommand_name, usage, description, options = {})","<p>Registers another Bundler::Thor subclass as a command.\n<p>Parameters\n<p>klass&lt;Class&gt; &mdash; Bundler::Thor subclass …\n"],["register","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-c-register","(p1, p2, p3)","<p>This adds a new ObjectId to the internal tables. Where <em>object_id</em>\nis the numerical form, <em>short_name</em> is …\n"],["register","WEBrick","classes/WEBrick.html#method-i-register","(thread, time, exception)","<p>Registers a new timeout handler\n<p><code>time</code> &mdash; Timeout in seconds\n<p><code>exception</code> &mdash; Exception to raise when timeout elapsed …\n"],["register","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-register","(seconds, exception)","<p>Registers a new timeout handler\n<p><code>time</code> &mdash; Timeout in seconds\n<p><code>exception</code> &mdash; Exception to raise when timeout elapsed …\n"],["register_default_spec","Gem","classes/Gem.html#method-c-register_default_spec","(spec)","<p>Register a Gem::Specification for default gem.\n<p>Two formats for the specification are supported:\n<p>MRI 2.0 …\n"],["register_plugin","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-register_plugin","(name, spec, optional_plugin = false)","<p>Runs the plugins.rb file in an isolated namespace, records the plugin\nactions it registers for and then …\n"],["register_plugin","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-register_plugin","(name, path, load_paths, commands, sources, hooks)","<p>This function is to be called when a new plugin is installed. This function\nshall add the functions of …\n"],["register_uri","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-register_uri","(uri, name)","<p>register uri against this name.\n"],["registry=","URI::Generic","classes/URI/Generic.html#method-i-registry-3D","(v)",""],["rehash","ENV","classes/ENV.html#method-c-rehash","()","<p>Re-hashing the environment variables does nothing.  It is provided for\ncompatibility with Hash.\n"],["rehash","Hash","classes/Hash.html#method-i-rehash","()","<p>Rebuilds the hash based on the current hash values for each key. If values\nof key objects have changed …\n"],["rehash","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-rehash","()","<p>Clears the command hash table.\n"],["reject","Array","classes/Array.html#method-i-reject","()","<p>Returns a new array containing the items in <code>self</code> for which the\ngiven block is not <code>true</code>. The ordering …\n"],["reject","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-reject","(&block)",""],["reject","DBM","classes/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject","ENV","classes/ENV.html#method-c-reject","()","<p>Same as ENV.delete_if, but works on (and returns) a copy of the\nenvironment.\n"],["reject","Enumerable","classes/Enumerable.html#method-i-reject","()","<p>Returns an array for all elements of <code>enum</code> for which the given\n<code>block</code> returns <code>false</code>.\n<p>If no block is given, …\n"],["reject","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-reject","()",""],["reject","GDBM","classes/GDBM.html#method-i-reject","()","<p>Returns a hash copy of <em>gdbm</em> where all key-value pairs from\n<em>gdbm</em> for which <em>block</em> evaluates to true are …\n"],["reject","Hash","classes/Hash.html#method-i-reject","()","<p>Returns a new hash consisting of entries for which the block returns false.\n<p>If no block is given, an enumerator …\n"],["reject","OptionParser","classes/OptionParser.html#method-c-reject","(*args, &blk)","<p>See #reject.\n"],["reject","OptionParser","classes/OptionParser.html#method-i-reject","(*args, &blk)","<p>Directs to reject specified class argument.\n<p><code>t</code> &mdash; Argument class specifier, any object including Class.\n\n\n<pre><code>reject(t)\n</code></pre>\n"],["reject","OptionParser::List","classes/OptionParser/List.html#method-i-reject","(t)","<p>See OptionParser.reject.\n"],["reject","SDBM","classes/SDBM.html#method-i-reject","()","<p>Creates a new Hash using the key-value pairs from the database, then calls\nHash#reject with the given …\n"],["reject","YAML::DBM","classes/YAML/DBM.html#method-i-reject","()","<p>Converts the contents of the database to an in-memory Hash, then calls\nHash#reject with the specified …\n"],["reject!","Array","classes/Array.html#method-i-reject-21","()","<p>Deletes every element of <code>self</code> for which the block evaluates to\n<code>true</code>, if no changes were made returns …\n"],["reject!","DBM","classes/DBM.html#method-i-reject-21","()","<p>Deletes all entries for which the code block returns true. Returns self.\n"],["reject!","ENV","classes/ENV.html#method-c-reject-21","()","<p>Equivalent to ENV.delete_if but returns <code>nil</code> if no changes were\nmade.\n<p>Returns an Enumerator if no block …\n"],["reject!","GDBM","classes/GDBM.html#method-i-reject-21","()","<p>Deletes every key-value pair from <em>gdbm</em> for which <em>block</em>\nevaluates to true.\n"],["reject!","Hash","classes/Hash.html#method-i-reject-21","()","<p>Equivalent to <code>Hash#delete_if</code>, but returns <code>nil</code> if\nno changes were made.\n"],["reject!","SDBM","classes/SDBM.html#method-i-reject-21","()","<p>Iterates over the key-value pairs in the database, deleting those for which\nthe block returns <code>true</code>.\n"],["reject!","Set","classes/Set.html#method-i-reject-21","(&block)","<p>Equivalent to Set#delete_if, but returns nil if no changes were made.\nReturns an enumerator if no block …\n"],["relative?","Pathname","classes/Pathname.html#method-i-relative-3F","()","<p>The opposite of Pathname#absolute?\n<p>It returns <code>false</code> if the pathname begins with a slash.\n\n<pre><code>p = Pathname.new(&#39;/im/sure&#39;) ...\n</code></pre>\n"],["relative?","URI::Generic","classes/URI/Generic.html#method-i-relative-3F","()","<p>Returns true if URI does not have a scheme (e.g. http:// or https://)\nspecified.\n"],["relative_path_from","Pathname","classes/Pathname.html#method-i-relative_path_from","(base_directory)","<p>Returns a relative path from the given <code>base_directory</code> to the\nreceiver.\n<p>If <code>self</code> is absolute, then <code>base_directory</code> …\n"],["relative_to_original_destination_root","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-relative_to_original_destination_root","(path, remove_dot = true)","<p>Returns the given path relative to the absolute root (ie, root where the\nscript started).\n"],["release","OptionParser","classes/OptionParser.html#method-i-release","()","<p>Release code\n"],["release?","Bundler::BuildMetadata","classes/Bundler/BuildMetadata.html#method-c-release-3F","()","<p>Whether this is an official release build of Bundler.\n"],["relevant_sources_for_vertex","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-relevant_sources_for_vertex","(vertex)",""],["reload","DRb::DRbUnknown","classes/DRb/DRbUnknown.html#method-i-reload","()","<p>Attempt to load the wrapped marshalled object again.\n<p>If the class of the object is now known locally, …\n"],["reload","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-reload","()","<p>Reloads passwords from the database\n"],["reload","WEBrick::HTTPAuth::Htgroup","classes/WEBrick/HTTPAuth/Htgroup.html#method-i-reload","()","<p>Reload groups from the database\n"],["reload","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-reload","()","<p>Reload passwords from the database\n"],["remainder","BigDecimal","classes/BigDecimal.html#method-i-remainder","(p1)","<p>Returns the remainder from dividing by the value.\n<p>x.remainder(y) means x-y*(x/y).truncate\n"],["remainder","Integer","classes/Integer.html#method-i-remainder","(p1)","<p>Returns the remainder after dividing <code>int</code> by\n<code>numeric</code>.\n<p><code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n\n<pre><code>5.remainder(3) ...\n</code></pre>\n"],["remainder","Numeric","classes/Numeric.html#method-i-remainder","(p1)","<p><code>x.remainder(y)</code> means <code>x-y*(x/y).truncate</code>.\n<p>See Numeric#divmod.\n"],["remote!","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-remote-21","()","<p>Set internal representation to fetch the gems/specs from remote.\n<p>When this is called, the source should …\n"],["remote!","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-remote-21","()",""],["remote!","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-remote-21","()",""],["remote!","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-remote-21","()",""],["remote_address","BasicSocket","classes/BasicSocket.html#method-i-remote_address","()","<p>Returns an Addrinfo object for remote address obtained by getpeername.\n<p>Note that addrinfo.protocol is …\n"],["remote_ip","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-remote_ip","()","<p>The client&#39;s IP address\n"],["remote_uri","Bundler::Fetcher::Base","classes/Bundler/Fetcher/Base.html#method-i-remote_uri","()",""],["remove","Bundler::CLI","classes/Bundler/CLI.html#method-i-remove","(*gems)",""],["remove","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","Bundler::Injector","classes/Bundler/Injector.html#method-c-remove","(gems, options = {})",""],["remove","Bundler::Injector","classes/Bundler/Injector.html#method-i-remove","(gemfile_path, lockfile_path)","<p>@param [Pathname] gemfile_path The Gemfile from which to remove\ndependencies. @param [Pathname] lockfile_path …\n"],["remove","FileUtils","classes/FileUtils.html#method-c-remove","(list, force: nil, noop: nil, verbose: nil)",""],["remove","OptionParser","classes/OptionParser.html#method-i-remove","()","<p>Removes the last List.\n"],["remove","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-remove","()","<p>Removes generated RDoc and ri data\n"],["remove","REXML::Attribute","classes/REXML/Attribute.html#method-i-remove","()","<p>Removes this Attribute from the tree, and returns true if successful\n<p>This method is usually not called …\n"],["remove","REXML::Child","classes/REXML/Child.html#method-i-remove","()","<p>Removes this child from the parent.\n<p>Returns &mdash; self\n\n"],["remove_argument","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-remove_argument","(*names)","<p>Removes a previous defined argument. If :undefine is given, undefine\naccessors as well.\n<p>Parameters\n<p>names&lt;Array&gt; … &mdash; "],["remove_class_option","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-remove_class_option","(*names)","<p>Removes a previous defined class option.\n<p>Parameters\n<p>names&lt;Array&gt; &mdash; Class options to be removed\n"],["remove_class_variable","Module","classes/Module.html#method-i-remove_class_variable","(p1)","<p>Removes the definition of the <em>sym</em>, returning that constant&#39;s\nvalue.\n\n<pre><code>class Dummy\n  @@var = 99\n  puts ...</code></pre>\n"],["remove_command","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-remove_command","(*names)","<p>Removes a given command from this Bundler::Thor class. This is usually done\nif you are inheriting from …\n"],["remove_dir","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Removes a directory <code>dir</code> and its contents recursively. This\nmethod ignores StandardError if <code>force</code> is true. …\n"],["remove_dir","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-remove_dir","(path, config = {})",""],["remove_dir","FileUtils","classes/FileUtils.html#method-c-remove_dir","(path, force = false)","<p>Removes a directory <code>dir</code> and its contents recursively. This\nmethod ignores StandardError if <code>force</code> is true. …\n"],["remove_entry","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-remove_entry","(path, force = false)","<p>This method removes a file system entry <code>path</code>.\n<code>path</code> might be a regular file, a directory, or something. …\n"],["remove_entry","FileUtils","classes/FileUtils.html#method-c-remove_entry","(path, force = false)","<p>This method removes a file system entry <code>path</code>.\n<code>path</code> might be a regular file, a directory, or something. …\n"],["remove_entry_secure","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>This method removes a file system entry <code>path</code>. \n<code>path</code> shall be a regular file, a directory, or something. …\n"],["remove_entry_secure","FileUtils","classes/FileUtils.html#method-c-remove_entry_secure","(path, force = false)","<p>This method removes a file system entry <code>path</code>. \n<code>path</code> shall be a regular file, a directory, or something. …\n"],["remove_file","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes a file <code>path</code>. This method ignores StandardError if\n<code>force</code> is true.\n"],["remove_file","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-remove_file","(path, config = {})","<p>Removes a file at the given location.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed\n"],["remove_file","FileUtils","classes/FileUtils.html#method-c-remove_file","(path, force = false)","<p>Removes a file <code>path</code>. This method ignores StandardError if\n<code>force</code> is true.\n"],["remove_from_documentation?","RDoc::Context","classes/RDoc/Context.html#method-i-remove_from_documentation-3F","()","<p>Should we remove this context from the documentation?\n<p>The answer is yes if:\n<p>#received_nodoc is <code>true</code>\n"],["remove_frozen_string_literal","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-remove_frozen_string_literal","(string)",""],["remove_handler","WEBrick::HTTPServlet::FileHandler","classes/WEBrick/HTTPServlet/FileHandler.html#method-c-remove_handler","(suffix)","<p>Remove custom handling of requests for files with <code>suffix</code>\n"],["remove_instance_variable","Object","classes/Object.html#method-i-remove_instance_variable","(p1)","<p>Removes the named instance variable from <em>obj</em>, returning that\nvariable&#39;s value. String arguments are …\n"],["remove_invisible","RDoc::Context","classes/RDoc/Context.html#method-i-remove_invisible","(min_visibility)","<p>Removes methods and attributes with a visibility less than\n<code>min_visibility</code>.\n"],["remove_invocation","Bundler::Thor::Group","classes/Bundler/Thor/Group.html#method-c-remove_invocation","(*names)","<p>Remove a previously added invocation.\n<p>Examples\n\n<pre><code>remove_invocation :test_framework\n</code></pre>\n"],["remove_magic_comment","RDoc::Encoding","classes/RDoc/Encoding.html#method-c-remove_magic_comment","(string)","<p>Removes magic comments and shebang\n"],["remove_method","Module","classes/Module.html#method-i-remove_method","(*args)","<p>Removes the method identified by <em>symbol</em> from the current class.\nFor an example, see <code>Module.undef_method</code> …\n"],["remove_modeline","RDoc::Parser","classes/RDoc/Parser.html#method-c-remove_modeline","(content)","<p>Removes an emacs-style modeline from the first line of the document\n"],["remove_nodoc","RDoc::Store","classes/RDoc/Store.html#method-i-remove_nodoc","(all_hash)","<p>Removes from <code>all_hash</code> the contexts that are nodoc or have no\ncontent.\n<p>See RDoc::Context#remove_from_documentation? …\n"],["remove_nodoc_children","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-remove_nodoc_children","()","<p>Updates the child modules or classes of class/module <code>parent</code> by\ndeleting the ones that have been removed …\n"],["remove_platform","Bundler::Definition","classes/Bundler/Definition.html#method-i-remove_platform","(platform)",""],["remove_private","RDoc::Comment","classes/RDoc/Comment.html#method-i-remove_private","()","<p>Removes private sections from this comment.  Private sections are flush to\nthe comment marker and start …\n"],["remove_response_handler","Net::IMAP","classes/Net/IMAP.html#method-i-remove_response_handler","(handler)","<p>Removes the response handler.\n"],["remove_server","DRb","classes/DRb.html#method-c-remove_server","(server)","<p>Removes <code>server</code> from the list of registered servers.\n"],["remove_siginfo_handler","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_siginfo_handler","()","<p>Removes a siginfo handler and replaces the previous\n"],["remove_stress_to_class","GC","classes/GC.html#method-c-remove_stress_to_class","(*args)","<p>No longer raises NoMemoryError when allocating an instance of the given\nclasses.\n"],["remove_task","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-remove_task","(*names)",""],["remove_unparseable","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-remove_unparseable","(files)","<p>Removes file extensions known to be unparseable from <code>files</code> and\nTAGS files for emacs and vim.\n"],["remove_unresolved_default_spec","Gem","classes/Gem.html#method-c-remove_unresolved_default_spec","(spec)","<p>Remove needless Gem::Specification of default gem from unresolved default\ngem list\n"],["removed_specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-removed_specs","()",""],["renamable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-renamable-3F","()","<p>Returns <code>true</code> if the file or directory may be renamed by RNFR.\n"],["rename","File","classes/File.html#method-c-rename","(p1, p2)","<p>Renames the given file to the new name. Raises a\n<code>SystemCallError</code> if the file cannot be renamed.\n\n<pre><code>File.rename(&quot;afile&quot;, ...</code></pre>\n"],["rename","Net::FTP","classes/Net/FTP.html#method-i-rename","(fromname, toname)","<p>Renames a file on the server.\n"],["rename","Net::IMAP","classes/Net/IMAP.html#method-i-rename","(mailbox, newname)","<p>Sends a RENAME command to change the name of the <code>mailbox</code> to\n<code>newname</code>.\n<p>A Net::IMAP::NoResponseError is raised …\n"],["rename","Pathname","classes/Pathname.html#method-i-rename","(p1)","<p>Rename the file.\n<p>See File.rename.\n"],["renew","Rinda::SimpleRenewer","classes/Rinda/SimpleRenewer.html#method-i-renew","()","<p>Called by the TupleSpace to check if the object is still alive.\n"],["renew","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-renew","(sec_or_renewer)","<p>Reset the expiry time according to <code>sec_or_renewer</code>.\n<p><code>nil</code> &mdash; it is set to expire in the far future.\n<p><code>true</code> &mdash; it has …\n"],["reopen","IO","classes/IO.html#method-i-reopen","(p1, p2 = v2, p3 = {})","<p>Reassociates <em>ios</em> with the I/O stream given in <em>other_IO</em> or\nto a new stream opened on <em>path</em>. This may dynamically …\n"],["reopen","Logger","classes/Logger.html#method-i-reopen","(logdev = nil)","<p>Args\n<p><code>logdev</code> &mdash; The log device.  This is a filename (String) or IO object (typically\n<code>STDOUT</code>, <code>STDERR</code>, or an …\n\n"],["reopen","Logger::LogDevice","classes/Logger/LogDevice.html#method-i-reopen","(log = nil)",""],["reopen","StringIO","classes/StringIO.html#method-i-reopen","(*args)","<p>Reinitializes <strong>strio</strong> with the given <em>other_StrIO</em> or\n<em>string</em> and <em>mode</em> (see StringIO#new).\n"],["reopen","Syslog","classes/Syslog.html#method-c-reopen","(*args)","<p>Closes and then reopens the syslog.\n<p>Arguments are the same as for open().\n"],["reorganize","GDBM","classes/GDBM.html#method-i-reorganize","()","<p>Reorganizes the database file. This operation removes reserved space of\nelements that have already been …\n"],["repeated_combination","Array","classes/Array.html#method-i-repeated_combination","(p1)","<p>When invoked with a block, yields all repeated combinations of length\n<code>n</code> of elements from the array and …\n"],["repeated_permutation","Array","classes/Array.html#method-i-repeated_permutation","(p1)","<p>When invoked with a block, yield all repeated permutations of length\n<code>n</code> of the elements of the array, …\n"],["replace","Array","classes/Array.html#method-i-replace","(p1)","<p>Replaces the contents of <code>self</code> with the contents of\n<code>other_ary</code>, truncating or expanding if necessary.\n\n<pre><code>a ...\n</code></pre>\n"],["replace","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-replace","(other)","<p>When replacing with another hash, the initial order of our keys must come\nfrom the other hash -ordered …\n"],["replace","DBM","classes/DBM.html#method-i-replace","(p1)","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replace","ENV","classes/ENV.html#method-c-replace","(p1)","<p>Replaces the contents of the environment variables with the contents of\n<code>hash</code>.\n"],["replace","GDBM","classes/GDBM.html#method-i-replace","(p1)","<p>Replaces the content of <em>gdbm</em> with the key-value pairs of\n<em>other</em>. <em>other</em> must have an each_pair method. …\n"],["replace","Hash","classes/Hash.html#method-i-replace","(p1)","<p>Replaces the contents of <em>hsh</em> with the contents of\n<em>other_hash</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.replace({ ...</code></pre>\n"],["replace","SDBM","classes/SDBM.html#method-i-replace","(p1)","<p>Empties the database, then inserts the given key-value pairs.\n<p>This method will work with any object which …\n"],["replace","Set","classes/Set.html#method-i-replace","(enum)","<p>Replaces the contents of the set with the contents of the given enumerable\nobject and returns self.\n\n<pre><code>set ...\n</code></pre>\n"],["replace","String","classes/String.html#method-i-replace","(p1)","<p>Replaces the contents and taintedness of <em>str</em> with the\ncorresponding values in <em>other_str</em>.\n\n<pre><code>s = &quot;hello&quot;  ...\n</code></pre>\n"],["replace","YAML::DBM","classes/YAML/DBM.html#method-i-replace","( hsh )","<p>Replaces the contents of the database with the contents of the specified\nobject. Takes any object which …\n"],["replace_child","REXML::Parent","classes/REXML/Parent.html#method-i-replace_child","( to_replace, replacement )","<p>Replaces one child with another, making sure the nodelist is correct @param\nto_replace the child to replace …\n"],["replace_sources!","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-replace_sources-21","(replacement_sources)","<p>Returns true if there are changes\n"],["replace_with","REXML::Child","classes/REXML/Child.html#method-i-replace_with","( child )","<p>Replaces this object with another object.  Basically, calls\nParent.replace_child\n<p>Returns &mdash; self\n\n"],["replacement","Encoding::Converter","classes/Encoding/Converter.html#method-i-replacement","()","<p>Returns the replacement string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;euc-jp&quot;, &quot;us-ascii&quot;)\np ec.replacement   ...\n</code></pre>\n"],["replacement=","Encoding::Converter","classes/Encoding/Converter.html#method-i-replacement-3D","(p1)","<p>Sets the replacement string.\n\n<pre><code>ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;us-ascii&quot;, :undef =&gt; :replace)\nec.replacement ...\n</code></pre>\n"],["replicate","Encoding","classes/Encoding.html#method-i-replicate","(p1)","<p>Returns a replicated encoding of <em>enc</em> whose name is <em>name</em>.\nThe new encoding should have the same byte structure …\n"],["replies?","Bundler::Settings::TCPSocketProbe","classes/Bundler/Settings/TCPSocketProbe.html#method-i-replies-3F","(mirror)",""],["reply","Socket::UDPSource","classes/Socket/UDPSource.html#method-i-reply","(msg)","<p>Sends the String <code>msg</code> to the source\n"],["reply_service","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-reply_service","()","<p>Creates a thread that notifies waiting clients from the TupleSpace.\n"],["report","Bundler::Env","classes/Bundler/Env.html#method-c-report","(options = {})",""],["report","GC::Profiler","classes/GC/Profiler.html#method-c-report","(*args)","<p>Writes the GC::Profiler.result to <code>$stdout</code> or the given IO\nobject.\n"],["report","RDoc::Stats","classes/RDoc/Stats.html#method-i-report","()","<p>Returns a report on which items are not documented\n"],["report_attributes","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_attributes","(cm)","<p>Returns a report on undocumented attributes in ClassModule <code>cm</code>\n"],["report_class_module","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_class_module","(cm)","<p>Returns a report on undocumented items in ClassModule <code>cm</code>\n"],["report_constants","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_constants","(cm)","<p>Returns a report on undocumented constants in ClassModule <code>cm</code>\n"],["report_methods","RDoc::Stats","classes/RDoc/Stats.html#method-i-report_methods","(cm)","<p>Returns a report on undocumented methods in ClassModule <code>cm</code>\n"],["report_on_exception","Thread","classes/Thread.html#method-i-report_on_exception","()","<p>Returns the status of the thread-local “report on exception&#39;&#39;\ncondition for this <code>thr</code>.\n<p>The default …\n"],["report_on_exception","Thread","classes/Thread.html#method-c-report_on_exception","()","<p>Returns the status of the global “report on exception&#39;&#39; condition.\n<p>The default is <code>true</code> since …\n"],["report_on_exception=","Thread","classes/Thread.html#method-c-report_on_exception-3D","(p1)","<p>Returns the new state. When set to <code>true</code>, all threads created\nafterwards will inherit the condition and …\n"],["report_on_exception=","Thread","classes/Thread.html#method-i-report_on_exception-3D","(p1)","<p>When set to <code>true</code>, a message is printed on $stderr if an\nexception kills this <code>thr</code>.  See ::report_on_exception …\n"],["represent_map","Psych::Coder","classes/Psych/Coder.html#method-i-represent_map","(tag, map)","<p>Emit a sequence with <code>map</code> and <code>tag</code>\n"],["represent_object","Psych::Coder","classes/Psych/Coder.html#method-i-represent_object","(tag, obj)","<p>Emit an arbitrary object <code>obj</code> and <code>tag</code>\n"],["represent_scalar","Psych::Coder","classes/Psych/Coder.html#method-i-represent_scalar","(tag, value)","<p>Emit a scalar with <code>value</code> and <code>tag</code>\n"],["represent_seq","Psych::Coder","classes/Psych/Coder.html#method-i-represent_seq","(tag, list)","<p>Emit a sequence with <code>list</code> and <code>tag</code>\n"],["request","Bundler::Fetcher::Downloader","classes/Bundler/Fetcher/Downloader.html#method-i-request","(uri, headers)",""],["request","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-request","(uri, req = nil, &block)","<p>Makes a request on <code>uri</code>.  If <code>req</code> is nil a\nNet::HTTP::Get is performed against <code>uri</code>.\n<p>If a block is passed …\n"],["request","Net::HTTP","classes/Net/HTTP.html#method-i-request","(req, body = nil)","<p>Sends an HTTPRequest object <code>req</code> to the HTTP server.\n<p>If <code>req</code> is a Net::HTTP::Post or Net::HTTP::Put request …\n"],["request_body_permitted?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-request_body_permitted-3F","()",""],["request_get","Net::HTTP","classes/Net/HTTP.html#method-i-request_get","(path, initheader = nil)","<p>Sends a GET request to the <code>path</code>. Returns the response as a\nNet::HTTPResponse object.\n<p>When called with …\n"],["request_head","Net::HTTP","classes/Net/HTTP.html#method-i-request_head","(path, initheader = nil, &block)","<p>Sends a HEAD request to the <code>path</code> and returns the response as a\nNet::HTTPResponse object.\n<p>Returns the response. …\n"],["request_issue_report_for","Bundler::FriendlyErrors","classes/Bundler/FriendlyErrors.html#method-i-request_issue_report_for","(e)",""],["request_post","Net::HTTP","classes/Net/HTTP.html#method-i-request_post","(path, data, initheader = nil)","<p>Sends a POST request to the <code>path</code>.\n<p>Returns the response as a Net::HTTPResponse object.\n<p>When called with …\n"],["request_uri","URI::HTTP","classes/URI/HTTP.html#method-i-request_uri","()","<p>Description\n<p>Returns the full path for an HTTP request, as required by Net::HTTP::Get.\n<p>If the URI contains …\n"],["requested_specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-requested_specs","()",""],["requested_specs","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-i-requested_specs","()",""],["require","Bundler","classes/Bundler.html#method-c-require","(*groups)",""],["require","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-require","(*groups)",""],["require","IRB::Locale","classes/IRB/Locale.html#method-i-require","(file, priv = nil)",""],["require","Kernel","classes/Kernel.html#method-i-require","(p1)","<p>Loads the given <code>name</code>, returning <code>true</code> if\nsuccessful and <code>false</code> if the feature is already loaded.\n<p>If the …\n"],["require_path_or_force","Bundler::CLI::Clean","classes/Bundler/CLI/Clean.html#method-i-require_path_or_force","()",""],["require_paths","Bundler::EndpointSpecification","classes/Bundler/EndpointSpecification.html#method-i-require_paths","()","<p>needed for standalone, load required_paths from local gemspec after the gem\nis installed\n"],["require_relative","Kernel","classes/Kernel.html#method-i-require_relative","(p1)","<p>Ruby tries to load the library named <em>string</em> relative to the\nrequiring file&#39;s path.  If the file&#39;s …\n"],["require_thor_actions","Bundler","classes/Bundler.html#method-c-require_thor_actions","()",""],["required_options","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-required_options","()",""],["required_options","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-required_options","()",""],["required_prefix","RSS::Element","classes/RSS/Element.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-c-required_prefix","()",""],["required_prefix","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-required_prefix","()",""],["required_prefix","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-c-required_prefix","()",""],["required_prefix","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-c-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-required_prefix","()",""],["required_prefix","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-required_prefix","()",""],["required_uri","RSS::Atom::CommonModel","classes/RSS/Atom/CommonModel.html#method-c-required_uri","()","<p>Returns the Atom URI W3C Namespace\n"],["required_uri","RSS::Element","classes/RSS/Element.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesCategory","classes/RSS/ITunesChannelModel/ITunesCategory.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesImage","classes/RSS/ITunesChannelModel/ITunesImage.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesChannelModel::ITunesOwner","classes/RSS/ITunesChannelModel/ITunesOwner.html#method-c-required_uri","()",""],["required_uri","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-c-required_uri","()",""],["required_uri","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-c-required_uri","()",""],["required_uri","RSS::ImageItemModel::ImageItem","classes/RSS/ImageItemModel/ImageItem.html#method-c-required_uri","()",""],["required_uri","RSS::RDF","classes/RSS/RDF.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel","classes/RSS/RDF/Channel.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Image","classes/RSS/RDF/Channel/Image.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Items","classes/RSS/RDF/Channel/Items.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Channel::Textinput","classes/RSS/RDF/Channel/Textinput.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Image","classes/RSS/RDF/Image.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Item","classes/RSS/RDF/Item.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Li","classes/RSS/RDF/Li.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-c-required_uri","()",""],["required_uri","RSS::RDF::Textinput","classes/RSS/RDF/Textinput.html#method-c-required_uri","()",""],["required_uri","RSS::TaxonomyTopicModel::TaxonomyTopic","classes/RSS/TaxonomyTopicModel/TaxonomyTopic.html#method-c-required_uri","()",""],["required_uri","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-c-required_uri","()",""],["requirement","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-requirement","()",""],["requirement","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-requirement","()","<p>(see Bundler::Molinillo::ResolutionState#requirement)\n"],["requirement","Gem::Dependency","classes/Gem/Dependency.html#method-i-requirement","()",""],["requirement_satisfied_by?","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>(see Bundler::Molinillo::SpecificationProvider#requirement_satisfied_by?)\n"],["requirement_satisfied_by?","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)","<p>Determines whether the given `requirement` is satisfied by the given\n`spec`, in the context of the current …\n"],["requirement_satisfied_by?","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-requirement_satisfied_by-3F","(requirement, activated, spec)",""],["requirements","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-requirements","()","<p>(see Bundler::Molinillo::ResolutionState#requirements)\n"],["requirements","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-requirements","()","<p>@return [Array&lt;Object&gt;] all of the requirements that required\n\n<pre><code>this vertex\n</code></pre>\n"],["requires","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-i-requires","()",""],["requires_sudo?","Bundler","classes/Bundler.html#method-c-requires_sudo-3F","()",""],["rerdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["rerdoc_task_description","RDoc::Task","classes/RDoc/Task.html#method-i-rerdoc_task_description","()","<p>Task description for the rerdoc task or its renamed description\n"],["reset","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-reset","(connection)","<p>Finishes then restarts the Net::HTTP <code>connection</code>\n"],["reset","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-reset","(value = nil, name = nil)","<p>Generate a reset button Input element, as a String.\n<p>This resets the values on a form to their initial …\n"],["reset","Digest::Base","classes/Digest/Base.html#method-i-reset","()","<p>Reset the digest to its initial state and return <code>self</code>.\n"],["reset","Digest::Instance","classes/Digest/Instance.html#method-i-reset","()","<p>Resets the digest to the initial state and returns self.\n<p>This method is overridden by each implementation …\n"],["reset","Net::POP3","classes/Net/POP3.html#method-i-reset","()","<p>Resets the session.  This clears all “deleted” marks from messages.\n<p>This method raises a POPError …\n"],["reset","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-reset","()","<p>Fully resets the internal state of the Cipher. By using this, the same\nCipher instance may be used several …\n"],["reset","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-reset","()","<p>Resets the Digest in the sense that any Digest#update that has been\nperformed is abandoned and the Digest …\n"],["reset","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-reset","()","<p>Returns <em>hmac</em> as it was when it was first initialized, with all\nprocessed data cleared from it.\n<p>Example …\n"],["reset","REXML::Validation::Choice","classes/REXML/Validation/Choice.html#method-i-reset","()",""],["reset","REXML::Validation::Interleave","classes/REXML/Validation/Interleave.html#method-i-reset","()",""],["reset","REXML::Validation::OneOrMore","classes/REXML/Validation/OneOrMore.html#method-i-reset","()",""],["reset","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-reset","()",""],["reset","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-reset","()",""],["reset","Set","classes/Set.html#method-i-reset","()","<p>Resets the internal state after modification to existing elements and\nreturns self.\n<p>Elements will be reindexed …\n"],["reset","StringScanner","classes/StringScanner.html#method-i-reset","()","<p>Reset the scan pointer (index 0) and clear matching data.\n"],["reset","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-reset","()","<p>Resets and initializes the stream. All data in both input and output buffer\nare discarded.\n"],["reset!","Bundler","classes/Bundler.html#method-c-reset-21","()",""],["reset!","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-reset-21","()",""],["reset_paths!","Bundler","classes/Bundler.html#method-c-reset_paths-21","()",""],["reset_rubygems!","Bundler","classes/Bundler.html#method-c-reset_rubygems-21","()",""],["resolve","Bundler::Definition","classes/Bundler/Definition.html#method-i-resolve","()","<p>Resolve all the dependencies specified in Gemfile. It ensures that\ndependencies that have been already …\n"],["resolve","Bundler::Molinillo::Resolver","classes/Bundler/Molinillo/Resolver.html#method-i-resolve","(requested, base = DependencyGraph.new)","<p>Resolves the requested dependencies into a {DependencyGraph}, locking to\nthe base dependency graph (if …\n"],["resolve","Bundler::Molinillo::Resolver::Resolution","classes/Bundler/Molinillo/Resolver/Resolution.html#method-i-resolve","()","<p>Resolves the {#original_requested} dependencies into a full dependency\n\n<pre><code>graph\n</code></pre>\n<p>@raise [ResolverError] if …\n"],["resolve","Bundler::Resolver","classes/Bundler/Resolver.html#method-c-resolve","(requirements, index, source_requirements = {}, base = [], gem_version_promoter = GemVersionPromoter.new, additional_base_requirements = [], platforms = nil)","<p>Figures out the best possible configuration of gems that satisfies the list\nof passed dependencies and …\n"],["resolve","RDoc::CrossReference","classes/RDoc/CrossReference.html#method-i-resolve","(name, text)","<p>Returns a reference to <code>name</code>.\n<p>If the reference is found and <code>name</code> is not documented\n<code>text</code> will be returned. …\n"],["resolve_aliases","RDoc::Context","classes/RDoc/Context.html#method-i-resolve_aliases","(added)","<p>Tries to resolve unmatched aliases when a method or attribute has just been\nadded.\n"],["resolve_remotely!","Bundler::Definition","classes/Bundler/Definition.html#method-i-resolve_remotely-21","()",""],["resolve_with_cache!","Bundler::Definition","classes/Bundler/Definition.html#method-i-resolve_with_cache-21","()",""],["resources","RSS::RDF::Channel::Items","classes/RSS/RDF/Channel/Items.html#method-i-resources","()",""],["resources","RSS::TaxonomyTopicsModel::TaxonomyTopics","classes/RSS/TaxonomyTopicsModel/TaxonomyTopics.html#method-i-resources","()",""],["respond_to?","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-respond_to-3F","(*args)",""],["respond_to?","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-respond_to-3F","(method, include_all = false)",""],["respond_to?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","DRb::DRbObject","classes/DRb/DRbObject.html#method-i-respond_to-3F","(msg_id, priv=false)","<p>Routes respond_to? to the referenced remote object.\n"],["respond_to?","Object","classes/Object.html#method-i-respond_to-3F","(p1, p2 = v2)","<p>Returns <code>true</code> if <em>obj</em> responds to the given method. \nPrivate and protected methods are included in the …\n"],["respond_to_missing?","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-i-respond_to_missing-3F","(name, include_private = false)",""],["respond_to_missing?","Delegator","classes/Delegator.html#method-i-respond_to_missing-3F","(m, include_private)","<p>Checks for a method provided by this the delegate object by forwarding the\ncall through _<em>getobj</em>_.\n"],["respond_to_missing?","Object","classes/Object.html#method-i-respond_to_missing-3F","(p1, p2)","<p>DO NOT USE THIS DIRECTLY.\n<p>Hook method to return whether the <em>obj</em> can respond to <em>id</em>\nmethod or not.\n<p>When the …\n"],["response_body_permitted?","Net::HTTPGenericRequest","classes/Net/HTTPGenericRequest.html#method-i-response_body_permitted-3F","()",""],["responses","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-responses","()","<p>Returns an Array of SingleResponse for this BasicResponse.\n"],["rest","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-rest","()",""],["rest","StringScanner","classes/StringScanner.html#method-i-rest","()","<p>Returns the “rest” of the string (i.e. everything after the scan pointer).\nIf there is no more …\n"],["rest?","StringScanner","classes/StringScanner.html#method-i-rest-3F","()","<p>Returns true iff there is more data in the string.  See #eos?. This method\nis obsolete; use #eos? instead. …\n"],["rest_size","StringScanner","classes/StringScanner.html#method-i-rest_size","()","<p><code>s.rest_size</code> is equivalent to <code>s.rest.size</code>.\n"],["restore","Bundler::EnvironmentPreserver","classes/Bundler/EnvironmentPreserver.html#method-i-restore","()","<p>@return [Hash]\n"],["restore","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s FileStore file.\n<p>Returns the session state as a hash.\n"],["restore","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-restore","()","<p>Restore session state.\n<p>Returns session data as a hash.\n"],["restore","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-restore","()","<p>Restore (empty) session state.\n"],["restore","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-restore","()","<p>Restore session state from the session&#39;s PStore file.\n<p>Returns the session state as a hash.\n"],["restore","JSON","classes/JSON.html#method-c-restore","(source, proc = nil, options = {})",""],["restore","Marshal","classes/Marshal.html#method-c-restore","(*args)","<p>Returns the result of converting the serialized data in source into a Ruby\nobject (possibly with associated …\n"],["restsize","StringScanner","classes/StringScanner.html#method-i-restsize","()","<p><code>s.restsize</code> is equivalent to <code>s.rest_size</code>. This\nmethod is obsolete; use #rest_size instead.\n"],["result","Coverage","classes/Coverage.html#method-c-result","(p1 = v1)","<p>Returns a hash that contains filename as key and coverage array as value.\nIf <code>clear</code> is true, it clears …\n"],["result","ERB","classes/ERB.html#method-i-result","(b=new_toplevel)","<p>Executes the generated ERB code to produce a completed template, returning\nthe results of that code. …\n"],["result","GC::Profiler","classes/GC/Profiler.html#method-c-result","()","<p>Returns a profile data report such as:\n\n<pre><code>GC 1 invokes.\nIndex    Invoke Time(sec)       Use Size(byte)   ...</code></pre>\n"],["result","StopIteration","classes/StopIteration.html#method-i-result","()","<p>Returns the return value of the iterator.\n\n<pre><code>o = Object.new\ndef o.each\n  yield 1\n  yield 2\n  yield 3\n  100 ...</code></pre>\n"],["result_with_hash","ERB","classes/ERB.html#method-i-result_with_hash","(hash)","<p>Render a template on a new toplevel binding with local variables specified\nby a Hash object.\n"],["resume","DEBUGGER__","classes/DEBUGGER__.html#method-c-resume","()",""],["resume","Fiber","classes/Fiber.html#method-i-resume","(*args)","<p>Resumes the fiber from the point at which the last <code>Fiber.yield</code>\nwas called, or starts running it if it …\n"],["retrbinary","Net::FTP","classes/Net/FTP.html#method-i-retrbinary","(cmd, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given command, and\nfetches the data returned, …\n"],["retrlines","Net::FTP","classes/Net/FTP.html#method-i-retrlines","(cmd)","<p>Puts the connection into ASCII (text) mode, issues the given command, and\npasses the resulting data, …\n"],["return_headers?","CSV","classes/CSV.html#method-i-return_headers-3F","()","<p>Returns <code>true</code> if headers will be returned as a row of results.\nSee CSV::new for details.\n"],["return_headers?","CSV::Parser","classes/CSV/Parser.html#method-i-return_headers-3F","()",""],["return_type","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_type","()","<p>Returns string of return value type of method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["return_type_detail","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_type_detail","()","<p>Returns detail information of return value type of method. The information\nis array.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["return_value","TracePoint","classes/TracePoint.html#method-i-return_value","()","<p>Return value from <code>:return</code>, <code>c_return</code>, and\n<code>b_return</code> event\n"],["return_vtype","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-return_vtype","()","<p>Returns number of return value type of method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["retval?","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-retval-3F","()","<p>Returns true if argument is return value.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;DirectX 7 for Visual Basic Type Library&#39;, ...</code></pre>\n"],["reverse","Array","classes/Array.html#method-i-reverse","()","<p>Returns a new array containing <code>self</code>&#39;s elements in reverse\norder.\n\n<pre><code>[ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ].reverse   #=&gt; [&quot;c&quot;, ...\n</code></pre>\n"],["reverse","IPAddr","classes/IPAddr.html#method-i-reverse","()","<p>Returns a string for DNS reverse lookup.  It returns a string in RFC3172\nform for an IPv6 address.\n"],["reverse","String","classes/String.html#method-i-reverse","()","<p>Returns a new string with the characters from <em>str</em> in reverse\norder.\n\n<pre><code>&quot;stressed&quot;.reverse   #=&gt; &quot;desserts&quot;\n</code></pre>\n"],["reverse!","Array","classes/Array.html#method-i-reverse-21","()","<p>Reverses <code>self</code> in place.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse!       #=&gt; [&quot;c&quot;, &quot;b&quot;, &quot;a&quot;]\na                #=&gt; ...\n</code></pre>\n"],["reverse!","String","classes/String.html#method-i-reverse-21","()","<p>Reverses <em>str</em> in place.\n"],["reverse_each","Array","classes/Array.html#method-i-reverse_each","()","<p>Same as Array#each, but traverses <code>self</code> in reverse order.\n\n<pre><code>a = [ &quot;a&quot;, &quot;b&quot;, &quot;c&quot; ]\na.reverse_each {|x| print ...</code></pre>\n"],["reverse_each","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-reverse_each","()","<p>@!visibility private Enumerates each action in the log in reverse order\n@yield [Action]\n"],["reverse_each","Enumerable","classes/Enumerable.html#method-i-reverse_each","(*args)","<p>Builds a temporary array and traverses that array in reverse order.\n<p>If no block is given, an enumerator …\n"],["reversed_requirement_tree_index","Bundler::Molinillo::Resolver::Resolution::UnwindDetails","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-reversed_requirement_tree_index","()","<p>@return [Integer] index of state requirement in reversed requirement tree\n\n<pre><code>(the conflicting requirement ...</code></pre>\n"],["revision","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-revision","()",""],["revision","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-revision","()",""],["revocation_reason","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-revocation_reason","()",""],["revocation_time","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-revocation_time","()",""],["revoked","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-revoked","()",""],["revoked=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-revoked-3D","(p1)",""],["rewind","ARGF","classes/ARGF.html#method-i-rewind","()","<p>Positions the current file to the beginning of input, resetting\n<code>ARGF.lineno</code> to zero.\n\n<pre><code>ARGF.readline   #=&gt; ...\n</code></pre>\n"],["rewind","CSV","classes/CSV.html#method-i-rewind","()","<p>Rewinds the underlying IO object and resets CSV&#39;s lineno() counter.\n"],["rewind","CSV::Writer","classes/CSV/Writer.html#method-i-rewind","()",""],["rewind","Dir","classes/Dir.html#method-i-rewind","()","<p>Repositions <em>dir</em> to the first entry.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.read     #=&gt; &quot;.&quot;\nd.rewind   #=&gt; #&lt;Dir:0x401b3fb0&gt; ...\n</code></pre>\n"],["rewind","Enumerator","classes/Enumerator.html#method-i-rewind","()","<p>Rewinds the enumeration sequence to the beginning.\n<p>If the enclosed object responds to a “rewind” …\n"],["rewind","Enumerator::Chain","classes/Enumerator/Chain.html#method-i-rewind","()","<p>Rewinds the enumerator chain by calling the “rewind” method on each\nenumerable in reverse order. …\n"],["rewind","IO","classes/IO.html#method-i-rewind","()","<p>Positions <em>ios</em> to the beginning of input, resetting\n<code>lineno</code> to zero.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.readline ...\n</code></pre>\n"],["rewind","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-rewind","()",""],["rewind","Prime::Generator23","classes/Prime/Generator23.html#method-i-rewind","()",""],["rewind","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-rewind","()","<p>Rewinds the internal position for enumeration.\n<p>See <code>Enumerator</code>#rewind.\n"],["rewind","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-rewind","()",""],["rewind","REXML::Parsers::LightParser","classes/REXML/Parsers/LightParser.html#method-i-rewind","()",""],["rewind","REXML::Parsers::UltraLightParser","classes/REXML/Parsers/UltraLightParser.html#method-i-rewind","()",""],["rewind","StringIO","classes/StringIO.html#method-i-rewind","()","<p>Positions <strong>strio</strong> to the beginning of input, resetting\n<code>lineno</code> to zero.\n"],["rewind","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-rewind","()","<p>Resets the position of the file pointer to the point created the GzipReader\nobject.  The associated  …\n"],["rewind_to","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-rewind_to","(tag)","<p>Rewinds the graph to the state tagged as `tag` @param  [Object] tag the tag\nto rewind to @return [Void] …\n"],["rewind_to","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-rewind_to","(graph, tag)","<p>@macro action\n"],["rfc1123_date","CGI::Util","classes/CGI/Util.html#method-i-rfc1123_date","(time)","<p>Format a <code>Time</code> object as a String using the format specified by\nRFC 1123.\n\n<pre><code>CGI::rfc1123_date(Time.now)\n ...</code></pre>\n"],["rfc2822","Date","classes/Date.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre><code>Date.rfc2822(&#39;Sat, ...</code></pre>\n"],["rfc2822","Date","classes/Date.html#method-i-rfc2822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc2822","DateTime","classes/DateTime.html#method-c-rfc2822","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre><code>DateTime.rfc2822(&#39;Sat, ...</code></pre>\n"],["rfc2822","Time","classes/Time.html#method-i-rfc2822","()","<p>Returns a string which represents the time as date-time defined by RFC\n2822:\n\n<pre><code>day-of-week, DD month-name ...</code></pre>\n"],["rfc2822","Time","classes/Time.html#method-c-rfc2822","(date)","<p>Parses <code>date</code> as date-time defined by RFC 2822 and converts it\nto a Time object.  The format is identical …\n"],["rfc3339","Date","classes/Date.html#method-i-rfc3339","()","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;).\n"],["rfc3339","Date","classes/Date.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 3339 formats.\n\n<pre><code>Date.rfc3339(&#39;2001-02-03T04:05:06+07:00&#39;) ...\n</code></pre>\n"],["rfc3339","DateTime","classes/DateTime.html#method-c-rfc3339","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 3339 formats.\n\n<pre><code>DateTime.rfc3339(&#39;2001-02-03T04:05:06+07:00&#39;) ...\n</code></pre>\n"],["rfc3339","DateTime","classes/DateTime.html#method-i-rfc3339","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;). The optional\nargument <code>n</code> is the number of digits …\n"],["rfc822","Date","classes/Date.html#method-i-rfc822","()","<p>This method is equivalent to strftime(&#39;%a, %-d %b %Y %T %z&#39;).\n"],["rfc822","Date","classes/Date.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre><code>Date.rfc2822(&#39;Sat, ...</code></pre>\n"],["rfc822","DateTime","classes/DateTime.html#method-c-rfc822","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical RFC 2822 formats.\n\n<pre><code>DateTime.rfc2822(&#39;Sat, ...</code></pre>\n"],["rfc822","Time","classes/Time.html#method-c-rfc822","(date)",""],["rfc822","Time","classes/Time.html#method-i-rfc822","()",""],["ri_installed?","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-ri_installed-3F","()","<p>Is ri data installed?\n"],["ri_paths","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-ri_paths","(&block)","<p>Enumerates the ri paths.  See RDoc::RI::Paths#each\n"],["rid","Process::GID","classes/Process/GID.html#method-c-rid","()","<p>Returns the (real) group ID for this process.\n\n<pre><code>Process.gid   #=&gt; 500\n</code></pre>\n"],["rid","Process::UID","classes/Process/UID.html#method-c-rid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["rindex","Array","classes/Array.html#method-i-rindex","(*args)","<p>Returns the <em>index</em> of the last object in <code>self</code>\n<code>==</code> to <code>obj</code>.\n<p>If a block is given instead of an argument, returns …\n"],["rindex","String","classes/String.html#method-i-rindex","(p1, p2 = v2)","<p>Returns the index of the last occurrence of the given <em>substring</em> or\npattern (<em>regexp</em>) in <em>str</em>. Returns  …\n"],["rjust","String","classes/String.html#method-i-rjust","(*args)","<p>If <em>integer</em> is greater than the length of <em>str</em>, returns a\nnew <code>String</code> of length <em>integer</em> with <em>str</em> right\njustified …\n"],["rm","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Remove file(s) specified in <code>list</code>.  This method cannot remove\ndirectories. All StandardErrors are ignored …\n"],["rm","FileUtils","classes/FileUtils.html#method-c-rm","(list, force: nil, noop: nil, verbose: nil)","<p>Remove file(s) specified in <code>list</code>.  This method cannot remove\ndirectories. All StandardErrors are ignored …\n"],["rm_f","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to\n\n<pre><code>Bundler::FileUtils.rm(list, :force =&gt; true)\n</code></pre>\n"],["rm_f","FileUtils","classes/FileUtils.html#method-c-rm_f","(list, noop: nil, verbose: nil)","<p>Equivalent to\n\n<pre><code>FileUtils.rm(list, :force =&gt; true)\n</code></pre>\n"],["rm_r","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>remove files <code>list[0]</code> <code>list[1]</code>… If\n<code>list[n]</code> is a directory, removes its all contents recursively.\nThis …\n"],["rm_r","FileUtils","classes/FileUtils.html#method-c-rm_r","(list, force: nil, noop: nil, verbose: nil, secure: nil)","<p>remove files <code>list[0]</code> <code>list[1]</code>… If\n<code>list[n]</code> is a directory, removes its all contents recursively.\nThis …\n"],["rm_rf","Bundler","classes/Bundler.html#method-c-rm_rf","(path)",""],["rm_rf","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to\n\n<pre><code>Bundler::FileUtils.rm_r(list, :force =&gt; true)\n</code></pre>\n<p>WARNING: This method causes local vulnerability. …\n"],["rm_rf","FileUtils","classes/FileUtils.html#method-c-rm_rf","(list, noop: nil, verbose: nil, secure: nil)","<p>Equivalent to\n\n<pre><code>FileUtils.rm_r(list, :force =&gt; true)\n</code></pre>\n<p>WARNING: This method causes local vulnerability. Read …\n"],["rmdir","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes one or more directories.\n\n<pre><code>Bundler::FileUtils.rmdir &#39;somedir&#39;\nBundler::FileUtils.rmdir %w(somedir ...</code></pre>\n"],["rmdir","Dir","classes/Dir.html#method-c-rmdir","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["rmdir","FileUtils","classes/FileUtils.html#method-c-rmdir","(list, parents: nil, noop: nil, verbose: nil)","<p>Removes one or more directories.\n\n<pre><code>FileUtils.rmdir &#39;somedir&#39;\nFileUtils.rmdir %w(somedir anydir otherdir) ...\n</code></pre>\n"],["rmdir","Net::FTP","classes/Net/FTP.html#method-i-rmdir","(dirname)","<p>Removes a remote directory.\n"],["rmdir","Pathname","classes/Pathname.html#method-i-rmdir","()","<p>Remove the referenced directory.\n<p>See Dir.rmdir.\n"],["rmdir","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-rmdir","(*path)","<p>Same as Dir.rmdir, except multiple directories are allowed.\n"],["rmtree","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","FileUtils","classes/FileUtils.html#method-c-rmtree","(list, noop: nil, verbose: nil, secure: nil)",""],["rmtree","Pathname","classes/Pathname.html#method-i-rmtree","()","<p>Recursively deletes a directory, including all directories beneath it.\n<p>See FileUtils.rm_r\n"],["root","Bundler","classes/Bundler.html#method-c-root","()",""],["root","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-root","()","<p>The directory root for all plugin related data\n<p>If run in an app, points to local root, in app_config_path …\n"],["root","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-root","()","<p>It is used to obtain the full_gem_path.\n<p>spec&#39;s loaded_from path is expanded against this to get full_gem_path …\n"],["root","Bundler::Plugin::Installer::Git","classes/Bundler/Plugin/Installer/Git.html#method-i-root","()",""],["root","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-root","()",""],["root","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-root","()",""],["root","Psych::Nodes::Document","classes/Psych/Nodes/Document.html#method-i-root","()","<p>Returns the root node.  A Document may only have one root node:\nyaml.org/spec/1.1/#id898031\n"],["root","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-root","(req, res)","<p>Generates the root page on <code>res</code>.  <code>req</code> is ignored.\n"],["root","REXML::Document","classes/REXML/Document.html#method-i-root","()","<p>@return the root Element of the document, or nil if this document has no\nchildren.\n"],["root","REXML::Element","classes/REXML/Element.html#method-i-root","()",""],["root","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-root","()",""],["root?","PStore","classes/PStore.html#method-i-root-3F","(name)","<p>Returns true if the supplied <em>name</em> is currently in the data store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["root?","Pathname","classes/Pathname.html#method-i-root-3F","()","<p>Predicate method for root directories.  Returns <code>true</code> if the\npathname consists of consecutive slashes. …\n"],["root_node","REXML::Element","classes/REXML/Element.html#method-i-root_node","()","<p>Evaluates to the root node of the document that this element belongs to. If\nthis element doesn&#39;t …\n"],["root_search","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-root_search","(req, res)","<p>Generates a search index for the root page on <code>res</code>. \n<code>req</code> is ignored.\n"],["root_vertex_named","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-root_vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the root vertex with the given\nname\n"],["roots","PStore","classes/PStore.html#method-i-roots","()","<p>Returns the names of all object hierarchies currently in the store.\n<p><strong>WARNING</strong>:  This method is only valid …\n"],["rotate","Array","classes/Array.html#method-i-rotate","(*args)","<p>Returns a new array by rotating <code>self</code> so that the element at\n<code>count</code> is the first element of the new array. …\n"],["rotate!","Array","classes/Array.html#method-i-rotate-21","(*args)","<p>Rotates <code>self</code> in place so that the element at\n<code>count</code> comes first, and returns <code>self</code>.\n<p>If <code>count</code> is negative …\n"],["round","BigDecimal","classes/BigDecimal.html#method-i-round","(p1 = v1, p2 = v2)","<p>Round to the nearest integer (by default), returning the result as a\nBigDecimal.\n\n<pre><code>BigDecimal(&#39;3.14159&#39;).round ...\n</code></pre>\n"],["round","Float","classes/Float.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>float</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Integer","classes/Integer.html#method-i-round","(p1 = v1, p2 = {})","<p>Returns <code>int</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Numeric","classes/Numeric.html#method-i-round","(*args)","<p>Returns <code>num</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>Numeric …\n"],["round","REXML::Functions","classes/REXML/Functions.html#method-c-round","( number )",""],["round","Rational","classes/Rational.html#method-i-round","(*args, p2 = {})","<p>Returns <code>rat</code> rounded to the nearest value with a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When …\n"],["round","Time","classes/Time.html#method-i-round","(*args)","<p>Rounds sub seconds to a given precision in decimal digits (0 digits by\ndefault). It returns a new Time …\n"],["route_from","URI::Generic","classes/URI/Generic.html#method-i-route_from","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["route_to","URI::Generic","classes/URI/Generic.html#method-i-route_to","(oth)","<p>Args\n<p><code>oth</code> &mdash; URI or String\n\n<p>Description\n"],["row_sep","CSV","classes/CSV.html#method-i-row_sep","()","<p>The encoded <code>:row_sep</code> used in parsing and writing.  See\nCSV::new for details.\n"],["row_separator","CSV::Parser","classes/CSV/Parser.html#method-i-row_separator","()",""],["row_vector","Matrix","classes/Matrix.html#method-c-row_vector","(row)","<p>Creates a single-row matrix where the values of that row are as given in\n<code>row</code>.\n\n<pre><code>Matrix.row_vector([4,5,6]) ...\n</code></pre>\n"],["rows","Matrix","classes/Matrix.html#method-c-rows","(rows, copy = true)","<p>Creates a matrix where <code>rows</code> is an array of arrays, each of\nwhich is a row of the matrix.  If the optional …\n"],["rpartition","String","classes/String.html#method-i-rpartition","(p1)","<p>Searches <em>sep</em> or pattern (<em>regexp</em>) in the string from the\nend of the string, and returns the part before …\n"],["rset","Net::SMTP","classes/Net/SMTP.html#method-i-rset","()","<p>Aborts the current mail transaction\n"],["rshift!","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-rshift-21","(p1)",""],["rss","RSS::BaseParser","classes/RSS/BaseParser.html#method-i-rss","()",""],["rstrip","String","classes/String.html#method-i-rstrip","()","<p>Returns a copy of the receiver with trailing whitespace removed. See also\nString#lstrip and String#strip …\n"],["rstrip!","String","classes/String.html#method-i-rstrip-21","()","<p>Removes trailing whitespace from the receiver. Returns the altered\nreceiver, or <code>nil</code> if no change was …\n"],["ruby","Bundler::RubyDsl","classes/Bundler/RubyDsl.html#method-i-ruby","(*ruby_version)",""],["ruby","Gem","classes/Gem.html#method-c-ruby","()","<p>The path to the running Ruby interpreter.\n"],["ruby?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-ruby-3F","()",""],["ruby_api_version","Gem","classes/Gem.html#method-c-ruby_api_version","()","<p>Returns a String containing the API compatibility version of Ruby\n"],["ruby_command","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-ruby_command","()","<p>Return the path to the ruby interpreter taking into account multiple\ninstallations and windows extensions. …\n"],["ruby_scope","Bundler","classes/Bundler.html#method-c-ruby_scope","()",""],["ruby_version","Gem","classes/Gem.html#method-c-ruby_version","()","<p>A Gem::Version for the currently running Ruby.\n"],["rubygem_push","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-rubygem_push","(path)",""],["rubygems_primary_remotes","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-rubygems_primary_remotes","()",""],["rubygems_remotes","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-rubygems_remotes","()",""],["rubygems_sources","Bundler::SourceList","classes/Bundler/SourceList.html#method-i-rubygems_sources","()",""],["rubygems_version","Gem","classes/Gem.html#method-c-rubygems_version","()","<p>A Gem::Version for the currently running RubyGems\n"],["run","Bundler::CLI::Add","classes/Bundler/CLI/Add.html#method-i-run","()",""],["run","Bundler::CLI::Binstubs","classes/Bundler/CLI/Binstubs.html#method-i-run","()",""],["run","Bundler::CLI::Cache","classes/Bundler/CLI/Cache.html#method-i-run","()",""],["run","Bundler::CLI::Check","classes/Bundler/CLI/Check.html#method-i-run","()",""],["run","Bundler::CLI::Clean","classes/Bundler/CLI/Clean.html#method-i-run","()",""],["run","Bundler::CLI::Config","classes/Bundler/CLI/Config.html#method-i-run","()",""],["run","Bundler::CLI::Console","classes/Bundler/CLI/Console.html#method-i-run","()",""],["run","Bundler::CLI::Doctor","classes/Bundler/CLI/Doctor.html#method-i-run","()",""],["run","Bundler::CLI::Exec","classes/Bundler/CLI/Exec.html#method-i-run","()",""],["run","Bundler::CLI::Gem","classes/Bundler/CLI/Gem.html#method-i-run","()",""],["run","Bundler::CLI::Info","classes/Bundler/CLI/Info.html#method-i-run","()",""],["run","Bundler::CLI::Init","classes/Bundler/CLI/Init.html#method-i-run","()",""],["run","Bundler::CLI::Inject","classes/Bundler/CLI/Inject.html#method-i-run","()",""],["run","Bundler::CLI::Install","classes/Bundler/CLI/Install.html#method-i-run","()",""],["run","Bundler::CLI::Issue","classes/Bundler/CLI/Issue.html#method-i-run","()",""],["run","Bundler::CLI::List","classes/Bundler/CLI/List.html#method-i-run","()",""],["run","Bundler::CLI::Lock","classes/Bundler/CLI/Lock.html#method-i-run","()",""],["run","Bundler::CLI::Open","classes/Bundler/CLI/Open.html#method-i-run","()",""],["run","Bundler::CLI::Outdated","classes/Bundler/CLI/Outdated.html#method-i-run","()",""],["run","Bundler::CLI::Package","classes/Bundler/CLI/Package.html#method-i-run","()",""],["run","Bundler::CLI::Platform","classes/Bundler/CLI/Platform.html#method-i-run","()",""],["run","Bundler::CLI::Pristine","classes/Bundler/CLI/Pristine.html#method-i-run","()",""],["run","Bundler::CLI::Remove","classes/Bundler/CLI/Remove.html#method-i-run","()",""],["run","Bundler::CLI::Show","classes/Bundler/CLI/Show.html#method-i-run","()",""],["run","Bundler::CLI::Update","classes/Bundler/CLI/Update.html#method-i-run","()",""],["run","Bundler::CLI::Viz","classes/Bundler/CLI/Viz.html#method-i-run","()",""],["run","Bundler::Graph::GraphVizClient","classes/Bundler/Graph/GraphVizClient.html#method-i-run","()",""],["run","Bundler::Installer","classes/Bundler/Installer.html#method-i-run","(options)","<p>Runs the install procedures for a specific Gemfile.\n<p>Firstly, this method will check to see if `Bundler.bundle_path` …\n"],["run","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-run","(command, config = {})","<p>Executes a command returning the contents of the command.\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the command …\n"],["run","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change\nthis implementation to create …\n"],["run","Bundler::Thor::Command","classes/Bundler/Thor/Command.html#method-i-run","(instance, args = [])","<p>By default, a command invokes a method in the thor class. You can change\nthis implementation to create …\n"],["run","Bundler::Thor::DynamicCommand","classes/Bundler/Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run","Bundler::Thor::DynamicCommand","classes/Bundler/Thor/DynamicCommand.html#method-i-run","(instance, args = [])",""],["run","ERB","classes/ERB.html#method-i-run","(b=new_toplevel)","<p>Generate results and print them. (see ERB#result)\n"],["run","IRB::Irb","classes/IRB/Irb.html#method-i-run","(conf = IRB.conf)",""],["run","Thread","classes/Thread.html#method-i-run","()","<p>Wakes up <code>thr</code>, making it eligible for scheduling.\n\n<pre><code>a = Thread.new { puts &quot;a&quot;; Thread.stop; puts &quot;c&quot; }\nsleep ...\n</code></pre>\n"],["run","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-run","(sock)","<p>You must subclass GenericServer and implement #run which accepts a TCP\nclient socket\n"],["run","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-run","(sock)","<p>Processes requests on <code>sock</code>\n"],["run_config","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-run_config","()","<p>include run file.\n"],["run_ruby_script","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-run_ruby_script","(command, config = {})","<p>Executes a ruby script (taking into account WIN32 platform quirks).\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the …\n"],["running?","Coverage","classes/Coverage.html#method-c-running-3F","()","<p>Returns true if coverage stats are currently being collected (after\nCoverage.start call, but before  …\n"],["safe_level","Thread","classes/Thread.html#method-i-safe_level","()","<p>Returns the safe level.\n<p>This method is obsolete because $SAFE is a process global state. Simply\ncheck …\n"],["safe_load","Psych","classes/Psych.html#method-c-safe_load","(yaml, legacy_permitted_classes = NOT_GIVEN, legacy_permitted_symbols = NOT_GIVEN, legacy_aliases = NOT_GIVEN, legacy_filename = NOT_GIVEN, permitted_classes: [], permitted_symbols: [], aliases: false, filename: nil, fallback: nil, symbolize_names: false)","<p>Safely load the yaml string in <code>yaml</code>.  By default, only the\nfollowing classes are allowed to be deserialized: …\n"],["safe_unlink","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["safe_unlink","FileUtils","classes/FileUtils.html#method-c-safe_unlink","(list, noop: nil, verbose: nil)",""],["sample","Array","classes/Array.html#method-i-sample","(*args)","<p>Choose a random element or <code>n</code> random elements from the array.\n<p>The elements are chosen by using random and …\n"],["sanitize_path","RDoc::Options","classes/RDoc/Options.html#method-i-sanitize_path","(path)","<p>Removes directories from <code>path</code> that are outside the current\ndirectory\n"],["satisfies?","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-satisfies-3F","(dependency)",""],["saturday?","Date","classes/Date.html#method-i-saturday-3F","()","<p>Returns true if the date is Saturday.\n"],["saturday?","Time","classes/Time.html#method-i-saturday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Saturday.\n\n<pre><code>t = Time.local(2006, 6, 10)      #=&gt; 2006-06-10 00:00:00 -0500 ...\n</code></pre>\n"],["save","RDoc::Store","classes/RDoc/Store.html#method-i-save","()","<p>Saves all entries in the store\n"],["save_cache","RDoc::Store","classes/RDoc/Store.html#method-i-save_cache","()","<p>Writes the cache file for this store\n"],["save_class","RDoc::Store","classes/RDoc/Store.html#method-i-save_class","(klass)","<p>Writes the ri data for <code>klass</code> (or module)\n"],["save_exception_mode","BigDecimal","classes/BigDecimal.html#method-c-save_exception_mode","()","<p>Execute the provided block, but preserve the exception mode\n\n<pre><code>BigDecimal.save_exception_mode do\n  BigDecimal.mode(BigDecimal::EXCEPTION_OVERFLOW, ...</code></pre>\n"],["save_history","IRB::Context","classes/IRB/Context.html#method-i-save_history","()","<p>A copy of the default <code>IRB.conf[:SAVE_HISTORY]</code>\n"],["save_history=","IRB::Context","classes/IRB/Context.html#method-i-save_history-3D","(val)","<p>Sets <code>IRB.conf[:SAVE_HISTORY]</code> to the given <code>val</code> and\ncalls #init_save_history with this context.\n<p>Will store …\n"],["save_limit","BigDecimal","classes/BigDecimal.html#method-c-save_limit","()","<p>Execute the provided block, but preserve the precision limit\n\n<pre><code>BigDecimal.limit(100)\nputs BigDecimal.limit ...\n</code></pre>\n"],["save_method","RDoc::Store","classes/RDoc/Store.html#method-i-save_method","(klass, method)","<p>Writes the ri data for <code>method</code> on <code>klass</code>\n"],["save_page","RDoc::Store","classes/RDoc/Store.html#method-i-save_page","(page)","<p>Writes the ri data for <code>page</code>\n"],["save_plugins","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-save_plugins","(plugins, specs, optional_plugins = [])","<p>Post installation processing and registering with index\n<p>@param [Array&lt;String&gt;] plugins list to be …\n"],["save_rounding_mode","BigDecimal","classes/BigDecimal.html#method-c-save_rounding_mode","()","<p>Execute the provided block, but preserve the rounding mode\n\n<pre><code>BigDecimal.save_rounding_mode do\n  BigDecimal.mode(BigDecimal::ROUND_MODE, ...</code></pre>\n"],["say","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-say","(message = \"\", color = nil, force_new_line = (message.to_s !~ /( |\\t)\\Z/))","<p>Say (print) something to the user. If the sentence ends with a whitespace\nor tab character, a new line …\n"],["say","Bundler::UI::RGProxy","classes/Bundler/UI/RGProxy.html#method-i-say","(message)",""],["say_status","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-say_status","(status, message, log_status = true)","<p>Say a status with the given color and appends the message. Since this\nmethod is used frequently by actions, …\n"],["scalar","Matrix","classes/Matrix.html#method-c-scalar","(n, value)","<p>Creates an <code>n</code> by <code>n</code> diagonal matrix where each\ndiagonal element is <code>value</code>.\n\n<pre><code>Matrix.scalar(2, 5)\n  =&gt; 5 0\n ...</code></pre>\n"],["scalar","Psych::Coder","classes/Psych/Coder.html#method-i-scalar","(*args)",""],["scalar","Psych::Emitter","classes/Psych/Emitter.html#method-i-scalar","(p1, p2, p3, p4, p5, p6)","<p>Emit a scalar with <code>value</code>, <code>anchor</code>,\n<code>tag</code>, and a <code>plain</code> or <code>quoted</code> string\ntype with <code>style</code>.\n<p>See Psych::Handler#scalar …\n"],["scalar","Psych::Handler","classes/Psych/Handler.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)","<p>Called when a scalar <code>value</code> is found.  The scalar may have an\n<code>anchor</code>, a <code>tag</code>, be implicitly <code>plain</code>\nor implicitly …\n"],["scalar","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-scalar","(value, anchor, tag, plain, quoted, style)",""],["scalar=","Psych::Coder","classes/Psych/Coder.html#method-i-scalar-3D","(value)","<p>Emit a scalar with <code>value</code>\n"],["scalar?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-scalar-3F","()",""],["scalar?","Psych::Nodes::Scalar","classes/Psych/Nodes/Scalar.html#method-i-scalar-3F","()",""],["scan","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-scan","(pattern)",""],["scan","OpenSSL::X509::Name::RFC2253DN","classes/OpenSSL/X509/Name/RFC2253DN.html#method-i-scan","(dn)",""],["scan","REXML::IOSource","classes/REXML/IOSource.html#method-i-scan","(pattern, cons=false)",""],["scan","REXML::Source","classes/REXML/Source.html#method-i-scan","(pattern, cons=false)","<p>Scans the source for a given pattern.  Note, that this is not your usual\nscan() method.  For one thing, …\n"],["scan","String","classes/String.html#method-i-scan","(p1)","<p>Both forms iterate through <em>str</em>, matching the pattern (which may be\na <code>Regexp</code> or a <code>String</code>). For each match, …\n"],["scan","StringScanner","classes/StringScanner.html#method-i-scan","(p1)","<p>Tries to match with <code>pattern</code> at the current position. If\nthere&#39;s a match, the scanner advances the …\n"],["scan_all","CSV::Parser::InputsScanner","classes/CSV/Parser/InputsScanner.html#method-i-scan_all","(pattern)",""],["scan_full","StringScanner","classes/StringScanner.html#method-i-scan_full","(p1, p2, p3)","<p>Tests whether the given <code>pattern</code> is matched from the current\nscan pointer. Advances the scan pointer if …\n"],["scan_until","StringScanner","classes/StringScanner.html#method-i-scan_until","(p1)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched. \nReturns the substring up to and including the end of …\n"],["scanf","IO","classes/IO.html#method-i-scanf","(str)","<p>Scans the current string until the match is exhausted, yielding each match\nas it is encountered in the …\n"],["scanf","Kernel","classes/Kernel.html#method-i-scanf","(format, &b)","<p>Scans STDIN for data matching <code>format</code>.  See IO#scanf for\ndetails.\n<p>See Scanf for details on creating a format …\n"],["scanf","String","classes/String.html#method-i-scanf","(fstr)","<p>Scans the current string. If a block is given, it functions exactly like\nblock_scanf.\n\n<pre><code>arr = &quot;123 456&quot;.scanf(&quot;%d%d&quot;) ...\n</code></pre>\n"],["scheme=","URI::Generic","classes/URI/Generic.html#method-i-scheme-3D","(v)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["scheme_list","URI","classes/URI.html#method-c-scheme_list","()","<p>Returns a Hash of the defined schemes.\n"],["scope","URI::LDAP","classes/URI/LDAP.html#method-i-scope","()","<p>Returns scope.\n"],["scope=","URI::LDAP","classes/URI/LDAP.html#method-i-scope-3D","(val)","<p>Setter for scope <code>val</code>.\n"],["scrolling_list","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-scrolling_list","(name = \"\", *values)",""],["scrub","String","classes/String.html#method-i-scrub","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["scrub!","String","classes/String.html#method-i-scrub-21","(*args)","<p>If the string is invalid byte sequence then replace invalid bytes with\ngiven replacement character, else …\n"],["scrypt","OpenSSL::KDF","classes/OpenSSL/KDF.html#method-c-scrypt","(p1, p2 = {})","<p>Derives a key from <em>pass</em> using given parameters with the scrypt\npassword-based key derivation function. …\n"],["search","Bundler::Index","classes/Bundler/Index.html#method-i-search","(query, base = nil)","<p>Search this index&#39;s specs, and any source indexes that this index knows\nabout, returning all of the …\n"],["search","IRB::JobManager","classes/IRB/JobManager.html#method-i-search","(key)","<p>Returns the associated job for the given <code>key</code>.\n<p>If given an Integer, it will return the <code>key</code> index for the …\n"],["search","Net::IMAP","classes/Net/IMAP.html#method-i-search","(keys, charset = nil)","<p>Sends a SEARCH command to search the mailbox for messages that match the\ngiven searching criteria, and …\n"],["search","OptionParser::List","classes/OptionParser/List.html#method-i-search","(id, key)","<p>Searches <code>key</code> in <code>id</code> list. The result is returned\nor yielded if a block is given. If it isn&#39;t found, …\n"],["search_all","Bundler::Index","classes/Bundler/Index.html#method-i-search_all","(name)",""],["search_const","OptionParser","classes/OptionParser.html#method-c-search_const","(klass, name)",""],["search_convpath","Encoding::Converter","classes/Encoding/Converter.html#method-c-search_convpath","(*args)","<p>Returns a conversion path.\n\n<pre><code>p Encoding::Converter.search_convpath(&quot;ISO-8859-1&quot;, &quot;EUC-JP&quot;)\n#=&gt; [[#&lt;Encoding:ISO-8859-1&gt;, ...\n</code></pre>\n"],["search_for","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-search_for","(dependency)","<p>(see Bundler::Molinillo::SpecificationProvider#search_for)\n"],["search_for","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-search_for","(dependency)","<p>Search for the specifications that match the given dependency. The\nspecifications in the returned array …\n"],["search_for","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-search_for","(dependency)",""],["search_full","StringScanner","classes/StringScanner.html#method-i-search_full","(p1, p2, p3)","<p>Scans the string <em>until</em> the <code>pattern</code> is matched.\nAdvances the scan pointer if <code>advance_pointer_p</code>, otherwise …\n"],["search_record","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_record","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-search_record","()","<p>Used by RDoc::Generator::JsonIndex to create a record for the search\nengine.\n"],["search_record","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-search_record","()","<p>Search record used by RDoc::Generator::JsonIndex\n"],["search_servlet","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-search_servlet","(path)","<p>Finds a servlet for <code>path</code>\n"],["sec","DateTime","classes/DateTime.html#method-i-sec","()","<p>Returns the second (0-59).\n\n<pre><code>DateTime.new(2001,2,3,4,5,6).sec          #=&gt; 6\n</code></pre>\n"],["sec","Time","classes/Time.html#method-i-sec","()","<p>Returns the second of the minute (0..60) for <em>time</em>.\n<p><strong>Note:</strong> Seconds range from zero to 60 to allow the system …\n"],["sec_fraction","DateTime","classes/DateTime.html#method-i-sec_fraction","()","<p>Returns the fractional part of the second.\n\n<pre><code>DateTime.new(2001,2,3,4,5,6.5).sec_fraction       #=&gt; (1/2)\n</code></pre>\n"],["second","DateTime","classes/DateTime.html#method-i-second","()","<p>Returns the second (0-59).\n\n<pre><code>DateTime.new(2001,2,3,4,5,6).sec          #=&gt; 6\n</code></pre>\n"],["second=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-second-3D","(second)",""],["second=","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-second-3D","(second)",""],["second_fraction","DateTime","classes/DateTime.html#method-i-second_fraction","()","<p>Returns the fractional part of the second.\n\n<pre><code>DateTime.new(2001,2,3,4,5,6.5).sec_fraction       #=&gt; (1/2)\n</code></pre>\n"],["section","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-section","()","<p>The section this CodeObject is in.  Sections allow grouping of constants,\nattributes and methods inside …\n"],["section_contents","RDoc::Context","classes/RDoc/Context.html#method-i-section_contents","()","<p>Returns RDoc::Context::Section objects referenced in this context for use\nin a table of contents.\n"],["sections","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-sections","()","<p>Get the names of all sections in the current configuration\n"],["sections","RDoc::Context","classes/RDoc/Context.html#method-i-sections","()","<p>Sections in this context\n"],["sections_in_lockfile","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#method-c-sections_in_lockfile","(lockfile_contents)",""],["sections_to_ignore","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#method-c-sections_to_ignore","(base_version = nil)",""],["secure=","CGI::Cookie","classes/CGI/Cookie.html#method-i-secure-3D","(val)","<p>Set whether the Cookie is a secure cookie or not.\n<p><code>val</code> must be a boolean.\n"],["security_level","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-security_level","()","<p>Returns the security level for the context.\n<p>See also OpenSSL::SSL::SSLContext#security_level=.\n"],["security_level=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-security_level-3D","(p1)","<p>Sets the security level for the context. OpenSSL limits parameters\naccording to the level. The “parameters” …\n"],["see","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-see","()","<p>A method/attribute to look at, in particular if this method/attribute has\nno documentation.\n<p>It can be …\n"],["seed","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-seed","()","<p>See the OpenSSL documentation for EC_GROUP_get0_seed()\n"],["seed","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-seed","(p1)","<p>::seed is equivalent to ::add where <em>entropy</em> is length of\n<em>str</em>.\n"],["seed","Random","classes/Random.html#method-i-seed","()","<p>Returns the seed value used to initialize the generator. This may be used\nto initialize another generator …\n"],["seed=","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-seed-3D","(p1)","<p>See the OpenSSL documentation for EC_GROUP_set_seed()\n"],["seek","ARGF","classes/ARGF.html#method-i-seek","(*args)","<p>Seeks to offset <em>amount</em> (an <code>Integer</code>) in the\n<code>ARGF</code> stream according to the value of <em>whence</em>. See\nIO#seek …\n"],["seek","Dir","classes/Dir.html#method-i-seek","(p1)","<p>Seeks to a particular location in <em>dir</em>. <em>integer</em> must be a\nvalue returned by <code>Dir#tell</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;) ...\n</code></pre>\n"],["seek","IO","classes/IO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>anInteger</em> in the stream according to the\nvalue of <em>whence</em>:\n\n<pre><code>:CUR or IO::SEEK_CUR ...\n</code></pre>\n"],["seek","StringIO","classes/StringIO.html#method-i-seek","(p1, p2 = v2)","<p>Seeks to a given offset <em>amount</em> in the stream according to the\nvalue of <em>whence</em> (see IO#seek).\n"],["select","Array","classes/Array.html#method-i-select","()","<p>Returns a new array containing all elements of <code>ary</code> for which\nthe given <code>block</code> returns a true value.\n<p>If …\n"],["select","DBM","classes/DBM.html#method-i-select","()","<p>Returns a new array consisting of the [key, value] pairs for which the code\nblock returns true.\n"],["select","ENV","classes/ENV.html#method-c-select","()","<p>Returns a copy of the environment for entries where the block returns true.\n<p>Returns an Enumerator if no …\n"],["select","Enumerable","classes/Enumerable.html#method-i-select","()","<p>Returns an array containing all elements of <code>enum</code> for which the\ngiven <code>block</code> returns a true value.\n<p>If no …\n"],["select","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-select","()",""],["select","GDBM","classes/GDBM.html#method-i-select","()","<p>Returns a new array of all key-value pairs of the database for which\n<em>block</em> evaluates to true.\n"],["select","Hash","classes/Hash.html#method-i-select","()","<p>Returns a new hash consisting of entries for which the block returns true.\n<p>If no block is given, an enumerator …\n"],["select","IO","classes/IO.html#method-c-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits until one or more of <code>IO</code> objects …\n"],["select","Kernel","classes/Kernel.html#method-i-select","(p1, p2 = v2, p3 = v3, p4 = v4)","<p>Calls select(2) system call. It monitors given arrays of <code>IO</code>\nobjects, waits until one or more of <code>IO</code> objects …\n"],["select","Net::IMAP","classes/Net/IMAP.html#method-i-select","(mailbox)","<p>Sends a SELECT command to select a <code>mailbox</code> so that messages in\nthe <code>mailbox</code> can be accessed.\n<p>After you …\n"],["select","SDBM","classes/SDBM.html#method-i-select","()","<p>Returns a new Array of key-value pairs for which the block returns\n<code>true</code>.\n<p>Example:\n\n<pre><code>require &#39;sdbm&#39;\n\nSDBM.open ...\n</code></pre>\n"],["select","Struct","classes/Struct.html#method-i-select","(*args)","<p>Yields each member value from the struct to the block and returns an Array\ncontaining the member values …\n"],["select","URI::Generic","classes/URI/Generic.html#method-i-select","(*components)","<p>Args\n<p><code>components</code> &mdash; Multiple Symbol arguments defined in URI::HTTP.\n\n<p>Description\n"],["select","YAML::DBM","classes/YAML/DBM.html#method-i-select","( *keys )","<p>If a block is provided, returns a new array containing [key, value] pairs\nfor which the block returns …\n"],["select!","Array","classes/Array.html#method-i-select-21","()","<p>Invokes the given block passing in successive elements from\n<code>self</code>, deleting elements for which the block …\n"],["select!","ENV","classes/ENV.html#method-c-select-21","()","<p>Equivalent to ENV.keep_if but returns <code>nil</code> if no changes were\nmade.\n<p>ENV.filter! is an alias for ENV.select! …\n"],["select!","Hash","classes/Hash.html#method-i-select-21","()","<p>Equivalent to Hash#keep_if, but returns <code>nil</code> if no changes were\nmade.\n<p>Hash#filter! is an alias for Hash#select! …\n"],["select!","Set","classes/Set.html#method-i-select-21","(&block)","<p>Equivalent to Set#keep_if, but returns nil if no changes were made. Returns\nan enumerator if no block …\n"],["select_best_platform_match","Bundler::GemHelpers","classes/Bundler/GemHelpers.html#method-c-select_best_platform_match","(specs, platform)",""],["select_spec","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-select_spec","(name, regex_match = nil)",""],["self","TracePoint","classes/TracePoint.html#method-i-self","()","<p>Return the trace object during event\n<p>Same as TracePoint#binding:\n\n<pre><code>trace.binding.eval(&#39;self&#39;)\n</code></pre>\n"],["send","BasicSocket","classes/BasicSocket.html#method-i-send","(p1, p2, p3 = v3)","<p>send <em>mesg</em> via <em>basicsocket</em>.\n<p><em>mesg</em> should be a string.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants. …\n"],["send","Object","classes/Object.html#method-i-send","(*args)","<p>Invokes the method identified by <em>symbol</em>, passing it any arguments\nspecified. You can use <code>__send__</code> if …\n"],["send","REXML::Functions","classes/REXML/Functions.html#method-c-send","(name, *args)",""],["send","UDPSocket","classes/UDPSocket.html#method-i-send","(p1, p2, p3, p4)","<p>Sends <em>mesg</em> via <em>udpsocket</em>.\n<p><em>flags</em> should be a bitwise OR of Socket::MSG_* constants.\n\n<pre><code>u1 = UDPSocket.new\nu1.bind(&quot;127.0.0.1&quot;, ...</code></pre>\n"],["send_io","UNIXSocket","classes/UNIXSocket.html#method-i-send_io","(p1)","<p>Sends <em>io</em> as file descriptor passing.\n\n<pre><code>s1, s2 = UNIXSocket.pair\n\ns1.send_io STDOUT\nstdout = s2.recv_io\n ...</code></pre>\n"],["send_mail","Net::SMTP","classes/Net/SMTP.html#method-i-send_mail","(msgstr, from_addr, *to_addrs)",""],["send_message","Net::SMTP","classes/Net/SMTP.html#method-i-send_message","(msgstr, from_addr, *to_addrs)","<p>Sends <code>msgstr</code> as a message.  Single CR (“r”) and LF (“n”) found\nin the <code>msgstr</code>, are …\n"],["send_request","Net::HTTP","classes/Net/HTTP.html#method-i-send_request","(name, path, data = nil, header = nil)","<p>Sends an HTTP request to the HTTP server. Also sends a DATA string if\n<code>data</code> is given.\n<p>Returns a Net::HTTPResponse …\n"],["sendcmd","Net::FTP","classes/Net/FTP.html#method-i-sendcmd","(cmd)","<p>Sends a command and returns the response.\n"],["sender","IRB::Frame","classes/IRB/Frame.html#method-c-sender","()","<p>Returns the binding context of the caller from the last frame initialized\n"],["sendmail","Net::SMTP","classes/Net/SMTP.html#method-i-sendmail","(msgstr, from_addr, *to_addrs)",""],["sendmsg","BasicSocket","classes/BasicSocket.html#method-i-sendmsg","(mesg, flags = 0, dest_sockaddr = nil, *controls)","<p>sendmsg sends a message using sendmsg(2) system call in blocking manner.\n<p><em>mesg</em> is a string to send.\n<p><em>flags</em> …\n"],["sendmsg_nonblock","BasicSocket","classes/BasicSocket.html#method-i-sendmsg_nonblock","(mesg, flags = 0, dest_sockaddr = nil, *controls, exception: true)","<p>sendmsg_nonblock sends a message using sendmsg(2) system call in\nnon-blocking manner.\n<p>It is similar to …\n"],["separator","OptionParser","classes/OptionParser.html#method-i-separator","(string)","<p>Add separator in summary.\n"],["seplist","PP::PPMethods","classes/PP/PPMethods.html#method-i-seplist","(list, sep=nil, iter_method=:each)","<p>Adds a separated list. The list is separated by comma with breakable space,\nby default.\n<p>#seplist iterates …\n"],["seq=","Psych::Coder","classes/Psych/Coder.html#method-i-seq-3D","(list)","<p>Emit a sequence of <code>list</code>\n"],["sequence?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-sequence-3F","()",""],["sequence?","Psych::Nodes::Sequence","classes/Psych/Nodes/Sequence.html#method-i-sequence-3F","()",""],["serial","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-serial","()","<p>Returns the serial number of the certificate for which status is being\nrequested.\n"],["serial","OpenSSL::PKCS7::RecipientInfo","classes/OpenSSL/PKCS7/RecipientInfo.html#method-i-serial","()",""],["serial","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-serial","()",""],["serial","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-serial","()",""],["serial","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-serial","()",""],["serial=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-serial-3D","(p1)",""],["serial=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-serial-3D","(p1)",""],["server_error?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-server_error-3F","(code)","<p>Is <code>code</code> a server error status?\n"],["server_name","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-server_name","()","<p>The server name this request is for\n"],["service","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-service","(name)",""],["service","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-service","(req, res)","<p>Services the request <code>req</code> which will fill in the response\n<code>res</code>.  See WEBrick::HTTPServlet::AbstractServlet#service …\n"],["service","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-service","(req, res)","<p>Services <code>req</code> and fills in <code>res</code>\n"],["service","WEBrick::HTTPServlet::AbstractServlet","classes/WEBrick/HTTPServlet/AbstractServlet.html#method-i-service","(req, res)","<p>Dispatches to a <code>do_</code> method based on <code>req</code> if such a\nmethod is available.  (<code>do_GET</code> for a GET request).  …\n"],["session","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-session","()","<p>Returns the SSLSession object currently used, or nil if the session is not\nestablished.\n"],["session=","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-session-3D","(p1)","<p>Sets the Session to be used when the connection is established.\n"],["session_add","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_add","(p1)","<p>Adds <em>session</em> to the session cache.\n"],["session_cache_mode","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode","()","<p>The current session cache mode.\n"],["session_cache_mode=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_mode-3D","(p1)","<p>Sets the SSL session cache mode.  Bitwise-or together the desired\nSESSION_CACHE_* constants to set.  …\n"],["session_cache_size","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_size","()","<p>Returns the current session cache size.  Zero is used to represent an\nunlimited cache size.\n"],["session_cache_size=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_size-3D","(p1)","<p>Sets the session cache size.  Returns the previously valid session cache\nsize.  Zero is used to represent …\n"],["session_cache_stats","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_cache_stats","()","<p>Returns a Hash containing the following keys:\n<p>:accept &mdash; Number of started SSL/TLS handshakes in server mode …\n"],["session_remove","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-session_remove","(p1)","<p>Removes <em>session</em> from the session cache.\n"],["session_reused?","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-session_reused-3F","()","<p>Returns <code>true</code> if a reused session was negotiated during the\nhandshake.\n"],["set","Bundler::Settings::Validator::Rule","classes/Bundler/Settings/Validator/Rule.html#method-i-set","(settings, key, value, *reasons)",""],["set","IPAddr","classes/IPAddr.html#method-i-set","(addr, *family)","<p>Set +@addr+, the internal stored ip address, to given <code>addr</code>.\nThe parameter <code>addr</code> is validated using the …\n"],["set_attributes","URI::LDAP","classes/URI/LDAP.html#method-i-set_attributes","(val)","<p>Private setter for attributes <code>val</code>.\n"],["set_backtrace","Exception","classes/Exception.html#method-i-set_backtrace","(p1)","<p>Sets the backtrace information associated with <code>exc</code>. The\n<code>backtrace</code> must be an array of String objects …\n"],["set_backtrace","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-set_backtrace","(array)",""],["set_bit!","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-set_bit-21","(p1)",""],["set_bundle_environment","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-set_bundle_environment","()",""],["set_close_on_exec","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-set_close_on_exec","(io)","<p>Sets the close on exec flag for <code>io</code>\n"],["set_color","Bundler::Thor::Shell::Color","classes/Bundler/Thor/Shell/Color.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_color","Bundler::Thor::Shell::HTML","classes/Bundler/Thor/Shell/HTML.html#method-i-set_color","(string, *colors)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also …\n"],["set_command_option","Bundler::Settings","classes/Bundler/Settings.html#method-i-set_command_option","(key, value)",""],["set_command_option_if_given","Bundler::Settings","classes/Bundler/Settings.html#method-i-set_command_option_if_given","(key, value)",""],["set_component","Object","classes/Object.html#method-i-set_component","(i, j, v)",""],["set_constant_visibility_for","RDoc::Context","classes/RDoc/Context.html#method-i-set_constant_visibility_for","(names, visibility)","<p>Given an array <code>names</code> of constants, set the visibility of each\nconstant to <code>visibility</code>\n"],["set_crt_params","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-set_crt_params","(p1, p2, p3)","<p>Sets <em>dmp1</em>, <em>dmq1</em>, <em>iqmp</em> for the RSA instance. They\nare calculated by <code>d mod (p - 1)</code>, <code>d mod (q - 1)</code>\nand  …\n"],["set_ctypes","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-i-set_ctypes","(types)","<p>Calculates the offsets and sizes for the given <code>types</code> in the\nstruct.\n"],["set_ctypes","Fiddle::CUnionEntity","classes/Fiddle/CUnionEntity.html#method-i-set_ctypes","(types)","<p>Calculate the necessary offset and for each union member with the given\n<code>types</code>\n"],["set_current_section","RDoc::Context","classes/RDoc/Context.html#method-i-set_current_section","(title, comment)","<p>Sets the current section to a section with <code>title</code>.  See also\n#add_section\n"],["set_debug_output","Net::HTTP","classes/Net/HTTP.html#method-i-set_debug_output","(output)","<p><strong>WARNING</strong> This method opens a serious security hole. Never\nuse this method in production code.\n<p>Sets an output …\n"],["set_debug_output","Net::POP3","classes/Net/POP3.html#method-i-set_debug_output","(arg)","<p><strong>WARNING</strong>: This method causes a serious security hole. Use\nthis method only for debugging.\n<p>Set an output …\n"],["set_debug_output","Net::SMTP","classes/Net/SMTP.html#method-i-set_debug_output","(arg)",""],["set_default","OpenSSL::Engine","classes/OpenSSL/Engine.html#method-i-set_default","(p1)","<p>Set the defaults for this engine with the given <em>flag</em>.\n<p>These flags are used to control combinations of …\n"],["set_default_paths","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-set_default_paths","()","<p>Configures <em>store</em> to look up CA certificates from the system\ndefault certificate store as needed basis. …\n"],["set_dictionary","Zlib::Deflate","classes/Zlib/Deflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>. This method is\navailable just only after Zlib::Deflate.new …\n"],["set_dictionary","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-set_dictionary","(p1)","<p>Sets the preset dictionary and returns <code>string</code>.  This method is\navailable just only after a Zlib::NeedDict …\n"],["set_dn","URI::LDAP","classes/URI/LDAP.html#method-i-set_dn","(val)","<p>Private setter for dn <code>val</code>.\n"],["set_element","Object","classes/Object.html#method-i-set_element","(i, j, v)",""],["set_encoding","ARGF","classes/ARGF.html#method-i-set_encoding","(*args)","<p>If single argument is specified, strings read from ARGF are tagged with the\nencoding specified.\n<p>If two …\n"],["set_encoding","IO","classes/IO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>If single argument is specified, read string from io is tagged with the\nencoding specified.  If encoding …\n"],["set_encoding","StringIO","classes/StringIO.html#method-i-set_encoding","(p1, p2 = v2, p3 = {})","<p>Specify the encoding of the StringIO as <em>ext_enc</em>. Use the default\nexternal encoding if <em>ext_enc</em> is nil. …\n"],["set_env","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-set_env","(key, value)",""],["set_eoutvar","Bundler::Thor::Actions::CapturableERB","classes/Bundler/Thor/Actions/CapturableERB.html#method-i-set_eoutvar","(compiler, eoutvar = \"_erbout\")",""],["set_eoutvar","ERB","classes/ERB.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Can be used to set <em>eoutvar</em> as described in ERB::new.  It&#39;s\nprobably easier to just use the constructor …\n"],["set_eoutvar","RDoc::ERBIO","classes/RDoc/ERBIO.html#method-i-set_eoutvar","(compiler, io_variable)","<p>Instructs <code>compiler</code> how to write to <code>io_variable</code>\n"],["set_eoutvar","RDoc::ERBPartial","classes/RDoc/ERBPartial.html#method-i-set_eoutvar","(compiler, eoutvar = '_erbout')","<p>Overrides <code>compiler</code> startup to set the <code>eoutvar</code> to\nan empty string only if it isn&#39;t already set.\n"],["set_error","GetoptLong","classes/GetoptLong.html#method-i-set_error","(type, message)","<p>Set an error (a protected method).\n"],["set_error","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-set_error","(ex, backtrace=false)","<p>Creates an error page for exception <code>ex</code> with an optional\n<code>backtrace</code>\n"],["set_extensions","URI::LDAP","classes/URI/LDAP.html#method-i-set_extensions","(val)","<p>Private setter for extensions <code>val</code>.\n"],["set_factors","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-set_factors","(p1, p2)","<p>Sets <em>p</em>, <em>q</em> for the RSA instance.\n"],["set_filter","URI::LDAP","classes/URI/LDAP.html#method-i-set_filter","(val)","<p>Private setter for filter <code>val</code>.\n"],["set_generator","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-set_generator","(p1, p2, p3)","<p>Sets the curve parameters. <em>generator</em> must be an instance of\nEC::Point that is on the curve. <em>order</em> and …\n"],["set_get_line_procs","Tracer","classes/Tracer.html#method-c-set_get_line_procs","(file_name, p = proc)","<p>Register an event handler <code>p</code> which is called everytime a line\nin <code>file_name</code> is executed.\n<p>Example:\n\n<pre><code>Tracer.set_get_line_procs(&quot;example.rb&quot;, ...</code></pre>\n"],["set_global","Bundler::Settings","classes/Bundler/Settings.html#method-i-set_global","(key, value)",""],["set_headers","URI::MailTo","classes/URI/MailTo.html#method-i-set_headers","(v)","<p>Private setter for headers <code>v</code>.\n"],["set_host","URI::File","classes/URI/File.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_host","URI::Generic","classes/URI/Generic.html#method-i-set_host","(v)","<p>Protected setter for the host component <code>v</code>.\n<p>See also URI::Generic.host=.\n"],["set_key","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-set_key","(p1, p2)","<p>Sets <em>pub_key</em> and <em>priv_key</em> for the DH instance.\n<em>priv_key</em> may be <code>nil</code>.\n"],["set_key","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-set_key","(p1, p2)","<p>Sets <em>pub_key</em> and <em>priv_key</em> for the DSA instance.\n<em>priv_key</em> may be <code>nil</code>.\n"],["set_key","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-set_key","(p1, p2, p3)","<p>Sets <em>n</em>, <em>e</em>, <em>d</em> for the RSA instance.\n"],["set_last_thread","DEBUGGER__","classes/DEBUGGER__.html#method-c-set_last_thread","(th)",""],["set_last_value","IRB::Context","classes/IRB/Context.html#method-i-set_last_value","(value)","<p>Sets the return value from the last statement evaluated in this context to\n#last_value.\n"],["set_local","Bundler::Settings","classes/Bundler/Settings.html#method-i-set_local","(key, value)",""],["set_next_element","RSS::Element","classes/RSS/Element.html#method-i-set_next_element","(tag_name, next_element)",""],["set_non_blocking","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-set_non_blocking","(io)","<p>Sets IO operations on <code>io</code> to be non-blocking\n"],["set_opaque","URI::Generic","classes/URI/Generic.html#method-i-set_opaque","(v)","<p>Protected setter for the opaque component <code>v</code>.\n<p>See also URI::Generic.opaque=.\n"],["set_option","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-set_option","(opt, eq)",""],["set_options","GetoptLong","classes/GetoptLong.html#method-i-set_options","(*arguments)","<p>Set options. Takes the same argument as GetoptLong.new.\n<p>Raises a RuntimeError if option processing has …\n"],["set_params","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-set_params","(params={})","<p>Sets saner defaults optimized for the use with HTTP-like protocols.\n<p>If a Hash <em>params</em> is given, the parameters …\n"],["set_passwd","WEBrick::HTTPAuth::Htdigest","classes/WEBrick/HTTPAuth/Htdigest.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::Htpasswd","classes/WEBrick/HTTPAuth/Htpasswd.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in the database for <code>user</code> in <code>realm</code>\nto <code>pass</code>.\n"],["set_passwd","WEBrick::HTTPAuth::UserDB","classes/WEBrick/HTTPAuth/UserDB.html#method-i-set_passwd","(realm, user, pass)","<p>Sets a password in <code>realm</code> with <code>user</code> and\n<code>password</code> for the auth_type of this database.\n"],["set_password","URI::File","classes/URI/File.html#method-i-set_password","(v)","<p>do nothing\n"],["set_password","URI::Generic","classes/URI/Generic.html#method-i-set_password","(v)","<p>Protected setter for the password component <code>v</code>.\n<p>See also URI::Generic.password=.\n"],["set_path","URI::FTP","classes/URI/FTP.html#method-i-set_path","(v)","<p>Private setter for the path of the URI::FTP.\n"],["set_path","URI::Generic","classes/URI/Generic.html#method-i-set_path","(v)","<p>Protected setter for the path component <code>v</code>.\n<p>See also URI::Generic.path=.\n"],["set_payload","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-set_payload","(name, payload)","<p>Sets the payload of the vertex with the given name @param [String] name the\nname of the vertex @param …\n"],["set_payload","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-set_payload","(graph, name, payload)","<p>@macro action\n"],["set_port","URI::File","classes/URI/File.html#method-i-set_port","(v)","<p>do nothing\n"],["set_port","URI::Generic","classes/URI/Generic.html#method-i-set_port","(v)","<p>Protected setter for the port component <code>v</code>.\n<p>See also URI::Generic.port=.\n"],["set_pqg","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <em>p</em>, <em>q</em>, <em>g</em> to the DH instance.\n"],["set_pqg","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-set_pqg","(p1, p2, p3)","<p>Sets <em>p</em>, <em>q</em>, <em>g</em> to the DSA instance.\n"],["set_redirect","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-set_redirect","(status, url)","<p>Redirects to <code>url</code> with a WEBrick::HTTPStatus::Redirect\n<code>status</code>.\n<p>Example:\n\n<pre><code>res.set_redirect WEBrick::HTTPStatus::TemporaryRedirect\n</code></pre>\n"],["set_scheme","URI::Generic","classes/URI/Generic.html#method-i-set_scheme","(v)","<p>Protected setter for the scheme component <code>v</code>.\n<p>See also URI::Generic.scheme=.\n"],["set_scope","URI::LDAP","classes/URI/LDAP.html#method-i-set_scope","(val)","<p>Private setter for scope <code>val</code>.\n"],["set_screen_size","Readline","classes/Readline.html#method-c-set_screen_size","(p1, p2)","<p>Set terminal size to <code>rows</code> and <code>columns</code>.\n<p>See GNU Readline&#39;s rl_set_screen_size function.\n<p>Raises NotImplementedError …\n"],["set_size","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-set_size","(new_value)",""],["set_socket","Net::FTP","classes/Net/FTP.html#method-i-set_socket","(sock, get_greeting = true)","<p>Set the socket used to connect to the FTP server.\n<p>May raise FTPReplyError if <code>get_greeting</code> is false.\n"],["set_to","URI::MailTo","classes/URI/MailTo.html#method-i-set_to","(v)","<p>Private setter for to <code>v</code>.\n"],["set_to_infinity!","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-set_to_infinity-21","()",""],["set_trace","DEBUGGER__","classes/DEBUGGER__.html#method-c-set_trace","( arg )",""],["set_trace_func","Kernel","classes/Kernel.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> as the handler for tracing, or disables tracing\nif the parameter is <code>nil</code>.\n<p><strong>Note:</strong> this method …\n"],["set_trace_func","Thread","classes/Thread.html#method-i-set_trace_func","(p1)","<p>Establishes <em>proc</em> on <em>thr</em> as the handler for tracing, or\ndisables tracing if the parameter is <code>nil</code>.\n<p>See  …\n"],["set_typecode","URI::FTP","classes/URI/FTP.html#method-i-set_typecode","(v)","<p>Private setter for the typecode <code>v</code>.\n<p>See also URI::FTP.typecode=.\n"],["set_user","URI::File","classes/URI/File.html#method-i-set_user","(v)","<p>do nothing\n"],["set_user","URI::Generic","classes/URI/Generic.html#method-i-set_user","(v)","<p>Protected setter for the user component <code>v</code>.\n<p>See also URI::Generic.user=.\n"],["set_userinfo","URI::File","classes/URI/File.html#method-i-set_userinfo","(v)","<p>do nothing\n"],["set_userinfo","URI::Generic","classes/URI/Generic.html#method-i-set_userinfo","(user, password = nil)","<p>Protected setter for the <code>user</code> component, and\n<code>password</code> if available (with validation).\n<p>See also URI::Generic.userinfo= …\n"],["set_visibility_for","RDoc::Context","classes/RDoc/Context.html#method-i-set_visibility_for","(methods, visibility, singleton = false)","<p>Given an array <code>methods</code> of method names, set the visibility of\neach to <code>visibility</code>\n"],["setacl","Net::IMAP","classes/Net/IMAP.html#method-i-setacl","(mailbox, user, rights)","<p>Sends the SETACL command along with <code>mailbox</code>, <code>user</code>\nand the <code>rights</code> that user is to have on that mailbox. …\n"],["setbyte","String","classes/String.html#method-i-setbyte","(p1, p2)","<p>modifies the <em>index</em>th byte as <em>integer</em>.\n"],["setegid","Process::Sys","classes/Process/Sys.html#method-c-setegid","(p1)","<p>Set the effective group ID of the calling process to <em>group</em>.  Not\navailable on all platforms.\n"],["seteuid","Process::Sys","classes/Process/Sys.html#method-c-seteuid","(p1)","<p>Set the effective user ID of the calling process to <em>user</em>.  Not\navailable on all platforms.\n"],["setgid","Process::Sys","classes/Process/Sys.html#method-c-setgid","(p1)","<p>Set the group ID of the current process to <em>group</em>. Not available on\nall platforms.\n"],["setgid?","File","classes/File.html#method-c-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","File::Stat","classes/File/Stat.html#method-i-setgid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-group-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setgid?","FileTest","classes/FileTest.html#method-i-setgid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setgid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setgid?","Pathname","classes/Pathname.html#method-i-setgid-3F","()","<p>See FileTest.setgid?.\n"],["setgrent","Etc","classes/Etc.html#method-c-setgrent","()","<p>Resets the process of reading the /etc/group file, so that the next call to\n::getgrent will return the …\n"],["setpgid","Process","classes/Process.html#method-c-setpgid","(p1, p2)","<p>Sets the process group ID of <em>pid</em> (0 indicates this process) to\n<em>integer</em>. Not available on all platforms. …\n"],["setpgrp","Process","classes/Process.html#method-c-setpgrp","()","<p>Equivalent to <code>setpgid(0,0)</code>. Not available on all platforms.\n"],["setpriority","Process","classes/Process.html#method-c-setpriority","(p1, p2, p3)","<p>See <code>Process#getpriority</code>.\n\n<pre><code>Process.setpriority(Process::PRIO_USER, 0, 19)      #=&gt; 0\nProcess.setpriority(Process::PRIO_PROCESS, ...</code></pre>\n"],["setproctitle","Process","classes/Process.html#method-c-setproctitle","(p1)","<p>Sets the process title that appears on the ps(1) command.  Not necessarily\neffective on all platforms. …\n"],["setproperty","WIN32OLE","classes/WIN32OLE.html#method-i-setproperty","(*args)","<p>Sets property of OLE object. When you want to set property with argument,\nyou can use this method.\n\n<pre><code>excel ...\n</code></pre>\n"],["setpwent","Etc","classes/Etc.html#method-c-setpwent","()","<p>Resets the process of reading the /etc/passwd file, so that the next call\nto ::getpwent will return the …\n"],["setquota","Net::IMAP","classes/Net/IMAP.html#method-i-setquota","(mailbox, quota)","<p>Sends a SETQUOTA command along with the specified <code>mailbox</code> and\n<code>quota</code>.  If <code>quota</code> is nil, then <code>quota</code>\nwill …\n"],["setregid","Process::Sys","classes/Process/Sys.html#method-c-setregid","(p1, p2)","<p>Sets the (group) real and/or effective group IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively. …\n"],["setresgid","Process::Sys","classes/Process/Sys.html#method-c-setresgid","(p1, p2, p3)","<p>Sets the (group) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setresuid","Process::Sys","classes/Process/Sys.html#method-c-setresuid","(p1, p2, p3)","<p>Sets the (user) real, effective, and saved user IDs of the current process\nto <em>rid</em>, <em>eid</em>, and <em>sid</em> respectively. …\n"],["setreuid","Process::Sys","classes/Process/Sys.html#method-c-setreuid","(p1, p2)","<p>Sets the (user) real and/or effective user IDs of the current process to\n<em>rid</em> and <em>eid</em>, respectively.  …\n"],["setrgid","Process::Sys","classes/Process/Sys.html#method-c-setrgid","(p1)","<p>Set the real group ID of the calling process to <em>group</em>. Not\navailable on all platforms.\n"],["setrlimit","Process","classes/Process.html#method-c-setrlimit","(*args)","<p>Sets the resource limit of the process. <em>cur_limit</em> means current\n(soft) limit and <em>max_limit</em> means maximum …\n"],["setruid","Process::Sys","classes/Process/Sys.html#method-c-setruid","(p1)","<p>Set the real user ID of the calling process to <em>user</em>. Not available\non all platforms.\n"],["setsid","Process","classes/Process.html#method-c-setsid","()","<p>Establishes this process as a new session and process group leader, with no\ncontrolling tty. Returns …\n"],["setsockopt","BasicSocket","classes/BasicSocket.html#method-i-setsockopt","(p1, p2, p3)","<p>Sets a socket option. These are protocol and system specific, see your\nlocal system documentation for …\n"],["setsockopt","OpenSSL::SSL::SocketForwarder","classes/OpenSSL/SSL/SocketForwarder.html#method-i-setsockopt","(level, optname, optval)",""],["setter","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-setter","(uri, tag_name)","<p>return the setter for the uri, tag_name pair, or nil.\n"],["settings","Bundler","classes/Bundler.html#method-c-settings","()",""],["setuid","Process::Sys","classes/Process/Sys.html#method-c-setuid","(p1)","<p>Set the user ID of the current process to <em>user</em>. Not available on\nall platforms.\n"],["setuid?","File","classes/File.html#method-c-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","File::Stat","classes/File/Stat.html#method-i-setuid-3F","()","<p>Returns <code>true</code> if <em>stat</em> has the set-user-id permission\nbit set, <code>false</code> if it doesn&#39;t or if the operating …\n"],["setuid?","FileTest","classes/FileTest.html#method-i-setuid-3F","(p1)","<p>Returns <code>true</code> if the named file has the setuid bit set.\n<p><em>file_name</em> can be an IO object.\n"],["setuid?","Pathname","classes/Pathname.html#method-i-setuid-3F","()","<p>See FileTest.setuid?.\n"],["setup","Bundler","classes/Bundler.html#method-c-setup","(*groups)",""],["setup","Bundler::Runtime","classes/Bundler/Runtime.html#method-i-setup","(*groups)",""],["setup","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-setup","()","<p>This method is called automatically when a new SSLSocket is created.\nHowever, it is not thread-safe and …\n"],["setup","RDoc::RubygemsHook","classes/RDoc/RubygemsHook.html#method-i-setup","()","<p>Prepares the spec for documentation generation\n"],["setup_certificate","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_certificate","()","<p>Ensures that :SSLCertificate and :SSLPrivateKey have been provided or that\na new certificate is generated …\n"],["setup_generator","RDoc::Options","classes/RDoc/Options.html#method-i-setup_generator","(generator_name = @generator_name)","<p>Set up an output generator for the named <code>generator_name</code>.\n<p>If the found generator responds to :setup_options …\n"],["setup_maker","RSS::Atom::Entry","classes/RSS/Atom/Entry.html#method-i-setup_maker","(maker)","<p>Sets up the <code>maker</code> for constructing Entry elements.\n"],["setup_maker","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Bag","classes/RSS/RDF/Bag.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RDF::Seq","classes/RSS/RDF/Seq.html#method-i-setup_maker","(target)",""],["setup_maker","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::SetupMaker","classes/RSS/SetupMaker.html#method-i-setup_maker","(maker)",""],["setup_maker","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-setup_maker","(maker)",""],["setup_maker_elements","RSS::Rss","classes/RSS/Rss.html#method-i-setup_maker_elements","(maker)",""],["setup_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-setup_output_dir","(dir, force)","<p>Create an output dir if it doesn&#39;t exist. If it does exist, but\ndoesn&#39;t contain the flag file …\n"],["setup_params","WEBrick::AccessLog","classes/WEBrick/AccessLog.html#method-i-setup_params","(config, req, res)","<p>This format specification is a subset of mod_log_config of Apache:\n<p>%a &mdash; Remote IP address\n<p>%b &mdash; Total response …\n"],["setup_ssl_context","DRb::DRbSSLSocket::SSLConfig","classes/DRb/DRbSSLSocket/SSLConfig.html#method-i-setup_ssl_context","()","<p>Establish the OpenSSL::SSL::SSLContext with the configuration parameters\nprovided.\n"],["sev_threshold=","Logger","classes/Logger.html#method-i-sev_threshold-3D","(severity)",""],["sexp","Ripper","classes/Ripper.html#method-c-sexp","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. Returns more readable tree\nrather than Ripper.sexp_raw …\n"],["sexp_raw","Ripper","classes/Ripper.html#method-c-sexp_raw","(src, filename = '-', lineno = 1)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and create S-exp tree. This method is mainly for\ndeveloper use.\n\n<pre><code>require &#39;ripper&#39; ...\n</code></pre>\n\n"],["sfork","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-sfork","(command)","<p>simple fork\n"],["sh","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-sh","(cmd, &block)",""],["sh_with_code","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-sh_with_code","(cmd, &block)",""],["shallow_eql?","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-shallow_eql-3F","(other)","<p>@param  [Vertex] other the other vertex to compare to @return [Boolean]\nwhether the two vertices are …\n"],["shell","Bundler::Thor::Base","classes/Bundler/Thor/Base.html#method-c-shell","()","<p>Returns the shell used in all Bundler::Thor classes. If you are in a Unix\nplatform it will use a colored …\n"],["shell","Bundler::Thor::Shell","classes/Bundler/Thor/Shell.html#method-i-shell","()","<p>Holds the shell for the given Bundler::Thor instance. If no shell is given,\nit gets a default shell from …\n"],["shellescape","Shellwords","classes/Shellwords.html#method-c-shellescape","(str)","<p>Escapes a string so that it can be safely used in a Bourne shell command\nline.  <code>str</code> can be a non-string …\n"],["shellescape","String","classes/String.html#method-i-shellescape","()","<p>Escapes <code>str</code> so that it can be safely used in a Bourne shell\ncommand line.\n<p>See Shellwords.shellescape for …\n"],["shelljoin","Array","classes/Array.html#method-i-shelljoin","()","<p>Builds a command line string from an argument list <code>array</code>\njoining all elements escaped for the Bourne …\n"],["shelljoin","Shellwords","classes/Shellwords.html#method-c-shelljoin","(array)","<p>Builds a command line string from an argument list, <code>array</code>.\n<p>All elements are joined into a single string …\n"],["shellsplit","Shellwords","classes/Shellwords.html#method-c-shellsplit","(line)","<p>Splits a string into an array of tokens in the same way the UNIX Bourne\nshell does.\n\n<pre><code>argv = Shellwords.split(&#39;here ...</code></pre>\n"],["shellsplit","String","classes/String.html#method-i-shellsplit","()","<p>Splits <code>str</code> into an array of tokens in the same way the UNIX\nBourne shell does.\n<p>See Shellwords.shellsplit …\n"],["shellwords","Shellwords","classes/Shellwords.html#method-c-shellwords","(line)",""],["shift","Array","classes/Array.html#method-i-shift","(*args)","<p>Removes the first element of <code>self</code> and returns it (shifting all\nother elements down by one). Returns  …\n"],["shift","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-shift","()",""],["shift","CSV","classes/CSV.html#method-i-shift","()","<p>The primary read method for wrapped Strings and IOs, a single row is pulled\nfrom the data source, parsed …\n"],["shift","DBM","classes/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns nil. …\n"],["shift","ENV","classes/ENV.html#method-c-shift","()","<p>Removes an environment variable name-value pair from ENV and returns it as\nan Array.  Returns <code>nil</code> if …\n"],["shift","GDBM","classes/GDBM.html#method-i-shift","()","<p>Removes a key-value-pair from this database and returns it as a two-item\narray [ <em>key</em>, <em>value</em> ]. Returns …\n"],["shift","Hash","classes/Hash.html#method-i-shift","()","<p>Removes a key-value pair from <em>hsh</em> and returns it as the two-item\narray <code>[</code> <em>key, value</em> <code>]</code>, or the hash&#39;s\n…\n"],["shift","Queue","classes/Queue.html#method-i-shift","(*args)",""],["shift","SDBM","classes/SDBM.html#method-i-shift","()","<p>Removes a key-value pair from the database and returns them as an Array. If\nthe database is empty, returns …\n"],["shift","SizedQueue","classes/SizedQueue.html#method-i-shift","(*args)",""],["shift","YAML::DBM","classes/YAML/DBM.html#method-i-shift","()","<p>Removes a [key, value] pair from the database, and returns it. If the\ndatabase is empty, returns <code>nil</code> …\n"],["short_name","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-i-short_name","()",""],["should_include?","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-should_include-3F","()",""],["show","Bundler::CLI","classes/Bundler/CLI.html#method-i-show","(gem_name = nil)",""],["show_documentation","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-show_documentation","(req, res)","<p>Displays documentation for <code>req</code> on <code>res</code>, whether\nthat be HTML or some asset.\n"],["show_version","OptionParser","classes/OptionParser.html#method-c-show_version","(*pkgs)",""],["shuffle","Array","classes/Array.html#method-i-shuffle","(*args)","<p>Returns a new array with elements of <code>self</code> shuffled.\n\n<pre><code>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle ...\n</code></pre>\n"],["shuffle!","Array","classes/Array.html#method-i-shuffle-21","(*args)","<p>Shuffles elements in <code>self</code> in place.\n\n<pre><code>a = [ 1, 2, 3 ]           #=&gt; [1, 2, 3]\na.shuffle!                ...\n</code></pre>\n"],["shutdown","BasicSocket","classes/BasicSocket.html#method-i-shutdown","(p1 = v1)","<p>Calls shutdown(2) system call.\n<p>s.shutdown(Socket::SHUT_RD) disallows further read.\n<p>s.shutdown(Socket::SHUT_WR) …\n"],["shutdown","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-shutdown","(thread = Thread.current)","<p>Shuts down all connections for <code>thread</code>.\n<p>Uses the current thread by default.\n<p>If you&#39;ve used Bundler::Persistent::Net::HTTP::Persistent …\n"],["shutdown","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-i-shutdown","(how=Socket::SHUT_RDWR)","<p>See BasicSocket#shutdown for details.\n"],["shutdown","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-shutdown","()","<p>Shuts down the RingServer\n"],["shutdown","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-shutdown","()","<p>Shuts down the server and all listening sockets.  New listeners must be\nprovided to restart the server. …\n"],["shutdown_in_all_threads","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-shutdown_in_all_threads","()","<p>Shuts down all connections in all threads\n<p><strong>NOTE</strong>: THIS METHOD IS VERY DANGEROUS!\n<p>Do not call this method …\n"],["sid_available?","Process::GID","classes/Process/GID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved group ID\nfunctionality.\n"],["sid_available?","Process::UID","classes/Process/UID.html#method-c-sid_available-3F","()","<p>Returns <code>true</code> if the current platform has saved user ID\nfunctionality.\n"],["sign","BigDecimal","classes/BigDecimal.html#method-i-sign","()","<p>Returns the sign of the value.\n<p>Returns a positive value if &gt; 0, a negative value if &lt; 0, and a zero\n…\n"],["sign","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-sign","(p1, p2)","<p>Parameters\n<p><em>key</em> - the private key to be used for signing this instance\n<p><em>digest</em> - the digest to be used for …\n"],["sign","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP response using the <em>cert</em>, <em>key</em> and optional\n<em>digest</em>. This behaves in the similar way as …\n"],["sign","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-sign","(p1, p2, p3 = v3, p4 = v4, p5 = v5)","<p>Signs this OCSP request using <em>cert</em>, <em>key</em> and optional\n<em>digest</em>. If <em>digest</em> is not specified, SHA-1 is used. …\n"],["sign","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-sign","(p1, p2, p3, p4 = v4, p5 = v5)",""],["sign","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-i-sign","(p1, p2)","<p>To sign the String <em>data</em>, <em>digest</em>, an instance of\nOpenSSL::Digest, must be provided. The return value is …\n"],["sign","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-sign","(p1, p2)",""],["sign","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-sign","(p1, p2)",""],["sign_pss","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-sign_pss","(p1, p2, p3 = {})","<p>Signs <em>data</em> using the Probabilistic Signature Scheme (RSA-PSS) and\nreturns the calculated signature.\n<p>RSAError …\n"],["signal","ConditionVariable","classes/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-signal","()","<p>Wakes up the first thread in line waiting for this lock.\n"],["signal","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-signal","()",""],["signal_handle","IRB::Irb","classes/IRB/Irb.html#method-i-signal_handle","()","<p>Handler for the signal SIGINT, see Kernel#trap for more information.\n"],["signal_status","IRB::Irb","classes/IRB/Irb.html#method-i-signal_status","(status)","<p>Evaluates the given block using the given <code>status</code>.\n"],["signaled?","Process::Status","classes/Process/Status.html#method-i-signaled-3F","()","<p>Returns <code>true</code> if <em>stat</em> terminated because of an\nuncaught signal.\n"],["signame","Signal","classes/Signal.html#method-c-signame","(p1)","<p>Convert signal number to signal name. Returns <code>nil</code> if the signo\nis an invalid signal number.\n\n<pre><code>Signal.trap(&quot;INT&quot;) ...\n</code></pre>\n"],["signature","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-c-signature","(comment)","<p>Extracts the Signature section&#39;s method signature\n<p>comment &mdash; An RDoc::Comment that will be parsed and …\n\n"],["signature_algorithm","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-signature_algorithm","()",""],["signature_algorithm","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-signature_algorithm","()",""],["signed?","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-signed-3F","()","<p>Returns <code>true</code> if the request is signed, <code>false</code>\notherwise. Note that the validity of the signature is <strong>not</strong>\n…\n"],["signed_time","OpenSSL::PKCS7::SignerInfo","classes/OpenSSL/PKCS7/SignerInfo.html#method-i-signed_time","()",""],["signers","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-signers","()",""],["signo","SignalException","classes/SignalException.html#method-i-signo","()","<p>Returns a signal number.\n"],["silence","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-silence","(&blk)",""],["silence","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-silence","()",""],["similar_word_list","Bundler::SimilarityDetector","classes/Bundler/SimilarityDetector.html#method-i-similar_word_list","(word, limit = 3)","<p>return the result of &#39;similar_words&#39;, concatenated into a list (eg\n“a, b, or c”)\n"],["similar_words","Bundler::SimilarityDetector","classes/Bundler/SimilarityDetector.html#method-i-similar_words","(word, limit = 3)","<p>return an array of words similar to &#39;word&#39; from the corpus\n"],["sin","BigMath","classes/BigMath.html#method-i-sin","(x, prec)","<p>Computes the sine of <code>decimal</code> to the specified number of digits\nof precision, <code>numeric</code>.\n<p>If <code>decimal</code> is Infinity …\n"],["sin","CMath","classes/CMath.html#method-c-sin","(z)","<p>Returns the sine of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre><code>CMath.sin(1 + 1i) #=&gt; (1.2984575814159773+0.6349639147847361i)\n</code></pre>\n"],["sin","Math","classes/Math.html#method-c-sin","(p1)","<p>Computes the sine of <code>x</code> (expressed in radians). Returns a Float\nin the range -1.0..1.0.\n<p>Domain: (-INFINITY, …\n"],["single?","Bundler::VersionRanges::ReqR","classes/Bundler/VersionRanges/ReqR.html#method-i-single-3F","()",""],["single?","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-single-3F","()",""],["single_delegate","SingleForwardable","classes/SingleForwardable.html#method-i-single_delegate","(hash)","<p>Takes a hash as its argument.  The key is a symbol or an array of symbols. \nThese symbols correspond …\n"],["single_version_string","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-single_version_string","()",""],["singleline_format","PrettyPrint","classes/PrettyPrint.html#method-c-singleline_format","(output=''.dup, maxwidth=nil, newline=nil, genspace=nil)","<p>This is similar to PrettyPrint::format but the result has no breaks.\n<p><code>maxwidth</code>, <code>newline</code> and <code>genspace</code> are …\n"],["singleline_pp","PP","classes/PP.html#method-c-singleline_pp","(obj, out=$>)","<p>Outputs <code>obj</code> to <code>out</code> like PP.pp but with no indent\nand newline.\n<p>PP.singleline_pp returns <code>out</code>.\n"],["singleton_class","Object","classes/Object.html#method-i-singleton_class","()","<p>Returns the singleton class of <em>obj</em>.  This method creates a new\nsingleton class if <em>obj</em> does not have one. …\n"],["singleton_class?","Module","classes/Module.html#method-i-singleton_class-3F","()","<p>Returns <code>true</code> if <em>mod</em> is a singleton class or\n<code>false</code> if it is an ordinary class or module.\n\n<pre><code>class C\nend\nC.singleton_class? ...\n</code></pre>\n"],["singleton_method","Object","classes/Object.html#method-i-singleton_method","(p1)","<p>Similar to <em>method</em>, searches singleton method only.\n\n<pre><code>class Demo\n  def initialize(n)\n    @iv = n\n  end\n  ...</code></pre>\n"],["singleton_method_added","REXML::Functions","classes/REXML/Functions.html#method-c-singleton_method_added","(name)",""],["singleton_methods","Object","classes/Object.html#method-i-singleton_methods","(*args)","<p>Returns an array of the names of singleton methods for <em>obj</em>. If the\noptional <em>all</em> parameter is true, the …\n"],["singular?","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-singular-3F","()","<p>Returns <code>true</code> if <code>U</code>, and hence <code>A</code>, is\nsingular.\n"],["sinh","CMath","classes/CMath.html#method-c-sinh","(z)","<p>Returns the hyperbolic sine of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre><code>CMath.sinh(1 + 1i) #=&gt; (0.6349639147847361+1.2984575814159773i)\n</code></pre>\n"],["sinh","Math","classes/Math.html#method-c-sinh","(p1)","<p>Computes the hyperbolic sine of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY, …\n"],["site","Net::FTP","classes/Net/FTP.html#method-i-site","(arg)","<p>Issues a SITE command.\n"],["size","Array","classes/Array.html#method-i-size","()",""],["size","Bundler::Index","classes/Bundler/Index.html#method-i-size","()",""],["size","DBM","classes/DBM.html#method-i-size","()","<p>Returns the number of entries in the database.\n"],["size","Digest::Instance","classes/Digest/Instance.html#method-i-size","()","<p>Returns digest_obj.digest_length().\n"],["size","ENV","classes/ENV.html#method-c-size","()","<p>Returns the number of environment variables.\n"],["size","Enumerator","classes/Enumerator.html#method-i-size","()","<p>Returns the size of the enumerator, or <code>nil</code> if it can&#39;t be\ncalculated lazily.\n\n<pre><code>(1..100).to_a.permutation(4).size ...\n</code></pre>\n"],["size","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-size","()","<p>Returns the number of elements in this arithmetic sequence if it is a\nfinite sequence.  Otherwise, returns …\n"],["size","Enumerator::Chain","classes/Enumerator/Chain.html#method-i-size","()","<p>Returns the total size of the enumerator chain calculated by summing up the\nsize of each enumerable in …\n"],["size","Fiddle::CStructEntity","classes/Fiddle/CStructEntity.html#method-c-size","(types)","<p>Returns the offset for the packed sizes for the given <code>types</code>.\n\n<pre><code>Fiddle::CStructEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</code></pre>\n"],["size","Fiddle::CUnionEntity","classes/Fiddle/CUnionEntity.html#method-c-size","(types)","<p>Returns the size needed for the union with the given <code>types</code>.\n\n<pre><code>Fiddle::CUnionEntity.size(\n  [ Fiddle::TYPE_DOUBLE, ...</code></pre>\n"],["size","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-size","()","<p>Get the size of this pointer.\n"],["size","File","classes/File.html#method-c-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","File","classes/File.html#method-i-size","()","<p>Returns the size of <em>file</em> in bytes.\n\n<pre><code>File.new(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size","File::Stat","classes/File/Stat.html#method-i-size","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre><code>File.stat(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size","FileTest","classes/FileTest.html#method-i-size","(p1)","<p>Returns the size of <code>file_name</code>.\n<p><em>file_name</em> can be an IO object.\n"],["size","GDBM","classes/GDBM.html#method-i-size","()","<p>Returns the number of key-value pairs in this database.\n"],["size","Hash","classes/Hash.html#method-i-size","()","<p>Returns the number of key-value pairs in the hash.\n\n<pre><code>h = { &quot;d&quot; =&gt; 100, &quot;a&quot; =&gt; 200, &quot;v&quot; =&gt; 300, &quot;e&quot; =&gt; 400 ...</code></pre>\n"],["size","Integer","classes/Integer.html#method-i-size","()","<p>Returns the number of bytes in the machine representation of\n<code>int</code> (machine dependent).\n\n<pre><code>1.size          ...\n</code></pre>\n"],["size","MatchData","classes/MatchData.html#method-i-size","()","<p>Returns the number of elements in the match array.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.length   ...\n</code></pre>\n"],["size","Net::FTP","classes/Net/FTP.html#method-i-size","(filename)","<p>Returns the size of the given (remote) filename.\n"],["size","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-size","()","<p>Returns the number of referenced objects\n"],["size","Pathname","classes/Pathname.html#method-i-size","()","<p>See FileTest.size.\n"],["size","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-size","()",""],["size","Queue","classes/Queue.html#method-i-size","()",""],["size","REXML::Attributes","classes/REXML/Attributes.html#method-i-size","()",""],["size","REXML::Elements","classes/REXML/Elements.html#method-i-size","()","<p>Returns the number of <code>Element</code> children of the parent object.\n\n<pre><code>doc = Document.new &#39;&lt;a&gt;sean&lt;b/&gt;elliott&lt;b/&gt;russell&lt;b/&gt;&lt;/a&gt;&#39; ...\n</code></pre>\n"],["size","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-size","()",""],["size","REXML::Parent","classes/REXML/Parent.html#method-i-size","()","<p>@return the number of children of this parent\n"],["size","REXML::SyncEnumerator","classes/REXML/SyncEnumerator.html#method-i-size","()","<p>Returns the number of enumerated Enumerable objects, i.e. the size of each\nrow.\n"],["size","Range","classes/Range.html#method-i-size","()","<p>Returns the number of elements in the range. Both the begin and the end of\nthe Range must be Numeric …\n"],["size","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-size","()","<p>The number of elements in the tuple.\n"],["size","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-size","()","<p>The size of the tuple.\n"],["size","SDBM","classes/SDBM.html#method-i-size","()","<p>Returns the number of keys in the database.\n"],["size","Set","classes/Set.html#method-i-size","()","<p>Returns the number of elements.\n"],["size","SizedQueue","classes/SizedQueue.html#method-i-size","()",""],["size","String","classes/String.html#method-i-size","()","<p>Returns the character length of <em>str</em>.\n"],["size","StringIO","classes/StringIO.html#method-i-size","()","<p>Returns the size of the buffer string.\n"],["size","StringScanner","classes/StringScanner.html#method-i-size","()","<p>Returns the amount of subgroups in the most recent match. The full match\ncounts as a subgroup.\n\n<pre><code>s = StringScanner.new(&quot;Fri ...</code></pre>\n"],["size","Struct","classes/Struct.html#method-i-size","()","<p>Returns the number of struct members.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["size","Symbol","classes/Symbol.html#method-i-size","()","<p>Same as <code>sym.to_s.length</code>.\n"],["size","Tempfile","classes/Tempfile.html#method-i-size","()","<p>Returns the size of the temporary file.  As a side effect, the IO buffer is\nflushed before determining …\n"],["size=","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-size-3D","(p1)","<p>Set the size of this pointer to <code>size</code>\n"],["size=","RSS::ImageFaviconModel::ImageFavicon","classes/RSS/ImageFaviconModel/ImageFavicon.html#method-i-size-3D","(new_value)",""],["size?","File","classes/File.html#method-c-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","File::Stat","classes/File/Stat.html#method-i-size-3F","()","<p>Returns the size of <em>stat</em> in bytes.\n\n<pre><code>File.stat(&quot;testfile&quot;).size   #=&gt; 66\n</code></pre>\n"],["size?","FileTest","classes/FileTest.html#method-i-size-3F","(p1)","<p>Returns <code>nil</code> if <code>file_name</code> doesn&#39;t exist or has\nzero size, the size of the file otherwise.\n<p><em>file_name</em> …\n"],["size?","Pathname","classes/Pathname.html#method-i-size-3F","()","<p>See FileTest.size?.\n"],["size_opt_params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-size_opt_params","()","<p>Returns the size of optional parameters.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["size_params","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-size_params","()","<p>Returns the size of arguments of the method.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["sizeof","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-sizeof","(ty)","<p>Returns the sizeof <code>ty</code>, using Fiddle::Importer.parse_ctype to\ndetermine the C type and the appropriate …\n"],["skip","ARGF","classes/ARGF.html#method-i-skip","()","<p>Sets the current file to the next file in ARGV. If there aren&#39;t any\nmore files it has no effect. …\n"],["skip","Bundler::Deprecate","classes/Bundler/Deprecate.html#method-c-skip","()",""],["skip","StringScanner","classes/StringScanner.html#method-i-skip","(p1)","<p>Attempts to skip over the given <code>pattern</code> beginning with the\nscan pointer. If it matches, the scan pointer …\n"],["skip=","Bundler::Deprecate","classes/Bundler/Deprecate.html#method-c-skip-3D","(skip)",""],["skip_blanks?","CSV","classes/CSV.html#method-i-skip_blanks-3F","()","<p>Returns <code>true</code> blank lines are skipped by the parser. See\nCSV::new for details.\n"],["skip_blanks?","CSV::Parser","classes/CSV/Parser.html#method-i-skip_blanks-3F","()",""],["skip_during","Bundler::Deprecate","classes/Bundler/Deprecate.html#method-c-skip_during","()",""],["skip_lines","CSV","classes/CSV.html#method-i-skip_lines","()","<p>The regex marking a line as a comment. See CSV::new for details\n"],["skip_lines","CSV::Parser","classes/CSV/Parser.html#method-i-skip_lines","()",""],["skip_until","StringScanner","classes/StringScanner.html#method-i-skip_until","(p1)","<p>Advances the scan pointer until <code>pattern</code> is matched and\nconsumed.  Returns the number of bytes advanced, …\n"],["sleep","Kernel","classes/Kernel.html#method-i-sleep","(*args)","<p>Suspends the current thread for <em>duration</em> seconds (which may be any\nnumber, including a <code>Float</code> with fractional …\n"],["sleep","Mutex","classes/Mutex.html#method-i-sleep","(*args)","<p>Releases the lock and sleeps <code>timeout</code> seconds if it is given\nand non-nil or forever.  Raises <code>ThreadError</code> …\n"],["sleep","Mutex_m","classes/Mutex_m.html#method-i-sleep","(timeout = nil)","<p>See Mutex#sleep\n"],["slice","Array","classes/Array.html#method-i-slice","(*args)","<p>Element Reference — Returns the element at <code>index</code>, or returns a\nsubarray starting at the <code>start</code> index …\n"],["slice","ENV","classes/ENV.html#method-c-slice","(*args)","<p>Returns a hash containing only the given keys from ENV and their values.\n\n<pre><code>ENV.slice(&quot;TERM&quot;,&quot;HOME&quot;)  #=&gt; ...\n</code></pre>\n"],["slice","Hash","classes/Hash.html#method-i-slice","(*args)","<p>Returns a hash containing only the given keys and their values.\n\n<pre><code>h = { a: 100, b: 200, c: 300 }\nh.slice(:a) ...\n</code></pre>\n"],["slice","Ripper","classes/Ripper.html#method-c-slice","(src, pattern, n = 0)","<p>EXPERIMENTAL &mdash; Parses <code>src</code> and return a string which was matched to\n<code>pattern</code>. <code>pattern</code> should be described …\n"],["slice","String","classes/String.html#method-i-slice","(*args)","<p>Element Reference — If passed a single <code>index</code>, returns a\nsubstring of one character at that index.  …\n"],["slice","Symbol","classes/Symbol.html#method-i-slice","(*args)","<p>Returns <code>sym.to_s[]</code>.\n"],["slice!","Array","classes/Array.html#method-i-slice-21","(*args)","<p>Deletes the element(s) given by an <code>index</code> (optionally up to\n<code>length</code> elements) or by a <code>range</code>.\n<p>Returns the …\n"],["slice!","String","classes/String.html#method-i-slice-21","(*args)","<p>Deletes the specified portion from <em>str</em>, and returns the portion\ndeleted.\n\n<pre><code>string = &quot;this is a string&quot;\nstring.slice!(2) ...\n</code></pre>\n"],["slice_after","Enumerable","classes/Enumerable.html#method-i-slice_after","(p1)","<p>Creates an enumerator for each chunked elements. The ends of chunks are\ndefined by <em>pattern</em> and the block. …\n"],["slice_after","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-slice_after","(*args)",""],["slice_before","Enumerable","classes/Enumerable.html#method-i-slice_before","(p1)","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by <em>pattern</em> and …\n"],["slice_before","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-slice_before","(*args)",""],["slice_body","Bundler::CompactIndexClient::Updater","classes/Bundler/CompactIndexClient/Updater.html#method-i-slice_body","(body, range)",""],["slice_when","Enumerable","classes/Enumerable.html#method-i-slice_when","()","<p>Creates an enumerator for each chunked elements. The beginnings of chunks\nare defined by the block.\n<p>This …\n"],["slice_when","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-slice_when","(*args)",""],["sn","OpenSSL::ASN1::ObjectId","classes/OpenSSL/ASN1/ObjectId.html#method-i-sn","()","<p>The short name of the ObjectId, as defined in &lt;openssl/objects.h&gt;.\n"],["snake_case","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-snake_case","(str)","<p>Receives a string and convert it to snake case. SnakeCase returns\nsnake_case.\n<p>Parameters\n<p>String\n"],["snippet","RDoc::Text","classes/RDoc/Text.html#method-i-snippet","(text, limit = 100)","<p>The first <code>limit</code> characters of <code>text</code> as HTML\n"],["sockaddr_in","Socket","classes/Socket.html#method-c-sockaddr_in","(p1, p2)","<p>Packs <em>port</em> and <em>host</em> as an AF_INET/AF_INET6 sockaddr\nstring.\n\n<pre><code>Socket.sockaddr_in(80, &quot;127.0.0.1&quot;)\n#=&gt; &quot;\\x02\\x00\\x00P\\x7F\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&quot; ...\n</code></pre>\n"],["sockaddr_un","Socket","classes/Socket.html#method-c-sockaddr_un","(p1)","<p>Packs <em>path</em> as an AF_UNIX sockaddr string.\n\n<pre><code>Socket.sockaddr_un(&quot;/tmp/sock&quot;) #=&gt; &quot;\\x01\\x00/tmp/sock\\x00\\x00...&quot;\n</code></pre>\n"],["socket?","File","classes/File.html#method-c-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["socket?","File::Stat","classes/File/Stat.html#method-i-socket-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a socket, <code>false</code>\nif it isn&#39;t or if the operating system doesn&#39;t support …\n"],["socket?","FileTest","classes/FileTest.html#method-i-socket-3F","(p1)","<p>Returns <code>true</code> if the named file is a socket.\n<p><em>file_name</em> can be an IO object.\n"],["socket?","Pathname","classes/Pathname.html#method-i-socket-3F","()","<p>See FileTest.socket?.\n"],["socketpair","Socket","classes/Socket.html#method-c-socketpair","(p1, p2, p3 = v3)","<p>Creates a pair of sockets connected each other.\n<p><em>domain</em> should be a communications domain such as: :INET, …\n"],["socketpair","UNIXSocket","classes/UNIXSocket.html#method-c-socketpair","(p1 = v1, p2 = v2)","<p>Creates a pair of sockets connected to each other.\n<p><em>socktype</em> should be a socket type such as: :STREAM, …\n"],["socktype","Addrinfo","classes/Addrinfo.html#method-i-socktype","()","<p>returns the socket type as an integer.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).socktype == Socket::SOCK_STREAM #=&gt; ...\n</code></pre>\n"],["solve","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-solve","(b)","<p>Returns <code>m</code> so that <code>A*m = b</code>, or equivalently so\nthat <code>L*U*m = P*b</code> <code>b</code> can be a Matrix or a Vector\n"],["sort","Array","classes/Array.html#method-i-sort","()","<p>Returns a new array created by sorting <code>self</code>.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code> …\n"],["sort","Enumerable","classes/Enumerable.html#method-i-sort","()","<p>Returns an array containing the items in <em>enum</em> sorted.\n<p>Comparisons for the sort will be done using the …\n"],["sort","Net::IMAP","classes/Net/IMAP.html#method-i-sort","(sort_keys, search_keys, charset)","<p>Sends a SORT command to sort messages in the mailbox. Returns an array of\nmessage sequence numbers.  …\n"],["sort!","Array","classes/Array.html#method-i-sort-21","()","<p>Sorts <code>self</code> in place.\n<p>Comparisons for the sort will be done using the <code>&lt;=&gt;</code>\noperator or using an optional …\n"],["sort!","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-sort-21","()",""],["sort_by","Enumerable","classes/Enumerable.html#method-i-sort_by","()","<p>Sorts <em>enum</em> using a set of keys generated by mapping the values in\n<em>enum</em> through the given block.\n<p>The result …\n"],["sort_by!","Array","classes/Array.html#method-i-sort_by-21","()","<p>Sorts <code>self</code> in place using a set of keys generated by mapping\nthe values in <code>self</code> through the given block. …\n"],["sort_dependencies","Bundler::Molinillo::Delegates::SpecificationProvider","classes/Bundler/Molinillo/Delegates/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>(see Bundler::Molinillo::SpecificationProvider#sort_dependencies)\n"],["sort_dependencies","Bundler::Molinillo::SpecificationProvider","classes/Bundler/Molinillo/SpecificationProvider.html#method-i-sort_dependencies","(dependencies, activated, conflicts)","<p>Sort dependencies so that the ones that are easiest to resolve are first.\nEasiest to resolve is (usually) …\n"],["sort_dependencies","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-sort_dependencies","(dependencies, activated, conflicts)",""],["sort_obj","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-sort_obj","()","<p>Create a delegate used for sorting. This strategy is copied from RubyGems\n2.23 and ensures that Bundler&#39;s …\n"],["sort_platforms","Bundler::Resolver","classes/Bundler/Resolver.html#method-c-sort_platforms","(platforms)","<p>Sort platforms from most general to most specific\n"],["sort_sections","RDoc::Context","classes/RDoc/Context.html#method-i-sort_sections","()","<p>Sorts sections alphabetically (default) or in TomDoc fashion (none, Public,\nInternal, Deprecated)\n"],["sort_specs","Bundler::Index","classes/Bundler/Index.html#method-c-sort_specs","(specs)",""],["sort_specs","Bundler::Index","classes/Bundler/Index.html#method-i-sort_specs","(specs)",""],["sort_versions","Bundler::GemVersionPromoter","classes/Bundler/GemVersionPromoter.html#method-i-sort_versions","(dep, spec_groups)","<p>Given a Dependency and an Array of SpecGroups of available versions for a\ngem, this method will return …\n"],["source","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-source","(source, *args, &blk)",""],["source","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-source","(name)","<p>@return [Class] that handles the source. The calss includes API::Source\n"],["source","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-c-source","(source, cls = self)","<p>The plugins should declare that they provide a installation source through\nthis helper.\n<p>@param [String] …\n"],["source","Bundler::Plugin::DSL","classes/Bundler/Plugin/DSL.html#method-i-source","(source, *args, &blk)",""],["source","JSON::Ext::Parser","classes/JSON/Ext/Parser.html#method-i-source","()","<p>Returns a copy of the current <em>source</em> string, that was used to\nconstruct this Parser.\n"],["source","RDoc::Store","classes/RDoc/Store.html#method-i-source","()","<p>Source of the contents of this store.\n<p>For a store from a gem the source is the gem name.  For a store …\n"],["source","REXML::Parsers::SAX2Parser","classes/REXML/Parsers/SAX2Parser.html#method-i-source","()",""],["source","Regexp","classes/Regexp.html#method-i-source","()","<p>Returns the original string of the pattern.\n\n<pre><code>/ab+c/ix.source #=&gt; &quot;ab+c&quot;\n</code></pre>\n<p>Note that escape sequences are retained …\n"],["source=","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-source-3D","(source)",""],["source?","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-source-3F","(name)","<p>Checks if any plugin declares the source\n"],["source?","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-source-3F","(source)",""],["source_encoding","Encoding::Converter","classes/Encoding/Converter.html#method-i-source_encoding","()","<p>Returns the source encoding as an Encoding object.\n"],["source_encoding","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-source_encoding","()","<p>Returns the source encoding as an encoding object.\n<p>Note that the result may not be equal to the source …\n"],["source_encoding_name","Encoding::InvalidByteSequenceError","classes/Encoding/InvalidByteSequenceError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_encoding_name","Encoding::UndefinedConversionError","classes/Encoding/UndefinedConversionError.html#method-i-source_encoding_name","()","<p>Returns the source encoding name as a string.\n"],["source_file","IRB::IrbLoader","classes/IRB/IrbLoader.html#method-i-source_file","(path)","<p>Loads a given file in the current session and displays the source lines\n<p>See Irb#suspend_input_method for …\n"],["source_from_lock","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-source_from_lock","(locked_opts)","<p>@param [Hash] The options that are present in the lock file @return\n[API::Source] the instance of the …\n"],["source_location","Binding","classes/Binding.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number of the binding object.\n"],["source_location","Method","classes/Method.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_location","Proc","classes/Proc.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this proc or\n<code>nil</code> if this proc was not defined …\n"],["source_location","UnboundMethod","classes/UnboundMethod.html#method-i-source_location","()","<p>Returns the Ruby source filename and line number containing this method or\nnil if this method was not …\n"],["source_ole_types","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-source_ole_types","()","<p>Returns the array of WIN32OLE_TYPE object which is implemented by the\nWIN32OLE_TYPE object and having …\n"],["source_paths","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-source_paths","()","<p>Holds source paths in instance so they can be manipulated.\n"],["source_paths","Bundler::Thor::Actions::ClassMethods","classes/Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths","()","<p>Hold source paths for one Bundler::Thor instance. source_paths_for_search\nis the method responsible to …\n"],["source_paths_for_search","Bundler::Thor::Actions::ClassMethods","classes/Bundler/Thor/Actions/ClassMethods.html#method-i-source_paths_for_search","()","<p>Returns the source paths in the following order:\n\n<pre><code>1) This class source paths\n2) Source root\n3) Parents ...</code></pre>\n"],["source_plugin","Bundler::Plugin::Index","classes/Bundler/Plugin/Index.html#method-i-source_plugin","(name)",""],["source_root","Bundler::CLI","classes/Bundler/CLI.html#method-c-source_root","()",""],["source_root","Bundler::Thor::Actions::ClassMethods","classes/Bundler/Thor/Actions/ClassMethods.html#method-i-source_root","(path = nil)","<p>Stores and return the source root for this class\n"],["sources","Gem","classes/Gem.html#method-c-sources","()","<p>Returns an Array of sources to fetch remote gems from. Uses default_sources\nif the sources list is empty. …\n"],["sources=","Gem","classes/Gem.html#method-c-sources-3D","(new_sources)","<p>Need to be able to set the sources without calling Gem.sources.replace\nsince that would cause an infinite …\n"],["space","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space","()","<p>Returns the string that is used to insert a space between the tokens in a\nJSON string.\n"],["space=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space-3D","(p1)","<p>Sets <em>space</em> to the string that is used to insert a space between\nthe tokens in a JSON string.\n"],["space_before","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before","()","<p>Returns the string that is used to insert a space before the &#39;:&#39; in\nJSON objects.\n"],["space_before=","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-space_before-3D","(p1)","<p>Sets the string that is used to insert a space before the &#39;:&#39; in\nJSON objects.\n"],["spawn","Kernel","classes/Kernel.html#method-i-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre><code>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...\n</code></pre>\n"],["spawn","PTY","classes/PTY.html#method-c-spawn","(*args)","<p>Spawns the specified command on a newly allocated pty. You can also use the\nalias ::getpty.\n<p>The command&#39;s …\n"],["spawn","Process","classes/Process.html#method-c-spawn","(*args)","<p>spawn executes specified command and return its pid.\n\n<pre><code>pid = spawn(&quot;tar xf ruby-2.0.0-p195.tar.bz2&quot;)\nProcess.wait ...\n</code></pre>\n"],["spec","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-i-spec","(name, version, platform = nil)",""],["spec_cache_dir","Gem","classes/Gem.html#method-c-spec_cache_dir","()",""],["spec_git_paths","Bundler::Definition","classes/Bundler/Definition.html#method-i-spec_git_paths","()",""],["spec_names","Bundler::Index","classes/Bundler/Index.html#method-i-spec_names","()",""],["special_prefixes","Readline","classes/Readline.html#method-c-special_prefixes","()","<p>Gets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["special_prefixes=","Readline","classes/Readline.html#method-c-special_prefixes-3D","(p1)","<p>Sets the list of characters that are word break characters, but should be\nleft in text when it is passed …\n"],["specific?","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-specific-3F","()",""],["specific_dependency","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-specific_dependency","(name, version, platform)",""],["specs","Bundler::Definition","classes/Bundler/Definition.html#method-i-specs","()","<p>For given dependency list returns a SpecSet with Gemspec of all the\nrequired dependencies.\n\n<pre><code>1. The method ...\n</code></pre>\n"],["specs","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-specs","(gem_names, source)","<p>return the specs in the bundler format as an index\n"],["specs","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-i-specs","(gem_names)",""],["specs","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-specs","(gem_names, full_dependency_list = [], last_spec_list = [])",""],["specs","Bundler::Fetcher::Index","classes/Bundler/Fetcher/Index.html#method-i-specs","(_gem_names)",""],["specs","Bundler::Gemdeps","classes/Bundler/Gemdeps.html#method-i-specs","()",""],["specs","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-specs","()","<p>Parses the gemspec files to find the specs for the gems that can be\nsatisfied by the source.\n<p>Few important …\n"],["specs","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-specs","(*)",""],["specs","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-specs","()",""],["specs","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-specs","()",""],["specs_for","Bundler::Definition","classes/Bundler/Definition.html#method-i-specs_for","(groups)",""],["specs_for_names","Bundler::Fetcher::CompactIndex","classes/Bundler/Fetcher/CompactIndex.html#method-i-specs_for_names","(gem_names)",""],["specs_path","Bundler","classes/Bundler.html#method-c-specs_path","()",""],["specs_with_retry","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-specs_with_retry","(gem_names, source)","<p>return the specs in the bundler format as an index with retries\n"],["split","BigDecimal","classes/BigDecimal.html#method-i-split","()","<p>Splits a BigDecimal number into four parts, returned as an array of values.\n<p>The first value represents …\n"],["split","File","classes/File.html#method-c-split","(p1)","<p>Splits the given string into a directory and a file component and returns\nthem in a two-element array. …\n"],["split","Pathname","classes/Pathname.html#method-i-split","()","<p>Returns the #dirname and the #basename in an Array.\n<p>See File.split.\n"],["split","Shellwords","classes/Shellwords.html#method-c-split","(line)",""],["split","String","classes/String.html#method-i-split","(p1 = v1, p2 = v2)","<p>Divides <em>str</em> into substrings based on a delimiter, returning an\narray of these substrings.\n<p>If <em>pattern</em> is …\n"],["split","URI","classes/URI.html#method-c-split","(uri)","<p>Synopsis\n\n<pre><code>URI::split(uri)\n</code></pre>\n<p>Args\n"],["split","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-split","(uri)","<p>Returns a split URI against regexp.\n"],["split_header_value","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-c-split_header_value","(str)","<p>Splits a header value <code>str</code> according to HTTP specification.\n"],["sprintf","Kernel","classes/Kernel.html#method-i-sprintf","(*args)","<p>Returns the string resulting from applying <em>format_string</em> to any\nadditional arguments.  Within the format …\n"],["sqr","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-sqr","()",""],["sqrt","BigDecimal","classes/BigDecimal.html#method-i-sqrt","(p1)","<p>Returns the square root of the value.\n<p>Result has at least n significant digits.\n"],["sqrt","BigMath","classes/BigMath.html#method-i-sqrt","(x, prec)","<p>Computes the square root of <code>decimal</code> to the specified number of\ndigits of precision, <code>numeric</code>.\n\n<pre><code>BigMath.sqrt(BigDecimal(&#39;2&#39;), ...</code></pre>\n"],["sqrt","CMath","classes/CMath.html#method-c-sqrt","(z)","<p>Returns the non-negative square root of Complex.\n\n<pre><code>CMath.sqrt(-1 + 0i) #=&gt; 0.0+1.0i\n</code></pre>\n"],["sqrt","Integer","classes/Integer.html#method-c-sqrt","(p1)","<p>Returns the integer square root of the non-negative integer <code>n</code>,\ni.e. the largest non-negative integer …\n"],["sqrt","Math","classes/Math.html#method-c-sqrt","(p1)","<p>Returns the non-negative square root of <code>x</code>.\n<p>Domain: [0, INFINITY)\n<p>Codomain:[0, INFINITY)\n"],["squeeze","String","classes/String.html#method-i-squeeze","(*args)","<p>Builds a set of characters from the <em>other_str</em> parameter(s) using\nthe procedure described for <code>String#count</code> …\n"],["squeeze!","String","classes/String.html#method-i-squeeze-21","(*args)","<p>Squeezes <em>str</em> in place, returning either <em>str</em>, or\n<code>nil</code> if no changes were made.\n"],["srand","Kernel","classes/Kernel.html#method-i-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["srand","Random","classes/Random.html#method-c-srand","(*args)","<p>Seeds the system pseudo-random number generator, Random::DEFAULT, with\n<code>number</code>.  The previous seed value …\n"],["src_type","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-src_type","()","<p>Returns source class when the OLE class is &#39;Alias&#39;.\n\n<pre><code>tobj =  WIN32OLE_TYPE.new(&#39;Microsoft Office ...</code></pre>\n"],["ssl","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ssl","(connection)","<p>Enables SSL on <code>connection</code>\n"],["ssl?","Net::SMTP","classes/Net/SMTP.html#method-i-ssl-3F","()",""],["ssl?","WEBrick::HTTPRequest","classes/WEBrick/HTTPRequest.html#method-i-ssl-3F","()","<p>Is this an SSL request?\n"],["ssl_params","Net::POP3","classes/Net/POP3.html#method-c-ssl_params","()","<p>returns the SSL Parameters\n<p>see also POP3.enable_ssl\n"],["ssl_servername_callback","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-ssl_servername_callback","(sslsocket, hostname = nil)","<p>ServerNameIndication callback\n"],["ssl_servername_callback","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-ssl_servername_callback","(sslsocket, hostname = nil)","<p>ServerNameIndication callback\n"],["ssl_version","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-ssl_version","()","<p>Returns a String representing the SSL/TLS version that was negotiated for\nthe connection, for example …\n"],["ssl_version=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-ssl_version-3D","(ssl_version)","<p>SSL version to use\n"],["ssl_version=","OpenSSL::SSL::SSLContext","classes/OpenSSL/SSL/SSLContext.html#method-i-ssl_version-3D","(meth)","<p>Sets the SSL/TLS protocol version for the context. This forces connections\nto use only the specified …\n"],["stand_alone?","REXML::Document","classes/REXML/Document.html#method-i-stand_alone-3F","()","<p>@return the XMLDecl standalone value of this document as a String. If no\nXMLDecl has been set, returns …\n"],["start","Bundler::CLI","classes/Bundler/CLI.html#method-c-start","(*)",""],["start","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-start","(connection)","<p>Starts the Net::HTTP <code>connection</code>\n"],["start","Bundler::Resolver","classes/Bundler/Resolver.html#method-i-start","(requirements)",""],["start","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-start","(given_args = ARGV, config = {})","<p>Parses the command and options from the given args, instantiate the class\nand invoke the command. This …\n"],["start","Coverage","classes/Coverage.html#method-c-start","(p1 = v1)","<p>Enables coverage measurement.\n"],["start","Date","classes/Date.html#method-i-start","()","<p>Returns the Julian day number denoting the day of calendar reform.\n\n<pre><code>Date.new(2001,2,3).start           ...\n</code></pre>\n"],["start","GC","classes/GC.html#method-c-start","(p1 = {})","<p>Initiates garbage collection, unless manually disabled.\n<p>This method is defined with keyword arguments …\n"],["start","IRB","classes/IRB.html#method-c-start","(ap_path = nil)","<p>Initializes IRB and creates a new Irb.irb object at the\n<code>TOPLEVEL_BINDING</code>\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-i-start","()","<p>Opens a TCP connection and HTTP session.\n<p>When this method is called with a block, it passes the Net::HTTP …\n"],["start","Net::HTTP","classes/Net/HTTP.html#method-c-start","(address, *arg)","<p>Creates a new Net::HTTP object, then additionally opens the TCP connection\nand HTTP session.\n<p>Arguments …\n"],["start","Net::POP3","classes/Net/POP3.html#method-c-start","(address, port = nil, account = nil, password = nil, isapop = false)","<p>Creates a new POP3 object and open the connection.  Equivalent to\n\n<pre><code>Net::POP3.new(address, port, isapop).start(account, ...</code></pre>\n"],["start","Net::POP3","classes/Net/POP3.html#method-i-start","(account, password)","<p>Starts a POP3 session.\n<p>When called with block, gives a POP3 object to the block and closes the\nsession …\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-i-start","(helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Opens a TCP connection and starts the SMTP session.\n<p>Parameters\n<p><code>helo</code> is the <em>HELO</em> <em>domain</em> that you&#39;ll …\n"],["start","Net::SMTP","classes/Net/SMTP.html#method-c-start","(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)","<p>Creates a new Net::SMTP object and connects to the server.\n<p>This method is equivalent to:\n\n<pre><code>Net::SMTP.new(address, ...</code></pre>\n"],["start","Psych::Streaming","classes/Psych/Streaming.html#method-i-start","(encoding = Nodes::Stream::UTF8)","<p>Start streaming using <code>encoding</code>\n"],["start","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-start","(encoding = Nodes::Stream::UTF8)",""],["start","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start","()",""],["start","Thread","classes/Thread.html#method-c-start","(*args)","<p>Basically the same as ::new. However, if class Thread is subclassed, then\ncalling <code>start</code> in that subclass …\n"],["start","WEBrick::CGI","classes/WEBrick/CGI.html#method-i-start","(env=ENV, stdin=$stdin, stdout=$stdout)","<p>Starts the CGI process with the given environment <code>env</code> and\nstandard input and output <code>stdin</code> and <code>stdout</code> …\n"],["start","WEBrick::Daemon","classes/WEBrick/Daemon.html#method-c-start","()","<p>Performs the standard operations for daemonizing a process.  Runs a block,\nif given.\n"],["start","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-start","(&block)","<p>Starts the server and runs the <code>block</code> for each connection. \nThis method does not return until the server …\n"],["start","WEBrick::SimpleServer","classes/WEBrick/SimpleServer.html#method-c-start","()","<p>A SimpleServer only yields when you start it\n"],["startElement","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-startElement","(name, attrs)",""],["start_collecting_tokens","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-start_collecting_tokens","()",""],["start_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-start_doc","()","<p>Enable capture of documentation unless documentation has been turned off by\n:enddoc:\n"],["start_document","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_document","(p1, p2, p3)","<p>Start a document emission with YAML <code>version</code>,\n<code>tags</code>, and an <code>implicit</code> start.\n<p>See Psych::Handler#start_document …\n"],["start_document","Psych::Handler","classes/Psych/Handler.html#method-i-start_document","(version, tag_directives, implicit)","<p>Called when the document starts with the declared <code>version</code>,\n<code>tag_directives</code>, if the document is <code>implicit</code> …\n"],["start_document","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-start_document","(version, tag_directives, implicit)","<p>Handles start_document events with <code>version</code>,\n<code>tag_directives</code>, and <code>implicit</code> styling.\n<p>See Psych::Handler#start_document …\n"],["start_document","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_document","()",""],["start_element","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_element","(uri, localname, qname, attributes)",""],["start_element?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-start_element-3F","()","<p>Content: [ String tag_name, Hash attributes ]\n"],["start_export","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start_export","()",""],["start_import","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-start_import","()",""],["start_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-start_job","(command = nil)","<p>start a job\n"],["start_mapping","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_mapping","(p1, p2, p3, p4)","<p>Start emitting a YAML map with <code>anchor</code>, <code>tag</code>, an\n<code>implicit</code> start and end, and <code>style</code>.\n<p>See Psych::Handler#start_mapping …\n"],["start_mapping","Psych::Handler","classes/Psych/Handler.html#method-i-start_mapping","(anchor, tag, implicit, style)","<p>Called when a map starts.\n<p><code>anchor</code> is the anchor associated with the map or\n<code>nil</code>. <code>tag</code> is the tag associated …\n"],["start_prefix_mapping","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-start_prefix_mapping","(prefix, uri)",""],["start_profile","Profiler__","classes/Profiler__.html#method-i-start_profile","()","<p>Starts the profiler.\n<p>See Profiler__ for more information.\n"],["start_sequence","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_sequence","(p1, p2, p3, p4)","<p>Start emitting a sequence with <code>anchor</code>, a <code>tag</code>,\n<code>implicit</code> sequence start and end, along with\n<code>style</code>.\n<p>See  …\n"],["start_sequence","Psych::Handler","classes/Psych/Handler.html#method-i-start_sequence","(anchor, tag, implicit, style)","<p>Called when a sequence is started.\n<p><code>anchor</code> is the anchor associated with the sequence or nil.\n<code>tag</code> is the …\n"],["start_service","DRb","classes/DRb.html#method-c-start_service","(uri=nil, front=nil, config=nil)","<p>Start a dRuby server locally.\n<p>The new dRuby server will become the primary server, even if another server\n…\n"],["start_stream","Psych::Emitter","classes/Psych/Emitter.html#method-i-start_stream","(p1)","<p>Start a stream emission with <code>encoding</code>\n<p>See Psych::Handler#start_stream\n"],["start_stream","Psych::Handler","classes/Psych/Handler.html#method-i-start_stream","(encoding)","<p>Called with <code>encoding</code> when the YAML stream starts.  This method\nis called once per stream.  A stream may …\n"],["start_stream","Psych::TreeBuilder","classes/Psych/TreeBuilder.html#method-i-start_stream","(encoding)",""],["start_with?","String","classes/String.html#method-i-start_with-3F","(*args)","<p>Returns true if <code>str</code> starts with one of the\n<code>prefixes</code> given. Each of the <code>prefixes</code> should be a\nString or …\n"],["started?","Net::HTTP","classes/Net/HTTP.html#method-i-started-3F","()","<p>Returns true if the HTTP session has been started.\n"],["started?","Net::POP3","classes/Net/POP3.html#method-i-started-3F","()","<p><code>true</code> if the POP3 session has started.\n"],["started?","Net::SMTP","classes/Net/SMTP.html#method-i-started-3F","()","<p><code>true</code> if the SMTP session has been started.\n"],["starts_with","REXML::Functions","classes/REXML/Functions.html#method-c-starts_with","( string, test )","<p>Fixed by Mike Stok\n"],["starttls","Net::IMAP","classes/Net/IMAP.html#method-i-starttls","(options = {}, verify = true)","<p>Sends a STARTTLS command to start TLS session.\n"],["starttls","Net::SMTP","classes/Net/SMTP.html#method-i-starttls","()",""],["starttls?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls-3F","()","<p>Returns truth value if this object uses STARTTLS. If this object always\nuses STARTTLS, returns :always. …\n"],["starttls_always?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_always-3F","()","<p>true if this object uses STARTTLS.\n"],["starttls_auto?","Net::SMTP","classes/Net/SMTP.html#method-i-starttls_auto-3F","()","<p>true if this object uses STARTTLS when server advertises STARTTLS.\n"],["stat","CSV","classes/CSV.html#method-i-stat","(*args)",""],["stat","File","classes/File.html#method-c-stat","(p1)","<p>Returns a <code>File::Stat</code> object for the named file (see\n<code>File::Stat</code>).\n\n<pre><code>File.stat(&quot;testfile&quot;).mtime   #=&gt; Tue ...\n</code></pre>\n"],["stat","GC","classes/GC.html#method-c-stat","(*args)","<p>Returns a Hash containing information about the GC.\n<p>The hash includes information about internal statistics …\n"],["stat","IO","classes/IO.html#method-i-stat","()","<p>Returns status information for <em>ios</em> as an object of type\n<code>File::Stat</code>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\ns = f.stat ...\n</code></pre>\n"],["stat","Pathname","classes/Pathname.html#method-i-stat","()","<p>Returns a File::Stat object.\n<p>See File.stat.\n"],["stat","RubyVM","classes/RubyVM.html#method-c-stat","(*args)","<p>Returns a Hash containing implementation-dependent counters inside the VM.\n<p>This hash includes information …\n"],["stat","TracePoint","classes/TracePoint.html#method-c-stat","()","<p>Returns internal information of TracePoint.\n<p>The contents of the returned value are implementation specific. …\n"],["state","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-state","()","<p>A description of the current connection state. This is for diagnostic\npurposes only.\n"],["state","Ripper","classes/Ripper.html#method-i-state","()","<p>Return scanner state of current token.\n"],["state","Ripper::Filter","classes/Ripper/Filter.html#method-i-state","()","<p>The scanner&#39;s state of the current token. This value is the bitwise OR\nof zero or more of the <code>Ripper::EXPR_*</code> …\n"],["status","Net::FTP","classes/Net/FTP.html#method-i-status","(pathname = nil)","<p>Returns the status (STAT command). pathname - when stat is invoked with\npathname as a parameter it acts …\n"],["status","Net::IMAP","classes/Net/IMAP.html#method-i-status","(mailbox, attr)","<p>Sends a STATUS command, and returns the status of the indicated\n<code>mailbox</code>. <code>attr</code> is a list of one or more …\n"],["status","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-status","()","<p>Returns an Array of statuses for this response.  Each status contains a\nCertificateId, the status (0 …\n"],["status","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-status","()","<p>Returns the status of the response.\n"],["status","PTY::ChildExited","classes/PTY/ChildExited.html#method-i-status","()","<p>Returns the exit status of the child for which PTY#check raised this\nexception\n"],["status","SystemExit","classes/SystemExit.html#method-i-status","()","<p>Return the status value associated with this system exit.\n"],["status","Thread","classes/Thread.html#method-i-status","()","<p>Returns the status of <code>thr</code>.\n<p><code>&quot;sleep&quot;</code> &mdash; Returned if this thread is sleeping or waiting on I/O\n<p><code>&quot;run&quot;</code> … &mdash; "],["status=","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-status-3D","(status)","<p>Sets the response&#39;s status to the <code>status</code> code\n"],["status?","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-status-3F","()","<p>Return <code>true</code> if the PRNG has been seeded with enough data,\n<code>false</code> otherwise.\n"],["status_code","Bundler::BundlerError","classes/Bundler/BundlerError.html#method-c-status_code","(code)",""],["status_code","Bundler::Dsl::DSLError","classes/Bundler/Dsl/DSLError.html#method-i-status_code","()",""],["status_line","WEBrick::HTTPResponse","classes/WEBrick/HTTPResponse.html#method-i-status_line","()","<p>The response&#39;s HTTP status line\n"],["status_string","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-status_string","()","<p>Returns a status string for the response.\n"],["status_type_char","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-status_type_char","()","<p>Takes the first digit of the reply code to determine the status type\n"],["stderr","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-stderr","()",""],["stdout","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-stdout","()",""],["stdout","DEBUGGER__","classes/DEBUGGER__.html#method-c-stdout","()","<p>Returns the IO used as stdout. Defaults to STDOUT\n"],["stdout=","DEBUGGER__","classes/DEBUGGER__.html#method-c-stdout-3D","(s)","<p>Sets the IO used as stdout. Defaults to STDOUT\n"],["step","Date","classes/Date.html#method-i-step","(p1, p2 = v2)","<p>Iterates evaluation of the given block, which takes a date object. The\nlimit should be a date object. …\n"],["step","Enumerator::ArithmeticSequence","classes/Enumerator/ArithmeticSequence.html#method-i-step","()",""],["step","Numeric","classes/Numeric.html#method-i-step","(*args)","<p>Invokes the given block with the sequence of numbers starting at\n<code>num</code>, incremented by <code>step</code> (defaulted …\n"],["step","Range","classes/Range.html#method-i-step","(*args)","\n<pre><code>%</code></pre>\n<p>Iterates over the range, passing each <code>n</code>th element to the\nblock. If begin and end are numeric, <code>n</code> is added …\n"],["sticky?","File","classes/File.html#method-c-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","File::Stat","classes/File/Stat.html#method-i-sticky-3F","()","<p>Returns <code>true</code> if <em>stat</em> has its sticky bit set,\n<code>false</code> if it doesn&#39;t or if the operating system doesn&#39;t\n…\n"],["sticky?","FileTest","classes/FileTest.html#method-i-sticky-3F","(p1)","<p>Returns <code>true</code> if the named file has the sticky bit set.\n<p><em>file_name</em> can be an IO object.\n"],["sticky?","Pathname","classes/Pathname.html#method-i-sticky-3F","()","<p>See FileTest.sticky?.\n"],["stop","Bundler::Worker","classes/Bundler/Worker.html#method-i-stop","()",""],["stop","Thread","classes/Thread.html#method-c-stop","()","<p>Stops execution of the current thread, putting it into a “sleep&#39;&#39;\nstate, and schedules execution …\n"],["stop","WEBrick::GenericServer","classes/WEBrick/GenericServer.html#method-i-stop","()","<p>Stops the server from accepting new connections.\n"],["stop?","Thread","classes/Thread.html#method-i-stop-3F","()","<p>Returns <code>true</code> if <code>thr</code> is dead or sleeping.\n\n<pre><code>a = Thread.new { Thread.stop }\nb = Thread.current\na.stop?   #=&gt; ...\n</code></pre>\n"],["stop_doc","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-stop_doc","()","<p>Disable capture of documentation\n"],["stop_on_unknown_option!","Bundler::Thor","classes/Bundler/Thor.html#method-c-stop_on_unknown_option-21","(*command_names)","<p>Stop parsing of options as soon as an unknown option or a regular argument\nis encountered.  All remaining …\n"],["stop_profile","Profiler__","classes/Profiler__.html#method-i-stop_profile","()","<p>Stops the profiler.\n<p>See Profiler__ for more information.\n"],["stop_service","DRb","classes/DRb.html#method-c-stop_service","()","<p>Stop the local dRuby server.\n<p>This operates on the primary server.  If there is no primary server\ncurrently …\n"],["stop_service","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-stop_service","()","<p>Stop this server.\n"],["stop_service","DRb::ExtServ","classes/DRb/ExtServ.html#method-i-stop_service","()",""],["stopped?","Process::Status","classes/Process/Status.html#method-i-stopped-3F","()","<p>Returns <code>true</code> if this process is stopped. This is only returned\nif the corresponding <code>wait</code> call had the …\n"],["stopsig","Process::Status","classes/Process/Status.html#method-i-stopsig","()","<p>Returns the number of the signal that caused <em>stat</em> to stop (or\n<code>nil</code> if self is not stopped).\n"],["storbinary","Net::FTP","classes/Net/FTP.html#method-i-storbinary","(cmd, file, blocksize, rest_offset = nil)","<p>Puts the connection into binary (image) mode, issues the given server-side\ncommand (such as “STOR …\n"],["store","DBM","classes/DBM.html#method-i-store","(p1, p2)","<p>Stores the specified string value in the database, indexed via the string\nkey provided.\n"],["store","ENV","classes/ENV.html#method-c-store","(p1, p2)","<p>Sets the environment variable <code>name</code> to <code>value</code>.  If\nthe value given is <code>nil</code> the environment variable is deleted. …\n"],["store","GDBM","classes/GDBM.html#method-i-store","(p1, p2)","<p>Associates the value <em>value</em> with the specified <em>key</em>.\n"],["store","Hash","classes/Hash.html#method-i-store","(p1, p2)","<p>Element Assignment\n<p>Associates the value given by <code>value</code> with the key given by\n<code>key</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; ...</code></pre>\n"],["store","Net::IMAP","classes/Net/IMAP.html#method-i-store","(set, attr, flags)","<p>Sends a STORE command to alter data associated with messages in the\nmailbox, in particular their flags. …\n"],["store","SDBM","classes/SDBM.html#method-i-store","(p1, p2)","<p>Stores a new <code>value</code> in the database with the given\n<code>key</code> as an index.\n<p>If the <code>key</code> already exists, this will …\n"],["store","YAML::DBM","classes/YAML/DBM.html#method-i-store","( key, val )","<p>Stores <code>value</code> in database with <code>key</code> as the index.\n<code>value</code> is converted to YAML before being stored.\n<p>Returns …\n"],["store=","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-store-3D","(store)","<p>Sets the store for this method and its referenced code objects.\n"],["store=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-store-3D","(store)","<p>Sets the <code>store</code> that contains this CodeObject\n"],["store=","RDoc::Constant","classes/RDoc/Constant.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::Mixin","classes/RDoc/Mixin.html#method-i-store-3D","(store)","<p>Sets the store for this class or module and its contained code objects.\n"],["store=","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-store-3D","(store)","<p>Sets the current documentation tree to <code>store</code> and sets the\nstore&#39;s rdoc driver to this instance.\n"],["store_for","RDoc::Servlet","classes/RDoc/Servlet.html#method-i-store_for","(source_name)","<p>Returns an RDoc::Store for the given <code>source_name</code>\n(&#39;ruby&#39; or a gem name).\n"],["storlines","Net::FTP","classes/Net/FTP.html#method-i-storlines","(cmd, file)","<p>Puts the connection into ASCII (text) mode, issues the given server-side\ncommand (such as “STOR …\n"],["stream=","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-stream-3D","( source )",""],["stream?","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-stream-3F","()",""],["stream?","Psych::Nodes::Stream","classes/Psych/Nodes/Stream.html#method-i-stream-3F","()",""],["stream_end?","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-stream_end-3F","()","<p>Returns true if the stream is finished.\n"],["streaming?","Psych::Handler","classes/Psych/Handler.html#method-i-streaming-3F","()","<p>Is this handler a streaming handler?\n"],["stress","GC","classes/GC.html#method-c-stress","()","<p>Returns current status of GC stress mode.\n"],["stress=","GC","classes/GC.html#method-c-stress-3D","(p1)","<p>Updates the GC stress mode.\n<p>When stress mode is enabled, the GC is invoked at every GC opportunity: all\n…\n"],["strftime","Date","classes/Date.html#method-i-strftime","(*args)","<p>Formats date according to the directives in the given format string. The\ndirectives begin with a percent …\n"],["strftime","DateTime","classes/DateTime.html#method-i-strftime","(*args)","<p>Formats date according to the directives in the given format string. The\ndirectives begin with a percent …\n"],["strftime","Time","classes/Time.html#method-i-strftime","(p1)","<p>Formats <em>time</em> according to the directives in the given format\nstring.\n<p>The directives begin with a percent …\n"],["strict_args_position!","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-strict_args_position-21","()","<p>If you want only strict string args (useful when cascading thor classes),\ncall strict_args_position! …\n"],["strict_decode64","Base64","classes/Base64.html#method-i-strict_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with RFC 4648. ArgumentError is raised …\n"],["strict_encode64","Base64","classes/Base64.html#method-i-strict_encode64","(bin)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with RFC 4648. No line feeds are added. …\n"],["strike","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-strike","","<p>Enables the strike extension\n"],["string","MatchData","classes/MatchData.html#method-i-string","()","<p>Returns a frozen copy of the string passed in to <code>match</code>.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.string ...\n</code></pre>\n"],["string","REXML::Functions","classes/REXML/Functions.html#method-c-string","( object=nil )","<p>A node-set is converted to a string by returning the string-value of the\nnode in the node-set that is …\n"],["string","StringIO","classes/StringIO.html#method-i-string","()","<p>Returns underlying String object, the subject of IO.\n"],["string","StringScanner","classes/StringScanner.html#method-i-string","()","<p>Returns the string being scanned.\n"],["string=","StringIO","classes/StringIO.html#method-i-string-3D","(p1)","<p>Changes underlying String object, the subject of IO.\n"],["string=","StringScanner","classes/StringScanner.html#method-i-string-3D","(p1)","<p>Changes the string being scanned to <code>str</code> and resets the\nscanner. Returns <code>str</code>.\n"],["string_length","REXML::Functions","classes/REXML/Functions.html#method-c-string_length","( string )","<p>UNTESTED\n"],["string_value","REXML::Functions","classes/REXML/Functions.html#method-c-string_value","( o )","<p>A node-set is converted to a string by returning the concatenation of the\nstring-value of each of the …\n"],["strip","String","classes/String.html#method-i-strip","()","<p>Returns a copy of the receiver with leading and trailing whitespace\nremoved.\n<p>Whitespace is defined as …\n"],["strip!","String","classes/String.html#method-i-strip-21","()","<p>Removes leading and trailing whitespace from the receiver. Returns the\naltered receiver, or <code>nil</code> if there …\n"],["strip_hashes","RDoc::Text","classes/RDoc/Text.html#method-i-strip_hashes","(text)","<p>Strips leading # characters from <code>text</code>\n"],["strip_newlines","RDoc::Text","classes/RDoc/Text.html#method-i-strip_newlines","(text)","<p>Strips leading and trailing n characters from <code>text</code>\n"],["strip_stars","RDoc::Text","classes/RDoc/Text.html#method-i-strip_stars","(text)","<p>Strips       style comments\n"],["strong","RDoc::Markdown","classes/RDoc/Markdown.html#method-i-strong","(text)","<p>Wraps <code>text</code> in strong markup for rdoc inline formatting\n"],["strongly_connected_components","TSort","classes/TSort.html#method-c-strongly_connected_components","(each_node, each_child)","<p>Returns strongly connected components as an array of arrays of nodes. The\narray is sorted from children …\n"],["strongly_connected_components","TSort","classes/TSort.html#method-i-strongly_connected_components","()","<p>Returns strongly connected components as an array of arrays of nodes. The\narray is sorted from children …\n"],["strptime","Date","classes/Date.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a date object. …\n"],["strptime","DateTime","classes/DateTime.html#method-c-strptime","(p1 = v1, p2 = v2, p3 = v3)","<p>Parses the given representation of date and time with the given template,\nand creates a DateTime object. …\n"],["strptime","Time","classes/Time.html#method-c-strptime","(date, format, now=self.now)","<p>Works similar to <code>parse</code> except that instead of using a\nheuristic to detect the format of the input string, …\n"],["struct","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-struct","(signature)","<p>Creates a class to wrap the C struct described by <code>signature</code>.\n\n<pre><code>MyStruct = struct [&#39;int i&#39;, &#39;char c&#39;]\n</code></pre>\n"],["su","WEBrick::Utils","classes/WEBrick/Utils.html#method-c-su","(user)","<p>Changes the process&#39;s uid and gid to the ones of <code>user</code>\n"],["sub","BigDecimal","classes/BigDecimal.html#method-i-sub","(p1, p2)","<p>Subtract the specified value.\n<p>e.g.\n\n<pre><code>c = a.sub(b,n)\n</code></pre>\n"],["sub","Kernel","classes/Kernel.html#method-i-sub","(*args)","<p>Equivalent to <code>$_.sub(<em>args</em>)</code>, except that\n<code>$_</code> will be updated if substitution occurs. Available only when\n…\n"],["sub","Pathname","classes/Pathname.html#method-i-sub","(*args)","<p>Return a pathname which is substituted by String#sub.\n\n<pre><code>path1 = Pathname.new(&#39;/usr/bin/perl&#39;)\npath1.sub(&#39;perl&#39;, ...</code></pre>\n"],["sub","String","classes/String.html#method-i-sub","(*args)","<p>Returns a copy of <code>str</code> with the <em>first</em> occurrence of\n<code>pattern</code> replaced by the second argument. The\n<code>pattern</code> …\n"],["sub!","String","classes/String.html#method-i-sub-21","(*args)","<p>Performs the same substitution as String#sub in-place.\n<p>Returns <code>str</code> if a substitution was performed or …\n"],["sub_dependencies_to_avoid","Bundler::Molinillo::Resolver::Resolution::UnwindDetails","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-sub_dependencies_to_avoid","()","<p>@return [Array] array of sub-dependencies to avoid when choosing a\n\n<pre><code>new possibility for the state we&#39;ve ...</code></pre>\n"],["sub_ext","Pathname","classes/Pathname.html#method-i-sub_ext","(p1)","<p>Return a pathname with <code>repl</code> added as a suffix to the basename.\n<p>If self has no extension part, <code>repl</code> is …\n"],["subclass_files","Bundler::Thor::Base","classes/Bundler/Thor/Base.html#method-c-subclass_files","()","<p>Returns the files where the subclasses are kept.\n<p>Returns\n<p>Hash[path&lt;String&gt; =&gt; Class]\n"],["subclasses","Bundler::Thor::Base","classes/Bundler/Thor/Base.html#method-c-subclasses","()","<p>Returns the classes that inherits from Bundler::Thor or\nBundler::Thor::Group.\n<p>Returns\n<p>Array\n"],["subcommand","Bundler::Thor","classes/Bundler/Thor.html#method-c-subcommand","(subcommand, subcommand_class)",""],["subcommand_classes","Bundler::Thor","classes/Bundler/Thor.html#method-c-subcommand_classes","()",""],["subcommand_help","Bundler::Thor","classes/Bundler/Thor.html#method-c-subcommand_help","(cmd)",""],["subcommands","Bundler::Thor","classes/Bundler/Thor.html#method-c-subcommands","()",""],["subdomain_of?","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-subdomain_of-3F","(other)","<p>Returns true if <code>other</code> is a subdomain.\n<p>Example:\n\n<pre><code>domain = Resolv::DNS::Name.create(&quot;y.z&quot;)\np Resolv::DNS::Name.create(&quot;w.x.y.z&quot;).subdomain_of?(domain) ...\n</code></pre>\n"],["subject","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-subject","()",""],["subject","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-subject","()",""],["subject=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-subject-3D","(p1)",""],["subject=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-subject-3D","(p1)",""],["subject_certificate=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-subject_certificate-3D","(p1)",""],["subject_request=","OpenSSL::X509::ExtensionFactory","classes/OpenSSL/X509/ExtensionFactory.html#method-i-subject_request-3D","(p1)",""],["submit","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-submit","(value = nil, name = nil)","<p>Generate a submit button Input element, as a String.\n<p><code>value</code> is the text to display on the button.  <code>name</code>\n…\n"],["subscribe","Net::IMAP","classes/Net/IMAP.html#method-i-subscribe","(mailbox)","<p>Sends a SUBSCRIBE command to add the specified <code>mailbox</code> name to\nthe server&#39;s set of “active” …\n"],["subsec","Time","classes/Time.html#method-i-subsec","()","<p>Returns the fraction for <em>time</em>.\n<p>The return value can be a rational number.\n\n<pre><code>t = Time.now        #=&gt; 2009-03-26 ...\n</code></pre>\n"],["subset?","Set","classes/Set.html#method-i-subset-3F","(set)","<p>Returns true if the set is a subset of the given set.\n"],["substring","REXML::Functions","classes/REXML/Functions.html#method-c-substring","( string, start, length=nil )","<p>Take equal portions of Mike Stok and Sean Russell; mix vigorously, and pour\ninto a tall, chilled glass. …\n"],["substring_after","REXML::Functions","classes/REXML/Functions.html#method-c-substring_after","( string, test )","<p>Kouhei fixed this too\n"],["substring_before","REXML::Functions","classes/REXML/Functions.html#method-c-substring_before","( string, test )","<p>Kouhei fixed this\n"],["subtask","Bundler::Thor","classes/Bundler/Thor.html#method-c-subtask","(subcommand, subcommand_class)",""],["subtask_help","Bundler::Thor","classes/Bundler/Thor.html#method-c-subtask_help","(cmd)",""],["subtasks","Bundler::Thor","classes/Bundler/Thor.html#method-c-subtasks","()",""],["subtract","Set","classes/Set.html#method-i-subtract","(enum)","<p>Deletes every element that appears in the given enumerable object and\nreturns self.\n"],["succ","Date","classes/Date.html#method-i-succ","()","<p>Returns a date object denoting the following day.\n"],["succ","IPAddr","classes/IPAddr.html#method-i-succ","()","<p>Returns the successor to the ipaddr.\n"],["succ","Integer","classes/Integer.html#method-i-succ","()","<p>Returns the successor of <code>int</code>, i.e. the Integer equal to\n<code>int+1</code>.\n\n<pre><code>1.next      #=&gt; 2\n(-1).next   #=&gt; 0\n1.succ ...\n</code></pre>\n"],["succ","Prime::EratosthenesGenerator","classes/Prime/EratosthenesGenerator.html#method-i-succ","()",""],["succ","Prime::Generator23","classes/Prime/Generator23.html#method-i-succ","()",""],["succ","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-succ","()","<p>returns the next pseudo-prime number, and move the internal position\nforward.\n<p><code>PseudoPrimeGenerator</code>#succ …\n"],["succ","Prime::TrialDivisionGenerator","classes/Prime/TrialDivisionGenerator.html#method-i-succ","()",""],["succ","String","classes/String.html#method-i-succ","()","<p>Returns the successor to <em>str</em>. The successor is calculated by\nincrementing characters starting from the …\n"],["succ","Symbol","classes/Symbol.html#method-i-succ","()","<p>Same as <code>sym.to_s.succ.intern</code>.\n"],["succ","Time","classes/Time.html#method-i-succ","()","<p>Returns a new Time object, one second later than <em>time</em>. Time#succ\nis obsolete since 1.9.2 for time is …\n"],["succ!","String","classes/String.html#method-i-succ-21","()","<p>Equivalent to <code>String#succ</code>, but modifies the receiver in place.\n"],["success?","Net::SMTP::Response","classes/Net/SMTP/Response.html#method-i-success-3F","()","<p>Determines whether the response received was a Positive Completion reply\n(2xx reply code)\n"],["success?","Process::Status","classes/Process/Status.html#method-i-success-3F","()","<p>Returns <code>true</code> if <em>stat</em> is successful,\n<code>false</code> if not. Returns <code>nil</code> if <code>exited?</code>\nis not <code>true</code>.\n"],["success?","SystemExit","classes/SystemExit.html#method-i-success-3F","()","<p>Returns <code>true</code> if exiting successful, <code>false</code> if not.\n"],["success?","WEBrick::HTTPStatus","classes/WEBrick/HTTPStatus.html#method-c-success-3F","(code)","<p>Is <code>code</code> a successful status?\n"],["successors","Bundler::Molinillo::DependencyGraph::Vertex","classes/Bundler/Molinillo/DependencyGraph/Vertex.html#method-i-successors","()","<p>@return [Array&lt;Vertex&gt;] the vertices of {#graph} that have an edge\nwith\n\n<pre><code>`self` as their {Edge#origin}</code></pre>\n"],["sudo","Bundler","classes/Bundler.html#method-c-sudo","(str)",""],["suffix_pattern","Gem","classes/Gem.html#method-c-suffix_pattern","()","<p>Glob pattern for require-able path suffixes.\n"],["suffixes","Gem","classes/Gem.html#method-c-suffixes","()","<p>Suffixes for require-able paths.\n"],["sum","Array","classes/Array.html#method-i-sum","(*args)","<p>Returns the sum of elements. For example, [e1, e2, e3].sum returns init +\ne1 + e2 + e3.\n<p>If a block is …\n"],["sum","Enumerable","classes/Enumerable.html#method-i-sum","(*args)","<p>Returns the sum of elements in an Enumerable.\n<p>If a block is given, the block is applied to each element …\n"],["sum","REXML::Functions","classes/REXML/Functions.html#method-c-sum","( nodes )",""],["sum","String","classes/String.html#method-i-sum","(*args)","<p>Returns a basic <em>n</em>-bit checksum of the characters in <em>str</em>,\nwhere <em>n</em> is the optional <code>Integer</code> parameter, defaulting\n…\n"],["summarize","OptionParser","classes/OptionParser.html#method-i-summarize","(to = [], width = @summary_width, max = width - 1, indent = @summary_indent, &blk)","<p>Puts option summary into <code>to</code> and returns <code>to</code>.\nYields each line if a block is given.\n<p><code>to</code> &mdash; Output destination, …\n"],["summarize","OptionParser::List","classes/OptionParser/List.html#method-i-summarize","(*args, &block)","<p>Creates the summary table, passing each line to the <code>block</code>\n(without newline). The arguments <code>args</code> are passed …\n"],["summarize","OptionParser::Switch","classes/OptionParser/Switch.html#method-i-summarize","(sdone = [], ldone = [], width = 1, max = width - 1, indent = \"\")","<p>Produces the summary text. Each line of the summary is yielded to the block\n(without newline).\n<p><code>sdone</code> &mdash; "],["summary","RDoc::Stats","classes/RDoc/Stats.html#method-i-summary","()","<p>Returns a summary of the collected statistics.\n"],["sunday?","Date","classes/Date.html#method-i-sunday-3F","()","<p>Returns true if the date is Sunday.\n"],["sunday?","Time","classes/Time.html#method-i-sunday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Sunday.\n\n<pre><code>t = Time.local(1990, 4, 1)       #=&gt; 1990-04-01 00:00:00 -0600 ...\n</code></pre>\n"],["super_each","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-super_each","(rs = nil)",""],["super_method","Method","classes/Method.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["super_method","UnboundMethod","classes/UnboundMethod.html#method-i-super_method","()","<p>Returns a Method of superclass which would be called when super is used or\nnil if there is no method …\n"],["superclass","Class","classes/Class.html#method-i-superclass","()","<p>Returns the superclass of <em>class</em>, or <code>nil</code>.\n\n<pre><code>File.superclass          #=&gt; IO\nIO.superclass            #=&gt; ...\n</code></pre>\n"],["superclass","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass","()","<p>Get the superclass of this class.  Attempts to retrieve the superclass\nobject, returns the name if it …\n"],["superclass","RDoc::NormalModule","classes/RDoc/NormalModule.html#method-i-superclass","()","<p>Modules don&#39;t have one, raises NoMethodError\n"],["superclass=","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-superclass-3D","(superclass)","<p>Set the superclass of this class to <code>superclass</code>\n"],["superclass_method","RDoc::AnyMethod","classes/RDoc/AnyMethod.html#method-i-superclass_method","()","<p>For methods that <code>super</code>, find the superclass method that would\nbe called.\n"],["superset?","Set","classes/Set.html#method-i-superset-3F","(set)","<p>Returns true if the set is a superset of the given set.\n"],["supported?","RSS::Maker","classes/RSS/Maker.html#method-c-supported-3F","(version)","<p>Returns true if the version is supported\n"],["suppress","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-suppress","()","<p>Use this to suppress a CodeObject and all its children until the next file\nit is seen in or documentation …\n"],["suppressed?","RDoc::CodeObject","classes/RDoc/CodeObject.html#method-i-suppressed-3F","()","<p>Has this class been suppressed?\n<p>See also #suppress\n"],["suspend","DEBUGGER__","classes/DEBUGGER__.html#method-c-suspend","()",""],["suspend_context","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_context","(context)","<p>Evaluates the given block using the given <code>context</code> as the\nContext.\n"],["suspend_input_method","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_input_method","(input_method)","<p>Evaluates the given block using the given <code>input_method</code> as the\nContext#io.\n<p>Used by the irb commands <code>source</code> …\n"],["suspend_name","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_name","(path = nil, name = nil)","<p>Evaluates the given block using the given <code>path</code> as the\nContext#irb_path and <code>name</code> as the Context#irb_name …\n"],["suspend_workspace","IRB::Irb","classes/IRB/Irb.html#method-i-suspend_workspace","(workspace)","<p>Evaluates the given block using the given <code>workspace</code> as the\nContext#workspace.\n<p>Used by the irb command …\n"],["swapcase","String","classes/String.html#method-i-swapcase","(*args)","<p>Returns a copy of <em>str</em> with uppercase alphabetic characters\nconverted to lowercase and lowercase characters …\n"],["swapcase","Symbol","classes/Symbol.html#method-i-swapcase","(*args)","<p>Same as <code>sym.to_s.swapcase.intern</code>.\n"],["swapcase!","String","classes/String.html#method-i-swapcase-21","(*args)","<p>Equivalent to <code>String#swapcase</code>, but modifies the receiver in\nplace, returning <em>str</em>, or <code>nil</code> if no changes …\n"],["switch","IRB::JobManager","classes/IRB/JobManager.html#method-i-switch","(key)","<p>Changes the current active irb session to the given <code>key</code> in the\njobs Array.\n<p>Raises an IrbAlreadyDead exception …\n"],["switch","Process::GID","classes/Process/GID.html#method-c-switch","()","<p>Switch the effective and real group IDs of the current process. If a\n<em>block</em> is given, the group IDs will …\n"],["switch","Process::UID","classes/Process/UID.html#method-c-switch","()","<p>Switch the effective and real user IDs of the current process. If a\n<em>block</em> is given, the user IDs will …\n"],["switch_name","OptionParser::Switch","classes/OptionParser/Switch.html#method-i-switch_name","()","<p>Main name of the switch.\n"],["sym","Fiddle::CompositeHandler","classes/Fiddle/CompositeHandler.html#method-i-sym","(symbol)","<p>Returns the address as an Integer from any handlers with the function named\n<code>symbol</code>.\n<p>Raises a DLError if …\n"],["sym","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["sym","Fiddle::Handle","classes/Fiddle/Handle.html#method-c-sym","(p1)","<p>Get the address as an Integer for the function named <code>name</code>.\n"],["symbolize","Psych::ClassLoader::Restricted","classes/Psych/ClassLoader/Restricted.html#method-i-symbolize","(sym)",""],["symlink","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-symlink","(src, dest, force: nil, noop: nil, verbose: nil)",""],["symlink","File","classes/File.html#method-c-symlink","(p1, p2)","<p>Creates a symbolic link called <em>new_name</em> for the existing file\n<em>old_name</em>. Raises a <code>NotImplemented</code> exception …\n"],["symlink","FileUtils","classes/FileUtils.html#method-c-symlink","(src, dest, force: nil, noop: nil, verbose: nil)",""],["symlink?","File","classes/File.html#method-c-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","File::Stat","classes/File/Stat.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a symbolic link,\n<code>false</code> if it isn&#39;t or if the operating system doesn&#39;t …\n"],["symlink?","FileTest","classes/FileTest.html#method-i-symlink-3F","(p1)","<p>Returns <code>true</code> if the named file is a symbolic link.\n"],["symlink?","Pathname","classes/Pathname.html#method-i-symlink-3F","()","<p>See FileTest.symlink?.\n"],["sync","GDBM","classes/GDBM.html#method-i-sync","()","<p>Unless the <em>gdbm</em> object has been opened with the\n<strong>SYNC</strong> flag, it is not guaranteed that database modification\n…\n"],["sync","IO","classes/IO.html#method-i-sync","()","<p>Returns the current “sync mode&#39;&#39; of <em>ios</em>. When sync mode is\ntrue, all output is immediately flushed …\n"],["sync","StringIO","classes/StringIO.html#method-i-sync","()","<p>Returns <code>true</code> always.\n"],["sync","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-sync","()","<p>Same as IO#sync\n"],["sync","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-sync","(p1)","<p>Inputs <code>string</code> into the end of input buffer and skips data\nuntil a full flush point can be found.  If …\n"],["sync=","IO","classes/IO.html#method-i-sync-3D","(p1)","<p>Sets the “sync mode&#39;&#39; to <code>true</code> or <code>false</code>.\nWhen sync mode is true, all output is immediately flushed …\n"],["sync=","StringIO","classes/StringIO.html#method-i-sync-3D","(p1)","<p>Returns the argument unchanged.  Just for compatibility to IO.\n"],["sync=","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-sync-3D","(p1)","<p>Same as IO.  If flag is <code>true</code>, the associated IO object must\nrespond to the <code>flush</code> method.  While <code>sync</code> …\n"],["sync_exclusive?","Sync_m","classes/Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_exclusive?","Sync_m","classes/Sync_m.html#method-i-sync_exclusive-3F","()",""],["sync_extend","Sync_m","classes/Sync_m.html#method-i-sync_extend","()",""],["sync_extend","Sync_m","classes/Sync_m.html#method-i-sync_extend","()",""],["sync_inspect","Sync_m","classes/Sync_m.html#method-i-sync_inspect","()",""],["sync_inspect","Sync_m","classes/Sync_m.html#method-i-sync_inspect","()",""],["sync_keys!","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-sync_keys-21","()",""],["sync_lock","Sync_m","classes/Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_lock","Sync_m","classes/Sync_m.html#method-i-sync_lock","(m = EX)",""],["sync_locked?","Sync_m","classes/Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_locked?","Sync_m","classes/Sync_m.html#method-i-sync_locked-3F","()","<p>accessing\n"],["sync_point?","Zlib::Inflate","classes/Zlib/Inflate.html#method-i-sync_point-3F","()","<p>Quoted verbatim from original documentation:\n\n<pre><code>What is this?\n</code></pre>\n<p><code>:)</code>\n"],["sync_shared?","Sync_m","classes/Sync_m.html#method-i-sync_shared-3F","()",""],["sync_shared?","Sync_m","classes/Sync_m.html#method-i-sync_shared-3F","()",""],["sync_synchronize","Sync_m","classes/Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_synchronize","Sync_m","classes/Sync_m.html#method-i-sync_synchronize","(mode = EX)",""],["sync_try_lock","Sync_m","classes/Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_try_lock","Sync_m","classes/Sync_m.html#method-i-sync_try_lock","(mode = EX)","<p>locking methods.\n"],["sync_unlock","Sync_m","classes/Sync_m.html#method-i-sync_unlock","(m = EX)",""],["sync_unlock","Sync_m","classes/Sync_m.html#method-i-sync_unlock","(m = EX)",""],["synchronize","MonitorMixin","classes/MonitorMixin.html#method-i-synchronize","()",""],["synchronize","Mutex","classes/Mutex.html#method-i-synchronize","()","<p>Obtains a lock, runs the block, and releases the lock when the block\ncompletes.  See the example under …\n"],["syncmode=","GDBM","classes/GDBM.html#method-i-syncmode-3D","(p1)","<p>Turns the database&#39;s synchronization mode on or off. If the\nsynchronization mode is turned on, the …\n"],["sysaccept","Socket","classes/Socket.html#method-i-sysaccept","()","<p>Accepts an incoming connection returning an array containing the (integer)\nfile descriptor for the incoming …\n"],["sysaccept","TCPServer","classes/TCPServer.html#method-i-sysaccept","()","<p>Returns a file descriptor of a accepted connection.\n\n<pre><code>TCPServer.open(&quot;127.0.0.1&quot;, 28561) {|serv|\n  fd = ...</code></pre>\n"],["sysaccept","UNIXServer","classes/UNIXServer.html#method-i-sysaccept","()","<p>Accepts a new connection. It returns the new file descriptor which is an\ninteger.\n\n<pre><code>UNIXServer.open(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["syscall","Kernel","classes/Kernel.html#method-i-syscall","(*args)","<p>Calls the operating system function identified by <em>num</em> and returns\nthe result of the function or raises …\n"],["sysclose","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-sysclose","()","<p>Sends “close notify” to the peer and tries to shut down the SSL connection\ngracefully.\n<p>If sync_close …\n"],["sysconf","Etc","classes/Etc.html#method-c-sysconf","(p1)","<p>Returns system configuration variable using sysconf().\n<p><em>name</em> should be a constant under <code>Etc</code> which begins …\n"],["sysconfdir","Etc","classes/Etc.html#method-c-sysconfdir","()","<p>Returns system configuration directory.\n<p>This is typically “/etc”, but is modified by the prefix …\n"],["syslog","Syslog::Logger","classes/Syslog/Logger.html#method-c-syslog","()","<p>Returns the internal Syslog object that is initialized when the first\ninstance is created.\n"],["syslog=","Syslog::Logger","classes/Syslog/Logger.html#method-c-syslog-3D","(syslog)","<p>Specifies the internal Syslog object to be used.\n"],["sysopen","IO","classes/IO.html#method-c-sysopen","(p1, p2 = v2, p3 = v3)","<p>Opens the given path, returning the underlying file descriptor as a\n<code>Integer</code>.\n\n<pre><code>IO.sysopen(&quot;testfile&quot;)   ...\n</code></pre>\n"],["sysopen","Pathname","classes/Pathname.html#method-i-sysopen","(p1 = v1, p2 = v2)","<p>See IO.sysopen.\n"],["sysread","IO","classes/IO.html#method-i-sysread","(p1, p2 = v2)","<p>Reads <em>maxlen</em> bytes from <em>ios</em> using a low-level read and\nreturns them as a string.  Do not mix with other …\n"],["sysread","IO::generic_readable","classes/IO/generic_readable.html#method-i-sysread","(*args)","<p>Similar to #read, but raises <code>EOFError</code> at end of string instead\nof returning <code>nil</code>, as well as IO#sysread …\n"],["sysread","Object","classes/Object.html#method-i-sysread","(io, size)","<p>frozen_string_literal: false\n<p>cgi_runner.rb – CGI launcher.\n<p>Author: IPR – Internet Programming with Ruby …\n"],["sysread","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-sysread","(*args)","<p>Reads <em>length</em> bytes from the SSL connection.  If a pre-allocated\n<em>buffer</em> is provided the data will be written …\n"],["sysseek","IO","classes/IO.html#method-i-sysseek","(p1, p2 = v2)","<p>Seeks to a given <em>offset</em> in the stream according to the value of\n<em>whence</em> (see <code>IO#seek</code> for values of <em>whence</em> …\n"],["syssign","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-syssign","(p1)","<p>Computes and returns the DSA signature of <em>string</em>, where\n<em>string</em> is expected to be an already-computed …\n"],["system","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-c-system","()",""],["system","Kernel","classes/Kernel.html#method-i-system","(*args)","<p>Executes <em>command…</em> in a subshell. <em>command…</em> is one of\nfollowing forms.\n\n<pre><code>commandline                 : ...</code></pre>\n"],["system","Net::FTP","classes/Net/FTP.html#method-i-system","()","<p>Returns system information.\n"],["system","REXML::DocType","classes/REXML/DocType.html#method-i-system","()","<p>This method retrieves the system identifier identifying the document&#39;s\nDTD\n<p>Method contributed by  …\n"],["system","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-system","(command, *opts)","<p>Executes the given <code>command</code> with the <code>options</code>\nparameter.\n<p>Example:\n\n<pre><code>print sh.system(&quot;ls&quot;, &quot;-l&quot;)\nsh.system(&quot;ls&quot;, ...</code></pre>\n"],["system_bindir","Bundler","classes/Bundler.html#method-c-system_bindir","()",""],["system_path=","Shell","classes/Shell.html#method-i-system_path-3D","(path)","<p>Sets the system path (the Shell instance&#39;s PATH environment variable).\n<p><code>path</code> should be an array of …\n"],["systmpdir","Etc","classes/Etc.html#method-c-systmpdir","()","<p>Returns system temporary directory; typically “/tmp”.\n"],["sysverify","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-sysverify","(p1, p2)","<p>Verifies whether the signature is valid given the message digest input. It\ndoes so by validating <em>sig</em> …\n"],["syswrite","IO","classes/IO.html#method-i-syswrite","(p1)","<p>Writes the given string to <em>ios</em> using a low-level write. Returns\nthe number of bytes written. Do not mix …\n"],["syswrite","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-syswrite","(p1)","<p>Writes <em>string</em> to the SSL connection.\n"],["table","CSV","classes/CSV.html#method-c-table","(path, **options)","<p>A shortcut for:\n\n<pre><code>CSV.read( path, { headers:           true,\n                  converters:        :numeric, ...</code></pre>\n"],["tag","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-tag","(tag)","<p>Tags the current state of the dependency as the given tag @param  [Object]\ntag an opaque tag for the …\n"],["tag","Bundler::Molinillo::DependencyGraph::Log","classes/Bundler/Molinillo/DependencyGraph/Log.html#method-i-tag","(graph, tag)","<p>@macro action\n"],["tag","UncaughtThrowError","classes/UncaughtThrowError.html#method-i-tag","()","<p>Return the tag object which was called for.\n"],["tag_end","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-tag_end","(name)","<p>Called when the end tag is reached.  In the case of &lt;tag/&gt;, tag_end\nwill be called immediately …\n"],["tag_end","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-tag_end","(name)",""],["tag_name","RSS::Element","classes/RSS/Element.html#method-i-tag_name","()",""],["tag_name","RSS::Element","classes/RSS/Element.html#method-c-tag_name","()",""],["tag_start","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-tag_start","(name, attrs)","<p>Called when a tag is encountered. @p name the tag name @p attrs an array of\narrays of attribute/value …\n"],["tag_start","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-tag_start","(name, attributes)",""],["tag_version","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-tag_version","()",""],["taint","Delegator","classes/Delegator.html#method-i-taint","","<p>Taint both the object returned by _<em>getobj</em>_ and self.\n"],["taint","Object","classes/Object.html#method-i-taint","()","<p>Mark the object as tainted.\n<p>Objects that are marked as tainted will be restricted from various built-in\n…\n"],["taint","Pathname","classes/Pathname.html#method-i-taint","()","<p>Taints this Pathname.\n<p>See Object.taint.\n"],["tainted?","Object","classes/Object.html#method-i-tainted-3F","()","<p>Returns true if the object is tainted.\n<p>See #taint for more information.\n"],["take","Array","classes/Array.html#method-i-take","(p1)","<p>Returns first <code>n</code> elements from the array.\n<p>If a negative number is given, raises an ArgumentError.\n<p>See also …\n"],["take","Enumerable","classes/Enumerable.html#method-i-take","(p1)","<p>Returns first n elements from <em>enum</em>.\n\n<pre><code>a = [1, 2, 3, 4, 5, 0]\na.take(3)             #=&gt; [1, 2, 3]\na.take(30) ...\n</code></pre>\n"],["take","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-take","(p1)",""],["take","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-take","(tuple, sec=nil, &block)","<p>Removes <code>tuple</code>\n"],["take","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-take","(tuple, sec=nil, &block)","<p>Takes <code>tuple</code> from the proxied TupleSpace.  See TupleSpace#take.\n"],["take_while","Array","classes/Array.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerable","classes/Enumerable.html#method-i-take_while","()","<p>Passes elements to the block until the block returns <code>nil</code> or\n<code>false</code>, then stops iterating and returns an …\n"],["take_while","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-take_while","()",""],["tan","CMath","classes/CMath.html#method-c-tan","(z)","<p>Returns the tangent of <code>z</code>, where <code>z</code> is given in\nradians\n\n<pre><code>CMath.tan(1 + 1i) #=&gt; (0.27175258531951174+1.0839233273386943i)\n</code></pre>\n"],["tan","Math","classes/Math.html#method-c-tan","(p1)","<p>Computes the tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-INFINITY,  …\n"],["tanh","CMath","classes/CMath.html#method-c-tanh","(z)","<p>Returns the hyperbolic tangent of <code>z</code>, where <code>z</code> is\ngiven in radians\n\n<pre><code>CMath.tanh(1 + 1i) #=&gt; (1.0839233273386943+0.27175258531951174i)\n</code></pre>\n"],["tanh","Math","classes/Math.html#method-c-tanh","(p1)","<p>Computes the hyperbolic tangent of <code>x</code> (expressed in radians).\n<p>Domain: (-INFINITY, INFINITY)\n<p>Codomain: (-1, …\n"],["tap","Object","classes/Object.html#method-i-tap","()","<p>Yields self to the block, and then returns self. The primary purpose of\nthis method is to “tap into” …\n"],["task","Object","classes/Object.html#method-i-task","(*)",""],["task_help","Bundler::Thor","classes/Bundler/Thor.html#method-c-task_help","(shell, command_name)",""],["tasks","Bundler::Thor::Base::ClassMethods","classes/Bundler/Thor/Base/ClassMethods.html#method-i-tasks","()",""],["tcp","Addrinfo","classes/Addrinfo.html#method-c-tcp","(p1, p2)","<p>returns an addrinfo object for TCP address.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, &quot;smtp&quot;) #=&gt; #&lt;Addrinfo: 127.0.0.1:25 ...\n</code></pre>\n"],["tcp","Socket","classes/Socket.html#method-c-tcp","(host, port, local_host = nil, local_port = nil, connect_timeout: nil)","<p>creates a new socket object connected to host:port using TCP/IP.\n<p>If local_host:local_port is given, the …\n"],["tcp_server_loop","Socket","classes/Socket.html#method-c-tcp_server_loop","(host=nil, port)","<p>creates a TCP/IP server on <em>port</em> and calls the block for each\nconnection accepted. The block is called …\n"],["tcp_server_sockets","Socket","classes/Socket.html#method-c-tcp_server_sockets","(host=nil, port)","<p>creates TCP/IP server sockets for <em>host</em> and <em>port</em>.\n<em>host</em> is optional.\n<p>If no block given, it returns an array …\n"],["tee","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-tee","(file)","<p>Returns a Tee filter object, with the given <code>file</code> command\n"],["tell","ARGF","classes/ARGF.html#method-i-tell","()","<p>Returns the current offset (in bytes) of the current file in\n<code>ARGF</code>.\n\n<pre><code>ARGF.pos    #=&gt; 0\nARGF.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["tell","Dir","classes/Dir.html#method-i-tell","()","<p>Returns the current position in <em>dir</em>. See also\n<code>Dir#seek</code>.\n\n<pre><code>d = Dir.new(&quot;testdir&quot;)\nd.tell   #=&gt; 0\nd.read  ...\n</code></pre>\n"],["tell","IO","classes/IO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <em>ios</em>.\n\n<pre><code>f = File.new(&quot;testfile&quot;)\nf.pos    #=&gt; 0\nf.gets   #=&gt; &quot;This ...\n</code></pre>\n"],["tell","StringIO","classes/StringIO.html#method-i-tell","()","<p>Returns the current offset (in bytes) of <strong>strio</strong>.\n"],["tell","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-tell","()","<p>Total number of output bytes output so far.\n"],["tell","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-tell","()","<p>Total number of input bytes read so far.\n"],["template","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-template","(source, *args, &block)","<p>Gets an ERB template at the relative source, executes it and makes a copy\nat the relative destination. …\n"],["template_dir_for","RDoc::Options","classes/RDoc/Options.html#method-i-template_dir_for","(template)","<p>Finds the template dir for <code>template</code>\n"],["temporary","Bundler::Settings","classes/Bundler/Settings.html#method-i-temporary","(update)",""],["terminal_width","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-terminal_width","()","<p>This code was copied from Rake, available under MIT-LICENSE Copyright ©\n2003, 2004 Jim Weirich\n"],["terminate","GetoptLong","classes/GetoptLong.html#method-i-terminate","()","<p>Explicitly terminate option processing.\n"],["terminate","OptionParser","classes/OptionParser.html#method-c-terminate","(arg = nil)",""],["terminate","OptionParser","classes/OptionParser.html#method-i-terminate","(arg = nil)","<p>Terminates option parsing. Optional parameter <code>arg</code> is a string\npushed back to be the first non-option …\n"],["terminate","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-terminate","()",""],["terminate","StringScanner","classes/StringScanner.html#method-i-terminate","()","<p>Set the scan pointer to the end of the string and clear matching data.\n"],["terminate","Thread","classes/Thread.html#method-i-terminate","()","<p>Terminates <code>thr</code> and schedules another thread to be run.\n<p>If this thread is already marked to be killed, …\n"],["terminate","WEBrick","classes/WEBrick.html#method-i-terminate","()",""],["terminate","WEBrick::Utils::TimeoutHandler","classes/WEBrick/Utils/TimeoutHandler.html#method-c-terminate","()",""],["terminate_job","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-terminate_job","(command)","<p>terminate a job\n"],["terminated?","GetoptLong","classes/GetoptLong.html#method-i-terminated-3F","()","<p>Returns true if option processing has terminated, false otherwise.\n"],["termsig","Process::Status","classes/Process/Status.html#method-i-termsig","()","<p>Returns the number of the signal that caused <em>stat</em> to terminate (or\n<code>nil</code> if self was not terminated by …\n"],["test","Kernel","classes/Kernel.html#method-i-test","(*args)","<p>Uses the character <code>cmd</code> to perform various tests on\n<code>file1</code> (first table below) or on <code>file1</code> and\n<code>file2</code> (second …\n"],["test","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-test","(command, file1, file2=nil)","<p>Tests if the given <code>command</code> exists in <code>file1</code>, or\noptionally <code>file2</code>.\n<p>Example:\n\n<pre><code>sh[?e, &quot;foo&quot;]\nsh[:e, &quot;foo&quot;]\nsh[&quot;e&quot;, ...</code></pre>\n"],["test_all","Date","classes/Date.html#method-c-test_all","()",""],["test_civil","Date","classes/Date.html#method-c-test_civil","()",""],["test_commercial","Date","classes/Date.html#method-c-test_commercial","()",""],["test_nth_kday","Date","classes/Date.html#method-c-test_nth_kday","()",""],["test_ordinal","Date","classes/Date.html#method-c-test_ordinal","()",""],["test_unit_conv","Date","classes/Date.html#method-c-test_unit_conv","()",""],["test_weeknum","Date","classes/Date.html#method-c-test_weeknum","()",""],["text","PrettyPrint","classes/PrettyPrint.html#method-i-text","(obj, width=obj.length)","<p>This adds <code>obj</code> as a text of <code>width</code> columns in\nwidth.\n<p>If <code>width</code> is not specified, obj.length is used.\n"],["text","PrettyPrint::SingleLine","classes/PrettyPrint/SingleLine.html#method-i-text","(obj, width=nil)","<p>Add <code>obj</code> to the text to be output.\n<p><code>width</code> argument is here for compatibility. It is a noop\nargument.\n"],["text","REXML::Element","classes/REXML/Element.html#method-i-text","( path = nil )","<p>A convenience method which returns the String value of the <em>first</em>\nchild text element, if one exists, and …\n"],["text","REXML::Functions","classes/REXML/Functions.html#method-c-text","( )",""],["text","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-text","(text)","<p>Called when text is encountered in the document @p text the text content.\n"],["text","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-text","(data)",""],["text=","RDoc::Comment","classes/RDoc/Comment.html#method-i-text-3D","(text)","<p>Replaces this comment&#39;s text with <code>text</code> and resets the\nparsed document.\n<p>An error is raised if the comment …\n"],["text=","REXML::Element","classes/REXML/Element.html#method-i-text-3D","( text )","<p>Sets the first Text child of this object.  See text() for a discussion\nabout Text children.\n<p>If a Text …\n"],["text=","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-text-3D","( foo )",""],["text?","RDoc::TopLevel","classes/RDoc/TopLevel.html#method-i-text-3F","()","<p>Is this TopLevel from a text file instead of a source code file?\n"],["text?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-text-3F","()","<p>Content: [ String raw_text, String unnormalized_text ]\n"],["text_field","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-text_field","(name = \"\", value = nil, size = 40, maxlength = nil)","<p>Generate a text field Input element, as a String.\n<p><code>name</code> is the name of the input field.  <code>value</code> is\nits initial …\n"],["textarea","CGI::HtmlExtension","classes/CGI/HtmlExtension.html#method-i-textarea","(name = \"\", cols = 70, rows = 10)","<p>Generate a TextArea element, as a String.\n<p><code>name</code> is the name of the textarea.  <code>cols</code> is the\nnumber of columns …\n"],["textinput","RSS::Rss","classes/RSS/Rss.html#method-i-textinput","()",""],["texts","REXML::Element","classes/REXML/Element.html#method-i-texts","()","<p>Get an array of all Text children. IMMUTABLE\n"],["then","Object","classes/Object.html#method-i-then","()","<p>Yields self to the block and returns the result of the block.\n\n<pre><code>3.next.then {|x| x**x }.to_s            ...\n</code></pre>\n"],["this_update","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-this_update","()",""],["thor","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-thor","(command, *args)","<p>Run a thor command. A hash of options can be given and it&#39;s converted\nto switches.\n<p>Parameters\n<p>command&lt;String&gt; … &mdash; "],["thor_classes_in","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-thor_classes_in","(klass)","<p>Returns the thor classes declared inside the given class.\n"],["thor_root","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-thor_root","()","<p>Returns the root where thor files are located, depending on the OS.\n"],["thor_root_glob","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-thor_root_glob","()","<p>Returns the files in the thor root. On Windows thor_root will be something\nlike this:\n\n<pre><code>C:\\Documents and ...</code></pre>\n"],["thread","DRb","classes/DRb.html#method-c-thread","()","<p>Get the thread of the primary server.\n<p>This returns nil if there is no primary server.  See #primary_server …\n"],["thread","IRB::JobManager","classes/IRB/JobManager.html#method-i-thread","(key)","<p>Returns the thread for the given <code>key</code> object, see #search for\nmore information.\n"],["thread","Net::IMAP","classes/Net/IMAP.html#method-i-thread","(algorithm, search_keys, charset)","<p>Similar to #search(), but returns message sequence numbers in threaded\nformat, as a Net::IMAP::ThreadMember …\n"],["thread_list","DEBUGGER__","classes/DEBUGGER__.html#method-c-thread_list","(num)",""],["thread_list_all","DEBUGGER__","classes/DEBUGGER__.html#method-c-thread_list_all","()","<p>Prints all threads in @thread_list to @stdout. Returns a sorted array of\nvalues from the @thread_list …\n"],["thread_variable?","Thread","classes/Thread.html#method-i-thread_variable-3F","(p1)","<p>Returns <code>true</code> if the given string (or symbol) exists as a\nthread-local variable.\n\n<pre><code>me = Thread.current\nme.thread_variable_set(:oliver, ...</code></pre>\n"],["thread_variable_get","Thread","classes/Thread.html#method-i-thread_variable_get","(p1)","<p>Returns the value of a thread local variable that has been set.  Note that\nthese are different than fiber …\n"],["thread_variable_set","Thread","classes/Thread.html#method-i-thread_variable_set","(p1, p2)","<p>Sets a thread local with <code>key</code> to <code>value</code>.  Note that\nthese are local to threads, and not to fibers.  Please …\n"],["thread_variables","Thread","classes/Thread.html#method-i-thread_variables","()","<p>Returns an array of the names of the thread-local variables (as Symbols).\n\n<pre><code>thr = Thread.new do\n  Thread.current.thread_variable_set(:cat, ...</code></pre>\n"],["throw","Kernel","classes/Kernel.html#method-i-throw","(p1, p2 = v2)","<p>Transfers control to the end of the active <code>catch</code> block waiting\nfor <em>tag</em>. Raises <code>UncaughtThrowError</code> if …\n"],["thursday?","Date","classes/Date.html#method-i-thursday-3F","()","<p>Returns true if the date is Thursday.\n"],["thursday?","Time","classes/Time.html#method-i-thursday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Thursday.\n\n<pre><code>t = Time.local(1995, 12, 21)     #=&gt; 1995-12-21 00:00:00 -0600 ...\n</code></pre>\n"],["time","Gem","classes/Gem.html#method-c-time","(msg, width = 0, display = Gem.configuration.verbose)","<p>Prints the amount of time the supplied block takes to run using the debug\nUI output.\n"],["time","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-time","()","<p>Returns the time at which the session was established.\n"],["time","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-time","()",""],["time=","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-time-3D","(p1)","<p>Sets start time of the session. Time resolution is in seconds.\n"],["time=","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-time-3D","(p1)",""],["time=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-time-3D","(p1)","<p>Sets the time to be used in verifications.\n"],["time=","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-time-3D","(p1)","<p>Sets the time used in the verification. If not set, the current time is\nused.\n"],["timeout","Object","classes/Object.html#method-i-timeout","(*args, &block)",""],["timeout","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-timeout","()","<p>Returns the timeout value set for the session, in seconds from the\nestablished time.\n"],["timeout","Timeout","classes/Timeout.html#method-c-timeout","(sec, klass = nil, message = nil)","<p>Perform an operation in a block, raising an error if it takes longer than\n<code>sec</code> seconds to complete.\n<p><code>sec</code> … &mdash; "],["timeout=","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-timeout-3D","(p1)","<p>Sets how long until the session expires in seconds.\n"],["timeouts=","Resolv::DNS","classes/Resolv/DNS.html#method-i-timeouts-3D","(values)","<p>Sets the resolver timeouts.  This may be a single positive number or an\narray of positive numbers representing …\n"],["times","Integer","classes/Integer.html#method-i-times","()","<p>Iterates the given block <code>int</code> times, passing in values from\nzero to <code>int - 1</code>.\n<p>If no block is given, an  …\n"],["times","Process","classes/Process.html#method-c-times","()","<p>Returns a <code>Tms</code> structure (see <code>Process::Tms</code>) that\ncontains user and system CPU times for this process, …\n"],["timestamp","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-timestamp","()","<p>returns the timestamp as a time object.\n<p><em>ancillarydata</em> should be one of following type:\n<p>SOL_SOCKET/SCM_TIMESTAMP …\n"],["title","RDoc::Store","classes/RDoc/Store.html#method-i-title","()","<p>Gets the title for this RDoc store.  This is used as the title in each page\non the RDoc server\n"],["title=","RDoc::Store","classes/RDoc/Store.html#method-i-title-3D","(title)","<p>Sets the title page for this RDoc store.\n"],["tls?","Net::SMTP","classes/Net/SMTP.html#method-i-tls-3F","()","<p>true if this object uses SMTP/TLS (SMTPS).\n"],["tmp","Bundler","classes/Bundler.html#method-c-tmp","(name = Process.pid.to_s)",""],["tmp","Bundler::Plugin::API","classes/Bundler/Plugin/API.html#method-i-tmp","(*names)","<p>A tmp dir to be used by plugins Accepts names that get concatenated as\nsuffix\n<p>@return [Pathname] object …\n"],["tmp_home_path","Bundler","classes/Bundler.html#method-c-tmp_home_path","(login, warning)",""],["tmp_key","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-tmp_key","()","<p>Returns the ephemeral key used in case of forward secrecy cipher.\n"],["tmpdir","Dir","classes/Dir.html#method-c-tmpdir","()","<p>Returns the operating system&#39;s temporary file path.\n"],["to=","URI::MailTo","classes/URI/MailTo.html#method-i-to-3D","(v)","<p>Setter for to <code>v</code>.\n"],["to_a","ARGF","classes/ARGF.html#method-i-to_a","(*args)","<p>Reads <code>ARGF</code>&#39;s current file in its entirety, returning an\n<code>Array</code> of its lines, one line per element. …\n"],["to_a","Array","classes/Array.html#method-i-to_a","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of Array, converts the receiver to an Array object.\n"],["to_a","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-to_a","()","<p>Returns a new 6-element array, consisting of the label, user CPU time,\nsystem CPU time, children&#39;s …\n"],["to_a","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-to_a","()",""],["to_a","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-to_a","()",""],["to_a","CSV::Table","classes/CSV/Table.html#method-i-to_a","()","<p>Returns the table as an Array of Arrays.  Headers will be the first row,\nthen all of the field rows will …\n"],["to_a","DBM","classes/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_a","ENV","classes/ENV.html#method-c-to_a","()","<p>Converts the environment variables into an array of names and value arrays.\n\n<pre><code>ENV.to_a # =&gt; [[&quot;TERM&quot;, &quot;xterm-color&quot;], ...\n</code></pre>\n"],["to_a","Enumerable","classes/Enumerable.html#method-i-to_a","(*args)","<p>Returns an array containing the items in <em>enum</em>.\n\n<pre><code>(1..7).to_a                       #=&gt; [1, 2, 3, 4, 5, 6, ...\n</code></pre>\n"],["to_a","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-to_a","()","<p>Expands <code>lazy</code> enumerator to an array. See Enumerable#to_a.\n"],["to_a","GDBM","classes/GDBM.html#method-i-to_a","()","<p>Returns an array of all key-value pairs contained in the database.\n"],["to_a","Hash","classes/Hash.html#method-i-to_a","()","<p>Converts <em>hsh</em> to a nested array of <code>[</code> <em>key,\nvalue</em> <code>]</code> arrays.\n\n<pre><code>h = { &quot;c&quot; =&gt; 300, &quot;a&quot; =&gt; 100, &quot;d&quot; =&gt; 400, &quot;c&quot; ...</code></pre>\n"],["to_a","MatchData","classes/MatchData.html#method-i-to_a","()","<p>Returns the array of matches.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.to_a   #=&gt; [&quot;HX1138&quot;, &quot;H&quot;, &quot;X&quot;, ...\n</code></pre>\n"],["to_a","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-to_a","()",""],["to_a","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-to_a","()",""],["to_a","NilClass","classes/NilClass.html#method-i-to_a","()","<p>Always returns an empty array.\n\n<pre><code>nil.to_a   #=&gt; []\n</code></pre>\n"],["to_a","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_a","()",""],["to_a","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_a","()","<p>Returns an Array representation of the distinguished name suitable for\npassing to ::new\n"],["to_a","OptionParser","classes/OptionParser.html#method-i-to_a","()","<p>Returns option summary list.\n"],["to_a","REXML::Attributes","classes/REXML/Attributes.html#method-i-to_a","()",""],["to_a","REXML::Elements","classes/REXML/Elements.html#method-i-to_a","( xpath=nil )","<p>Returns an Array of Element children.  An XPath may be supplied to filter\nthe children.  Only Element …\n"],["to_a","REXML::Parent","classes/REXML/Parent.html#method-i-to_a","()",""],["to_a","Range","classes/Range.html#method-i-to_a","()","<p>Returns an array containing the items in the range.\n\n<pre><code>(1..7).to_a  #=&gt; [1, 2, 3, 4, 5, 6, 7]\n(1..).to_a ...\n</code></pre>\n"],["to_a","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-c-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","Rinda::RingFinger","classes/Rinda/RingFinger.html#method-i-to_a","()","<p>Contains all discovered TupleSpaces except for the primary.\n"],["to_a","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-to_a","()","<p>Returns an Array with 14 elements representing the instruction sequence\nwith the following data:\n<p>magic … &mdash; "],["to_a","SDBM","classes/SDBM.html#method-i-to_a","()","<p>Returns a new Array containing each key-value pair in the database.\n<p>Example:\n\n<pre><code>require &#39;sdbm&#39;\n\nSDBM.open ...\n</code></pre>\n"],["to_a","Set","classes/Set.html#method-i-to_a","()","<p>Converts the set to an array.  The order of elements is uncertain.\n\n<pre><code>Set[1, 2].to_a                    #=&gt; ...\n</code></pre>\n"],["to_a","Shell::Filter","classes/Shell/Filter.html#method-i-to_a","()",""],["to_a","Struct","classes/Struct.html#method-i-to_a","()","<p>Returns the values for this struct as an Array.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["to_a","Time","classes/Time.html#method-i-to_a","()","<p>Returns a ten-element <em>array</em> of values for <em>time</em>:\n\n<pre><code>[sec, min, hour, day, month, year, wday, yday, isdst, ...</code></pre>\n"],["to_a","YAML::DBM","classes/YAML/DBM.html#method-i-to_a","()","<p>Converts the contents of the database to an array of [key, value] arrays,\nand returns it.\n"],["to_ary","Array","classes/Array.html#method-i-to_ary","()","<p>Returns <code>self</code>.\n"],["to_ary","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-to_ary","()","<p>Returns [eigenvector_matrix, eigenvalue_matrix, eigenvector_matrix_inv]\n"],["to_ary","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-to_ary","()","<p>Returns <code>L</code>, <code>U</code>, <code>P</code> in an array\n"],["to_ary","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-to_ary","()","<p>A FormData will behave like an Array\n"],["to_atom","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_atom","(type, &block)",""],["to_binary","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-to_binary","(*args)","<p>Returns serialized iseq binary format data as a String object. A\ncorresponding iseq object is created …\n"],["to_bn","Integer","classes/Integer.html#method-i-to_bn","()","<p>Casts an Integer as an OpenSSL::BN\n<p>See `man bn` for more info.\n"],["to_bn","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_bn","()",""],["to_bn","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-to_bn","(conversion_form = group.point_conversion_form)","<p>Returns the octet string representation of the EC point as an instance of\nOpenSSL::BN.\n<p>If <em>conversion_form</em> …\n"],["to_c","Complex","classes/Complex.html#method-i-to_c","()","<p>Returns self.\n\n<pre><code>Complex(2).to_c      #=&gt; (2+0i)\nComplex(-8, 6).to_c  #=&gt; (-8+6i)\n</code></pre>\n"],["to_c","NilClass","classes/NilClass.html#method-i-to_c","()","<p>Returns zero as a complex.\n"],["to_c","Numeric","classes/Numeric.html#method-i-to_c","()","<p>Returns the value as a complex.\n"],["to_c","String","classes/String.html#method-i-to_c","()","<p>Returns a complex which denotes the string form.  The parser ignores\nleading whitespaces and trailing …\n"],["to_class_name","RSS::Utils","classes/RSS/Utils.html#method-i-to_class_name","(name)","<p>Given a <code>name</code> in a name_with_underscores or a name-with-dashes\nformat, returns the CamelCase version of …\n"],["to_csv","CSV::Row","classes/CSV/Row.html#method-i-to_csv","(**options)","<p>Returns the row as a CSV String.  Headers are not used.  Equivalent to:\n\n<pre><code>csv_row.fields.to_csv( options ...</code></pre>\n"],["to_csv","CSV::Table","classes/CSV/Table.html#method-i-to_csv","(write_headers: true, **options)","<p>Returns the table as a complete CSV String.  Headers will be listed first,\nthen all of the field rows. …\n"],["to_d","BigDecimal","classes/BigDecimal.html#method-i-to_d","()","<p>Returns self.\n\n<pre><code>require &#39;bigdecimal/util&#39;\n\nd = BigDecimal(&quot;3.14&quot;)\nd.to_d                       # =&gt; 0.314e1\n</code></pre>\n"],["to_d","Float","classes/Float.html#method-i-to_d","(precision=Float::DIG)","<p>Returns the value of <code>float</code> as a BigDecimal. The\n<code>precision</code> parameter is used to determine the number of …\n"],["to_d","Integer","classes/Integer.html#method-i-to_d","()","<p>Returns the value of <code>int</code> as a BigDecimal.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\n42.to_d   # ...\n</code></pre>\n"],["to_d","NilClass","classes/NilClass.html#method-i-to_d","()","<p>Returns nil represented as a BigDecimal.\n\n<pre><code>require &#39;bigdecimal&#39;\nrequire &#39;bigdecimal/util&#39;\n\nnil.to_d   # ...\n</code></pre>\n"],["to_d","Rational","classes/Rational.html#method-i-to_d","(precision)","<p>Returns the value as a BigDecimal.\n<p>The required <code>precision</code> parameter is used to determine the\nnumber of …\n"],["to_date","Date","classes/Date.html#method-i-to_date","()","<p>Returns self.\n"],["to_date","DateTime","classes/DateTime.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_date","Time","classes/Time.html#method-i-to_date","()","<p>Returns a Date object which denotes self.\n"],["to_datetime","Date","classes/Date.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_datetime","DateTime","classes/DateTime.html#method-i-to_datetime","()","<p>Returns self.\n"],["to_datetime","Time","classes/Time.html#method-i-to_datetime","()","<p>Returns a DateTime object which denotes self.\n"],["to_definition","Bundler::Dsl","classes/Bundler/Dsl.html#method-i-to_definition","(lockfile, unlock)",""],["to_der","OpenSSL::ASN1::ASN1Data","classes/OpenSSL/ASN1/ASN1Data.html#method-i-to_der","()","<p>Encodes this ASN1Data into a DER-encoded String value. The result is\nDER-encoded except for the possibility …\n"],["to_der","OpenSSL::ASN1::Constructive","classes/OpenSSL/ASN1/Constructive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::ASN1::Primitive","classes/OpenSSL/ASN1/Primitive.html#method-i-to_der","()","<p>See ASN1Data#to_der for details.\n"],["to_der","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_der","()","<p>Returns the DER encoding of this SPKI.\n"],["to_der","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-to_der","()","<p>Encodes this basic response into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::CertificateId","classes/OpenSSL/OCSP/CertificateId.html#method-i-to_der","()","<p>Encodes this certificate identifier into a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-to_der","()","<p>Returns this request as a DER-encoded string\n"],["to_der","OpenSSL::OCSP::Response","classes/OpenSSL/OCSP/Response.html#method-i-to_der","()","<p>Returns this response as a DER-encoded string.\n"],["to_der","OpenSSL::OCSP::SingleResponse","classes/OpenSSL/OCSP/SingleResponse.html#method-i-to_der","()","<p>Encodes this SingleResponse into a DER-encoded string.\n"],["to_der","OpenSSL::PKCS12","classes/OpenSSL/PKCS12.html#method-i-to_der","()",""],["to_der","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_der","()",""],["to_der","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_der","()","<p>Encodes this DH to its DER encoding. Note that any existing per-session\npublic/private keys will <strong>not</strong> …\n"],["to_der","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_der","()","<p>Encodes this DSA to its DER encoding.\n"],["to_der","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPrivateKey_bio()\n"],["to_der","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_der","()","<p>See the OpenSSL documentation for i2d_ECPKParameters_bio()\n"],["to_der","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_der","()","<p>Outputs this keypair in DER encoding.\n"],["to_der","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_der","()","<p>Returns an ASN1 encoded String that contains the Session object.\n"],["to_der","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_der","()","<p>Converts the name to DER encoding\n"],["to_der","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_der","()",""],["to_der","OpenSSL::X509::Revoked","classes/OpenSSL/X509/Revoked.html#method-i-to_der","()",""],["to_digits","BigDecimal","classes/BigDecimal.html#method-i-to_digits","()","<p>Converts a BigDecimal to a String of the form “nnnnnn.mmm”. This method is\ndeprecated; use …\n"],["to_dot","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-to_dot","(options = {})","<p>@param [Hash] options options for dot output. @return [String] Returns a\ndot format representation of …\n"],["to_element_methods","RSS::Element","classes/RSS/Element.html#method-c-to_element_methods","()",""],["to_enum","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-to_enum","(*args)","<p>Similar to Kernel#to_enum, except it returns a lazy enumerator. This makes\nit easy to define Enumerable …\n"],["to_enum","Object","classes/Object.html#method-i-to_enum","(*args)","<p>Creates a new Enumerator which will enumerate by calling\n<code>method</code> on <code>obj</code>, passing <code>args</code> if any.\n<p>If a block …\n"],["to_f","BigDecimal","classes/BigDecimal.html#method-i-to_f","()","<p>Returns a new Float object having approximately the same value as the\nBigDecimal number. Normal accuracy …\n"],["to_f","Complex","classes/Complex.html#method-i-to_f","()","<p>Returns the value as a float if possible (the imaginary part should be\nexactly zero).\n\n<pre><code>Complex(1, 0).to_f ...\n</code></pre>\n"],["to_f","Float","classes/Float.html#method-i-to_f","()","<p>Since <code>float</code> is already a Float, returns <code>self</code>.\n"],["to_f","Integer","classes/Integer.html#method-i-to_f","()","<p>Converts <code>int</code> to a Float.  If <code>int</code> doesn&#39;t fit\nin a Float, the result is infinity.\n"],["to_f","NilClass","classes/NilClass.html#method-i-to_f","()","<p>Always returns zero.\n\n<pre><code>nil.to_f   #=&gt; 0.0\n</code></pre>\n"],["to_f","Rational","classes/Rational.html#method-i-to_f","()","<p>Returns the value as a Float.\n\n<pre><code>Rational(2).to_f      #=&gt; 2.0\nRational(9, 4).to_f   #=&gt; 2.25\nRational(-3, ...</code></pre>\n"],["to_f","String","classes/String.html#method-i-to_f","()","<p>Returns the result of interpreting leading characters in <em>str</em> as a\nfloating point number. Extraneous characters …\n"],["to_f","Time","classes/Time.html#method-i-to_f","()","<p>Returns the value of <em>time</em> as a floating point number of seconds\nsince the Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; ...\n</code></pre>\n"],["to_feed","RSS::Maker::Atom::Entry::Items","classes/RSS/Maker/Atom/Entry/Items.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Entry::Items::Item","classes/RSS/Maker/Atom/Entry/Items/Item.html#method-i-to_feed","(entry)",""],["to_feed","RSS::Maker::Atom::Feed::Channel","classes/RSS/Maker/Atom/Feed/Channel.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::Cloud","classes/RSS/Maker/Atom/Feed/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipDays","classes/RSS/Maker/Atom/Feed/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Channel::SkipHours","classes/RSS/Maker/Atom/Feed/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::Atom::Feed::Image","classes/RSS/Maker/Atom/Feed/Image.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items","classes/RSS/Maker/Atom/Feed/Items.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item","classes/RSS/Maker/Atom/Feed/Items/Item.html#method-i-to_feed","(feed)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Content","classes/RSS/Maker/Atom/Feed/Items/Item/Content.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Enclosure","classes/RSS/Maker/Atom/Feed/Items/Item/Enclosure.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Guid","classes/RSS/Maker/Atom/Feed/Items/Item/Guid.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source","classes/RSS/Maker/Atom/Feed/Items/Item/Source.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::Atom::Feed::Items::Item::Source::Icon","classes/RSS/Maker/Atom/Feed/Items/Item/Source/Icon.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomCategory","classes/RSS/Maker/AtomCategory.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomGenerator","classes/RSS/Maker/AtomGenerator.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLink","classes/RSS/Maker/AtomLink.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::AtomLogo","classes/RSS/Maker/AtomLogo.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesImageBase","classes/RSS/Maker/ITunesChannelModel/ITunesImageBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesChannelModel::ITunesOwnerBase","classes/RSS/Maker/ITunesChannelModel/ITunesOwnerBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ITunesItemModel::ITunesDurationBase","classes/RSS/Maker/ITunesItemModel/ITunesDurationBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageFaviconModel::ImageFaviconBase","classes/RSS/Maker/ImageFaviconModel/ImageFaviconBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::ImageItemModel::ImageItemBase","classes/RSS/Maker/ImageItemModel/ImageItemBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::RSS09::Channel","classes/RSS/Maker/RSS09/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors","classes/RSS/Maker/RSS09/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Authors::Author","classes/RSS/Maker/RSS09/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Categories","classes/RSS/Maker/RSS09/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Cloud","classes/RSS/Maker/RSS09/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Channel::Contributors","classes/RSS/Maker/RSS09/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Copyright","classes/RSS/Maker/RSS09/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Description","classes/RSS/Maker/RSS09/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Generator","classes/RSS/Maker/RSS09/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links","classes/RSS/Maker/RSS09/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::Links::Link","classes/RSS/Maker/RSS09/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays","classes/RSS/Maker/RSS09/Channel/SkipDays.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipDays::Day","classes/RSS/Maker/RSS09/Channel/SkipDays/Day.html#method-i-to_feed","(rss, days)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours","classes/RSS/Maker/RSS09/Channel/SkipHours.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Channel::SkipHours::Hour","classes/RSS/Maker/RSS09/Channel/SkipHours/Hour.html#method-i-to_feed","(rss, hours)",""],["to_feed","RSS::Maker::RSS09::Channel::Title","classes/RSS/Maker/RSS09/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS09::Image","classes/RSS/Maker/RSS09/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items","classes/RSS/Maker/RSS09/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item","classes/RSS/Maker/RSS09/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Authors","classes/RSS/Maker/RSS09/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Categories","classes/RSS/Maker/RSS09/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Content","classes/RSS/Maker/RSS09/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Contributors","classes/RSS/Maker/RSS09/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Description","classes/RSS/Maker/RSS09/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Enclosure","classes/RSS/Maker/RSS09/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Guid","classes/RSS/Maker/RSS09/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links","classes/RSS/Maker/RSS09/Items/Item/Links.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Links::Link","classes/RSS/Maker/RSS09/Items/Item/Links/Link.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Rights","classes/RSS/Maker/RSS09/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source","classes/RSS/Maker/RSS09/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Authors","classes/RSS/Maker/RSS09/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Categories","classes/RSS/Maker/RSS09/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Contributors","classes/RSS/Maker/RSS09/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Generator","classes/RSS/Maker/RSS09/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Icon","classes/RSS/Maker/RSS09/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Links","classes/RSS/Maker/RSS09/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Logo","classes/RSS/Maker/RSS09/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Rights","classes/RSS/Maker/RSS09/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Subtitle","classes/RSS/Maker/RSS09/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Source::Title","classes/RSS/Maker/RSS09/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS09::Items::Item::Title","classes/RSS/Maker/RSS09/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS09::Textinput","classes/RSS/Maker/RSS09/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel","classes/RSS/Maker/RSS10/Channel.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors","classes/RSS/Maker/RSS10/Channel/Authors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Authors::Author","classes/RSS/Maker/RSS10/Channel/Authors/Author.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Categories","classes/RSS/Maker/RSS10/Channel/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Cloud","classes/RSS/Maker/RSS10/Channel/Cloud.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Contributors","classes/RSS/Maker/RSS10/Channel/Contributors.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Copyright","classes/RSS/Maker/RSS10/Channel/Copyright.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Description","classes/RSS/Maker/RSS10/Channel/Description.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Generator","classes/RSS/Maker/RSS10/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links","classes/RSS/Maker/RSS10/Channel/Links.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::Links::Link","classes/RSS/Maker/RSS10/Channel/Links/Link.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipDays","classes/RSS/Maker/RSS10/Channel/SkipDays.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::SkipHours","classes/RSS/Maker/RSS10/Channel/SkipHours.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Channel::Title","classes/RSS/Maker/RSS10/Channel/Title.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS10::Image","classes/RSS/Maker/RSS10/Image.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items","classes/RSS/Maker/RSS10/Items.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item","classes/RSS/Maker/RSS10/Items/Item.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Authors","classes/RSS/Maker/RSS10/Items/Item/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Categories","classes/RSS/Maker/RSS10/Items/Item/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Content","classes/RSS/Maker/RSS10/Items/Item/Content.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Contributors","classes/RSS/Maker/RSS10/Items/Item/Contributors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Description","classes/RSS/Maker/RSS10/Items/Item/Description.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Enclosure","classes/RSS/Maker/RSS10/Items/Item/Enclosure.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Guid","classes/RSS/Maker/RSS10/Items/Item/Guid.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Links","classes/RSS/Maker/RSS10/Items/Item/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Rights","classes/RSS/Maker/RSS10/Items/Item/Rights.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source","classes/RSS/Maker/RSS10/Items/Item/Source.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Authors","classes/RSS/Maker/RSS10/Items/Item/Source/Authors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Categories","classes/RSS/Maker/RSS10/Items/Item/Source/Categories.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Contributors","classes/RSS/Maker/RSS10/Items/Item/Source/Contributors.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Generator","classes/RSS/Maker/RSS10/Items/Item/Source/Generator.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Icon","classes/RSS/Maker/RSS10/Items/Item/Source/Icon.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Links","classes/RSS/Maker/RSS10/Items/Item/Source/Links.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Logo","classes/RSS/Maker/RSS10/Items/Item/Source/Logo.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Rights","classes/RSS/Maker/RSS10/Items/Item/Source/Rights.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Subtitle","classes/RSS/Maker/RSS10/Items/Item/Source/Subtitle.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Source::Title","classes/RSS/Maker/RSS10/Items/Item/Source/Title.html#method-i-to_feed","(*args)",""],["to_feed","RSS::Maker::RSS10::Items::Item::Title","classes/RSS/Maker/RSS10/Items/Item/Title.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS10::Textinput","classes/RSS/Maker/RSS10/Textinput.html#method-i-to_feed","(rss)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories","classes/RSS/Maker/RSS20/Channel/Categories.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Categories::Category","classes/RSS/Maker/RSS20/Channel/Categories/Category.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Cloud","classes/RSS/Maker/RSS20/Channel/Cloud.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Channel::Generator","classes/RSS/Maker/RSS20/Channel/Generator.html#method-i-to_feed","(rss, channel)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors","classes/RSS/Maker/RSS20/Items/Item/Authors.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Authors::Author","classes/RSS/Maker/RSS20/Items/Item/Authors/Author.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories","classes/RSS/Maker/RSS20/Items/Item/Categories.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Categories::Category","classes/RSS/Maker/RSS20/Items/Item/Categories/Category.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Enclosure","classes/RSS/Maker/RSS20/Items/Item/Enclosure.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Guid","classes/RSS/Maker/RSS20/Items/Item/Guid.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source","classes/RSS/Maker/RSS20/Items/Item/Source.html#method-i-to_feed","(rss, item)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links","classes/RSS/Maker/RSS20/Items/Item/Source/Links.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::RSS20::Items::Item::Source::Links::Link","classes/RSS/Maker/RSS20/Items/Item/Source/Links/Link.html#method-i-to_feed","(rss, source)",""],["to_feed","RSS::Maker::RSSBase","classes/RSS/Maker/RSSBase.html#method-i-to_feed","()",""],["to_feed","RSS::Maker::TrackBackModel::TrackBackAboutsBase::TrackBackAboutBase","classes/RSS/Maker/TrackBackModel/TrackBackAboutsBase/TrackBackAboutBase.html#method-i-to_feed","(feed, current)",""],["to_feed","RSS::Maker::XMLStyleSheets::XMLStyleSheet","classes/RSS/Maker/XMLStyleSheets/XMLStyleSheet.html#method-i-to_feed","(feed)",""],["to_feed","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_feed","(type, &block)",""],["to_feed_for_categories","RSS::Maker::ITunesChannelModel::ITunesCategoriesBase::ITunesCategoryBase","classes/RSS/Maker/ITunesChannelModel/ITunesCategoriesBase/ITunesCategoryBase.html#method-i-to_feed_for_categories","(feed, current)",""],["to_gem_version_with_patchlevel","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-to_gem_version_with_patchlevel","()",""],["to_h","Array","classes/Array.html#method-i-to_h","()","<p>Returns the result of interpreting <em>ary</em> as an array of <code>[key,\nvalue]</code> pairs.\n\n<pre><code>[[:foo, :bar], [1, 2]].to_h ...\n</code></pre>\n"],["to_h","Bundler::BuildMetadata","classes/Bundler/BuildMetadata.html#method-c-to_h","()","<p>A hash representation of the build metadata.\n"],["to_h","CSV::Row","classes/CSV/Row.html#method-i-to_h","()","<p>Collapses the row into a simple Hash.  Be warned that this discards field\norder and clobbers duplicate …\n"],["to_h","ENV","classes/ENV.html#method-c-to_h","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_h","Enumerable","classes/Enumerable.html#method-i-to_h","(*args)","<p>Returns the result of interpreting <em>enum</em> as a list of <code>[key,\nvalue]</code> pairs.\n\n<pre><code>%i[hello world].each_with_index.to_h ...\n</code></pre>\n"],["to_h","Hash","classes/Hash.html#method-i-to_h","()","<p>Returns <code>self</code>. If called on a subclass of Hash, converts the\nreceiver to a Hash object.\n<p>If a block is given, …\n"],["to_h","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_h","NilClass","classes/NilClass.html#method-i-to_h","()","<p>Always returns an empty hash.\n\n<pre><code>nil.to_h   #=&gt; {}\n</code></pre>\n"],["to_h","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_h","()",""],["to_h","OpenStruct","classes/OpenStruct.html#method-i-to_h","(&block)","<p>Converts the OpenStruct to a hash with keys representing each attribute (as\nsymbols) and their corresponding …\n"],["to_h","Struct","classes/Struct.html#method-i-to_h","()","<p>Returns a Hash containing the names and values for the struct&#39;s\nmembers.\n<p>If a block is given, the …\n"],["to_h","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-to_h","()","<p>Returns Ruby Hash object which represents VT_RECORD variable. The keys of\nHash object are member names …\n"],["to_hash","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-to_hash","()",""],["to_hash","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-to_hash","()",""],["to_hash","CSV::Row","classes/CSV/Row.html#method-i-to_hash","()",""],["to_hash","DBM","classes/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_hash","ENV","classes/ENV.html#method-c-to_hash","()","<p>Creates a hash with a copy of the environment variables.\n"],["to_hash","GDBM","classes/GDBM.html#method-i-to_hash","()","<p>Returns a hash of all key-value pairs contained in the database.\n"],["to_hash","Hash","classes/Hash.html#method-i-to_hash","()","<p>Returns <code>self</code>.\n"],["to_hash","JSON::Ext::Generator::State","classes/JSON/Ext/Generator/State.html#method-i-to_hash","()",""],["to_hash","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-to_hash","()",""],["to_hash","SDBM","classes/SDBM.html#method-i-to_hash","()","<p>Returns a new Hash containing each key-value pair in the database.\n"],["to_hash","YAML::DBM","classes/YAML/DBM.html#method-i-to_hash","()","<p>Converts the contents of the database to an in-memory Hash object, and\nreturns it.\n"],["to_html","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-c-to_html","(token_stream)","<p>Converts <code>token_stream</code> to HTML wrapping various tokens with\n<code>&lt;span&gt;</code> elements. Some tokens types are …\n"],["to_i","ARGF","classes/ARGF.html#method-i-to_i","()","<p>Returns an integer representing the numeric file descriptor for the current\nfile. Raises an <code>ArgumentError</code> …\n"],["to_i","BigDecimal","classes/BigDecimal.html#method-i-to_i","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_i","CSV","classes/CSV.html#method-i-to_i","()",""],["to_i","Complex","classes/Complex.html#method-i-to_i","()","<p>Returns the value as an integer if possible (the imaginary part should be\nexactly zero).\n\n<pre><code>Complex(1, 0).to_i ...\n</code></pre>\n"],["to_i","Fiddle::Closure","classes/Fiddle/Closure.html#method-i-to_i","()","<p>Returns the memory address for this closure\n"],["to_i","Fiddle::Function","classes/Fiddle/Function.html#method-i-to_i","()","<p>The integer memory location of this function\n"],["to_i","Fiddle::Handle","classes/Fiddle/Handle.html#method-i-to_i","()","<p>Returns the memory address for this handle.\n"],["to_i","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-to_i","()","<p>Returns the integer memory location of this pointer.\n"],["to_i","Float","classes/Float.html#method-i-to_i","()","<p>Returns the <code>float</code> truncated to an Integer.\n\n<pre><code>1.2.to_i      #=&gt; 1\n(-1.2).to_i   #=&gt; -1\n</code></pre>\n<p>Note that the limited …\n"],["to_i","IO","classes/IO.html#method-i-to_i","()",""],["to_i","IPAddr","classes/IPAddr.html#method-i-to_i","()","<p>Returns the integer representation of the ipaddr.\n"],["to_i","Integer","classes/Integer.html#method-i-to_i","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n<p>#to_int is an alias for #to_i.\n"],["to_i","NilClass","classes/NilClass.html#method-i-to_i","()","<p>Always returns zero.\n\n<pre><code>nil.to_i   #=&gt; 0\n</code></pre>\n"],["to_i","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_i","()",""],["to_i","Process::Status","classes/Process/Status.html#method-i-to_i","()","<p>Returns the bits in <em>stat</em> as a <code>Integer</code>. Poking around\nin these bits is platform dependent.\n\n<pre><code>fork { exit ...</code></pre>\n"],["to_i","Rational","classes/Rational.html#method-i-to_i","()","<p>Returns the truncated value as an integer.\n<p>Equivalent to Rational#truncate.\n\n<pre><code>Rational(2, 3).to_i    #=&gt; ...\n</code></pre>\n"],["to_i","String","classes/String.html#method-i-to_i","(*args)","<p>Returns the result of interpreting leading characters in <em>str</em> as an\ninteger base <em>base</em> (between 2 and 36). …\n"],["to_i","Time","classes/Time.html#method-i-to_i","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...\n</code></pre>\n"],["to_i","WEBrick::HTTPStatus::Status","classes/WEBrick/HTTPStatus/Status.html#method-i-to_i","()",""],["to_id","DRb","classes/DRb.html#method-c-to_id","(obj)","<p>Get a reference id for an object using the current server.\n<p>This raises a DRbServerNotFound error if there …\n"],["to_id","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_id","(obj)","<p>Convert an object into a reference id.\n<p>This implementation returns the object&#39;s __id__ in the local …\n"],["to_id","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-to_id","(obj)","<p>Convert a local object to a dRuby reference.\n"],["to_int","BigDecimal","classes/BigDecimal.html#method-i-to_int","()","<p>Returns the value as an Integer.\n<p>If the BigDecimal is infinity or NaN, raises FloatDomainError.\n"],["to_int","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-to_int","()","<p>Returns the integer memory location of this pointer.\n"],["to_int","Float","classes/Float.html#method-i-to_int","()","<p>Returns the <code>float</code> truncated to an Integer.\n\n<pre><code>1.2.to_i      #=&gt; 1\n(-1.2).to_i   #=&gt; -1\n</code></pre>\n<p>Note that the limited …\n"],["to_int","Integer","classes/Integer.html#method-i-to_int","()","<p>Since <code>int</code> is already an Integer, returns <code>self</code>.\n<p>#to_int is an alias for #to_i.\n"],["to_int","Numeric","classes/Numeric.html#method-i-to_int","()","<p>Invokes the child class&#39;s <code>to_i</code> method to convert\n<code>num</code> to an integer.\n\n<pre><code>1.0.class          #=&gt; Float\n1.0.to_int.class ...\n</code></pre>\n"],["to_int","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_int","()",""],["to_io","ARGF","classes/ARGF.html#method-i-to_io","()","<p>Returns an <code>IO</code> object representing the current file. This will\nbe a <code>File</code> object unless the current file …\n"],["to_io","CSV","classes/CSV.html#method-i-to_io","()",""],["to_io","IO","classes/IO.html#method-i-to_io","()","<p>Returns <em>ios</em>.\n"],["to_io","OpenSSL::SSL::SSLServer","classes/OpenSSL/SSL/SSLServer.html#method-i-to_io","()","<p>Returns the TCPServer passed to the SSLServer when initialized.\n"],["to_io","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-i-to_io","()","<p>Same as IO.\n"],["to_json","BigDecimal","classes/BigDecimal.html#method-i-to_json","(*)","<p>return the JSON value\n"],["to_json","Complex","classes/Complex.html#method-i-to_json","(*)","<p>Stores class name (Complex) along with real value <code>r</code> and\nimaginary value <code>i</code> as JSON string\n"],["to_json","Date","classes/Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string …\n"],["to_json","DateTime","classes/DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  …\n"],["to_json","Exception","classes/Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Array","classes/JSON/Ext/Generator/GeneratorMethods/Array.html#method-i-to_json","(*args)","<p>Returns a JSON string containing a JSON array, that is generated from this\nArray instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Bignum","classes/JSON/Ext/Generator/GeneratorMethods/Bignum.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::FalseClass","classes/JSON/Ext/Generator/GeneratorMethods/FalseClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for false: &#39;false&#39;.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Fixnum","classes/JSON/Ext/Generator/GeneratorMethods/Fixnum.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Float","classes/JSON/Ext/Generator/GeneratorMethods/Float.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Float number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Hash","classes/JSON/Ext/Generator/GeneratorMethods/Hash.html#method-i-to_json","(*args)","<p>Returns a JSON string containing a JSON object, that is generated from this\nHash instance. <em>state</em> is a …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Integer","classes/JSON/Ext/Generator/GeneratorMethods/Integer.html#method-i-to_json","(*args)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::NilClass","classes/JSON/Ext/Generator/GeneratorMethods/NilClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for nil: &#39;null&#39;.\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::Object","classes/JSON/Ext/Generator/GeneratorMethods/Object.html#method-i-to_json","(p1 = v1)","<p>Converts this object to a string (calling #to_s), converts it to a JSON\nstring, and returns the result. …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json","(*args)","<p>This string should be encoded with UTF-8 A call to this method returns a\nJSON string encoded with UTF16 …\n"],["to_json","JSON::Ext::Generator::GeneratorMethods::TrueClass","classes/JSON/Ext/Generator/GeneratorMethods/TrueClass.html#method-i-to_json","(*args)","<p>Returns a JSON string for true: &#39;true&#39;.\n"],["to_json","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-to_json","(*a)",""],["to_json","OpenStruct","classes/OpenStruct.html#method-i-to_json","(*args)","<p>Stores class name (OpenStruct) with this struct&#39;s values <code>v</code>\nas a JSON string.\n"],["to_json","Psych","classes/Psych.html#method-c-to_json","(object)","<p>Dump Ruby <code>object</code> to a JSON string.\n"],["to_json","Range","classes/Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), …\n"],["to_json","Rational","classes/Rational.html#method-i-to_json","(*)","<p>Stores class name (Rational) along with numerator value <code>n</code> and\ndenominator value <code>d</code> as JSON string\n"],["to_json","Regexp","classes/Regexp.html#method-i-to_json","(*)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Struct","classes/Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","classes/Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","classes/Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON …\n"],["to_json_raw","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw","(*args)","<p>This method creates a JSON text from the result of a call to\nto_json_raw_object of this String.\n"],["to_json_raw_object","JSON::Ext::Generator::GeneratorMethods::String","classes/JSON/Ext/Generator/GeneratorMethods/String.html#method-i-to_json_raw_object","()","<p>This method creates a raw object hash, that can be nested into other data\nstructures and will be generated …\n"],["to_lock","Bundler::Definition","classes/Bundler/Definition.html#method-i-to_lock","()",""],["to_lock","Bundler::Dependency","classes/Bundler/Dependency.html#method-i-to_lock","()",""],["to_lock","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-to_lock","()",""],["to_lock","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-to_lock","()","<p>Generates the content to be entered into the lockfile. Saves type and\nremote and also calls to `options_to_lock`. …\n"],["to_lock","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-to_lock","()",""],["to_mailtext","URI::MailTo","classes/URI/MailTo.html#method-i-to_mailtext","()","<p>Returns the RFC822 e-mail text equivalent of the URL, as a String.\n<p>Example:\n\n<pre><code>require &#39;uri&#39;\n\nuri = URI.parse(&quot;mailto:ruby-list@ruby-lang.org?Subject=subscribe&amp;cc=myaddr&quot;) ...\n</code></pre>\n"],["to_name","Resolv::IPv4","classes/Resolv/IPv4.html#method-i-to_name","()","<p>Turns this IPv4 address into a Resolv::DNS::Name.\n"],["to_name","Resolv::IPv6","classes/Resolv/IPv6.html#method-i-to_name","()","<p>Turns this IPv6 address into a Resolv::DNS::Name.\n"],["to_obj","DRb","classes/DRb.html#method-c-to_obj","(ref)","<p>Convert a reference into an object using the current server.\n<p>This raises a DRbServerNotFound error if …\n"],["to_obj","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbIdConv","classes/DRb/DRbIdConv.html#method-i-to_obj","(ref)","<p>Convert an object reference id to an object.\n<p>This implementation looks up the reference id in the local …\n"],["to_obj","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-to_obj","(ref)","<p>Convert a dRuby reference to the local object it refers to.\n"],["to_octet_string","OpenSSL::PKey::EC::Point","classes/OpenSSL/PKey/EC/Point.html#method-i-to_octet_string","(p1)","<p>Returns the octet string representation of the elliptic curve point.\n<p><em>conversion_form</em> specifies how the …\n"],["to_path","Dir","classes/Dir.html#method-i-to_path","()","<p>Returns the path parameter passed to <em>dir</em>&#39;s constructor.\n\n<pre><code>d = Dir.new(&quot;..&quot;)\nd.path   #=&gt; &quot;..&quot;\n</code></pre>\n"],["to_path","File","classes/File.html#method-i-to_path","()","<p>Returns the pathname used to create <em>file</em> as a string. Does not\nnormalize the name.\n<p>The pathname may not …\n"],["to_path","Pathname","classes/Pathname.html#method-i-to_path","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_pem","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_pem","()","<p>Returns the PEM encoding of this SPKI.\n"],["to_pem","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_pem","()",""],["to_pem","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_pem","()","<p>See the OpenSSL documentation for PEM_write_bio_ECPKParameters()\n"],["to_pem","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_pem","(p1 = v1, p2 = v2)",""],["to_pem","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_pem","()","<p>Returns a PEM encoded String that contains the Session object.\n"],["to_pem","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_pem","()",""],["to_pem","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_pem","()",""],["to_proc","Hash","classes/Hash.html#method-i-to_proc","()","<p>Returns a Proc which maps keys to values.\n\n<pre><code>h = {a:1, b:2}\nhp = h.to_proc\nhp.call(:a)          #=&gt; 1\nhp.call(:b) ...\n</code></pre>\n"],["to_proc","Method","classes/Method.html#method-i-to_proc","()","<p>Returns a <code>Proc</code> object corresponding to this method.\n"],["to_proc","Proc","classes/Proc.html#method-i-to_proc","()","<p>Part of the protocol for converting objects to <code>Proc</code> objects.\nInstances of class <code>Proc</code> simply return themselves. …\n"],["to_proc","Symbol","classes/Symbol.html#method-i-to_proc","()","<p>Returns a <em>Proc</em> object which responds to the given method by\n<em>sym</em>.\n\n<pre><code>(1..3).collect(&amp;:to_s)  #=&gt; [&quot;1&quot;, &quot;2&quot;, ...\n</code></pre>\n"],["to_ptr","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-c-to_ptr","(p1)","<p>Get the underlying pointer for ruby object <code>val</code> and return it\nas a Fiddle::Pointer object.\n"],["to_r","BigDecimal","classes/BigDecimal.html#method-i-to_r","()","<p>Converts a BigDecimal to a Rational.\n"],["to_r","Complex","classes/Complex.html#method-i-to_r","()","<p>Returns the value as a rational if possible (the imaginary part should be\nexactly zero).\n\n<pre><code>Complex(1, 0).to_r ...\n</code></pre>\n"],["to_r","Float","classes/Float.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre><code>2.0.to_r    #=&gt; (2/1)\n2.5.to_r    #=&gt; (5/2)\n-0.75.to_r  #=&gt; (-3/4)\n0.0.to_r ...\n</code></pre>\n"],["to_r","Integer","classes/Integer.html#method-i-to_r","()","<p>Returns the value as a rational.\n\n<pre><code>1.to_r        #=&gt; (1/1)\n(1&lt;&lt;64).to_r  #=&gt; (18446744073709551616/1)\n</code></pre>\n"],["to_r","NilClass","classes/NilClass.html#method-i-to_r","()","<p>Returns zero as a rational.\n"],["to_r","Rational","classes/Rational.html#method-i-to_r","()","<p>Returns self.\n\n<pre><code>Rational(2).to_r      #=&gt; (2/1)\nRational(-8, 6).to_r  #=&gt; (-4/3)\n</code></pre>\n"],["to_r","String","classes/String.html#method-i-to_r","()","<p>Returns the result of interpreting leading characters in <code>str</code>\nas a rational.  Leading whitespace and extraneous …\n"],["to_r","Time","classes/Time.html#method-i-to_r","()","<p>Returns the value of <em>time</em> as a rational number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\nt.to_r        ...\n</code></pre>\n"],["to_range","IPAddr","classes/IPAddr.html#method-i-to_range","()","<p>Creates a Range object for the network address.\n"],["to_rfc822text","URI::MailTo","classes/URI/MailTo.html#method-i-to_rfc822text","()",""],["to_rss","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_rss","(type, &block)",""],["to_ruby","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-to_ruby","()","<p>Convert this node to Ruby.\n<p>See also Psych::Visitors::ToRuby\n"],["to_s","ARGF","classes/ARGF.html#method-i-to_s","()","<p>Returns “ARGF”.\n"],["to_s","Addrinfo","classes/Addrinfo.html#method-i-to_s","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...\n</code></pre>\n"],["to_s","Array","classes/Array.html#method-i-to_s","()",""],["to_s","Benchmark::Tms","classes/Benchmark/Tms.html#method-i-to_s","()","<p>Same as #format.\n"],["to_s","BigDecimal","classes/BigDecimal.html#method-i-to_s","(p1 = v1)","<p>Converts the value to a string.\n<p>The default format looks like  0.xxxxEnn.\n<p>The optional parameter s consists …\n"],["to_s","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-to_s","()",""],["to_s","Bundler::Dsl::DSLError","classes/Bundler/Dsl/DSLError.html#method-i-to_s","()","<p>The message of the exception reports the content of podspec for the line\nthat generated the original …\n"],["to_s","Bundler::LazySpecification","classes/Bundler/LazySpecification.html#method-i-to_s","()",""],["to_s","Bundler::Molinillo::Resolver::Resolution::PossibilitySet","classes/Bundler/Molinillo/Resolver/Resolution/PossibilitySet.html#method-i-to_s","()","<p>String representation of the possibility set, for debugging\n"],["to_s","Bundler::ParallelInstaller::SpecInstallation","classes/Bundler/ParallelInstaller/SpecInstallation.html#method-i-to_s","()",""],["to_s","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-to_s","()",""],["to_s","Bundler::RemoteSpecification","classes/Bundler/RemoteSpecification.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-to_s","()",""],["to_s","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-to_s","(versions = self.versions)",""],["to_s","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-to_s","()",""],["to_s","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-to_s","()",""],["to_s","Bundler::Source::Path","classes/Bundler/Source/Path.html#method-i-to_s","()",""],["to_s","Bundler::VersionRanges::ReqR","classes/Bundler/VersionRanges/ReqR.html#method-i-to_s","()",""],["to_s","CGI::Cookie","classes/CGI/Cookie.html#method-i-to_s","()","<p>Convert the Cookie to its string representation.\n"],["to_s","CSV::Row","classes/CSV/Row.html#method-i-to_s","(**options)",""],["to_s","CSV::Table","classes/CSV/Table.html#method-i-to_s","(write_headers: true, **options)",""],["to_s","Complex","classes/Complex.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre><code>Complex(2).to_s                       #=&gt; &quot;2+0i&quot;\nComplex(&#39;-8/6&#39;).to_s  ...\n</code></pre>\n"],["to_s","Date","classes/Date.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format. (This method doesn&#39;t use the\nexpanded representations.)\n\n<pre><code>Date.new(2001,2,3).to_s ...\n</code></pre>\n"],["to_s","DateTime","classes/DateTime.html#method-i-to_s","()","<p>Returns a string in an ISO 8601 format. (This method doesn&#39;t use the\nexpanded representations.)\n\n<pre><code>DateTime.new(2001,2,3,4,5,6,&#39;-7&#39;).to_s ...\n</code></pre>\n"],["to_s","Digest::Instance","classes/Digest/Instance.html#method-i-to_s","()","<p>Returns digest_obj.hexdigest().\n"],["to_s","ENV","classes/ENV.html#method-c-to_s","()","<p>Returns “ENV”\n"],["to_s","Encoding","classes/Encoding.html#method-i-to_s","()","<p>Returns the name of the encoding.\n\n<pre><code>Encoding::UTF_8.name      #=&gt; &quot;UTF-8&quot;\n</code></pre>\n"],["to_s","Exception","classes/Exception.html#method-i-to_s","()","<p>Returns exception&#39;s message (or the name of the exception if no message\nis set).\n"],["to_s","FalseClass","classes/FalseClass.html#method-i-to_s","()","<p>The string representation of <code>false</code> is “false”.\n"],["to_s","Fiber","classes/Fiber.html#method-i-to_s","()","<p>Returns fiber information string.\n"],["to_s","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-to_s","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_s","Float","classes/Float.html#method-i-to_s","()","<p>Returns a string containing a representation of <code>self</code>. As well\nas a fixed or exponential form of the  …\n"],["to_s","Hash","classes/Hash.html#method-i-to_s","()",""],["to_s","IPAddr","classes/IPAddr.html#method-i-to_s","()","<p>Returns a string containing the IP address representation.\n"],["to_s","Integer","classes/Integer.html#method-i-to_s","(*args)","<p>Returns a string containing the place-value representation of\n<code>int</code> with radix <code>base</code> (between 2 and 36). …\n"],["to_s","MatchData","classes/MatchData.html#method-i-to_s","()","<p>Returns the entire matched string.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138.&quot;)\nm.to_s   #=&gt; &quot;HX1138&quot;\n</code></pre>\n"],["to_s","Method","classes/Method.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: ...\n</code></pre>\n"],["to_s","Module","classes/Module.html#method-i-to_s","()","<p>Returns a string representing this module or class. For basic classes and\nmodules, this is the name. …\n"],["to_s","NilClass","classes/NilClass.html#method-i-to_s","()","<p>Always returns the empty string.\n"],["to_s","Object","classes/Object.html#method-i-to_s","()","<p>Returns a string representing <em>obj</em>. The default <code>to_s</code>\nprints the object&#39;s class and an encoding of …\n"],["to_s","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-to_s","(p1 = v1)","<p>Parameters\n<p><em>base</em> - Integer Valid values:\n<p>0 - MPI\n"],["to_s","OpenSSL::Config","classes/OpenSSL/Config.html#method-i-to_s","()","<p>Get the parsable form of the current configuration\n<p>Given the following configuration being created:\n\n<pre><code>config ...\n</code></pre>\n"],["to_s","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-to_s","()",""],["to_s","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_s","()",""],["to_s","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_s","()",""],["to_s","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_s","(p1 = v1, p2 = v2)",""],["to_s","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-to_s","()",""],["to_s","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_s","(*args)","<p>Returns a String representation of the Distinguished Name. <em>format</em>\nis one of:\n<p>OpenSSL::X509::Name::COMPAT …\n"],["to_s","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_s","()",""],["to_s","OpenStruct","classes/OpenStruct.html#method-i-to_s","()",""],["to_s","OptionParser","classes/OptionParser.html#method-i-to_s","()",""],["to_s","OptionParser::ParseError","classes/OptionParser/ParseError.html#method-i-to_s","()",""],["to_s","Pathname","classes/Pathname.html#method-i-to_s","()","<p>Return the path as a String.\n<p>to_path is implemented so Pathname objects are usable with File.open, etc.\n…\n"],["to_s","Proc","classes/Proc.html#method-i-to_s","()","<p>Returns the unique identifier for this proc, along with an indication of\nwhere the proc was defined. …\n"],["to_s","Process::Status","classes/Process/Status.html#method-i-to_s","()","<p>Show pid and exit status as a string.\n\n<pre><code>system(&quot;false&quot;)\np $?.to_s         #=&gt; &quot;pid 12766 exit 1&quot;\n</code></pre>\n"],["to_s","REXML::Attribute","classes/REXML/Attribute.html#method-i-to_s","()","<p>Returns the attribute value, with entities replaced\n"],["to_s","REXML::CData","classes/REXML/CData.html#method-i-to_s","()","<p>Returns the content of this CData object\n<p><em>Examples</em>\n\n<pre><code>c = CData.new( &quot;Some text&quot; )\nc.to_s        # -&gt; &quot;Some ...\n</code></pre>\n"],["to_s","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-i-to_s","()",""],["to_s","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-i-to_s","()",""],["to_s","REXML::Declaration","classes/REXML/Declaration.html#method-i-to_s","()",""],["to_s","REXML::Entity","classes/REXML/Entity.html#method-i-to_s","()","<p>Returns this entity as a string.  See write().\n"],["to_s","REXML::ExternalEntity","classes/REXML/ExternalEntity.html#method-i-to_s","()",""],["to_s","REXML::Light::Node","classes/REXML/Light/Node.html#method-i-to_s","()",""],["to_s","REXML::Node","classes/REXML/Node.html#method-i-to_s","(indent=nil)","<p>indent &mdash; <strong>DEPRECATED</strong> This parameter is now ignored.  See the\nformatters in the REXML::Formatters package …\n\n"],["to_s","REXML::NotationDecl","classes/REXML/NotationDecl.html#method-i-to_s","()",""],["to_s","REXML::Output","classes/REXML/Output.html#method-i-to_s","()",""],["to_s","REXML::ParseException","classes/REXML/ParseException.html#method-i-to_s","()",""],["to_s","REXML::Text","classes/REXML/Text.html#method-i-to_s","()","<p>Returns the string value of this text node.  This string is always escaped,\nmeaning that it is a valid …\n"],["to_s","REXML::Validation::Event","classes/REXML/Validation/Event.html#method-i-to_s","()",""],["to_s","REXML::Validation::Ref","classes/REXML/Validation/Ref.html#method-i-to_s","()",""],["to_s","REXML::Validation::State","classes/REXML/Validation/State.html#method-i-to_s","()",""],["to_s","RSS::Element","classes/RSS/Element.html#method-i-to_s","(need_convert=true, indent='')",""],["to_s","RSS::XML::Element","classes/RSS/XML/Element.html#method-i-to_s","()",""],["to_s","RSS::XMLStyleSheet","classes/RSS/XMLStyleSheet.html#method-i-to_s","()",""],["to_s","Range","classes/Range.html#method-i-to_s","()","<p>Convert this range object to a printable form (using #to_s to convert the\nbegin and end objects).\n"],["to_s","Rational","classes/Rational.html#method-i-to_s","()","<p>Returns the value as a string.\n\n<pre><code>Rational(2).to_s      #=&gt; &quot;2/1&quot;\nRational(-8, 6).to_s  #=&gt; &quot;-4/3&quot;\nRational(&#39;1/2&#39;).to_s ...\n</code></pre>\n"],["to_s","Regexp","classes/Regexp.html#method-i-to_s","()","<p>Returns a string containing the regular expression and its options (using\nthe <code>(?opts:source)</code> notation. …\n"],["to_s","Resolv::DNS::Name","classes/Resolv/DNS/Name.html#method-i-to_s","()","<p>returns the domain name as a string.\n<p>The domain name doesn&#39;t have a trailing dot even if the name …\n"],["to_s","Set","classes/Set.html#method-i-to_s","()",""],["to_s","Shell::Filter","classes/Shell/Filter.html#method-i-to_s","()",""],["to_s","Socket::Option","classes/Socket/Option.html#method-i-to_s","()","<p>returns the socket option data as a string.\n\n<pre><code>p Socket::Option.new(:INET6, :IPV6, :RECVPKTINFO, [1].pack(&quot;i!&quot;)).data ...\n</code></pre>\n"],["to_s","String","classes/String.html#method-i-to_s","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_s","Struct","classes/Struct.html#method-i-to_s","()",""],["to_s","Symbol","classes/Symbol.html#method-i-to_s","()","<p>Returns the name or string corresponding to <em>sym</em>.\n\n<pre><code>:fred.id2name   #=&gt; &quot;fred&quot;\n:ginger.to_s    #=&gt; &quot;ginger&quot;\n</code></pre>\n"],["to_s","Thread","classes/Thread.html#method-i-to_s","()","<p>Dump the name, id, and status of <em>thr</em> to a string.\n"],["to_s","Thread::Backtrace::Location","classes/Thread/Backtrace/Location.html#method-i-to_s","()","<p>Returns a Kernel#caller style string representing this frame.\n"],["to_s","Time","classes/Time.html#method-i-to_s","()","<p>Returns a string representing <em>time</em>. Equivalent to calling\n#strftime with the appropriate format string. …\n"],["to_s","TrueClass","classes/TrueClass.html#method-i-to_s","()","<p>The string representation of <code>true</code> is “true”.\n"],["to_s","URI::FTP","classes/URI/FTP.html#method-i-to_s","()","<p>Returns a String representation of the URI::FTP.\n"],["to_s","URI::Generic","classes/URI/Generic.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["to_s","URI::MailTo","classes/URI/MailTo.html#method-i-to_s","()","<p>Constructs String from URI.\n"],["to_s","UnboundMethod","classes/UnboundMethod.html#method-i-to_s","()","<p>Returns a human-readable description of the underlying method.\n\n<pre><code>&quot;cat&quot;.method(:count).inspect   #=&gt; &quot;#&lt;Method: ...\n</code></pre>\n"],["to_s","UncaughtThrowError","classes/UncaughtThrowError.html#method-i-to_s","()","<p>Returns formatted message with the inspected tag.\n"],["to_s","WEBrick::Cookie","classes/WEBrick/Cookie.html#method-i-to_s","()","<p>The cookie string suitable for use in an HTTP header\n"],["to_s","WEBrick::HTTPUtils::FormData","classes/WEBrick/HTTPUtils/FormData.html#method-i-to_s","()","<p>This FormData&#39;s body\n"],["to_s","WEBrick::HTTPVersion","classes/WEBrick/HTTPVersion.html#method-i-to_s","()","<p>The HTTP version as show in the HTTP request and response.  For example,\n“1.1”\n"],["to_s","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-to_s","()",""],["to_s","WIN32OLE_PARAM","classes/WIN32OLE_PARAM.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-to_s","()",""],["to_s","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-to_s","()",""],["to_s","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-to_s","()",""],["to_set","Enumerable","classes/Enumerable.html#method-i-to_set","(klass = Set, *args, &block)","<p>Makes a set from the enumerable object with given arguments. Needs to\n+require “set”+ to use …\n"],["to_set","Set","classes/Set.html#method-i-to_set","(klass = Set, *args, &block)","<p>Returns self if no arguments are given.  Otherwise, converts the set to\nanother with klass.new(self, …\n"],["to_sockaddr","Addrinfo","classes/Addrinfo.html#method-i-to_sockaddr","()","<p>returns the socket address as packed struct sockaddr string.\n\n<pre><code>Addrinfo.tcp(&quot;localhost&quot;, 80).to_sockaddr ...\n</code></pre>\n"],["to_socket_address","Bundler::SocketAddress","classes/Bundler/SocketAddress.html#method-i-to_socket_address","()",""],["to_specs","Bundler::Resolver::SpecGroup","classes/Bundler/Resolver/SpecGroup.html#method-i-to_specs","()",""],["to_str","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-to_str","(p1 = v1)","<p>Returns the pointer contents as a string.\n<p>When called with no arguments, this method will return the contents …\n"],["to_str","String","classes/String.html#method-i-to_str","()","<p>Returns <code>self</code>.\n<p>If called on a subclass of String, converts the receiver to a String\nobject.\n"],["to_string","IPAddr","classes/IPAddr.html#method-i-to_string","()","<p>Returns a string containing the IP address representation in canonical\nform.\n"],["to_string","REXML::Attribute","classes/REXML/Attribute.html#method-i-to_string","()","<p>Returns this attribute out as XML source, expanding the name\n\n<pre><code>a = Attribute.new( &quot;x&quot;, &quot;y&quot; )\na.to_string ...\n</code></pre>\n"],["to_sym","String","classes/String.html#method-i-to_sym","()","<p>Returns the <code>Symbol</code> corresponding to <em>str</em>, creating the\nsymbol if it did not previously exist. See <code>Symbol#id2name</code> …\n"],["to_sym","Symbol","classes/Symbol.html#method-i-to_sym","()","<p>In general, <code>to_sym</code> returns the <code>Symbol</code>\ncorresponding to an object. As <em>sym</em> is already a symbol,\n<code>self</code> is …\n"],["to_text","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-to_text","()","<p>Returns a textual representation of this SPKI, useful for debugging\npurposes.\n"],["to_text","OpenSSL::PKey::DH","classes/OpenSSL/PKey/DH.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::DSA","classes/OpenSSL/PKey/DSA.html#method-i-to_text","()","<p>Prints all parameters of key to buffer INSECURE: PRIVATE INFORMATIONS CAN\nLEAK OUT!!! Don&#39;t use :-)) …\n"],["to_text","OpenSSL::PKey::EC","classes/OpenSSL/PKey/EC.html#method-i-to_text","()","<p>See the OpenSSL documentation for EC_KEY_print()\n"],["to_text","OpenSSL::PKey::EC::Group","classes/OpenSSL/PKey/EC/Group.html#method-i-to_text","()","<p>See the OpenSSL documentation for ECPKParameters_print()\n"],["to_text","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-to_text","()","<p>THIS METHOD IS INSECURE, PRIVATE INFORMATION CAN LEAK OUT!!!\n<p>Dumps all parameters of a keypair to a String …\n"],["to_text","OpenSSL::SSL::Session","classes/OpenSSL/SSL/Session.html#method-i-to_text","()","<p>Shows everything in the Session object. This is for diagnostic purposes.\n"],["to_text","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-to_text","()",""],["to_text","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-to_text","()",""],["to_time","Date","classes/Date.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","DateTime","classes/DateTime.html#method-i-to_time","()","<p>Returns a Time object which denotes self.\n"],["to_time","Time","classes/Time.html#method-i-to_time","()","<p>Returns self.\n"],["to_tty?","Exception","classes/Exception.html#method-c-to_tty-3F","()","<p>Returns <code>true</code> if exception messages will be sent to a tty.\n"],["to_utf8","OpenSSL::X509::Name","classes/OpenSSL/X509/Name.html#method-i-to_utf8","()","<p>Returns an UTF-8 representation of the distinguished name, as specified in\nRFC 2253.\n"],["to_value","Fiddle::Pointer","classes/Fiddle/Pointer.html#method-i-to_value","()","<p>Cast this pointer to a ruby object.\n"],["to_write_io","ARGF","classes/ARGF.html#method-i-to_write_io","()","<p>Returns IO instance tied to <em>ARGF</em> for writing if inplace mode is\nenabled.\n"],["to_xml","RSS::RootElementMixin","classes/RSS/RootElementMixin.html#method-i-to_xml","(type=nil, &block)",""],["to_yaml","Bundler::StubSpecification","classes/Bundler/StubSpecification.html#method-i-to_yaml","()",""],["to_yaml","Object","classes/Object.html#method-i-to_yaml","(options = {})","<p>Convert an object to YAML.  See Psych.dump for more information on the\navailable <code>options</code>.\n"],["to_yaml","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-to_yaml","(io = nil, options = {})",""],["today","Date","classes/Date.html#method-c-today","(p1 = v1)","<p>Creates a date object denoting the present day.\n\n<pre><code>Date.today   #=&gt; #&lt;Date: 2011-06-11 ...&gt;\n</code></pre>\n"],["toeuc","Kconv","classes/Kconv.html#method-c-toeuc","(str)","<p>Convert <code>str</code> to EUC-JP\n"],["toeuc","String","classes/String.html#method-i-toeuc","()","<p>Convert <code>self</code> to EUC-JP\n"],["tojis","Kconv","classes/Kconv.html#method-c-tojis","(str)","<p>Convert <code>str</code> to ISO-2022-JP\n"],["tojis","String","classes/String.html#method-i-tojis","()","<p>Convert <code>self</code> to ISO-2022-JP\n"],["token_stream","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-token_stream","()","<p>Current token stream\n"],["token_to_str","Racc::Parser","classes/Racc/Parser.html#method-i-token_to_str","(t)","<p>Convert internal ID of token symbol to the string.\n"],["tokenize","Psych::ScalarScanner","classes/Psych/ScalarScanner.html#method-i-tokenize","(string)","<p>Tokenize <code>string</code> returning the Ruby object\n"],["tokenize","RDoc::TomDoc","classes/RDoc/TomDoc.html#method-i-tokenize","(text)","<p>Turns text into an Array of tokens\n<p>text &mdash; A String containing TomDoc-format text.\n\n<p>Returns\n"],["tokenize","Ripper","classes/Ripper.html#method-c-tokenize","(src, filename = '-', lineno = 1)","<p>Tokenizes the Ruby program and returns an array of strings.\n\n<pre><code>p Ripper.tokenize(&quot;def m(a) nil end&quot;)\n   # ...\n</code></pre>\n"],["tokens_to_s","RDoc::TokenStream","classes/RDoc/TokenStream.html#method-i-tokens_to_s","()","<p>Returns a string representation of the token stream\n"],["tolocale","Kconv","classes/Kconv.html#method-c-tolocale","(str)","<p>Convert <code>self</code> to locale encoding\n"],["tolocale","String","classes/String.html#method-i-tolocale","()","<p>Convert <code>self</code> to locale encoding\n"],["tomdoc?","RDoc::Comment","classes/RDoc/Comment.html#method-i-tomdoc-3F","()","<p>Returns true if this comment is in TomDoc format.\n"],["top","IRB::Frame","classes/IRB/Frame.html#method-i-top","(n = 0)","<p>Returns the <code>n</code> number of frames on the call stack from the last\nframe initialized.\n<p>Raises FrameUnderflow …\n"],["top","IRB::Frame","classes/IRB/Frame.html#method-c-top","(n = 0)","<p>Convenience method for Frame#top\n"],["top","Net::POPMail","classes/Net/POPMail.html#method-i-top","(lines, dest = +'')","<p>Fetches the message header and <code>lines</code> lines of body.\n<p>The optional <code>dest</code> argument is obsolete.\n<p>This method …\n"],["top","OptionParser","classes/OptionParser.html#method-c-top","()",""],["top","OptionParser","classes/OptionParser.html#method-i-top","()","<p>Subject of #on / #on_head, #accept / #reject\n"],["top_level","RDoc::Context","classes/RDoc/Context.html#method-i-top_level","()","<p>Return the TopLevel that owns us\n"],["top_level","RDoc::Require","classes/RDoc/Require.html#method-i-top_level","()","<p>The RDoc::TopLevel corresponding to this require, or <code>nil</code> if\nnot found.\n"],["top_level_test","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-top_level_test","(command, file1, file2=nil)","<p>See Shell::CommandProcessor#test\n"],["toplevel_load","IRB::Locale","classes/IRB/Locale.html#method-i-toplevel_load","(file, priv=nil)",""],["tosjis","Kconv","classes/Kconv.html#method-c-tosjis","(str)","<p>Convert <code>str</code> to Shift_JIS\n"],["tosjis","String","classes/String.html#method-i-tosjis","()","<p>Convert <code>self</code> to Shift_JIS\n"],["total_in","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-total_in","()","<p>Returns the total bytes of the input data to the stream.  FIXME\n"],["total_out","Zlib::ZStream","classes/Zlib/ZStream.html#method-i-total_out","()","<p>Returns the total bytes of the output data from the stream.  FIXME\n"],["total_time","GC::Profiler","classes/GC/Profiler.html#method-c-total_time","()","<p>The total time used for garbage collection in seconds\n"],["touch","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification time (mtime) and access time (atime) of file(s) in\n<code>list</code>.  Files are created if they …\n"],["touch","FileUtils","classes/FileUtils.html#method-c-touch","(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)","<p>Updates modification time (mtime) and access time (atime) of file(s) in\n<code>list</code>.  Files are created if they …\n"],["toutf16","Kconv","classes/Kconv.html#method-c-toutf16","(str)","<p>Convert <code>str</code> to UTF-16\n"],["toutf16","String","classes/String.html#method-i-toutf16","()","<p>Convert <code>self</code> to UTF-16\n"],["toutf32","Kconv","classes/Kconv.html#method-c-toutf32","(str)","<p>Convert <code>str</code> to UTF-32\n"],["toutf32","String","classes/String.html#method-i-toutf32","()","<p>Convert <code>self</code> to UTF-32\n"],["toutf8","Kconv","classes/Kconv.html#method-c-toutf8","(str)","<p>Convert <code>str</code> to UTF-8\n"],["toutf8","String","classes/String.html#method-i-toutf8","()","<p>Convert <code>self</code> to UTF-8\n"],["tr","String","classes/String.html#method-i-tr","(p1, p2)","<p>Returns a copy of <code>str</code> with the characters in\n<code>from_str</code> replaced by the corresponding characters in\n<code>to_str</code> …\n"],["tr!","String","classes/String.html#method-i-tr-21","(p1, p2)","<p>Translates <em>str</em> in place, using the same rules as\n<code>String#tr</code>. Returns <em>str</em>, or <code>nil</code> if no\nchanges were made. …\n"],["tr_s","String","classes/String.html#method-i-tr_s","(p1, p2)","<p>Processes a copy of <em>str</em> as described under <code>String#tr</code>,\nthen removes duplicate characters in regions that …\n"],["tr_s!","String","classes/String.html#method-i-tr_s-21","(p1, p2)","<p>Performs <code>String#tr_s</code> processing on <em>str</em> in place,\nreturning <em>str</em>, or <code>nil</code> if no changes were made.\n"],["trace","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-trace","(e, newline = nil, force = false)",""],["trace","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-trace","(message, newline = nil, force = false)",""],["trace","Net::HTTP","classes/Net/HTTP.html#method-i-trace","(path, initheader = nil)","<p>Sends a TRACE request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["trace","TracePoint","classes/TracePoint.html#method-c-trace","(*args)","<p>A convenience method for TracePoint.new, that activates the trace\nautomatically.\n\n<pre><code>trace = TracePoint.trace(:call) ...\n</code></pre>\n"],["trace_func","IRB::Frame","classes/IRB/Frame.html#method-i-trace_func","(event, file, line, id, binding)","<p>Used by Kernel#set_trace_func to register each event in the call stack\n"],["trace_object_allocations","ObjectSpace","classes/ObjectSpace.html#method-c-trace_object_allocations","()","<p>Starts tracing object allocations from the ObjectSpace extension module.\n<p>For example:\n\n<pre><code>require &#39;objspace&#39; ...\n</code></pre>\n"],["trace_object_allocations_clear","ObjectSpace","classes/ObjectSpace.html#method-c-trace_object_allocations_clear","()","<p>Clear recorded tracing information.\n"],["trace_object_allocations_debug_start","ObjectSpace","classes/ObjectSpace.html#method-c-trace_object_allocations_debug_start","()",""],["trace_object_allocations_start","ObjectSpace","classes/ObjectSpace.html#method-c-trace_object_allocations_start","()","<p>Starts tracing object allocations.\n"],["trace_object_allocations_stop","ObjectSpace","classes/ObjectSpace.html#method-c-trace_object_allocations_stop","()","<p>Stop tracing object allocations.\n<p>Note that if ::trace_object_allocations_start is called n-times, then …\n"],["trace_points","RubyVM::InstructionSequence","classes/RubyVM/InstructionSequence.html#method-i-trace_points","()","<p>Return trace points in the instruction sequence. Return an array of [line,\nevent_symbol] pair.\n"],["trace_var","Kernel","classes/Kernel.html#method-i-trace_var","(p1, p2 = v2)","<p>Controls tracing of assignments to global variables. The parameter\n<code>symbol</code> identifies the variable (as …\n"],["transact","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-transact","(&block)","<p>Executes a block as self\n<p>Example:\n\n<pre><code>sh.transact { system(&quot;ls&quot;, &quot;-l&quot;) | head &gt; STDOUT }\n</code></pre>\n"],["transaction","PStore","classes/PStore.html#method-i-transaction","(read_only = false)","<p>Opens a new transaction for the data store.  Code executed inside a block\npassed to this method may read …\n"],["transfer","Fiber","classes/Fiber.html#method-i-transfer","(*args)","<p>Transfer control to another fiber, resuming it from where it last stopped\nor starting it if it was not …\n"],["transform","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-transform","()",""],["transform_keys","Hash","classes/Hash.html#method-i-transform_keys","()","<p>Returns a new hash with the results of running the block once for every\nkey. This method does not change …\n"],["transform_keys!","Hash","classes/Hash.html#method-i-transform_keys-21","()","<p>Invokes the given block once for each key in <em>hsh</em>, replacing it\nwith the new key returned by the block, …\n"],["transform_values","Hash","classes/Hash.html#method-i-transform_values","()","<p>Returns a new hash with the results of running the block once for every\nvalue. This method does not change …\n"],["transform_values!","Hash","classes/Hash.html#method-i-transform_values-21","()","<p>Invokes the given block once for each value in <em>hsh</em>, replacing it\nwith the new value returned by the block, …\n"],["translate","REXML::Functions","classes/REXML/Functions.html#method-c-translate","( string, tr1, tr2 )","<p>This is entirely Mike Stok&#39;s beast\n"],["transpose","Array","classes/Array.html#method-i-transpose","()","<p>Assumes that <code>self</code> is an array of arrays and transposes the\nrows and columns.\n\n<pre><code>a = [[1,2], [3,4], [5,6]] ...\n</code></pre>\n"],["trap","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-trap","(signal, override = false, &block)",""],["trap","Kernel","classes/Kernel.html#method-i-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["trap","Signal","classes/Signal.html#method-c-trap","(*args)","<p>Specifies the handling of signals. The first parameter is a signal name (a\nstring such as “SIGALRM&#39;&#39;, …\n"],["traverse","OpenSSL::ASN1","classes/OpenSSL/ASN1.html#method-c-traverse","(p1)","<p>If a block is given, it prints out each of the elements encountered. Block\nparameters are (in that order): …\n"],["tree","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-tree","()",""],["true","REXML::Functions","classes/REXML/Functions.html#method-c-true","( )","<p>UNTESTED\n"],["truffleruby?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-truffleruby-3F","()",""],["truncate","BigDecimal","classes/BigDecimal.html#method-i-truncate","(p1 = v1)","<p>Truncate to the nearest integer (by default), returning the result as a\nBigDecimal.\n\n<pre><code>BigDecimal(&#39;3.14159&#39;).truncate ...\n</code></pre>\n"],["truncate","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-truncate","(string, width)",""],["truncate","File","classes/File.html#method-c-truncate","(p1, p2)","<p>Truncates the file <em>file_name</em> to be at most <em>integer</em> bytes\nlong. Not available on all platforms.\n\n<pre><code>f = File.new(&quot;out&quot;, ...</code></pre>\n"],["truncate","File","classes/File.html#method-i-truncate","(p1)","<p>Truncates <em>file</em> to at most <em>integer</em> bytes. The file must be\nopened for writing. Not available on all platforms. …\n"],["truncate","Float","classes/Float.html#method-i-truncate","(*args)","<p>Returns <code>float</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the …\n"],["truncate","Integer","classes/Integer.html#method-i-truncate","(*args)","<p>Returns <code>int</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["truncate","Numeric","classes/Numeric.html#method-i-truncate","(*args)","<p>Returns <code>num</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>Numeric implements …\n"],["truncate","Pathname","classes/Pathname.html#method-i-truncate","(p1)","<p>Truncates the file to <code>length</code> bytes.\n<p>See File.truncate.\n"],["truncate","Rational","classes/Rational.html#method-i-truncate","(*args)","<p>Returns <code>rat</code> truncated (toward zero) to a precision of\n<code>ndigits</code> decimal digits (default: 0).\n<p>When the precision …\n"],["truncate","StringIO","classes/StringIO.html#method-i-truncate","(p1)","<p>Truncates the buffer string to at most <em>integer</em> bytes. The\n<strong>strio</strong> must be opened for writing.\n"],["trust","Delegator","classes/Delegator.html#method-i-trust","","<p>Trust both the object returned by _<em>getobj</em>_ and self.\n"],["trust","Object","classes/Object.html#method-i-trust","()","<p>Deprecated method that is equivalent to #untaint.\n"],["trust=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-trust-3D","(p1)",""],["trust=","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-trust-3D","(p1)",""],["try_activate","Gem","classes/Gem.html#method-c-try_activate","(path)","<p>Try to activate a gem containing <code>path</code>. Returns true if\nactivation succeeded or wasn&#39;t needed because …\n"],["try_const","MakeMakefile","classes/MakeMakefile.html#method-i-try_const","(const, headers = nil, opt = \"\", &b)","<p>Returns whether or not the constant <code>const</code> is defined.\n<p>See also <code>have_const</code>\n"],["try_convert","Array","classes/Array.html#method-c-try_convert","(p1)","<p>Tries to convert <code>obj</code> into an array, using <code>to_ary</code>\nmethod.  Returns the converted array or <code>nil</code> if\n<code>obj</code> cannot …\n"],["try_convert","Hash","classes/Hash.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a hash, using to_hash method. Returns\nconverted hash or nil if <em>obj</em> cannot be …\n"],["try_convert","IO","classes/IO.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into an IO, using to_io method. Returns\nconverted IO or <code>nil</code> if <em>obj</em> cannot be converted …\n"],["try_convert","Regexp","classes/Regexp.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a Regexp, using to_regexp method. Returns\nconverted regexp or nil if <em>obj</em> cannot …\n"],["try_convert","String","classes/String.html#method-c-try_convert","(p1)","<p>Try to convert <em>obj</em> into a String, using to_str method. Returns\nconverted string or nil if <em>obj</em> cannot …\n"],["try_lock","Mutex","classes/Mutex.html#method-i-try_lock","()","<p>Attempts to obtain the lock and returns immediately. Returns\n<code>true</code> if the lock was granted.\n"],["try_mon_enter","MonitorMixin","classes/MonitorMixin.html#method-i-try_mon_enter","()","<p>For backward compatibility\n"],["try_type","MakeMakefile","classes/MakeMakefile.html#method-i-try_type","(type, headers = nil, opt = \"\", &b)","<p>Returns whether or not the static type <code>type</code> is defined.\n<p>See also <code>have_type</code>\n"],["tsort","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-c-tsort","(vertices)","<p>Topologically sorts the given vertices. @param [Enumerable&lt;Vertex&gt;]\nvertices the vertices to be …\n"],["tsort","TSort","classes/TSort.html#method-c-tsort","(each_node, each_child)","<p>Returns a topologically sorted array of nodes. The array is sorted from\nchildren to parents, i.e. the …\n"],["tsort","TSort","classes/TSort.html#method-i-tsort","()","<p>Returns a topologically sorted array of nodes. The array is sorted from\nchildren to parents, i.e. the …\n"],["tsort_each","TSort","classes/TSort.html#method-c-tsort_each","(each_node, each_child)","<p>The iterator version of the TSort.tsort method.\n<p>The graph is represented by <em>each_node</em> and <em>each_child</em>. …\n"],["tsort_each","TSort","classes/TSort.html#method-i-tsort_each","()","<p>The iterator version of the #tsort method.\n<code><em>obj</em>.tsort_each</code> is similar to\n<code><em>obj</em>.tsort.each</code>, but modification …\n"],["tsort_each_child","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-tsort_each_child","(vertex, &block)","<p>@!visibility private\n"],["tsort_each_child","TSort","classes/TSort.html#method-i-tsort_each_child","(node)","<p>Should be implemented by a extended class.\n<p>#tsort_each_child is used to iterate for child nodes of <em>node</em> …\n"],["tsort_each_node","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-tsort_each_node","()","<p>@!visibility private\n"],["tsort_each_node","TSort","classes/TSort.html#method-i-tsort_each_node","()","<p>Should be implemented by a extended class.\n<p>#tsort_each_node is used to iterate for all nodes over a graph. …\n"],["tty?","IO","classes/IO.html#method-i-tty-3F","()","<p>Returns <code>true</code> if <em>ios</em> is associated with a terminal\ndevice (tty), <code>false</code> otherwise.\n\n<pre><code>File.new(&quot;testfile&quot;).isatty ...\n</code></pre>\n"],["tty?","StringIO","classes/StringIO.html#method-i-tty-3F","()","<p>Returns <code>false</code>.  Just for compatibility to IO.\n"],["tuesday?","Date","classes/Date.html#method-i-tuesday-3F","()","<p>Returns true if the date is Tuesday.\n"],["tuesday?","Time","classes/Time.html#method-i-tuesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Tuesday.\n\n<pre><code>t = Time.local(1991, 2, 19)      #=&gt; 1991-02-19 00:00:00 -0600 ...\n</code></pre>\n"],["tv_nsec","Time","classes/Time.html#method-i-tv_nsec","()","<p>Returns the number of nanoseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-17 15:18:03 +0900\n&quot;%10.9f&quot; ...\n</code></pre>\n"],["tv_sec","Time","classes/Time.html#method-i-tv_sec","()","<p>Returns the value of <em>time</em> as an integer number of seconds since\nthe Epoch.\n\n<pre><code>t = Time.now\n&quot;%10.5f&quot; % t.to_f ...\n</code></pre>\n"],["tv_usec","Time","classes/Time.html#method-i-tv_usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...\n</code></pre>\n"],["type","Bundler::DepProxy","classes/Bundler/DepProxy.html#method-i-type","()",""],["type","ObjectSpace::InternalObjectWrapper","classes/ObjectSpace/InternalObjectWrapper.html#method-i-type","()","<p>Returns the type of the internal object.\n"],["type","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-type","()",""],["type","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-type","()","<p>&#39;module&#39; or &#39;class&#39;\n"],["type","RDoc::MethodAttr","classes/RDoc/MethodAttr.html#method-i-type","()","<p>Type of method/attribute (class or instance)\n"],["type","RubyVM::AbstractSyntaxTree::Node","classes/RubyVM/AbstractSyntaxTree/Node.html#method-i-type","()","<p>Returns the type of this node as a symbol.\n\n<pre><code>root = RubyVM::AbstractSyntaxTree.parse(&quot;x = 1 + 2&quot;)\nroot.type ...\n</code></pre>\n"],["type","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-type","()","<p>returns the cmsg type as an integer.\n\n<pre><code>p Socket::AncillaryData.new(:INET6, :IPV6, :PKTINFO, &quot;&quot;).type\n#=&gt; ...\n</code></pre>\n"],["type=","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-type-3D","(p1)",""],["typealias","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-typealias","(alias_type, orig_type)","<p>Sets the type alias for <code>alias_type</code> as <code>orig_type</code>\n"],["typecode=","URI::FTP","classes/URI/FTP.html#method-i-typecode-3D","(typecode)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["typekind","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-typekind","()","<p>Returns number which represents type.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Word 10.0 Object Library&#39;, &#39;Documents&#39;) ...\n</code></pre>\n"],["typelibs","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-c-typelibs","()","<p>Returns array of type libraries. This method will be OBSOLETE. Use\nWIN32OLE_TYPELIB.typelibs.collect{|t| …\n"],["typelibs","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-c-typelibs","()","<p>Returns the array of WIN32OLE_TYPELIB object.\n\n<pre><code>tlibs = WIN32OLE_TYPELIB.typelibs\n</code></pre>\n"],["typename","WIN32OLE_RECORD","classes/WIN32OLE_RECORD.html#method-i-typename","()","<p>Returns the type name of VT_RECORD OLE variable.\n<p>If COM server in VB.NET ComServer project is the following: …\n"],["u","ERB::Util","classes/ERB/Util.html#method-c-u","(s)",""],["u","Matrix::LUPDecomposition","classes/Matrix/LUPDecomposition.html#method-i-u","()","<p>Returns the upper triangular factor <code>U</code>\n"],["ucmp","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-ucmp","(p1)",""],["udp","Addrinfo","classes/Addrinfo.html#method-c-udp","(p1, p2)","<p>returns an addrinfo object for UDP address.\n\n<pre><code>Addrinfo.udp(&quot;localhost&quot;, &quot;daytime&quot;) #=&gt; #&lt;Addrinfo: 127.0.0.1:13 ...\n</code></pre>\n"],["udp_server_loop","Socket","classes/Socket.html#method-c-udp_server_loop","(host=nil, port)","<p>creates a UDP/IP server on <em>port</em> and calls the block for each\nmessage arrived. The block is called with …\n"],["udp_server_loop_on","Socket","classes/Socket.html#method-c-udp_server_loop_on","(sockets)","<p>Run UDP/IP server loop on the given sockets.\n<p>The return value of Socket.udp_server_sockets is appropriate …\n"],["udp_server_recv","Socket","classes/Socket.html#method-c-udp_server_recv","(sockets)","<p>Receive UDP/IP packets from the given <em>sockets</em>. For each packet\nreceived, the block is called.\n<p>The block …\n"],["udp_server_sockets","Socket","classes/Socket.html#method-c-udp_server_sockets","(host=nil, port)","<p>Creates UDP/IP sockets for a UDP server.\n<p>If no block given, it returns an array of sockets.\n<p>If a block …\n"],["ui","Bundler","classes/Bundler.html#method-c-ui","()",""],["ui","Gem","classes/Gem.html#method-c-ui","()","<p>Lazily loads DefaultUserInteraction and returns the default UI.\n"],["ui=","Bundler","classes/Bundler.html#method-c-ui-3D","(ui)",""],["uid","File::Stat","classes/File/Stat.html#method-i-uid","()","<p>Returns the numeric user id of the owner of <em>stat</em>.\n\n<pre><code>File.stat(&quot;testfile&quot;).uid   #=&gt; 501\n</code></pre>\n"],["uid","Process","classes/Process.html#method-c-uid","()","<p>Returns the (real) user ID of this process.\n\n<pre><code>Process.uid   #=&gt; 501\n</code></pre>\n"],["uid=","Process","classes/Process.html#method-c-uid-3D","(p1)","<p>Sets the (user) user ID for this process. Not available on all platforms.\n"],["uid_copy","Net::IMAP","classes/Net/IMAP.html#method-i-uid_copy","(set, mailbox)","<p>Similar to #copy(), but <code>set</code> contains unique identifiers.\n"],["uid_fetch","Net::IMAP","classes/Net/IMAP.html#method-i-uid_fetch","(set, attr, mod = nil)","<p>Similar to #fetch(), but <code>set</code> contains unique identifiers.\n"],["uid_move","Net::IMAP","classes/Net/IMAP.html#method-i-uid_move","(set, mailbox)","<p>Similar to #move(), but <code>set</code> contains unique identifiers.\n"],["uid_search","Net::IMAP","classes/Net/IMAP.html#method-i-uid_search","(keys, charset = nil)","<p>Similar to #search(), but returns unique identifiers.\n"],["uid_sort","Net::IMAP","classes/Net/IMAP.html#method-i-uid_sort","(sort_keys, search_keys, charset)","<p>Similar to #sort(), but returns an array of unique identifiers.\n"],["uid_store","Net::IMAP","classes/Net/IMAP.html#method-i-uid_store","(set, attr, flags)","<p>Similar to #store(), but <code>set</code> contains unique identifiers.\n"],["uid_thread","Net::IMAP","classes/Net/IMAP.html#method-i-uid_thread","(algorithm, search_keys, charset)","<p>Similar to #thread(), but returns unique identifiers instead of message\nsequence numbers.\n"],["uidl","Net::POPMail","classes/Net/POPMail.html#method-i-uidl","()",""],["umask","File","classes/File.html#method-c-umask","(*args)","<p>Returns the current umask value for this process. If the optional argument\nis given, set the umask to …\n"],["umount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-umount","(dir)",""],["unadvise","WIN32OLE_EVENT","classes/WIN32OLE_EVENT.html#method-i-unadvise","()","<p>disconnects OLE server. If this method called, then the WIN32OLE_EVENT\nobject does not receive the OLE …\n"],["unalias_command","Shell","classes/Shell.html#method-c-unalias_command","(ali)","<p>Convenience method for Shell::CommandProcessor.unalias_command\n"],["unalias_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-unalias_command","(ali)","<p>Unaliases the given <code>alias</code> command.\n"],["uname","Etc","classes/Etc.html#method-c-uname","()","<p>Returns the system information obtained by uname system call.\n<p>The return value is a hash which has 5 keys …\n"],["unbind","Method","classes/Method.html#method-i-unbind","()","<p>Dissociates <em>meth</em> from its current receiver. The resulting\n<code>UnboundMethod</code> can subsequently be bound to …\n"],["uncomment_lines","Bundler::Thor::Actions","classes/Bundler/Thor/Actions.html#method-i-uncomment_lines","(path, flag, *args)","<p>Uncomment all lines matching a given regex.  It will leave the space which\nexisted before the comment …\n"],["unconverted_fields?","CSV","classes/CSV.html#method-i-unconverted_fields-3F","()","<p>Returns <code>true</code> if unconverted_fields() to parsed results.  See\nCSV::new for details.\n"],["unconverted_fields?","CSV::Parser","classes/CSV/Parser.html#method-i-unconverted_fields-3F","()",""],["undef_method","Module","classes/Module.html#method-i-undef_method","(*args)","<p>Prevents the current class from responding to calls to the named method.\nContrast this with <code>remove_method</code> …\n"],["undef_system_command","Shell","classes/Shell.html#method-c-undef_system_command","(command)","<p>Convenience method for Shell::CommandProcessor.undef_system_command\n"],["undef_system_command","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-c-undef_system_command","(command)","<p>Undefines a command\n"],["undefine_finalizer","ObjectSpace","classes/ObjectSpace.html#method-c-undefine_finalizer","(p1)","<p>Removes all finalizers for <em>obj</em>.\n"],["undoc_params","RDoc::Stats","classes/RDoc/Stats.html#method-i-undoc_params","(method)","<p>Determines which parameters in <code>method</code> were not documented. \nReturns a total parameter count and an Array …\n"],["undump","String","classes/String.html#method-i-undump","()","<p>Produces unescaped version of <code>str</code>. See also String#dump\nbecause String#undump does inverse of String#dump …\n"],["unescape","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-unescape","(str)","<p>URI::unescape wrapper\n"],["unescape","CGI::Util","classes/CGI/Util.html#method-i-unescape","(string,encoding=@@accept_charset)","<p>URL-decode a string with encoding(optional).\n\n<pre><code>string = CGI::unescape(&quot;%27Stop%21%27+said+Fred&quot;)\n   # =&gt; ...\n</code></pre>\n"],["unescape","URI::Escape","classes/URI/Escape.html#method-i-unescape","(*arg)","<p>Synopsis\n\n<pre><code>URI.unescape(str)\n</code></pre>\n<p>Args\n"],["unescape","URI::RFC2396_Parser","classes/URI/RFC2396_Parser.html#method-i-unescape","(str, escaped = @regexp[:ESCAPED])","<p>Args\n<p><code>str</code> &mdash; String to remove escapes from\n<p><code>escaped</code> &mdash; Regexp to apply. Defaults to self.regexp\n"],["unescape","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-unescape","(str)","<p>Unescapes HTTP reserved and unwise characters in <code>str</code>\n"],["unescapeElement","CGI::Util","classes/CGI/Util.html#method-i-unescapeElement","(string, *elements)","<p>Undo escaping such as that done by CGI::escapeElement()\n\n<pre><code>print CGI::unescapeElement(\n        CGI::escapeHTML(&#39;&lt;BR&gt;&lt;A ...</code></pre>\n"],["unescapeHTML","CGI::Util","classes/CGI/Util.html#method-i-unescapeHTML","(string)","<p>Unescape a string that has been HTML-escaped\n\n<pre><code>CGI::unescapeHTML(&quot;Usage: foo &amp;quot;bar&amp;quot; &amp;lt;baz&amp;gt;&quot;) ...\n</code></pre>\n"],["unescape_element","CGI::Util","classes/CGI/Util.html#method-i-unescape_element","(string, *elements)","<p>Synonym for CGI::unescapeElement(str)\n"],["unescape_form","WEBrick::HTTPUtils","classes/WEBrick/HTTPUtils.html#method-i-unescape_form","(str)","<p>Unescapes form reserved characters in <code>str</code>\n"],["unescape_html","CGI::Util","classes/CGI/Util.html#method-i-unescape_html","(string)","<p>Synonym for CGI::unescapeHTML(str)\n"],["ungetbyte","IO","classes/IO.html#method-i-ungetbyte","(p1)","<p>Pushes back bytes (passed as a parameter) onto <em>ios</em>, such that a\nsubsequent buffered read will return …\n"],["ungetbyte","StringIO","classes/StringIO.html#method-i-ungetbyte","(p1)","<p>See IO#ungetbyte\n"],["ungetbyte","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-ungetbyte","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["ungetc","IO","classes/IO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto <em>ios</em>, such\nthat a subsequent buffered character …\n"],["ungetc","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-ungetc","(c)","<p>Pushes character <em>c</em> back onto the stream such that a subsequent\nbuffered character read will return it. …\n"],["ungetc","StringIO","classes/StringIO.html#method-i-ungetc","(p1)","<p>Pushes back one character (passed as a parameter) onto\n<strong>strio</strong> such that a subsequent buffered read will …\n"],["ungetc","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-ungetc","(p1)","<p>See Zlib::GzipReader documentation for a description.\n"],["unicode_normalize","String","classes/String.html#method-i-unicode_normalize","(*args)","<p>Unicode Normalization—Returns a normalized form of <code>str</code>, using\nUnicode normalizations NFC, NFD, NFKC …\n"],["unicode_normalize!","String","classes/String.html#method-i-unicode_normalize-21","(*args)","<p>Destructive version of String#unicode_normalize, doing Unicode\nnormalization in place.\n"],["unicode_normalized?","String","classes/String.html#method-i-unicode_normalized-3F","(*args)","<p>Checks whether <code>str</code> is in Unicode normalization form\n<code>form</code>, which can be any of the four values <code>:nfc</code>, \n…\n"],["union","Array","classes/Array.html#method-i-union","(*args)","<p>Set Union — Returns a new array by joining <code>other_ary</code>s with\n<code>self</code>, excluding any duplicates and preserving …\n"],["union","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-union","(signature)","<p>Creates a class to wrap the C union described by <code>signature</code>.\n\n<pre><code>MyUnion = union [&#39;int i&#39;, &#39;char c&#39;]\n</code></pre>\n"],["union","Regexp","classes/Regexp.html#method-c-union","(*args)","<p>Return a <code>Regexp</code> object that is the union of the given\n<em>pattern</em>s, i.e., will match any of its parts. The …\n"],["union","Set","classes/Set.html#method-i-union","(enum)",""],["uniq","Array","classes/Array.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>If a block is given, it will use the return …\n"],["uniq","Enumerable","classes/Enumerable.html#method-i-uniq","()","<p>Returns a new array by removing duplicate values in <code>self</code>.\n<p>See also Array#uniq.\n"],["uniq","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-uniq","()",""],["uniq!","Array","classes/Array.html#method-i-uniq-21","()","<p>Removes duplicate elements from <code>self</code>.\n<p>If a block is given, it will use the return value of the block for …\n"],["unique_classes","RDoc::Store","classes/RDoc/Store.html#method-i-unique_classes","()","<p>Returns the unique classes discovered by RDoc.\n<p>::complete must have been called prior to using this method. …\n"],["unique_classes_and_modules","RDoc::Store","classes/RDoc/Store.html#method-i-unique_classes_and_modules","()","<p>Returns the unique classes and modules discovered by RDoc. ::complete must\nhave been called prior to …\n"],["unique_id","Net::POPMail","classes/Net/POPMail.html#method-i-unique_id","()","<p>Returns the unique-id of the message. Normally the unique-id is a hash\nstring of the message.\n<p>This method …\n"],["unique_modules","RDoc::Store","classes/RDoc/Store.html#method-i-unique_modules","()","<p>Returns the unique modules discovered by RDoc. ::complete must have been\ncalled prior to using this method. …\n"],["unit","Matrix","classes/Matrix.html#method-c-unit","(n)",""],["unix","Addrinfo","classes/Addrinfo.html#method-c-unix","(p1, p2 = v2)","<p>returns an addrinfo object for UNIX socket address.\n<p><em>socktype</em> specifies the socket type. If it is omitted, …\n"],["unix","Socket","classes/Socket.html#method-c-unix","(path)","<p>creates a new socket connected to path using UNIX socket socket.\n<p>If a block is given, the block is called …\n"],["unix?","Addrinfo","classes/Addrinfo.html#method-i-unix-3F","()","<p>returns true if addrinfo is UNIX address. returns false otherwise.\n\n<pre><code>Addrinfo.tcp(&quot;127.0.0.1&quot;, 80).unix? ...\n</code></pre>\n"],["unix?","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-unix-3F","()",""],["unix_path","Addrinfo","classes/Addrinfo.html#method-i-unix_path","()","<p>Returns the socket path as a string.\n\n<pre><code>Addrinfo.unix(&quot;/tmp/sock&quot;).unix_path       #=&gt; &quot;/tmp/sock&quot;\n</code></pre>\n"],["unix_rights","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-c-unix_rights","(*args)","<p>Creates a new Socket::AncillaryData object which contains file descriptors\nas data.\n\n<pre><code>p Socket::AncillaryData.unix_rights(STDERR) ...\n</code></pre>\n"],["unix_rights","Socket::AncillaryData","classes/Socket/AncillaryData.html#method-i-unix_rights","()","<p>returns the array of IO objects for SCM_RIGHTS control message in UNIX\ndomain socket.\n<p>The class of the …\n"],["unix_server_loop","Socket","classes/Socket.html#method-c-unix_server_loop","(path)","<p>creates a UNIX socket server on <em>path</em>. It calls the block for each\nsocket accepted.\n<p>If <em>host</em> is specified, …\n"],["unix_server_socket","Socket","classes/Socket.html#method-c-unix_server_socket","(path)","<p>creates a UNIX server socket on <em>path</em>\n<p>If no block given, it returns a listening socket.\n<p>If a block is given, …\n"],["unknown","Logger","classes/Logger.html#method-i-unknown","(progname = nil, &block)","<p>Log an <code>UNKNOWN</code> message.  This will be printed no matter what\nthe logger&#39;s level is.\n<p>See #info for …\n"],["unknown","Syslog::Logger","classes/Syslog/Logger.html#method-i-unknown","","<p>Logs a <code>message</code> at the unknown (syslog alert) log level, or\nlogs the message returned from the block. …\n"],["unknown_sections_in_lockfile","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#method-c-unknown_sections_in_lockfile","(lockfile_contents)",""],["unlink","Dir","classes/Dir.html#method-c-unlink","(p1)","<p>Deletes the named directory. Raises a subclass of\n<code>SystemCallError</code> if the directory isn&#39;t empty.\n"],["unlink","File","classes/File.html#method-c-unlink","(*args)","<p>Deletes the named files, returning the number of names passed as arguments.\nRaises an exception on any …\n"],["unlink","Pathname","classes/Pathname.html#method-i-unlink","()","<p>Removes a file or directory, using File.unlink if <code>self</code> is a\nfile, or Dir.unlink as necessary.\n"],["unlink","Shell::CommandProcessor","classes/Shell/CommandProcessor.html#method-i-unlink","(path)","<p>See IO.unlink when <code>path</code> is a file.\n<p>See Dir.unlink when <code>path</code> is a directory.\n"],["unlink","Tempfile","classes/Tempfile.html#method-i-unlink","()","<p>Unlinks (deletes) the file from the filesystem. One should always unlink\nthe file after using it, as …\n"],["unlock","Mutex","classes/Mutex.html#method-i-unlock","()","<p>Releases the lock. Raises <code>ThreadError</code> if <code>mutex</code>\nwasn&#39;t locked by the current thread.\n"],["unlock","Net::HTTP","classes/Net/HTTP.html#method-i-unlock","(path, body, initheader = nil)","<p>Sends a UNLOCK request to the <code>path</code> and gets a response, as an\nHTTPResponse object.\n"],["unlock!","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-unlock-21","()","<p>This is called to update the spec and installation.\n<p>If the source plugin is loaded from lockfile or otherwise, …\n"],["unlock!","Bundler::Source::Git","classes/Bundler/Source/Git.html#method-i-unlock-21","()",""],["unlocking?","Bundler::Definition","classes/Bundler/Definition.html#method-i-unlocking-3F","()",""],["unmarshalled_dep_gems","Bundler::Fetcher::Dependency","classes/Bundler/Fetcher/Dependency.html#method-i-unmarshalled_dep_gems","(gem_names)",""],["unmet_dependency_names","Bundler::Index","classes/Bundler/Index.html#method-i-unmet_dependency_names","()","<p>returns a list of the dependencies\n"],["unmet_deps","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-unmet_deps","()","<p>Used by definition.\n<p>Note: Do not override if you don&#39;t know what you are doing.\n"],["unmet_deps","Bundler::Source","classes/Bundler/Source.html#method-i-unmet_deps","()",""],["unmount","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-unmount","(dir)","<p>Unmounts <code>dir</code>\n"],["unnormalize","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-unnormalize","( string, entities=nil, filter=nil )","<p>Unescapes all possible entities\n"],["unnormalized","REXML::Entity","classes/REXML/Entity.html#method-i-unnormalized","()","<p>Evaluates to the unnormalized value of this entity; that is, replacing all\nentities – both %ent; and …\n"],["unpack","Socket::Option","classes/Socket/Option.html#method-i-unpack","(p1)","<p>Calls String#unpack on sockopt.data.\n\n<pre><code>sockopt = Socket::Option.new(:INET, :SOCKET, :KEEPALIVE, [1].pack(&quot;i&quot;)) ...\n</code></pre>\n"],["unpack","String","classes/String.html#method-i-unpack","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning an array of each …\n"],["unpack1","String","classes/String.html#method-i-unpack1","(p1)","<p>Decodes <em>str</em> (which may contain binary data) according to the\nformat string, returning the first value …\n"],["unpack_sockaddr_in","Socket","classes/Socket.html#method-c-unpack_sockaddr_in","(p1)","<p>Unpacks <em>sockaddr</em> into port and ip_address.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_INET/AF_INET6. …\n"],["unpack_sockaddr_un","Socket","classes/Socket.html#method-c-unpack_sockaddr_un","(p1)","<p>Unpacks <em>sockaddr</em> into path.\n<p><em>sockaddr</em> should be a string or an addrinfo for AF_UNIX.\n\n<pre><code>sockaddr = Socket.sockaddr_un(&quot;/tmp/sock&quot;) ...\n</code></pre>\n"],["unprinted_warnings","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-unprinted_warnings","()",""],["unprinted_warnings","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-unprinted_warnings","()",""],["unregist","DRb::ExtServManager","classes/DRb/ExtServManager.html#method-i-unregist","(name)",""],["unscan","StringScanner","classes/StringScanner.html#method-i-unscan","()","<p>Set the scan pointer to the previous position.  Only one previous position\nis remembered, and it changes …\n"],["unshift","Array","classes/Array.html#method-i-unshift","(*args)","<p>Prepends objects to the front of <code>self</code>, moving other elements\nupwards. See also Array#shift for the opposite …\n"],["unshift","REXML::Parent","classes/REXML/Parent.html#method-i-unshift","( object )",""],["unshift","REXML::Parsers::BaseParser","classes/REXML/Parsers/BaseParser.html#method-i-unshift","(token)","<p>Push an event back on the head of the stream.  This method has\n(theoretically) infinite depth.\n"],["unshift","REXML::Parsers::PullParser","classes/REXML/Parsers/PullParser.html#method-i-unshift","(token)",""],["unsorted_search","Bundler::Index","classes/Bundler/Index.html#method-i-unsorted_search","(query, base)",""],["unsubscribe","Net::IMAP","classes/Net/IMAP.html#method-i-unsubscribe","(mailbox)","<p>Sends a UNSUBSCRIBE command to remove the specified <code>mailbox</code>\nname from the server&#39;s set of “active” …\n"],["untaint","Delegator","classes/Delegator.html#method-i-untaint","","<p>Untaint both the object returned by _<em>getobj</em>_ and self.\n"],["untaint","Object","classes/Object.html#method-i-untaint","()","<p>Removes the tainted mark from the object.\n<p>See #taint for more information.\n"],["untaint","Pathname","classes/Pathname.html#method-i-untaint","()","<p>Untaints this Pathname.\n<p>See Object.untaint.\n"],["untrace_var","Kernel","classes/Kernel.html#method-i-untrace_var","(p1, p2 = v2)","<p>Removes tracing for the specified command on the given global variable and\nreturns <code>nil</code>. If no command …\n"],["untrust","Delegator","classes/Delegator.html#method-i-untrust","","<p>Untrust both the object returned by _<em>getobj</em>_ and self.\n"],["untrust","Object","classes/Object.html#method-i-untrust","()","<p>Deprecated method that is equivalent to #taint.\n"],["untrusted?","Object","classes/Object.html#method-i-untrusted-3F","()","<p>Deprecated method that is equivalent to #tainted?.\n"],["unused","Zlib::GzipReader","classes/Zlib/GzipReader.html#method-i-unused","()","<p>Returns the rest of the data which had read for parsing gzip format, or\n<code>nil</code> if the whole gzip file is …\n"],["unused_unwind_options","Bundler::Molinillo::Delegates::ResolutionState","classes/Bundler/Molinillo/Delegates/ResolutionState.html#method-i-unused_unwind_options","()","<p>(see Bundler::Molinillo::ResolutionState#unused_unwind_options)\n"],["unwinding_to_primary_requirement?","Bundler::Molinillo::Resolver::Resolution::UnwindDetails","classes/Bundler/Molinillo/Resolver/Resolution/UnwindDetails.html#method-i-unwinding_to_primary_requirement-3F","()","<p>@return [Boolean] where the requirement of the state we&#39;re unwinding\n\n<pre><code>to directly caused the conflict. ...</code></pre>\n"],["up","Bundler::Molinillo::DependencyGraph::Action","classes/Bundler/Molinillo/DependencyGraph/Action.html#method-i-up","(graph)","<p>Performs the action on the given graph. @param  [DependencyGraph] graph the\ngraph to perform the action …\n"],["up","Bundler::Molinillo::DependencyGraph::AddEdgeNoCircular","classes/Bundler/Molinillo/DependencyGraph/AddEdgeNoCircular.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Bundler::Molinillo::DependencyGraph::DeleteEdge","classes/Bundler/Molinillo/DependencyGraph/DeleteEdge.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Bundler::Molinillo::DependencyGraph::DetachVertexNamed","classes/Bundler/Molinillo/DependencyGraph/DetachVertexNamed.html#method-i-up","(graph)","<p>(see Action#up)\n"],["up","Bundler::Molinillo::DependencyGraph::Tag","classes/Bundler/Molinillo/DependencyGraph/Tag.html#method-i-up","(_graph)","<p>(see Action#up)\n"],["upcase","String","classes/String.html#method-i-upcase","(*args)","<p>Returns a copy of <em>str</em> with all lowercase letters replaced with\ntheir uppercase counterparts.\n<p>See String#downcase …\n"],["upcase","Symbol","classes/Symbol.html#method-i-upcase","(*args)","<p>Same as <code>sym.to_s.upcase.intern</code>.\n"],["upcase!","String","classes/String.html#method-i-upcase-21","(*args)","<p>Upcases the contents of <em>str</em>, returning <code>nil</code> if no\nchanges were made.\n<p>See String#downcase for meaning of …\n"],["update","Bundler::CLI","classes/Bundler/CLI.html#method-i-update","(*gems)",""],["update","Bundler::CompactIndexClient::Updater","classes/Bundler/CompactIndexClient/Updater.html#method-i-update","(local_path, remote_path, retrying = nil)",""],["update","CGI::Session","classes/CGI/Session.html#method-i-update","()","<p>Store session data on the server.  For some session storage types, this is\na no-op.\n"],["update","CGI::Session::FileStore","classes/CGI/Session/FileStore.html#method-i-update","()","<p>Save session state to the session&#39;s FileStore file.\n"],["update","CGI::Session::MemoryStore","classes/CGI/Session/MemoryStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::NullStore","classes/CGI/Session/NullStore.html#method-i-update","()","<p>Update session state.\n<p>A no-op.\n"],["update","CGI::Session::PStore","classes/CGI/Session/PStore.html#method-i-update","()","<p>Save session state to the session&#39;s PStore file.\n"],["update","DBM","classes/DBM.html#method-i-update","(p1)","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["update","Digest::Base","classes/Digest/Base.html#method-i-update","(p1)","<p>Update the digest using given <em>string</em> and return <code>self</code>.\n"],["update","Digest::Instance","classes/Digest/Instance.html#method-i-update","(p1)","<p>Updates the digest using a given <em>string</em> and returns self.\n<p>The update() method and the left-shift operator …\n"],["update","ENV","classes/ENV.html#method-c-update","(p1)","<p>Adds the contents of <code>hash</code> to the environment variables.  If no\nblock is specified entries with duplicate …\n"],["update","GDBM","classes/GDBM.html#method-i-update","(p1)","<p>Adds the key-value pairs of <em>other</em> to <em>gdbm</em>, overwriting\nentries with duplicate keys with those from <em>other</em> …\n"],["update","Hash","classes/Hash.html#method-i-update","(*args)","<p>Adds the contents of the given hashes to the receiver.\n<p>If no block is given, entries with duplicate keys …\n"],["update","OpenSSL::Cipher","classes/OpenSSL/Cipher.html#method-i-update","(p1, p2 = v2)","<p>Encrypts data in a streaming fashion. Hand consecutive blocks of data to\nthe #update method in order …\n"],["update","OpenSSL::Digest","classes/OpenSSL/Digest.html#method-i-update","(p1)","<p>Not every message digest can be computed in one single pass. If a message\ndigest is to be computed from …\n"],["update","OpenSSL::HMAC","classes/OpenSSL/HMAC.html#method-i-update","(p1)","<p>Returns <em>hmac</em> updated with the message to be authenticated. Can be\ncalled repeatedly with chunks of the …\n"],["update","SDBM","classes/SDBM.html#method-i-update","(p1)","<p>Insert or update key-value pairs.\n<p>This method will work with any object which implements an each_pair …\n"],["update","YAML::DBM","classes/YAML/DBM.html#method-i-update","( hsh )","<p>Updates the database with multiple values from the specified object. Takes\nany object which implements …\n"],["update_aliases","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_aliases","()","<p>Updates the child modules &amp; classes by replacing the ones that are\naliases through a constant.\n<p>The …\n"],["update_and_parse_checksums!","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-i-update_and_parse_checksums-21","()",""],["update_extends","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_extends","()","<p>Deletes from #extends those whose module has been removed from the\ndocumentation.\n"],["update_includes","RDoc::ClassModule","classes/RDoc/ClassModule.html#method-i-update_includes","()","<p>Deletes from #includes those whose module has been removed from the\ndocumentation.\n"],["update_mirror","Bundler::Settings::MirrorConfig","classes/Bundler/Settings/MirrorConfig.html#method-i-update_mirror","(mirror)",""],["update_output_dir","RDoc::RDoc","classes/RDoc/RDoc.html#method-i-update_output_dir","(op_dir, time, last = {})","<p>Update the flag file in an output directory.\n"],["update_parser_of_file","RDoc::Store","classes/RDoc/Store.html#method-i-update_parser_of_file","(absolute_name, parser)",""],["updated","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-updated","()",""],["updated","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-updated","()",""],["updated","RSS::Maker::ItemsBase::ItemBase::SourceBase","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-updated","()",""],["updated=","RSS::Maker::ChannelBase","classes/RSS/Maker/ChannelBase.html#method-i-updated-3D","(date)",""],["updated=","RSS::Maker::ItemsBase::ItemBase","classes/RSS/Maker/ItemsBase/ItemBase.html#method-i-updated-3D","(date)",""],["updated=","RSS::Maker::ItemsBase::ItemBase::SourceBase","classes/RSS/Maker/ItemsBase/ItemBase/SourceBase.html#method-i-updated-3D","(date)",""],["upgrade_to_class","RDoc::Context","classes/RDoc/Context.html#method-i-upgrade_to_class","(mod, class_type, enclosing)","<p>Upgrades NormalModule <code>mod</code> in <code>enclosing</code> to a\n<code>class_type</code>\n"],["upper_bound","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-upper_bound","()",""],["upper_bound=","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-upper_bound-3D","(ubound)",""],["upto","Date","classes/Date.html#method-i-upto","(p1)","<p>This method is equivalent to step(max, 1){|date| …}.\n"],["upto","Integer","classes/Integer.html#method-i-upto","(p1)","<p>Iterates the given block, passing in integer values from <code>int</code>\nup to and including <code>limit</code>.\n<p>If no block is …\n"],["upto","String","classes/String.html#method-i-upto","(p1, p2 = v2)","<p>Iterates through successive values, starting at <em>str</em> and ending at\n<em>other_str</em> inclusive, passing each value …\n"],["uptodate?","Bundler::FileUtils","classes/Bundler/FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns true if <code>new</code> is newer than all <code>old_list</code>.\nNon-existent files are older than any file.\n\n<pre><code>Bundler::FileUtils.uptodate?(&#39;hello.o&#39;, ...</code></pre>\n"],["uptodate?","FileUtils","classes/FileUtils.html#method-c-uptodate-3F","(new, old_list)","<p>Returns true if <code>new</code> is newer than all <code>old_list</code>.\nNon-existent files are older than any file.\n\n<pre><code>FileUtils.uptodate?(&#39;hello.o&#39;, ...</code></pre>\n"],["urandom","Random","classes/Random.html#method-c-urandom","(p1)","<p>Returns a string, using platform providing features. Returned value is\nexpected to be a cryptographically …\n"],["uri","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-uri","()",""],["uri","DRb","classes/DRb.html#method-c-uri","()","<p>Get the URI defining the local dRuby space.\n<p>This is the URI of the current server.  See #current_server …\n"],["uri=","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-i-uri-3D","(uri)",""],["uri_hash","Bundler::Plugin::API::Source","classes/Bundler/Plugin/API/Source.html#method-i-uri_hash","()",""],["uri_option","DRb::DRbProtocol","classes/DRb/DRbProtocol.html#method-c-uri_option","(uri, config, first=true)","<p>Parse <code>uri</code> into a [uri, option] pair.\n<p>The DRbProtocol module asks each registered protocol in turn to try …\n"],["uri_registered?","RSS::BaseListener","classes/RSS/BaseListener.html#method-c-uri_registered-3F","(uri, name)","<p>test if this uri is registered against this name\n"],["url_encode","ERB::Util","classes/ERB/Util.html#method-c-url_encode","(s)","<p>A utility method for encoding the String <em>s</em> as a URL.\n\n<pre><code>require &quot;erb&quot;\ninclude ERB::Util\n\nputs url_encode(&quot;Programming ...</code></pre>\n"],["urlsafe_base64","Random::Formatter","classes/Random/Formatter.html#method-i-urlsafe_base64","(n=nil, padding=false)","<p>SecureRandom.urlsafe_base64 generates a random URL-safe base64 string.\n<p>The argument <em>n</em> specifies the length, …\n"],["urlsafe_decode64","Base64","classes/Base64.html#method-i-urlsafe_decode64","(str)","<p>Returns the Base64-decoded version of <code>str</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["urlsafe_encode64","Base64","classes/Base64.html#method-i-urlsafe_encode64","(bin, padding: true)","<p>Returns the Base64-encoded version of <code>bin</code>. This method\ncomplies with “Base 64 Encoding with URL and …\n"],["use","Bundler::Index","classes/Bundler/Index.html#method-i-use","(other, override_dupes = false)",""],["use_api","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-use_api","()",""],["use_gemdeps","Gem","classes/Gem.html#method-c-use_gemdeps","(path = nil)","<p>Looks for a gem dependency file at <code>path</code> and activates the gems\nin the file if found.  If the file is …\n"],["use_headers?","CSV::Parser","classes/CSV/Parser.html#method-i-use_headers-3F","()",""],["use_loader","IRB::Context","classes/IRB/Context.html#method-i-use_loader","()","<p>Returns whether <code>irb</code>&#39;s own file reader method is used by\n<code>load</code>/<code>require</code> or not.\n<p>This mode is globally …\n"],["use_loader=","IRB::Context","classes/IRB/Context.html#method-i-use_loader-3D","(opt)","<p>Sets IRB.conf\n<p>See #use_loader for more information.\n"],["use_loader?","IRB::Context","classes/IRB/Context.html#method-i-use_loader-3F","()",""],["use_markup","RDoc::Parser","classes/RDoc/Parser.html#method-c-use_markup","(content)","<p>If there is a <code>markup: parser_name</code> comment at the front of the\nfile, use it to determine the parser.  …\n"],["use_paths","Gem","classes/Gem.html#method-c-use_paths","(home, *paths)","<p>Use the <code>home</code> and <code>paths</code> values for Gem.dir and\nGem.path.  Used mainly by the unit tests to provide environment …\n"],["use_readline=","IRB::Context","classes/IRB/Context.html#method-i-use_readline-3D","(opt)","<p>Obsolete method.\n<p>Can be set using the <code>--noreadline</code> and <code>--readline</code>\ncommand line options.\n<p>See IRB@Command+line+options …\n"],["use_ssl=","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3D","(flag)","<p>Turn on/off SSL. This flag must be set before starting session. If you\nchange use_ssl value after session …\n"],["use_ssl?","Net::HTTP","classes/Net/HTTP.html#method-i-use_ssl-3F","()","<p>Returns true if SSL/TLS is being used with HTTP.\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-i-use_ssl-3F","()","<p>does this instance use SSL?\n"],["use_ssl?","Net::POP3","classes/Net/POP3.html#method-c-use_ssl-3F","()","<p>returns <code>true</code> if POP3.ssl_params is set\n"],["use_system_gems?","Bundler","classes/Bundler.html#method-c-use_system_gems-3F","()",""],["use_tracer=","IRB::Context","classes/IRB/Context.html#method-i-use_tracer-3D","(opt)","<p>Sets whether or not to use the Tracer library when evaluating statements in\nthis context.\n<p>See <code>lib/tracer.rb</code> …\n"],["usec","Time","classes/Time.html#method-i-usec","()","<p>Returns the number of microseconds for <em>time</em>.\n\n<pre><code>t = Time.now        #=&gt; 2007-11-19 08:03:26 -0600\n&quot;%10.6f&quot; ...\n</code></pre>\n"],["used_modules","Module","classes/Module.html#method-c-used_modules","()","<p>Returns an array of all modules used in the current scope. The ordering of\nmodules in the resulting array …\n"],["user","URI::Generic","classes/URI/Generic.html#method-i-user","()","<p>Returns the user component.\n"],["user=","URI::Generic","classes/URI/Generic.html#method-i-user-3D","(user)","<p>Args\n<p><code>v</code> &mdash; String\n\n<p>Description\n"],["user_agent","Bundler::Fetcher","classes/Bundler/Fetcher.html#method-i-user_agent","()",""],["user_bundle_path","Bundler","classes/Bundler.html#method-c-user_bundle_path","(dir = \"home\")",""],["user_cache","Bundler","classes/Bundler.html#method-c-user_cache","()",""],["user_home","Bundler","classes/Bundler.html#method-c-user_home","()",""],["user_home","Bundler::Thor::Util","classes/Bundler/Thor/Util.html#method-c-user_home","()",""],["user_home","Gem","classes/Gem.html#method-c-user_home","()","<p>The home directory for the user.\n"],["userinfo","URI::Generic","classes/URI/Generic.html#method-i-userinfo","()","<p>Returns the userinfo, either as &#39;user&#39; or &#39;user:password&#39;.\n"],["userinfo=","URI::Generic","classes/URI/Generic.html#method-i-userinfo-3D","(userinfo)","<p>Sets userinfo, argument is string like &#39;name:pass&#39;.\n"],["utc","Time","classes/Time.html#method-i-utc","()","<p>Converts <em>time</em> to UTC (GMT), modifying the receiver.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:18:31 -0600\nt.gmt? ...\n</code></pre>\n"],["utc","Time","classes/Time.html#method-c-utc","(*args)","<p>Creates a Time object based on given values, interpreted as UTC (GMT). The\nyear must be specified. Other …\n"],["utc?","Time","classes/Time.html#method-i-utc-3F","()","<p>Returns <code>true</code> if <em>time</em> represents a time in UTC (GMT).\n\n<pre><code>t = Time.now                        #=&gt; 2007-11-19 ...\n</code></pre>\n"],["utc_offset","Time","classes/Time.html#method-i-utc_offset","()","<p>Returns the offset in seconds between the timezone of <em>time</em> and\nUTC.\n\n<pre><code>t = Time.gm(2000,1,1,20,15,1)   #=&gt; ...\n</code></pre>\n"],["utime","File","classes/File.html#method-c-utime","(*args)","<p>Sets the access and modification times of each named file to the first two\narguments. If a file is a …\n"],["utime","Pathname","classes/Pathname.html#method-i-utime","(p1, p2)","<p>Update the access and modification times of the file.\n<p>See File.utime.\n"],["uuid","Random::Formatter","classes/Random/Formatter.html#method-i-uuid","()","<p>SecureRandom.uuid generates a random v4 UUID (Universally Unique\nIDentifier).\n\n<pre><code>require &#39;securerandom&#39;\n ...</code></pre>\n"],["v","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-v","()",""],["v_inv","Matrix::EigenvalueDecomposition","classes/Matrix/EigenvalueDecomposition.html#method-i-v_inv","()",""],["valid?","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-i-valid-3F","()",""],["valid?","RSS::Element","classes/RSS/Element.html#method-i-valid-3F","(ignore_unknown_element=true)",""],["valid_civil?","Date","classes/Date.html#method-c-valid_civil-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n\n<pre><code>Date.valid_date?(2001,2,3)        ...\n</code></pre>\n"],["valid_commercial?","Date","classes/Date.html#method-c-valid_commercial-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given week date is valid, and false if not.\n\n<pre><code>Date.valid_commercial?(2001,5,6)  #=&gt; ...\n</code></pre>\n"],["valid_date?","Date","classes/Date.html#method-c-valid_date-3F","(p1, p2, p3, p4 = v4)","<p>Returns true if the given calendar date is valid, and false if not.\n\n<pre><code>Date.valid_date?(2001,2,3)        ...\n</code></pre>\n"],["valid_encoding?","String","classes/String.html#method-i-valid_encoding-3F","()","<p>Returns true for a string which is encoded correctly.\n\n<pre><code>&quot;\\xc2\\xa1&quot;.force_encoding(&quot;UTF-8&quot;).valid_encoding? ...\n</code></pre>\n"],["valid_for?","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-valid_for-3F","(deps)",""],["valid_jd?","Date","classes/Date.html#method-c-valid_jd-3F","(p1, p2 = v2)","<p>Just returns true.  It&#39;s nonsense, but is for symmetry.\n\n<pre><code>Date.valid_jd?(2451944)           #=&gt; true\n</code></pre>\n"],["valid_mod_sequence_value?","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-valid_mod_sequence_value-3F","(num)","<p>Check is passed argument valid &#39;mod_sequence_value&#39; in RFC 4551\nterminology\n"],["valid_number?","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-valid_number-3F","(num)","<p>Check is passed argument valid &#39;number&#39; in RFC 3501 terminology\n"],["valid_nz_number?","Net::IMAP::NumValidator","classes/Net/IMAP/NumValidator.html#method-c-valid_nz_number-3F","(num)","<p>Check is passed argument valid &#39;nz_number&#39; in RFC 3501 terminology\n"],["valid_ordinal?","Date","classes/Date.html#method-c-valid_ordinal-3F","(p1, p2, p3 = v3)","<p>Returns true if the given ordinal date is valid, and false if not.\n\n<pre><code>Date.valid_ordinal?(2001,34)      #=&gt; ...\n</code></pre>\n"],["validate","REXML::Validation::Validator","classes/REXML/Validation/Validator.html#method-i-validate","( event )",""],["validate","RSS::Element","classes/RSS/Element.html#method-i-validate","(ignore_unknown_element=true)",""],["validate!","Bundler::Settings","classes/Bundler/Settings.html#method-i-validate-21","()",""],["validate!","Bundler::Settings::Mirror","classes/Bundler/Settings/Mirror.html#method-i-validate-21","(probe = nil)",""],["validate!","Bundler::Settings::Validator","classes/Bundler/Settings/Validator.html#method-c-validate-21","(key, value, settings)",""],["validate!","Bundler::Settings::Validator::Rule","classes/Bundler/Settings/Validator/Rule.html#method-i-validate-21","(key, value, settings)",""],["validate_duplicate_links","RSS::Atom::DuplicateLinkChecker","classes/RSS/Atom/DuplicateLinkChecker.html#method-i-validate_duplicate_links","(links)","<p>Checks if there are duplicate links with the same type and hreflang\nattributes that have an alternate …\n"],["validate_for_stream","RSS::Element","classes/RSS/Element.html#method-i-validate_for_stream","(tags, ignore_unknown_element=true)",""],["validate_one_tag_name","RSS::ImageModelUtils","classes/RSS/ImageModelUtils.html#method-i-validate_one_tag_name","(ignore_unknown_element, name, tags)",""],["validate_platforms!","Bundler::Definition","classes/Bundler/Definition.html#method-i-validate_platforms-21","()",""],["validate_plugin!","Bundler::Plugin","classes/Bundler/Plugin.html#method-i-validate_plugin-21","(plugin_path)","<p>Checks if the gem is good to be a plugin\n<p>At present it only checks whether it contains plugins.rb file …\n"],["validate_ruby!","Bundler::Definition","classes/Bundler/Definition.html#method-i-validate_ruby-21","()",""],["validate_runtime!","Bundler::Definition","classes/Bundler/Definition.html#method-i-validate_runtime-21","()",""],["value","CGI::Cookie","classes/CGI/Cookie.html#method-i-value","()","<p>Returns the value or list of values for this cookie.\n"],["value","Fiddle::Importer","classes/Fiddle/Importer.html#method-i-value","(ty, val=nil)",""],["value","Net::HTTPResponse","classes/Net/HTTPResponse.html#method-i-value","()","<p>Raises an HTTP error if the response is not 2xx (success).\n"],["value","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-value","()",""],["value","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-value","()",""],["value","REXML::Attribute","classes/REXML/Attribute.html#method-i-value","()","<p>Returns the UNNORMALIZED value of this attribute.  That is, entities have\nbeen expanded to their values …\n"],["value","REXML::CData","classes/REXML/CData.html#method-i-value","()",""],["value","REXML::Entity","classes/REXML/Entity.html#method-i-value","()","<p>Returns the value of this entity.  At the moment, only internal entities\nare processed.  If the value …\n"],["value","REXML::Text","classes/REXML/Text.html#method-i-value","()","<p>Returns the string value of this text.  This is the text without entities,\nas it might be used programmatically, …\n"],["value","Rinda::Tuple","classes/Rinda/Tuple.html#method-i-value","()","<p>Return the tuple itself\n"],["value","Rinda::TupleEntry","classes/Rinda/TupleEntry.html#method-i-value","()","<p>Return the object which makes up the tuple itself: the Array or Hash.\n"],["value","Thread","classes/Thread.html#method-i-value","()","<p>Waits for <code>thr</code> to complete, using #join, and returns its value\nor raises the exception which terminated …\n"],["value","UncaughtThrowError","classes/UncaughtThrowError.html#method-i-value","()","<p>Return the return value which was called for.\n"],["value","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-value","()","<p>Returns value if value is exists. If the value does not exist, this method\nreturns nil.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["value","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-value","()","<p>Returns Ruby object value from OLE variant.\n\n<pre><code>obj = WIN32OLE_VARIANT.new(1, WIN32OLE::VARIANT::VT_BSTR) ...\n</code></pre>\n"],["value=","CGI::Cookie","classes/CGI/Cookie.html#method-i-value-3D","(val)","<p>Replaces the value of this cookie with a new value or list of values.\n"],["value=","OpenSSL::X509::Attribute","classes/OpenSSL/X509/Attribute.html#method-i-value-3D","(p1)",""],["value=","OpenSSL::X509::Extension","classes/OpenSSL/X509/Extension.html#method-i-value-3D","(p1)",""],["value=","REXML::Text","classes/REXML/Text.html#method-i-value-3D","( val )","<p>Sets the contents of this text node.  This expects the text to be\nunnormalized.  It returns self.\n\n<pre><code>e = ...</code></pre>\n"],["value=","RSS::ITunesItemModel::ITunesDuration","classes/RSS/ITunesItemModel/ITunesDuration.html#method-i-value-3D","(value)",""],["value=","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-value-3D","(p1)","<p>Sets variant value to val. If the val type does not match variant value\ntype(vartype), then val is changed …\n"],["value?","DBM","classes/DBM.html#method-i-value-3F","(p1)","<p>Returns true if the database contains the specified string value, false\notherwise.\n"],["value?","ENV","classes/ENV.html#method-c-value-3F","(p1)","<p>Returns <code>true</code> if there is an environment variable with the\ngiven <code>value</code>.\n"],["value?","GDBM","classes/GDBM.html#method-i-value-3F","(p1)","<p>Returns true if the given value <em>v</em> exists within the database.\nReturns false otherwise.\n"],["value?","Hash","classes/Hash.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the given value is present for some key in\n<em>hsh</em>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200 }\nh.value?(100) ...\n</code></pre>\n"],["value?","SDBM","classes/SDBM.html#method-i-value-3F","(p1)","<p>Returns <code>true</code> if the database contains the given\n<code>value</code>.\n"],["values","Bundler::Thor::CoreExt::OrderedHash","classes/Bundler/Thor/CoreExt/OrderedHash.html#method-i-values","()",""],["values","DBM","classes/DBM.html#method-i-values","()","<p>Returns an array of all the string values in the database.\n"],["values","ENV","classes/ENV.html#method-c-values","()","<p>Returns every environment variable value as an Array\n"],["values","GDBM","classes/GDBM.html#method-i-values","()","<p>Returns an array of all values of this database.\n"],["values","Hash","classes/Hash.html#method-i-values","()","<p>Returns a new array populated with the values from <em>hsh</em>. See also\n<code>Hash#keys</code>.\n\n<pre><code>h = { &quot;a&quot; =&gt; 100, &quot;b&quot; =&gt; 200, ...</code></pre>\n"],["values","ObjectSpace::WeakMap","classes/ObjectSpace/WeakMap.html#method-i-values","()","<p>Iterates over values and objects in a weakly referenced object\n"],["values","SDBM","classes/SDBM.html#method-i-values","()","<p>Returns a new Array containing the values in the database.\n"],["values","Struct","classes/Struct.html#method-i-values","()","<p>Returns the values for this struct as an Array.\n\n<pre><code>Customer = Struct.new(:name, :address, :zip)\njoe = Customer.new(&quot;Joe ...</code></pre>\n"],["values","YAML::DBM","classes/YAML/DBM.html#method-i-values","()","<p>Returns an array of values from the database.\n"],["values_at","Array","classes/Array.html#method-i-values_at","(*args)","<p>Returns an array containing the elements in <code>self</code> corresponding\nto the given <code>selector</code>(s).\n<p>The selectors …\n"],["values_at","CSV::Row","classes/CSV/Row.html#method-i-values_at","(*headers_and_or_indices)",""],["values_at","CSV::Table","classes/CSV/Table.html#method-i-values_at","(*indices_or_headers)","<p>The mixed mode default is to treat a list of indices as row access,\nreturning the rows indicated.  Anything …\n"],["values_at","DBM","classes/DBM.html#method-i-values_at","(*args)","<p>Returns an array containing the values associated with the given keys.\n"],["values_at","ENV","classes/ENV.html#method-c-values_at","(*args)","<p>Returns an array containing the environment variable values associated with\nthe given names.  See also …\n"],["values_at","GDBM","classes/GDBM.html#method-i-values_at","(*args)","<p>Returns an array of the values associated with each specified <em>key</em>.\n"],["values_at","Hash","classes/Hash.html#method-i-values_at","(*args)","<p>Return an array containing the values associated with the given keys. Also\nsee <code>Hash.select</code>.\n\n<pre><code>h = { &quot;cat&quot; ...</code></pre>\n"],["values_at","MatchData","classes/MatchData.html#method-i-values_at","(*args)","<p>Uses each <em>index</em> to access the matching values, returning an array\nof the corresponding matches.\n\n<pre><code>m = /(.)(.)(\\d+)(\\d)/.match(&quot;THX1138: ...</code></pre>\n"],["values_at","SDBM","classes/SDBM.html#method-i-values_at","(*args)","<p>Returns an Array of values corresponding to the given keys.\n"],["values_at","StringScanner","classes/StringScanner.html#method-i-values_at","(*args)","<p>Returns the subgroups in the most recent match at the given indices. If\nnothing was priorly matched, …\n"],["values_at","Struct","classes/Struct.html#method-i-values_at","(*args)","<p>Returns the struct member values for each <code>selector</code> as an\nArray.  A <code>selector</code> may be either an Integer …\n"],["values_at","YAML::DBM","classes/YAML/DBM.html#method-i-values_at","( *keys )","<p>Returns an array containing the values associated with the given keys.\n"],["variable_is_set?","RSS::Maker::Base","classes/RSS/Maker/Base.html#method-i-variable_is_set-3F","()",""],["variable_kind","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-variable_kind","()","<p>Returns variable kind string.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;XlSheetType&#39;) ...\n</code></pre>\n"],["variables","REXML::Functions","classes/REXML/Functions.html#method-c-variables","()",""],["variables","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-variables","()","<p>Returns array of WIN32OLE_VARIABLE objects which represent variables\ndefined in OLE class.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft ...</code></pre>\n"],["variables=","REXML::Functions","classes/REXML/Functions.html#method-c-variables-3D","(x)",""],["variables=","REXML::XPathParser","classes/REXML/XPathParser.html#method-i-variables-3D","( vars={} )",""],["varkind","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-varkind","()","<p>Returns the number which represents variable kind.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object ...</code></pre>\n"],["vartype","WIN32OLE_VARIANT","classes/WIN32OLE_VARIANT.html#method-i-vartype","()","<p>Returns OLE variant type.\n\n<pre><code>obj = WIN32OLE_VARIANT.new(&quot;string&quot;)\nobj.vartype # =&gt; WIN32OLE::VARIANT::VT_BSTR\n</code></pre>\n"],["ver","OptionParser","classes/OptionParser.html#method-i-ver","()","<p>Returns version string from program_name, version and release.\n"],["verbose","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-verbose","()","<p>Get whether the server is in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-verbose","()","<p>Get the default value of the :verbose option.\n"],["verbose=","DRb::DRbServer","classes/DRb/DRbServer.html#method-c-verbose-3D","(on)","<p>Set the default value of the :verbose option.\n<p>See #new().  The initial default value is false.\n"],["verbose=","DRb::DRbServer","classes/DRb/DRbServer.html#method-i-verbose-3D","(v)","<p>Set whether to operate in verbose mode.\n<p>In verbose mode, failed calls are logged to stdout.\n"],["verbose?","IRB::Context","classes/IRB/Context.html#method-i-verbose-3F","()","<p>Returns whether messages are displayed or not.\n"],["verify","Net::POP3","classes/Net/POP3.html#method-c-verify","()","<p>returns whether verify_mode is enable from POP3.ssl_params\n"],["verify","OpenSSL::Netscape::SPKI","classes/OpenSSL/Netscape/SPKI.html#method-i-verify","(p1)","<p>Parameters\n<p><em>key</em> - the public key to be used for verifying the SPKI signature\n\n<p>Returns <code>true</code> if the signature …\n"],["verify","OpenSSL::OCSP::BasicResponse","classes/OpenSSL/OCSP/BasicResponse.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies the signature of the response using the given\n<em>certificates</em> and <em>store</em>. This works in the similar …\n"],["verify","OpenSSL::OCSP::Request","classes/OpenSSL/OCSP/Request.html#method-i-verify","(p1, p2, p3 = v3)","<p>Verifies this request using the given <em>certificates</em> and\n<em>store</em>. <em>certificates</em> is an array of\nOpenSSL::X509::Certificate …\n"],["verify","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-i-verify","(p1, p2, p3 = v3, p4 = v4)",""],["verify","OpenSSL::PKey::PKey","classes/OpenSSL/PKey/PKey.html#method-i-verify","(p1, p2, p3)","<p>To verify the String <em>signature</em>, <em>digest</em>, an instance of\nOpenSSL::Digest, must be provided to re-compute …\n"],["verify","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-verify","(p1)",""],["verify","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-verify","(p1)","<p>Verifies the signature of the certificate, with the public key\n<em>key</em>. <em>key</em> must be an instance of OpenSSL::PKey …\n"],["verify","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-verify","(p1)","<p>Checks that cert signature is made with PRIVversion of this PUBLIC\n&#39;key&#39;\n"],["verify","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-verify","(p1, p2 = v2)","<p>Performs a certificate verification on the OpenSSL::X509::Certificate\n<em>cert</em>.\n<p><em>chain</em> can be an array of  …\n"],["verify","OpenSSL::X509::StoreContext","classes/OpenSSL/X509/StoreContext.html#method-i-verify","()",""],["verify_callback=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-verify_callback-3D","(callback)","<p>SSL verification callback.\n"],["verify_callback=","OpenSSL::X509::Store","classes/OpenSSL/X509/Store.html#method-i-verify_callback-3D","(p1)","<p>General callback for OpenSSL verify\n"],["verify_certificate_identity","OpenSSL::SSL","classes/OpenSSL/SSL.html#method-c-verify_certificate_identity","(cert, hostname)",""],["verify_internal_consistency","GC","classes/GC.html#method-c-verify_internal_consistency","()","<p>Verify internal consistency.\n<p>This method is implementation specific. Now this method checks generational\n…\n"],["verify_mode=","Bundler::Persistent::Net::HTTP::Persistent","classes/Bundler/Persistent/Net/HTTP/Persistent.html#method-i-verify_mode-3D","(verify_mode)","<p>Sets the HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER.\n<p>Setting this to VERIFY_NONE is a  …\n"],["verify_pss","OpenSSL::PKey::RSA","classes/OpenSSL/PKey/RSA.html#method-i-verify_pss","(p1, p2, p3, p4 = {})","<p>Verifies <em>data</em> using the Probabilistic Signature Scheme (RSA-PSS).\n<p>The return value is <code>true</code> if the signature …\n"],["verify_result","OpenSSL::SSL::SSLSocket","classes/OpenSSL/SSL/SSLSocket.html#method-i-verify_result","()","<p>Returns the result of the peer certificates verification.  See verify(1)\nfor error values and descriptions. …\n"],["verify_transient_heap_internal_consistency","GC","classes/GC.html#method-c-verify_transient_heap_internal_consistency","()",""],["version","Bundler::CLI","classes/Bundler/CLI.html#method-i-version","()",""],["version","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-version","()",""],["version","Bundler::Source::Git::GitProxy","classes/Bundler/Source/Git/GitProxy.html#method-i-version","()",""],["version","ERB","classes/ERB.html#method-c-version","()","<p>Returns revision information for the erb.rb module.\n"],["version","IRB","classes/IRB.html#method-c-version","()","<p>Returns the current version of IRB, including release version and last\nupdated date.\n"],["version","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-version","()",""],["version","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-version","()",""],["version","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-version","()",""],["version","OptionParser","classes/OptionParser.html#method-i-version","()","<p>Version\n"],["version","REXML::Document","classes/REXML/Document.html#method-i-version","()","<p>@return the XMLDecl version of this document as a String. If no XMLDecl has\nbeen set, returns the default …\n"],["version","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-version","()","<p>Returns the type library version.\n\n<pre><code>tlib = WIN32OLE_TYPELIB.new(&#39;Microsoft Excel 9.0 Object Library&#39;)\nputs ...\n</code></pre>\n"],["version=","OpenSSL::X509::CRL","classes/OpenSSL/X509/CRL.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Certificate","classes/OpenSSL/X509/Certificate.html#method-i-version-3D","(p1)",""],["version=","OpenSSL::X509::Request","classes/OpenSSL/X509/Request.html#method-i-version-3D","(p1)",""],["version_1_2","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2","()","<p>Turns on net/http 1.2 (Ruby 1.8) features. Defaults to ON in Ruby 1.8 or\nlater.\n"],["version_1_2?","Net::HTTP","classes/Net/HTTP.html#method-c-version_1_2-3F","()","<p>Returns true if net/http is in version 1.2 mode. Defaults to true.\n"],["version_message","Bundler::Plugin::Installer::Git","classes/Bundler/Plugin/Installer/Git.html#method-i-version_message","(spec)",""],["version_message","Bundler::Source","classes/Bundler/Source.html#method-i-version_message","(spec)",""],["version_message","Bundler::Source::Metadata","classes/Bundler/Source/Metadata.html#method-i-version_message","(spec)",""],["version_tag","Bundler::GemHelper","classes/Bundler/GemHelper.html#method-i-version_tag","()",""],["versions","Bundler::CompactIndexClient","classes/Bundler/CompactIndexClient.html#method-i-versions","()",""],["versions","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-versions","()",""],["versions","RSS::Maker","classes/RSS/Maker.html#method-c-versions","()","<p>Returns collection of supported maker versions\n"],["versions_path","Bundler::CompactIndexClient::Cache","classes/Bundler/CompactIndexClient/Cache.html#method-i-versions_path","()",""],["versions_string","Bundler::RubyVersion","classes/Bundler/RubyVersion.html#method-i-versions_string","(versions)",""],["vertex_named","Bundler::Molinillo::DependencyGraph","classes/Bundler/Molinillo/DependencyGraph.html#method-i-vertex_named","(name)","<p>@param [String] name @return [Vertex,nil] the vertex with the given name\n"],["vhid","Socket::Ifaddr","classes/Socket/Ifaddr.html#method-i-vhid","()","<p>Returns the vhid address of <em>ifaddr</em>. nil is returned if there is no\nvhid.\n"],["vi_editing_mode","Readline","classes/Readline.html#method-c-vi_editing_mode","()","<p>Specifies VI editing mode. See the manual of GNU Readline for details of VI\nediting mode.\n<p>Raises NotImplementedError …\n"],["vi_editing_mode?","Readline","classes/Readline.html#method-c-vi_editing_mode-3F","()","<p>Returns true if vi mode is active. Returns false if not.\n<p>Raises NotImplementedError if the using readline …\n"],["virtual_host","WEBrick::HTTPServer","classes/WEBrick/HTTPServer.html#method-i-virtual_host","(server)","<p>Adds <code>server</code> as a virtual host.\n"],["visibility=","RDoc::Options","classes/RDoc/Options.html#method-i-visibility-3D","(visibility)","<p>Sets the minimum visibility of a documented method.\n<p>Accepts <code>:public</code>, <code>:protected</code>,\n<code>:private</code>, <code>:nodoc</code>, or …\n"],["visible?","WIN32OLE_METHOD","classes/WIN32OLE_METHOD.html#method-i-visible-3F","()","<p>Returns true if the method is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, &#39;Workbooks&#39;) ...\n</code></pre>\n"],["visible?","WIN32OLE_TYPE","classes/WIN32OLE_TYPE.html#method-i-visible-3F","()","<p>Returns true if the OLE class is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["visible?","WIN32OLE_TYPELIB","classes/WIN32OLE_TYPELIB.html#method-i-visible-3F","()","<p>Returns true if the type library information is not hidden. If wLibFlags of\nTLIBATTR is 0 or LIBFLAG_FRESTRICTED …\n"],["visible?","WIN32OLE_VARIABLE","classes/WIN32OLE_VARIABLE.html#method-i-visible-3F","()","<p>Returns true if the variable is public.\n\n<pre><code>tobj = WIN32OLE_TYPE.new(&#39;Microsoft Excel 9.0 Object Library&#39;, ...</code></pre>\n"],["visit_Array","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Array","(o)",""],["visit_BasicObject","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_BasicObject","(o)",""],["visit_BigDecimal","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_BigDecimal","(o)",""],["visit_Class","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Class","(o)",""],["visit_Complex","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Complex","(o)",""],["visit_Date","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Date","(o)",""],["visit_DateTime","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_DateTime","(o)",""],["visit_Delegator","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Delegator","(o)",""],["visit_Encoding","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Encoding","(o)",""],["visit_Enumerator","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Enumerator","(o)",""],["visit_Exception","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Exception","(o)",""],["visit_FalseClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_FalseClass","(o)",""],["visit_Float","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Float","(o)",""],["visit_Hash","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Hash","(o)",""],["visit_Integer","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Integer","(o)",""],["visit_Module","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Module","(o)",""],["visit_NameError","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_NameError","(o)",""],["visit_NilClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_NilClass","(o)",""],["visit_Object","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Object","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::NoAliasRuby","classes/Psych/Visitors/NoAliasRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Alias","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Alias","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Document","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Document","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Mapping","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Mapping","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Scalar","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Scalar","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Sequence","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Sequence","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::Emitter","classes/Psych/Visitors/Emitter.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Nodes_Stream","Psych::Visitors::ToRuby","classes/Psych/Visitors/ToRuby.html#method-i-visit_Psych_Nodes_Stream","(o)",""],["visit_Psych_Omap","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Omap","(o)",""],["visit_Psych_Set","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Psych_Set","(o)",""],["visit_Range","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Range","(o)",""],["visit_Rational","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Rational","(o)",""],["visit_Regexp","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Regexp","(o)",""],["visit_String","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_String","(o)",""],["visit_Struct","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Struct","(o)",""],["visit_Symbol","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Symbol","(o)",""],["visit_Time","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_Time","(o)",""],["visit_TrueClass","Psych::Visitors::YAMLTree","classes/Psych/Visitors/YAMLTree.html#method-i-visit_TrueClass","(o)",""],["viz","Bundler::CLI","classes/Bundler/CLI.html#method-i-viz","()",""],["viz","Bundler::Graph","classes/Bundler/Graph.html#method-i-viz","()",""],["voidcmd","Net::FTP","classes/Net/FTP.html#method-i-voidcmd","(cmd)","<p>Sends a command and expect a response beginning with &#39;2&#39;.\n"],["vstack","Matrix","classes/Matrix.html#method-c-vstack","(x, *matrices)","<p>Create a matrix by stacking matrices vertically\n\n<pre><code>x = Matrix[[1, 2], [3, 4]]\ny = Matrix[[5, 6], [7, 8]] ...\n</code></pre>\n"],["w3cdtf","Time","classes/Time.html#method-c-w3cdtf","(date)","<p>This method converts a W3CDTF string date/time format to Time object.\n<p>The W3CDTF format is defined here: …\n"],["w3cdtf","Time","classes/Time.html#method-i-w3cdtf","()","<p>This method converts a Time object to a String. The String contains the\ntime in W3CDTF date/time format. …\n"],["wait","ConditionVariable","classes/ConditionVariable.html#method-i-wait","(p1, p2 = v2)","<p>Releases the lock held in <code>mutex</code> and waits; reacquires the lock\non wakeup.\n<p>If <code>timeout</code> is given, this method …\n"],["wait","IO","classes/IO.html#method-i-wait","(*args)","<p>Waits until IO is readable or writable without blocking and returns\n<code>self</code>, or <code>nil</code> when times out. Returns …\n"],["wait","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait","(timeout = nil)","<p>Releases the lock held in the associated monitor and waits; reacquires the\nlock on wakeup.\n<p>If <code>timeout</code> …\n"],["wait","Process","classes/Process.html#method-c-wait","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["wait","Rinda::WaitTemplateEntry","classes/Rinda/WaitTemplateEntry.html#method-i-wait","()",""],["wait2","Process","classes/Process.html#method-c-wait2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wait?","Shell::BuiltInCommand","classes/Shell/BuiltInCommand.html#method-i-wait-3F","()",""],["wait?","Shell::SystemCommand","classes/Shell/SystemCommand.html#method-i-wait-3F","()",""],["wait_all_jobs_execution","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-wait_all_jobs_execution","()","<p>wait for all jobs to terminate\n"],["wait_readable","IO","classes/IO.html#method-i-wait_readable","(*args)","<p>Waits until IO is readable without blocking and returns <code>self</code>,\nor <code>nil</code> when times out. Returns <code>true</code> immediately …\n"],["wait_to_finish_all_process_controllers","Shell::ProcessController","classes/Shell/ProcessController.html#method-c-wait_to_finish_all_process_controllers","()",""],["wait_until","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait_until","()","<p>Calls wait repeatedly until the given block yields a truthy value.\n"],["wait_while","MonitorMixin::ConditionVariable","classes/MonitorMixin/ConditionVariable.html#method-i-wait_while","()","<p>Calls wait repeatedly while the given block yields a truthy value.\n"],["wait_writable","IO","classes/IO.html#method-i-wait_writable","(*args)","<p>Waits until IO is writable without blocking and returns <code>self</code>\nor <code>nil</code> when times out.\n"],["waitall","Process","classes/Process.html#method-c-waitall","()","<p>Waits for all children, returning an array of <em>pid</em>/<em>status</em>\npairs (where <em>status</em> is a <code>Process::Status</code> object). …\n"],["waiting","DEBUGGER__","classes/DEBUGGER__.html#method-c-waiting","()","<p>Returns the list of waiting threads.\n<p>When stepping through the traces of a function, thread gets suspended, …\n"],["waiting_job?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_job-3F","(job)",""],["waiting_jobs","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_jobs","()",""],["waiting_jobs_exist?","Shell::ProcessController","classes/Shell/ProcessController.html#method-i-waiting_jobs_exist-3F","()",""],["waitpid","Process","classes/Process.html#method-c-waitpid","(*args)","<p>Waits for a child process to exit, returns its process id, and sets\n<code>$?</code> to a <code>Process::Status</code> object containing …\n"],["waitpid2","Process","classes/Process.html#method-c-waitpid2","(*args)","<p>Waits for a child process to exit (see Process::waitpid for exact\nsemantics) and returns an array containing …\n"],["wakeup","Thread","classes/Thread.html#method-i-wakeup","()","<p>Marks a given thread as eligible for scheduling, however it may still\nremain blocked on I/O.\n<p><strong>Note:</strong> This …\n"],["warn","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-warn","(msg, newline = nil)",""],["warn","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-warn","(message, newline = nil)",""],["warn","Kernel","classes/Kernel.html#method-i-warn","(*args, p2 = {})","<p>If warnings have been disabled (for example with the <code>-W0</code>\nflag), does nothing.  Otherwise, converts each …\n"],["warn","Logger","classes/Logger.html#method-i-warn","(progname = nil, &block)","<p>Log a <code>WARN</code> message.\n<p>See #info for more information.\n"],["warn","OptionParser","classes/OptionParser.html#method-i-warn","(mesg = $!)",""],["warn","RDoc::Options","classes/RDoc/Options.html#method-i-warn","(message)","<p>Displays a warning using Kernel#warn if we&#39;re being verbose\n"],["warn","Syslog::Logger","classes/Syslog/Logger.html#method-i-warn","","<p>Logs a <code>message</code> at the warn (syslog notice) log level, or logs\nthe message returned from the block.\n"],["warn","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-warn","(msg)","<p>Shortcut for logging a WARN message\n"],["warn","Warning","classes/Warning.html#method-i-warn","(p1)","<p>Writes warning message <code>msg</code> to $stderr. This method is called\nby Ruby for all emitted warnings.\n"],["warn?","Logger","classes/Logger.html#method-i-warn-3F","()","<p>Returns <code>true</code> iff the current severity level allows for the\nprinting of <code>WARN</code> messages.\n"],["warn?","WEBrick::BasicLog","classes/WEBrick/BasicLog.html#method-i-warn-3F","()","<p>Will the logger output WARN messages?\n"],["warn_for_outdated_bundler_version","Bundler::LockfileParser","classes/Bundler/LockfileParser.html#method-i-warn_for_outdated_bundler_version","()",""],["warn_old_tls_version_rubygems_connection","Bundler::PersistentHTTP","classes/Bundler/PersistentHTTP.html#method-i-warn_old_tls_version_rubygems_connection","(uri, connection)",""],["wday","Date","classes/Date.html#method-i-wday","()","<p>Returns the day of week (0-6, Sunday is zero).\n\n<pre><code>Date.new(2001,2,3).wday           #=&gt; 6\n</code></pre>\n"],["wday","Time","classes/Time.html#method-i-wday","()","<p>Returns an integer representing the day of the week, 0..6, with Sunday ==\n0.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-20 ...\n</code></pre>\n"],["weakref_alive?","WeakRef","classes/WeakRef.html#method-i-weakref_alive-3F","()","<p>Returns true if the referenced object is still alive.\n"],["wednesday?","Date","classes/Date.html#method-i-wednesday-3F","()","<p>Returns true if the date is Wednesday.\n"],["wednesday?","Time","classes/Time.html#method-i-wednesday-3F","()","<p>Returns <code>true</code> if <em>time</em> represents Wednesday.\n\n<pre><code>t = Time.local(1993, 2, 24)      #=&gt; 1993-02-24 00:00:00 -0600 ...\n</code></pre>\n"],["weeknum","Date","classes/Date.html#method-c-weeknum","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5)",""],["weeknum","DateTime","classes/DateTime.html#method-c-weeknum","(p1 = v1, p2 = v2, p3 = v3, p4 = v4, p5 = v5, p6 = v6, p7 = v7, p8 = v8, p9 = v9)",""],["what_required","Bundler::SpecSet","classes/Bundler/SpecSet.html#method-i-what_required","(spec)",""],["which","Bundler","classes/Bundler.html#method-c-which","(executable)",""],["whitespace","REXML::Element","classes/REXML/Element.html#method-i-whitespace","()","<p>Evaluates to <code>true</code> if whitespace is respected for this element.\nThis is the case if:\n<p>Neither :<code>respect_whitespace</code> …\n"],["win32_last_error","Fiddle","classes/Fiddle.html#method-c-win32_last_error","()","<p>Returns the last win32 <code>Error</code> of the current executing\n<code>Thread</code> or nil if none\n"],["win32_last_error=","Fiddle","classes/Fiddle.html#method-c-win32_last_error-3D","(error)","<p>Sets the last win32 <code>Error</code> of the current executing\n<code>Thread</code> to <code>error</code>\n"],["win_platform?","Gem","classes/Gem.html#method-c-win_platform-3F","()","<p>Is this a windows platform?\n"],["winsize","IO","classes/IO.html#method-i-winsize","()","<p>Returns console size.\n<p>You must require &#39;io/console&#39; to use this method.\n"],["winsize=","IO","classes/IO.html#method-i-winsize-3D","(p1)","<p>Tries to set console size.  The effect depends on the platform and the\nrunning environment.\n<p>You must require …\n"],["with","OptionParser","classes/OptionParser.html#method-c-with","(*args, &block)","<p>Initializes a new instance and evaluates the optional block in context of\nthe instance. Arguments <code>args</code> …\n"],["with_clean_env","Bundler","classes/Bundler.html#method-c-with_clean_env","()",""],["with_clean_git_env","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-with_clean_git_env","(&block)",""],["with_config","MakeMakefile","classes/MakeMakefile.html#method-i-with_config","(config, default=nil)","<p>Tests for the presence of a <code>--with-</code><em>config</em> or\n<code>--without-</code><em>config</em> option.  Returns <code>true</code>\nif the with option …\n"],["with_friendly_errors","Bundler","classes/Bundler.html#method-c-with_friendly_errors","()",""],["with_index","Enumerator","classes/Enumerator.html#method-i-with_index","(*args)","<p>Iterates the given block for each element with an index, which starts from\n<code>offset</code>.  If no block is given, …\n"],["with_index","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-with_index","(offset = 0)","<p>see <code>Enumerator</code>#with_index.\n"],["with_object","Enumerator","classes/Enumerator.html#method-i-with_object","(p1)","<p>Iterates the given block for each element with an arbitrary object,\n<code>obj</code>, and returns <code>obj</code>\n<p>If no block is …\n"],["with_object","Prime::PseudoPrimeGenerator","classes/Prime/PseudoPrimeGenerator.html#method-i-with_object","(obj)","<p>see <code>Enumerator</code>#with_object.\n"],["with_original_env","Bundler","classes/Bundler.html#method-c-with_original_env","()",""],["with_padding","Bundler::Thor::Shell","classes/Bundler/Thor/Shell.html#method-i-with_padding","()","<p>Yields the given block with padding.\n"],["without_groups_message","Bundler::CLI::Common","classes/Bundler/CLI/Common.html#method-c-without_groups_message","()",""],["workspaces","IRB::Context","classes/IRB/Context.html#method-i-workspaces","()","<p>WorkSpaces in the current stack\n"],["world_readable?","File","classes/File.html#method-c-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","File::Stat","classes/File/Stat.html#method-i-world_readable-3F","()","<p>If <em>stat</em> is readable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_readable?","FileTest","classes/FileTest.html#method-i-world_readable-3F","(p1)","<p>If <em>file_name</em> is readable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_readable?","Pathname","classes/Pathname.html#method-i-world_readable-3F","()","<p>See FileTest.world_readable?.\n"],["world_writable?","File","classes/File.html#method-c-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","File::Stat","classes/File/Stat.html#method-i-world_writable-3F","()","<p>If <em>stat</em> is writable by others, returns an integer representing the\nfile permission bits of <em>stat</em>. Returns …\n"],["world_writable?","FileTest","classes/FileTest.html#method-i-world_writable-3F","(p1)","<p>If <em>file_name</em> is writable by others, returns an integer\nrepresenting the file permission bits of <em>file_name</em> …\n"],["world_writable?","Pathname","classes/Pathname.html#method-i-world_writable-3F","()","<p>See FileTest.world_writable?.\n"],["wrap","JSON::JSONError","classes/JSON/JSONError.html#method-c-wrap","(exception)",""],["wrap","REXML::Text","classes/REXML/Text.html#method-i-wrap","(string, width, addnewline=false)",""],["wrap","Zlib::GzipFile","classes/Zlib/GzipFile.html#method-c-wrap","(*args)","<p>Creates a GzipReader or GzipWriter associated with <code>io</code>, passing\nin any necessary extra options, and executes …\n"],["writable?","File","classes/File.html#method-c-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable?","File::Stat","classes/File/Stat.html#method-i-writable-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the effective\nuser id of this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).writable? ...\n</code></pre>\n"],["writable?","FileTest","classes/FileTest.html#method-i-writable-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the effective\nuser and group id of this process. See eaccess(3). …\n"],["writable?","Net::FTP::MLSxEntry","classes/Net/FTP/MLSxEntry.html#method-i-writable-3F","()","<p>Returns <code>true</code> if the STOR command may be applied to the file.\n"],["writable?","Pathname","classes/Pathname.html#method-i-writable-3F","()","<p>See FileTest.writable?.\n"],["writable_real?","File","classes/File.html#method-c-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3) …\n"],["writable_real?","File::Stat","classes/File/Stat.html#method-i-writable_real-3F","()","<p>Returns <code>true</code> if <em>stat</em> is writable by the real user id\nof this process.\n\n<pre><code>File.stat(&quot;testfile&quot;).writable_real? ...\n</code></pre>\n"],["writable_real?","FileTest","classes/FileTest.html#method-i-writable_real-3F","(p1)","<p>Returns <code>true</code> if the named file is writable by the real user\nand group id of this process. See access(3) …\n"],["writable_real?","Pathname","classes/Pathname.html#method-i-writable_real-3F","()","<p>See FileTest.writable_real?.\n"],["write","ARGF","classes/ARGF.html#method-i-write","(p1)","<p>Writes <em>string</em> if inplace mode.\n"],["write","Bundler::Env","classes/Bundler/Env.html#method-c-write","(io)",""],["write","IO","classes/IO.html#method-c-write","(*args)","<p>Opens the file, optionally seeks to the given <em>offset</em>, writes\n<em>string</em>, then returns the length written. …\n"],["write","IO","classes/IO.html#method-i-write","(*args)","<p>Writes the given strings to <em>ios</em>. The stream must be opened for\nwriting. Arguments that are not a string …\n"],["write","Logger::LogDevice","classes/Logger/LogDevice.html#method-i-write","(message)",""],["write","Net::InternetMessageIO::WriteAdapter","classes/Net/InternetMessageIO/WriteAdapter.html#method-i-write","(str)",""],["write","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-write","(*s)","<p>Writes <em>s</em> to the stream.  If the argument is not a String it will\nbe converted using <code>.to_s</code> method.  Returns …\n"],["write","Pathname","classes/Pathname.html#method-i-write","(p1 = v1, p2 = v2, p3 = v3)","<p>Writes <code>contents</code> to the file.\n<p>See File.write.\n"],["write","REXML::AttlistDecl","classes/REXML/AttlistDecl.html#method-i-write","(out, indent=-1)","<p>Write out exactly what we got in.\n"],["write","REXML::Attribute","classes/REXML/Attribute.html#method-i-write","( output, indent=-1 )","<p>Writes this attribute (EG, puts &#39;key=“value”&#39; to the output)\n"],["write","REXML::CData","classes/REXML/CData.html#method-i-write","( output=$stdout, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See the rexml/formatters package\n<p>Generates XML output of this object\n"],["write","REXML::Comment","classes/REXML/Comment.html#method-i-write","( output, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>output &mdash; Where to write the string\n"],["write","REXML::DTD::EntityDecl","classes/REXML/DTD/EntityDecl.html#method-i-write","( output, indent )",""],["write","REXML::DTD::NotationDecl","classes/REXML/DTD/NotationDecl.html#method-i-write","( output, indent )",""],["write","REXML::Declaration","classes/REXML/Declaration.html#method-i-write","( output, indent )","<p>DEPRECATED\n<p>See REXML::Formatters\n"],["write","REXML::DocType","classes/REXML/DocType.html#method-i-write","( output, indent=0, transitive=false, ie_hack=false )","<p>output &mdash; Where to write the string\n<p>indent &mdash; An integer.  If -1, no indentation will be used; otherwise, the …\n"],["write","REXML::Document","classes/REXML/Document.html#method-i-write","(*arguments)","<p>Write the XML tree out, optionally with indent.  This writes out the entire\nXML document, including  …\n"],["write","REXML::Element","classes/REXML/Element.html#method-i-write","(output=$stdout, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See REXML::Formatters\n<p>Writes out this element, and recursively, all children.\n"],["write","REXML::Entity","classes/REXML/Entity.html#method-i-write","(out, indent=-1)","<p>Write out a fully formed, correct entity definition (assuming the Entity\nobject itself is valid.)\n<p>out … &mdash; "],["write","REXML::ExternalEntity","classes/REXML/ExternalEntity.html#method-i-write","( output, indent )",""],["write","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write","( node, output )","<p>Writes the node to some output.\n<p>node &mdash; The node to write\n<p>output &mdash; A class implementing <code>&amp;lt;&amp;lt;</code>.   …\n"],["write","REXML::Instruction","classes/REXML/Instruction.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>DEPRECATED\n<p>See the rexml/formatters package\n"],["write","REXML::NotationDecl","classes/REXML/NotationDecl.html#method-i-write","( output, indent=-1 )",""],["write","REXML::Text","classes/REXML/Text.html#method-i-write","( writer, indent=-1, transitive=false, ie_hack=false )","<p>DEPRECATED\n<p>See REXML::Formatters\n"],["write","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-write","(writer, indent=-1, transitive=false, ie_hack=false)","<p>indent &mdash; Ignored.  There must be no whitespace before an XML declaration\n<p>transitive &mdash; Ignored\n<p>ie_hack &mdash; Ignored …\n"],["write","Rinda::TupleSpace","classes/Rinda/TupleSpace.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code>\n"],["write","Rinda::TupleSpaceProxy","classes/Rinda/TupleSpaceProxy.html#method-i-write","(tuple, sec=nil)","<p>Adds <code>tuple</code> to the proxied TupleSpace.  See TupleSpace#write.\n"],["write","StringIO","classes/StringIO.html#method-i-write","(*args)","<p>Appends the given string to the underlying buffer string of\n<strong>strio</strong>. The stream must be opened for writing. …\n"],["write","Zlib::GzipWriter","classes/Zlib/GzipWriter.html#method-i-write","(*args)","<p>Same as IO.\n"],["write_binary","Gem","classes/Gem.html#method-c-write_binary","(path, data)","<p>Safely write a file in binary mode on all platforms.\n"],["write_cdata","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_cdata","( node, output )",""],["write_cdata","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_cdata","( node, output)",""],["write_comment","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_comment","( node, output )",""],["write_comment","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_comment","( node, output)",""],["write_document","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_document","( node, output )",""],["write_document","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_document","( node, output )",""],["write_element","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_element","( node, output )",""],["write_element","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_element","(node, output)",""],["write_element","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-i-write_element","( node, output )",""],["write_headers?","CSV","classes/CSV.html#method-i-write_headers-3F","()","<p>Returns <code>true</code> if headers are written in output. See CSV::new\nfor details.\n"],["write_instruction","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_instruction","( node, output )",""],["write_nonblock","IO","classes/IO.html#method-i-write_nonblock","(buf, exception: true)","<p>Writes the given string to <em>ios</em> using the write(2) system call\nafter O_NONBLOCK is set for the underlying …\n"],["write_nonblock","IO::generic_writable","classes/IO/generic_writable.html#method-i-write_nonblock","(p1, p2 = {})",""],["write_nonblock","OpenSSL::Buffering","classes/OpenSSL/Buffering.html#method-i-write_nonblock","(s, exception: true)","<p>Writes <em>s</em> in the non-blocking manner.\n<p>If there is buffered data, it is flushed first.  This may block. …\n"],["write_options","RDoc::Options","classes/RDoc/Options.html#method-i-write_options","()","<p>Writes the YAML file .rdoc_options to the current directory containing the\nparsed options.\n"],["write_random_file","OpenSSL::Random","classes/OpenSSL/Random.html#method-c-write_random_file","(p1)","<p>Writes a number of random generated bytes (currently 1024) to\n<em>filename</em> which can be used to initialize …\n"],["write_services","Rinda::RingServer","classes/Rinda/RingServer.html#method-i-write_services","()","<p>Creates threads that pick up UDP packets and passes them to do_write for\ndecoding.\n"],["write_smime","OpenSSL::PKCS7","classes/OpenSSL/PKCS7.html#method-c-write_smime","(p1, p2 = v2, p3 = v3)",""],["write_text","REXML::Formatters::Default","classes/REXML/Formatters/Default.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Pretty","classes/REXML/Formatters/Pretty.html#method-i-write_text","( node, output )",""],["write_text","REXML::Formatters::Transitive","classes/REXML/Formatters/Transitive.html#method-i-write_text","( node, output )",""],["write_timeout=","Net::HTTP","classes/Net/HTTP.html#method-i-write_timeout-3D","(sec)","<p>Setter for the write_timeout attribute.\n"],["write_to_gemfile","Bundler::SharedHelpers","classes/Bundler/SharedHelpers.html#method-i-write_to_gemfile","(gemfile_path, contents)",""],["write_with_substitution","REXML::Text","classes/REXML/Text.html#method-i-write_with_substitution","(out, input)","<p>Writes out text, substituting special characters beforehand.\n<code>out</code> A String, IO, or any other object supporting …\n"],["x64_mingw?","Bundler::CurrentRuby","classes/Bundler/CurrentRuby.html#method-i-x64_mingw-3F","()",""],["xhtml","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xhtml","()","<p>Returns the element content in XHTML.\n"],["xhtml","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-i-xhtml","()","<p>Returns or builds the XHTML content.\n"],["xhtml=","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-xhtml-3D","(content)",""],["xlist","Net::IMAP","classes/Net/IMAP.html#method-i-xlist","(refname, mailbox)","<p>Sends a XLIST command, and returns a subset of names from the complete set\nof all names available to …\n"],["xml","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-i-xml","()","<p>Returns or builds the element content in XML.\n"],["xml=","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-xml-3D","(content)",""],["xmlDecl","RSS::REXMLLikeXMLParser","classes/RSS/REXMLLikeXMLParser.html#method-i-xmlDecl","(version, encoding, standalone)",""],["xml_content=","RSS::Maker::AtomTextConstructBase::EnsureXMLContent","classes/RSS/Maker/AtomTextConstructBase/EnsureXMLContent.html#method-i-xml_content-3D","(content)",""],["xml_content=","RSS::Maker::ItemsBase::ItemBase::ContentBase","classes/RSS/Maker/ItemsBase/ItemBase/ContentBase.html#method-i-xml_content-3D","(content)",""],["xml_decl","REXML::Document","classes/REXML/Document.html#method-i-xml_decl","()","<p>@return the XMLDecl of this document; if no XMLDecl has been set, the\ndefault declaration is returned. …\n"],["xml_getter","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-c-xml_getter","()",""],["xml_getter","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-c-xml_getter","()",""],["xml_setter","RSS::Atom::Feed::Entry::Content","classes/RSS/Atom/Feed/Entry/Content.html#method-c-xml_setter","()",""],["xml_setter","RSS::Atom::TextConstruct","classes/RSS/Atom/TextConstruct.html#method-c-xml_setter","()",""],["xmldecl","REXML::SAX2Listener","classes/REXML/SAX2Listener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::StreamListener","classes/REXML/StreamListener.html#method-i-xmldecl","(version, encoding, standalone)","<p>Called when an XML PI is encountered in the document. EG: &lt;?xml\nversion=“1.0” encoding=“utf”?&gt; …\n"],["xmldecl","REXML::XMLDecl","classes/REXML/XMLDecl.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::ListenerMixin","classes/RSS/ListenerMixin.html#method-i-xmldecl","(version, encoding, standalone)","<p>set instance vars for version, encoding, standalone\n"],["xmldecl","RSS::REXMLListener","classes/RSS/REXMLListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl","RSS::XMLParserListener","classes/RSS/XMLParserListener.html#method-i-xmldecl","(version, encoding, standalone)",""],["xmldecl?","REXML::Parsers::PullEvent","classes/REXML/Parsers/PullEvent.html#method-i-xmldecl-3F","()","<p>Content: [ String version, String encoding, String standalone ]\n"],["xmlschema","Date","classes/Date.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new Date object by parsing from a string according to some\ntypical XML Schema formats.\n\n<pre><code>Date.xmlschema(&#39;2001-02-03&#39;) ...\n</code></pre>\n"],["xmlschema","Date","classes/Date.html#method-i-xmlschema","()","<p>This method is equivalent to strftime(&#39;%F&#39;).\n"],["xmlschema","DateTime","classes/DateTime.html#method-c-xmlschema","(p1 = v1, p2 = v2)","<p>Creates a new DateTime object by parsing from a string according to some\ntypical XML Schema formats. …\n"],["xmlschema","DateTime","classes/DateTime.html#method-i-xmlschema","(*args)","<p>This method is equivalent to strftime(&#39;%FT%T%:z&#39;). The optional\nargument <code>n</code> is the number of digits …\n"],["xmlschema","Time","classes/Time.html#method-c-xmlschema","(date)","<p>Parses <code>date</code> as a dateTime defined by the XML Schema and\nconverts it to a Time object.  The format is …\n"],["xmlschema","Time","classes/Time.html#method-i-xmlschema","(fraction_digits=0)","<p>Returns a string which represents the time as a dateTime defined by XML\nSchema:\n\n<pre><code>CCYY-MM-DDThh:mm:ssTZD ...</code></pre>\n"],["xmp","Object","classes/Object.html#method-i-xmp","(exps, bind = nil)","<p>A convenience method that&#39;s only available when the you require the\nIRB::XMP standard library.\n<p>Creates …\n"],["xpath","REXML::Attribute","classes/REXML/Attribute.html#method-i-xpath","()",""],["xpath","REXML::Element","classes/REXML/Element.html#method-i-xpath","()",""],["xpath","REXML::Text","classes/REXML/Text.html#method-i-xpath","()","<p>FIXME This probably won&#39;t work properly\n"],["yaml","Psych::Nodes::Node","classes/Psych/Nodes/Node.html#method-i-yaml","(io = nil, options = {})","<p>Convert this node to YAML.\n<p>See also Psych::Visitors::Emitter\n"],["yaml_tag","Object","classes/Object.html#method-c-yaml_tag","(url)",""],["yday","Date","classes/Date.html#method-i-yday","()","<p>Returns the day of the year (1-366).\n\n<pre><code>Date.new(2001,2,3).yday           #=&gt; 34\n</code></pre>\n"],["yday","Time","classes/Time.html#method-i-yday","()","<p>Returns an integer representing the day of the year, 1..366.\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:32:31 -0600 ...\n</code></pre>\n"],["year","Date","classes/Date.html#method-i-year","()","<p>Returns the year.\n\n<pre><code>Date.new(2001,2,3).year           #=&gt; 2001\n(Date.new(1,1,1) - 1).year        #=&gt; 0\n</code></pre>\n"],["year","Time","classes/Time.html#method-i-year","()","<p>Returns the year for <em>time</em> (including the century).\n\n<pre><code>t = Time.now   #=&gt; 2007-11-19 08:27:51 -0600\nt.year ...\n</code></pre>\n"],["yes?","Bundler::Thor::Shell::Basic","classes/Bundler/Thor/Shell/Basic.html#method-i-yes-3F","(statement, color = nil)","<p>Make a question the to user and returns true if the user replies “y” or\n“yes”.\n"],["yes?","Bundler::UI::Shell","classes/Bundler/UI/Shell.html#method-i-yes-3F","(msg)",""],["yes?","Bundler::UI::Silent","classes/Bundler/UI/Silent.html#method-i-yes-3F","(msg)",""],["yield","Fiber","classes/Fiber.html#method-c-yield","(*args)","<p>Yields control back to the context that resumed the fiber, passing along\nany arguments that were passed …\n"],["yield","Proc","classes/Proc.html#method-i-yield","(*args)","<p>Invokes the block, setting the block&#39;s parameters to the values in\n<em>params</em> using something close to …\n"],["yield_self","Object","classes/Object.html#method-i-yield_self","()","<p>Yields self to the block and returns the result of the block.\n\n<pre><code>3.next.then {|x| x**x }.to_s            ...\n</code></pre>\n"],["yyaccept","Racc::Parser","classes/Racc/Parser.html#method-i-yyaccept","()","<p>Exit parser. Return value is Symbol_Value_Stack.\n"],["yydebug","Ripper","classes/Ripper.html#method-i-yydebug","()","<p>Get yydebug.\n"],["yydebug=","Ripper","classes/Ripper.html#method-i-yydebug-3D","(p1)","<p>Set yydebug.\n"],["yyerrok","Racc::Parser","classes/Racc/Parser.html#method-i-yyerrok","()","<p>Leave error recovering mode.\n"],["yyerror","Racc::Parser","classes/Racc/Parser.html#method-i-yyerror","()","<p>Enter error recovering mode. This method does not call #on_error.\n"],["yyparse","Racc::Parser","classes/Racc/Parser.html#method-i-yyparse","(recv, mid)","<p>Another entry point for the parser. If you use this method, you must\nimplement RECEIVER#METHOD_ID method. …\n"],["zero","Matrix","classes/Matrix.html#method-c-zero","(row_count, column_count = row_count)","<p>Creates a zero matrix.\n\n<pre><code>Matrix.zero(2)\n  =&gt; 0 0\n     0 0</code></pre>\n"],["zero?","BigDecimal","classes/BigDecimal.html#method-i-zero-3F","()","<p>Returns True if the value is zero.\n"],["zero?","File","classes/File.html#method-c-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","File::Stat","classes/File/Stat.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <em>stat</em> is a zero-length file;\n<code>false</code> otherwise.\n\n<pre><code>File.stat(&quot;testfile&quot;).zero?   #=&gt; false\n</code></pre>\n"],["zero?","FileTest","classes/FileTest.html#method-i-zero-3F","(p1)","<p>Returns <code>true</code> if the named file exists and has a zero size.\n<p><em>file_name</em> can be an IO object.\n"],["zero?","Float","classes/Float.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>float</code> is 0.0.\n"],["zero?","Numeric","classes/Numeric.html#method-i-zero-3F","()","<p>Returns <code>true</code> if <code>num</code> has a zero value.\n"],["zero?","OpenSSL::BN","classes/OpenSSL/BN.html#method-i-zero-3F","()",""],["zero?","Pathname","classes/Pathname.html#method-i-zero-3F","()","<p>See FileTest.zero?.\n"],["zip","Array","classes/Array.html#method-i-zip","(*args)","<p>Converts any arguments to arrays, then merges elements of <code>self</code>\nwith corresponding elements from each …\n"],["zip","Enumerable","classes/Enumerable.html#method-i-zip","(*args)","<p>Takes one element from <em>enum</em> and merges corresponding elements from\neach <em>args</em>.  This generates a sequence …\n"],["zip","Enumerator::Lazy","classes/Enumerator/Lazy.html#method-i-zip","(*args)",""],["zip?","RDoc::Parser","classes/RDoc/Parser.html#method-c-zip-3F","(file)","<p>Checks if <code>file</code> is a zip file in disguise.  Signatures from\nwww.garykessler.net/library/file_sigs.html …\n"],["zlib_version","Zlib","classes/Zlib.html#method-c-zlib_version","()","<p>Returns the string which represents the version of zlib library.\n"],["zone","DateTime","classes/DateTime.html#method-i-zone","()","<p>Returns the timezone.\n\n<pre><code>DateTime.parse(&#39;04pm+0730&#39;).zone          #=&gt; &quot;+07:30&quot;\n</code></pre>\n"],["zone","Time","classes/Time.html#method-i-zone","()","<p>Returns the name of the time zone used for <em>time</em>. As of Ruby 1.8,\nreturns “UTC&#39;&#39; rather than …\n"],["zone_offset","Time","classes/Time.html#method-c-zone_offset","(zone, year=self.now.year)","<p>Return the number of seconds the specified time zone differs from UTC.\n<p>Numeric time zones that include …\n"],["|","Array","classes/Array.html#method-i-7C","(p1)","<p>Set Union — Returns a new array by joining <code>ary</code> with\n<code>other_ary</code>, excluding any duplicates and preserving …\n"],["|","FalseClass","classes/FalseClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","IPAddr","classes/IPAddr.html#method-i-7C","(other)","<p>Returns a new ipaddr built by bitwise OR.\n"],["|","Integer","classes/Integer.html#method-i-7C","(p1)","<p>Bitwise OR.\n"],["|","JSON::GenericObject","classes/JSON/GenericObject.html#method-i-7C","(other)",""],["|","NilClass","classes/NilClass.html#method-i-7C","(p1)","<p>Or—Returns <code>false</code> if <em>obj</em> is <code>nil</code> or\n<code>false</code>; <code>true</code> otherwise.\n"],["|","Set","classes/Set.html#method-i-7C","(enum)","<p>Returns a new set built by merging the set and the elements of the given\nenumerable object.\n\n<pre><code>Set[1, 2, ...</code></pre>\n"],["|","Shell::Filter","classes/Shell/Filter.html#method-i-7C","(filter)","<p>Processes a pipeline.\n"],["|","TrueClass","classes/TrueClass.html#method-i-7C","(p1)","<p>Or—Returns <code>true</code>. As <em>obj</em> is an argument to a method\ncall, it is always evaluated; there is no short-circuit …\n"],["~","IPAddr","classes/IPAddr.html#method-i-~","()","<p>Returns a new ipaddr built by bitwise negation.\n"],["~","Integer","classes/Integer.html#method-i-~","()","<p>One&#39;s complement: returns a number where each bit is flipped.\n<p>Inverts the bits in an Integer. As integers …\n"],["~","Regexp","classes/Regexp.html#method-i-~","()","<p>Match—Matches <em>rxp</em> against the contents of <code>$_</code>.\nEquivalent to <code><em>rxp</em> =~ $_</code>.\n\n<pre><code>$_ = &quot;input data&quot;\n~ /at/   #=&gt; ...\n</code></pre>\n"],["CONTRIBUTING","","files/CONTRIBUTING_md.html","","<p>Please see the official issue tracker and wiki HowToContribute.\n"],["COPYING","","files/COPYING.html","","<p>Ruby is copyrighted free software by Yukihiro Matsumoto\n&lt;matz@netlab.jp&gt;. You can redistribute …\n"],["COPYING.ja","","files/COPYING_ja.html","","<p>本プログラムはフリーソフトウェアです．2-clause BSDL または以下に示す条件で本プログラムを再配布できます 2-clause\nBSDLについてはBSDLファイルを参照して下さい．\n\n<pre><code>1. 複製は制限なく自由です． ...\n</code></pre>\n"],["LEGAL","","files/LEGAL.html","","<p>LEGAL NOTICE INFORMATION\n<p>All the files in this distribution are covered under either the Ruby&#39;s\nlicense …\n"],["NEWS","","files/NEWS.html","","<p>NEWS for Ruby 2.6.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["README.ja","","files/README_ja_md.html","","<p><img src=\"https://travis-ci.org/ruby/ruby.svg?branch=trunk\">\n<img\nsrc=\"https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/trunk?svg=true\">\n...\n"],["README","","files/README_md.html","","<p><img src=\"https://travis-ci.org/ruby/ruby.svg?branch=trunk\">\n<img\nsrc=\"https://ci.appveyor.com/api/projects/status/0sy8rrxut4o0k960/branch/trunk?svg=true\">\n...\n"],["NEWS-1.8.7","","files/doc/NEWS-1_8_7.html","","<p>NEWS for Ruby 1.8.7\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-1.9.1","","files/doc/NEWS-1_9_1.html","","<p>NEWS for Ruby 1.9.1\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-1.9.2","","files/doc/NEWS-1_9_2.html","","<p>NEWS for Ruby 1.9.2\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-1.9.3","","files/doc/NEWS-1_9_3.html","","<p>NEWS for Ruby 1.9.3\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.0.0","","files/doc/NEWS-2_0_0.html","","<p>NEWS for Ruby 2.0.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.1.0","","files/doc/NEWS-2_1_0.html","","<p>NEWS for Ruby 2.1.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.2.0","","files/doc/NEWS-2_2_0.html","","<p>NEWS for Ruby 2.2.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.3.0","","files/doc/NEWS-2_3_0.html","","<p>NEWS for Ruby 2.3.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.4.0","","files/doc/NEWS-2_4_0.html","","<p>NEWS for Ruby 2.4.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["NEWS-2.5.0","","files/doc/NEWS-2_5_0.html","","<p>NEWS for Ruby 2.5.0\n<p>This document is a list of user visible feature changes made between\nreleases except …\n"],["contributing","","files/doc/contributing_rdoc.html","","<p>Contributing to Ruby\n<p>Ruby has a vast and friendly community with hundreds of people contributing\nto a …\n"],["contributors","","files/doc/contributors_rdoc.html","","<p>Contributors to Ruby\n<p>The following list might be incomplete. Feel free to add your name if your\npatch …\n"],["dtrace_probes","","files/doc/dtrace_probes_rdoc.html","","<p>DTrace Probes\n<p>A list of DTrace probes and their functionality. “Module” and “Function” …\n"],["extension.ja","","files/doc/extension_ja_rdoc.html","","<p>Rubyの拡張ライブラリの作り方\n<p>Rubyの拡張ライブラリの作り方を説明します．\n<p>基礎知識\n"],["extension","","files/doc/extension_rdoc.html","","<p>Creating Extension Libraries for Ruby\n<p>This document explains how to make extension libraries for Ruby …\n"],["globals","","files/doc/globals_rdoc.html","","<p>Pre-defined variables\n<p>$! &mdash; The exception information message set by &#39;raise&#39;.\n<p>$@ &mdash; Array of backtrace …\n"],["keywords","","files/doc/keywords_rdoc.html","","<p>Keywords\n<p>The following keywords are used by Ruby.\n<p>__ENCODING__ &mdash; The script encoding of the current file. …\n"],["maintainers","","files/doc/maintainers_rdoc.html","","<p>Maintainers\n<p>This page describes the current module, library, and extension maintainers\nof Ruby.\n<p>Module …\n"],["marshal","","files/doc/marshal_rdoc.html","","<p>Marshal Format\n<p>The Marshal format is used to serialize ruby objects.  The format can store\narbitrary objects …\n"],["regexp","","files/doc/regexp_rdoc.html","","<p>Regular expressions (<em>regexp</em>s) are patterns which describe the\ncontents of a string. They&#39;re used …\n"],["security","","files/doc/security_rdoc.html","","<p>Ruby Security\n<p>The Ruby programming language is large and complex and there are many\nsecurity pitfalls …\n"],["signals","","files/doc/signals_rdoc.html","","<p>Caveats for implementing Signal.trap callbacks\n<p>As with implementing signal handlers in C or most other …\n"],["standard_library","","files/doc/standard_library_rdoc.html","","<p>Ruby Standard Library\n<p>The Ruby Standard Library is a vast collection of classes and modules that\nyou can …\n"],["syntax","","files/doc/syntax_rdoc.html","","<p>Ruby Syntax\n<p>The Ruby syntax is large and is split up into the following sections:\n<p>Literals  &mdash; Numbers, Strings …\n"],["bundler.gemspec","","files/lib/bundler/bundler_gemspec.html","","<p># frozen_string_literal: true\n<p>begin\n\n<pre><code>require File.expand_path(&quot;../lib/bundler/version&quot;, __FILE__)\n</code></pre>\n"],["csv.gemspec","","files/lib/csv/csv_gemspec.html","","<p># frozen_string_literal: true\n<p>begin\n\n<pre><code>require_relative &quot;lib/csv/version&quot;\n</code></pre>\n"],["forwardable.gemspec","","files/lib/forwardable/forwardable_gemspec.html","","<p>begin\n\n<pre><code>require_relative &quot;lib/forwardable&quot;\n</code></pre>\n<p>rescue LoadError\n"],["irb.gemspec","","files/lib/irb/irb_gemspec.html","","<p>begin\n\n<pre><code>require_relative &quot;lib/irb/version&quot;\n</code></pre>\n<p>rescue LoadError\n"],["matrix.gemspec","","files/lib/matrix/matrix_gemspec.html","","<p># frozen_string_literal: true\n<p>Gem::Specification.new do |spec|\n\n<pre><code>spec.name          = &quot;matrix&quot;\nspec.version ...\n</code></pre>\n"],["rexml.gemspec","","files/lib/rexml/rexml_gemspec.html","","<p>begin\n\n<pre><code>require_relative &quot;lib/rexml/rexml&quot;\n</code></pre>\n<p>rescue LoadError\n"],["rss.gemspec","","files/lib/rss/rss_gemspec.html","","<p>begin\n\n<pre><code>require_relative &quot;lib/rss&quot;\n</code></pre>\n<p>rescue LoadError\n"],["shell.gemspec","","files/lib/shell/shell_gemspec.html","","<p>begin\n\n<pre><code>require_relative &quot;lib/shell/version&quot;\n</code></pre>\n<p>rescue LoadError\n"],["README.win32","","files/win32/README_win32.html","","<p>begin\n<p>How to build ruby using Visual C++\n<p>Requirement\n"]]}}